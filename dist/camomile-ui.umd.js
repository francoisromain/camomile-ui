(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global['camomile-ui'] = global['camomile-ui'] || {}, global['camomile-ui'].umd = {})));
}(this, (function (exports) { 'use strict';

  function styleInject(css, ref) {
    if ( ref === void 0 ) { ref = {}; }
    var insertAt = ref.insertAt;

    if (!css || typeof document === 'undefined') { return; }

    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css = "/* Settings        ------------------------------- */\n\n/* system.css / settings\n-------------------------------\nhttp://francoisromain.github.io/postcss-structure\n*/\n\n:root {\n  /* Colors        ------------------------------- */\n  --color-text: #666;\n  --color-bg: white;\n  --color-transparent: rgba(248, 247, 243, 0);\n  --color-inverse: #3d3d35;\n  --color-neutral: #bcb9af;\n  --color-alt: #f8f7f3;\n  --color-highlight: #f50;\n  --color-brand: rgb(0, 162, 255);\n  --color-error: #e82239;\n  --color-warning: #ff891c;\n  --color-info: #5798aa;\n  --color-success: #6ea040;\n\n  /* Base units    ------------------------------- */\n\n  /* font-size: 1rem = 16 px */\n  --base-font-size: 16px;\n  --base-font-size: 1rem;\n\n  /* base: 1.5rem = 24 px */\n  --unit: 24px;\n  --unit: 1.5rem;\n\n  /* line: 0.0625rem = 1px */\n  --unit-line: 1px;\n  --unit-line: 0.0625rem;\n  --unit-line: calc(var(--unit) / 24);\n\n  /* xxs: 0.1875rem = 3px */\n  --unit-xxs: 3px;\n  --unit-xxs: 0.1875rem;\n  --unit-xxs: calc(var(--unit) / 8);\n\n  /* xs: 0.375rem = 6px */\n  --unit-xs: 6px;\n  --unit-xs: 0.375rem;\n  --unit-xs: calc(var(--unit) / 4);\n\n  /* s: 0.75rem = 12px */\n  --unit-s: 12px;\n  --unit-s: 0.75rem;\n  --unit-s: calc(var(--unit) / 2);\n\n  /* m: 1.125rem = 18px */\n  --unit-m: 18px;\n  --unit-m: 1.125rem;\n  --unit-m: calc(var(--unit) * 3 / 4);\n\n  /* l: 2.25rem = 36 px */\n  --unit-l: 36px;\n  --unit-l: 2.25rem;\n  --unit-l: calc(var(--unit) * 3 / 2);\n\n  /* xl: 3rem = 48px */\n  --unit-xl: 48px;\n  --unit-xl: 3rem;\n  --unit-xl: calc(var(--unit) * 2);\n\n  /* xxl: 3.75rem = 60 px */\n  --unit-xxl: 60px;\n  --unit-xxl: 3.75rem;\n  --unit-xxl: calc(var(--unit) * 2.5);\n\n  /*  */\n  --unit-infinity: 9999px;\n\n  /* Lists         ------------------------------- */\n  --list-postfix: ',';\n  --list-prefix: '―';\n\n  /* Grid          ------------------------------- */\n\n  /*\n  postcss-grid-system configuration\n  https://github.com/francoisromain/postcss-grid-system#configuration\n  */\n\n  /* width of a single bloc in rem */\n  --col-width: 328px;\n  --col-width: 20.5rem;\n\n  /* width of the gutter in rem */\n  --gutter: 24px;\n  --gutter: 1.5rem;\n  --gutter: var(--unit);\n\n  /* padding of the main container in rem */\n  --container-padding: 24px;\n  --container-padding: 1.5rem;\n  --container-padding: var(--unit);\n\n  /* transition */\n  --transition: opacity 0.5s, background-color 0.5s, border 0.5s,\n    box-shadow 0.5s, fill 0.5s;\n\n  /* hr */\n  --border-style: dotted;\n  --border-color: #bcb9af;\n  --border-color: var(--color-neutral);\n  --border-width: 1px;\n  --border-width: 0.0625rem;\n  --border-width: var(--unit-line);\n}\n\n/* media queries: x * col-width + gutter */\n\n/* Reset           ------------------------------- */\n\n/*\n    Print\n-------------------------------\n\nFrom HTML5 Boilerplate\nhttps://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css\n\nBlack prints faster: http://www.sanbeiji.com/archives/953\n*/\n\n@media print {\n  *,\n  *::before,\n  *::after,\n  *::first-letter,\n  *::first-line {\n    background: transparent !important;\n    color: #000 !important;\n    box-shadow: none !important;\n    text-shadow: none !important;\n  }\n\n  a,\n  a:visited {\n    text-decoration: underline;\n  }\n\n  a[href]::after {\n    content: ' (' attr(href) ')';\n  }\n\n  abbr[title]::after {\n    content: ' (' attr(title) ')';\n  }\n\n  /*\n  Don't show links that are fragment identifiers,\n  or use the `javascript:` pseudo protocol\n  */\n  a[href^='#']::after,\n  a[href^='javascript:']::after {\n    content: '';\n  }\n}\n\n/*\n    Reset\n-------------------------------\n*/\n\n/*\n  css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice\n  paulirish.com/2012/box-sizing-border-box-ftw\n*/\n\nhtml,\n* {\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\nhtml {\n  overflow-y: scroll;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  text-rendering: optimizeLegibility;\n  background-color: white;\n  background-color: var(--color-bg);\n  color: #666;\n  color: var(--color-text);\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Droid Sans, Helvetica Neue;\n  font-size: 16px;\n  font-size: 1rem;\n  line-height: 24px;\n  line-height: 1.5rem;\n}\n\nbody,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\ndl,\ndd,\nol,\nul,\nform,\nfieldset,\nlegend,\nfigure,\ntable,\nth,\ntd,\ncaption,\nhr {\n  margin: 0;\n  padding: 0;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-weight: normal;\n  font-style: normal;\n  text-decoration: none;\n}\n\nabbr[title],\ndfn[title] {\n  cursor: help;\n}\n\nbutton,\ninput,\ntextarea,\nselect,\noptgroup {\n  font: inherit;\n  font-size: 16px;\n  font-size: 1rem;\n  line-height: 24px;\n  line-height: 1.5rem;\n  text-align: left;\n}\n\nfieldset {\n  border: 0 none transparent;\n}\n\n*:focus,\ntextarea:focus,\ninput:focus {\n  outline: none;\n  outline: 0;\n}\n\nlabel {\n  cursor: pointer;\n  display: block;\n}\n\nu,\nins {\n  text-decoration: none;\n}\n\nins {\n  border-bottom: 1px solid;\n}\n\nimg, video {\n  max-width: 100%;\n  font-style: italic;\n  vertical-align: middle;\n  height: auto;\n  outline: 0;\n}\n\n/* remove yellow bg on automplete in chrome */\n\ninput:-webkit-autofill,\nselect:-webkit-autofill {\n  -webkit-box-shadow: 0 0 0 1000px white inset;\n}\n\n/* remove round corner on iOs */\n\ninput:not([type='radio']):not([type='checkbox']):not(.rnd),\nselect {\n  -webkit-appearance: none;\n  border-radius: 0;\n}\n\n/* https://github.com/necolas/normalize.css/pull/697/commits/c3762f068feca8e218e69f54daf397cd0f33176d */\n\nbutton,\nhtml [type='button'],\n[type='reset'],\n[type='submit'] {\n  border-radius: 0;\n}\n\n/* Elements        ------------------------------- */\n\n/*\n    Typography\n-------------------------------\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nul,\nol,\ndl,\nblockquote,\np,\naddress,\ntable,\nfieldset,\nfigure,\npre {\n  margin-bottom: 24px;\n  margin-bottom: 1.5rem;\n  margin-bottom: var(--unit);\n}\n\n.h0 {\n  font-size: 95.367px;\n  font-size: 5.96046rem;\n  font-size: calc(5.96046 * var(--base-font-size));\n  line-height: 144px;\n  line-height: 9rem;\n  line-height: calc(6 * var(--unit));\n}\n\nh1,\n.h1 {\n  font-size: 16px;\n  font-size: 1rem;\n  font-size: calc(1 * var(--base-font-size));\n  line-height: 48px;\n  line-height: 3rem;\n  line-height: calc(2 * var(--unit));\n}\n\nh2,\n.h2 {\n  font-size: 16px;\n  font-size: 1rem;\n  font-size: calc(1 * var(--base-font-size));\n  line-height: 24px;\n  line-height: 1.5rem;\n  line-height: calc(1 * var(--unit));\n}\n\nh3,\nh4,\nh5,\n.h5 {\n  font-weight: 700;\n}\n\nh3,\n.h3 {\n  font-size: 16px;\n  font-size: 1rem;\n  font-size: calc(1 * var(--base-font-size));\n  line-height: 24px;\n  line-height: 1.5rem;\n  line-height: calc(1 * var(--unit));\n  border-bottom: 1px dotted #bcb9af;\n  border-bottom: 0.0625rem dotted #bcb9af;\n  border-bottom: var(--unit-line) var(--border-style) var(--border-color);\n  padding-bottom: 12px;\n  padding-bottom: 0.75rem;\n  padding-bottom: var(--unit-s);\n  margin-bottom: 23px;\n  margin-bottom: 1.4375rem;\n  margin-bottom: calc(var(--unit) - var(--unit-line));\n}\n\nh4,\n.h4 {\n  font-size: 16px;\n  font-size: 1rem;\n  font-size: calc(1 * var(--base-font-size));\n  line-height: 24px;\n  line-height: 1.5rem;\n  line-height: calc(1 * var(--unit));\n}\n\nh5,\n.h5 {\n  font-size: 12.8px;\n  font-size: 0.8rem;\n  font-size: calc(0.8 * var(--base-font-size));\n  line-height: 24px;\n  line-height: 1.5rem;\n  line-height: calc(1 * var(--unit));\n}\n\nh6,\n.h6,\nsmall {\n  font-size: 11.448px;\n  font-size: 0.71554rem;\n  font-size: calc(0.71554 * var(--base-font-size));\n  line-height: 12px;\n  line-height: 0.75rem;\n  line-height: calc(0.5 * var(--unit));\n}\n\nlabel,\nh6 {\n  margin-bottom: 12px;\n  margin-bottom: 0.75rem;\n  margin-bottom: var(--unit-s);\n}\n\nh1,\nh2,\nh5 {\n  font-weight: 700;\n}\n\nblockquote {\n  font-size: 17.888px;\n  font-size: 1.11803rem;\n  font-size: calc(1.11803 * var(--base-font-size));\n  line-height: 36px;\n  line-height: 2.25rem;\n  line-height: calc(1.5 * var(--unit));\n  font-style: italic;\n  background: #f8f7f3;\n  background: var(--color-alt);\n  padding: 24px;\n  padding: 1.5rem;\n  padding: var(--unit);\n  border-left: 1px dotted #bcb9af;\n  border-left: 0.0625rem dotted #bcb9af;\n  border-left: var(--unit-line) var(--border-style) var(--border-color);\n}\n\nblockquote :last-child {\n  margin-bottom: 0;\n}\n\nhr {\n  clear: both;\n  border: 0;\n  height: 0;\n  border-top-width: 1px;\n  border-top-width: 0.0625rem;\n  border-top-width: var(--border-width);\n  border-top-style: dotted;\n  border-top-style: var(--border-style);\n  border-top-color: #bcb9af;\n  border-top-color: var(--border-color);\n  margin-bottom: 23px;\n  margin-bottom: 1.4375rem;\n  margin-bottom: calc(var(--unit) - var(--unit-line));\n}\n\na {\n  text-decoration: none;\n  color: #f50;\n  color: var(--color-highlight)\n}\n\na:visited {\n  color: #f50;\n  color: var(--color-highlight);\n}\n\na:hover,\n  a:active,\n  a:focus {\n  color: #f50;\n  color: var(--color-highlight);\n}\n\nb,\nstrong,\n.strong,\n.bold {\n  font-weight: 700;\n}\n\ni,\n.italic {\n  font-style: italic;\n}\n\n.cap {\n  text-transform: capitalize;\n}\n\n.caps {\n  text-transform: uppercase;\n  letter-spacing: 0.25em;\n}\n\n.line-through {\n  color: #bcb9af;\n  color: var(--color-neutral);\n  text-decoration: line-through;\n}\n\n.underline {\n  border-bottom: 1px solid;\n}\n\n.nowrap {\n  white-space: nowrap;\n}\n\n.truncate {\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.text-center {\n  text-align: center;\n}\n\n.text-left {\n  text-align: right;\n}\n\n.text-right {\n  text-align: right;\n}\n\n.mono {\n  font-family: 'Lucida Sans Typewriter', monaco, 'Lucida Console', monospace;\n  font-weight: bold;\n}\n\n/*\n      Lists\n-------------------------------\n\n*/\n\nul,\nol,\ndd {\n  list-style-position: inside;\n\n  /* overflow: auto; */\n}\n\nul > li > ul,\nul > li > ol,\nol > li > ul,\nol > li > ol {\n  margin-left: 36px;\n  margin-left: 2.25rem;\n  margin-left: var(--unit-l);\n}\n\nol {\n  list-style-type: decimal;\n}\n\nli > ul,\n  li > ol {\n  margin-bottom: 0;\n}\n\n.list-sans {\n  padding: 0;\n  list-style: none;\n}\n\n.list-inline {\n  padding: 0;\n  list-style: none;\n  margin-bottom: 18px;\n  margin-bottom: 1.125rem;\n  margin-bottom: calc(var(--unit) - var(--unit-xs))\n}\n\n.list-inline > li:not(.right) {\n  margin-bottom: 6px;\n  margin-bottom: 0.375rem;\n  margin-bottom: var(--unit-xs);\n  margin-right: 6px;\n  margin-right: 0.375rem;\n  margin-right: var(--unit-xs);\n  float: left;\n}\n\n.list-inline > li.right {\n  margin-bottom: 6px;\n  margin-bottom: 0.375rem;\n  margin-bottom: var(--unit-xs);\n  margin-left: 6px;\n  margin-left: 0.375rem;\n  margin-left: var(--unit-xs);\n  float: right;\n}\n\n.list-prefix {\n  list-style: none\n}\n\n.list-prefix > li::before {\n  content: '―';\n  content: var(--list-prefix);\n  margin-right: 6px;\n  margin-right: 0.375rem;\n  margin-right: var(--unit-xs);\n  color: #bcb9af;\n  color: var(--color-neutral);\n}\n\n.list-postfix {\n  list-style: none\n}\n\n.list-postfix > li::after {\n  content: ',';\n  content: var(--list-postfix);\n}\n\n.list-inline.list-postfix li:last-child::after {\n  content: none;\n}\n\n/*\n    Table\n-------------------------------\n*/\n\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  border-spacing: 0;\n  border: none;\n}\n\nth {\n  text-align: left;\n  font-weight: 700;\n  font-size: 12.8px;\n  font-size: 0.8rem;\n  font-size: calc(0.8 * var(--base-font-size));\n  line-height: 12px;\n  line-height: 0.75rem;\n  line-height: calc(0.5 * var(--unit));\n}\n\ntr {\n  border-bottom: 1px dotted #bcb9af;\n  border-bottom: 0.0625rem dotted #bcb9af;\n  border-bottom: var(--unit-line) var(--border-style) var(--border-color);\n}\n\ntd,\nth {\n  vertical-align: top;\n  word-wrap: break-word;\n  padding-bottom: 12px;\n  padding-bottom: 0.75rem;\n  padding-bottom: var(--unit-s);\n  padding-top: 11px;\n  padding-top: 0.6875rem;\n  padding-top: calc(var(--unit-s) - var(--unit-line));\n}\n\n.table-xs td,\n.table-xs th {\n  padding-top: 6px;\n  padding-top: 0.375rem;\n  padding-top: var(--unit-xs);\n  padding-bottom: 5px;\n  padding-bottom: 0.3125rem;\n  padding-bottom: calc(var(--unit-xs) - var(--unit-line));\n}\n\n.table-xxs td,\n.table-xxs th {\n  padding-top: 3px;\n  padding-top: 0.1875rem;\n  padding-top: var(--unit-xxs);\n  padding-bottom: 2px;\n  padding-bottom: 0.125rem;\n  padding-bottom: calc(var(--unit-xxs) - var(--unit-line));\n}\n\n.table-fixed {\n  display: table;\n  table-layout: fixed;\n}\n\n/*\n      Buttons\n-------------------------------\n*/\n\n.btn,.btn:visited {\n  cursor: pointer;\n  text-decoration: none;\n  border: none;\n  display: inline-block;\n  color: var(--color-text);\n  background-color: var(--color-alt);\n}\n\n.btn:active,.btn.active {\n  color: var(--color-inverse);\n  background-color: var(--color-alt);\n}\n\n.btn:hover,.btn.active:hover {\n  color: var(--color-bg);\n  background-color: var(--color-highlight);\n}\n\n.btn:disabled,.btn:disabled:active,.btn:disabled:hover,.btn.disabled,.btn.disabled:active,.btn.disabled:hover {\n  opacity: 0.25;\n  cursor: default;\n  color: var(--color-text);\n  background-color: var(--color-alt);\n  box-shadow: inset 0 0 0 0 grey;\n}\n\n.btn-border,.btn-border:visited {\n  cursor: pointer;\n  text-decoration: none;\n  border: none;\n  display: inline-block;\n  color: var(--color-text);\n  background-color: var(--color-alt);\n  box-shadow: inset 0 0 0 var(--unit-line) var(--color-bg);\n}\n\n.btn-border:active,.btn-border.active {\n  color: var(--color-inverse);\n  background-color: var(--color-alt);\n  box-shadow: inset 0 0 0 var(--unit-line) var(--color-bg);\n}\n\n.btn-border:hover,.btn-border.active:hover {\n  color: var(--color-bg);\n  background-color: var(--color-highlight);\n  box-shadow: inset 0 0 0 var(--unit-line) var(--color-bg);\n}\n\n.btn-border:disabled,.btn-border:disabled:active,.btn-border:disabled:hover,.btn-border.disabled,.btn-border.disabled:active,.btn-border.disabled:hover {\n  opacity: 0.25;\n  cursor: default;\n  color: var(--color-text);\n  background-color: var(--color-alt);\n  box-shadow: inset 0 0 0 var(--unit-line) var(--color-bg);\n}\n\n.tag .btn,.tag .btn:visited,\n.btn-alt,.btn-alt:visited {\n  cursor: pointer;\n  text-decoration: none;\n  border: none;\n  display: inline-block;\n  color: var(--color-bg);\n  background-color: var(--color-neutral);\n}\n\n.tag .btn:active,.tag .btn.active, .btn-alt:active,.btn-alt.active {\n  color: var(--color-bg);\n  background-color: var(--color-inverse);\n}\n\n.tag .btn:hover,.tag .btn.active:hover, .btn-alt:hover,.btn-alt.active:hover {\n  color: var(--color-bg);\n  background-color: var(--color-highlight);\n}\n\n.tag .btn:disabled,.tag .btn:disabled:active,.tag .btn:disabled:hover,.tag .btn.disabled,.tag .btn.disabled:active,.tag .btn.disabled:hover, .btn-alt:disabled,.btn-alt:disabled:active,.btn-alt:disabled:hover,.btn-alt.disabled,.btn-alt.disabled:active,.btn-alt.disabled:hover {\n  opacity: 0.25;\n  cursor: default;\n  color: var(--color-bg);\n  background-color: var(--color-neutral);\n  box-shadow: inset 0 0 0 0 grey;\n}\n\n.btn,\n.btn-alt,\n.btn-border,\n.btn-transparent {\n  transition: opacity 0.5s, background-color 0.5s, border 0.5s,\n    box-shadow 0.5s, fill 0.5s;\n  transition: var(--transition);\n  font-weight: 700;\n}\n\n.btn-border {\n  border-radius: 0.375rem;\n  border-radius: var(--unit-xs);\n}\n\n.btn-icon {\n  line-height: 16px;\n  line-height: 1rem;\n}\n\n/*\n      Forms\n-------------------------------\n*/\n\ninput[type='text'],\ninput[type='email'],\ninput[type='search'],\ninput[type='password'],\ninput[type='tel'],\nselect,\ntextarea {\n  width: 100%;\n  padding: 12px;\n  padding: 0.75rem;\n  padding: var(--unit-s);\n  border: 0 none;\n  background-color: #f8f7f3;\n  background-color: var(--color-alt);\n  height: auto;\n  color: inherit;\n}\n\nselect {\n  background-image: url(\n    \"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='none' stroke='%23666' stroke-linecap='round' stroke-linejoin='round' stroke-miterlimit='10' stroke-width='1px'%3E %3Cpath d='M22 9L12 19 2 9'/%3E %3C/svg%3E\"\n  );\n  background-position: right 12px center;\n  background-position: right 0.75rem center;\n  background-position: right var(--unit-s) center;\n  background-repeat: no-repeat;\n\n  /* for FF: http://stackoverflow.com/a/18317228/2112538 */\n  -moz-appearance: none;\n  text-indent: 0.01px;\n  text-overflow: ellipsis;\n}\n\ntextarea {\n  /* http://stackoverflow.com/a/5196591/2112538 */\n  vertical-align: top;\n  resize: vertical;\n}\n\ntextarea:focus,\ninput:focus,\nselect:focus {\n  border-right: 12px solid #f50;\n  border-right: 0.75rem solid #f50;\n  border-right: var(--unit-s) solid var(--color-highlight);\n}\n\ninput[type='text'].bg-bg,\ninput[type='email'].bg-bg,\ninput[type='search'].bg-bg,\ninput[type='password'].bg-bg,\ninput[type='tel'].bg-bg,\nselect.bg-bg,\ntextarea.bg-bg {\n  background-color: white;\n  background-color: var(--color-bg);\n}\n\ninput.success {\n  border-right: 12px solid #6ea040;\n  border-right: 0.75rem solid #6ea040;\n  border-right: var(--unit-s) solid var(--color-success);\n}\n\ninput.error {\n  border-right: 12px solid #e82239;\n  border-right: 0.75rem solid #e82239;\n  border-right: var(--unit-s) solid var(--color-error);\n}\n\ninput:disabled,\ntextarea:disabled,\nselect:disabled {\n  background-color: rgba(248, 247, 243, 0.5);\n  background-color: rgba(248, 247, 243, 0.5);\n}\n\ninput.bg-bg:disabled,\ntextarea.bg-bg:disabled,\nselect.bg-bg:disabled {\n  background-color: rgba(255, 255, 255, 0.5);\n  background-color: rgba(255, 255, 255, 0.5);\n}\n\n*::-webkit-input-placeholder {\n  /* WebKit, Blink, Edge */\n  color: #bcb9af;\n  color: var(--color-neutral);\n}\n\n*:-moz-placeholder {\n  /* Mozilla Firefox 4 to 18 */\n  color: #bcb9af;\n  color: var(--color-neutral);\n  opacity: 1;\n}\n\n*::-moz-placeholder {\n  /* Mozilla Firefox 19+ */\n  color: #bcb9af;\n  color: var(--color-neutral);\n  opacity: 1;\n}\n\n*:-ms-input-placeholder {\n  /* Internet Explorer 10-11 */\n  color: #bcb9af;\n  color: var(--color-neutral);\n}\n\n*::-ms-input-placeholder {\n  /* Microsoft Edge */\n  color: #bcb9af;\n  color: var(--color-neutral);\n}\n\n/* Layout          ------------------------------- */\n\n/* @import 'system/grid-system.css'; */\n\n/*\n      postcss-grid-fluid\n-------------------------------\n\nhttps://github.com/francoisromain/postcss-grid-fluid\n*/\n\n.bloc-code,\n.blob-1,\n.blob-1-2,\n.blob-1-3,\n.blob-2-3,\n.blob-1-4,\n.blob-3-4,\n.blob-btn,\n.blob-3-4-btn {\n  margin-bottom: 24px;\n  margin-bottom: 1.5rem;\n  margin-bottom: var(--unit);\n}\n\n.blobs-default {\n  clear: both;\n  margin-right: calc(-1 * var(--gutter));\n  display: flex;\n  flex-flow: row wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n}\n\n.blobs-default::after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n\n.blob-default {\n  margin-right: 24px;\n  margin-right: 1.5rem;\n  margin-right: var(--gutter);\n  flex: 0 1 0;\n}\n\n@media (min-width: 42.5em) {\n  .blobs {\n    clear: both;\n    margin-right: calc(-1 * var(--gutter));\n    display: flex;\n    flex-flow: row wrap;\n    align-items: flex-start;\n    align-content: flex-start;\n  }\n  .blobs::after {\n    content: \"\";\n    display: table;\n    clear: both;\n  }\n\n  .blob {\n    margin-right: 1.5rem;\n    margin-right: var(--gutter);\n    margin-bottom: 1.5rem;\n    margin-bottom: var(--gutter);\n    flex: 0 1 0;\n  }\n\n  .blob-auto {\n    margin-right: 1.5rem;\n    margin-right: var(--gutter);\n    margin-bottom: 1.5rem;\n    margin-bottom: var(--gutter);\n    flex: 0 1 auto;\n  }\n\n  .blob-1 {\n    margin-right: var(--gutter);\n    margin-bottom: var(--gutter);\n    flex: 0 1 calc(100% - var(--gutter));\n  }\n\n  .blob-code,\n  .blob-1-2 {\n    margin-right: var(--gutter);\n    margin-bottom: var(--gutter);\n    flex: 0 1 calc(50% - var(--gutter));\n  }\n\n  .blob-1-3 {\n    margin-right: var(--gutter);\n    margin-bottom: var(--gutter);\n    flex: 0 1 calc(33.333333333333336% - var(--gutter));\n  }\n\n  .blob-2-3 {\n    margin-right: var(--gutter);\n    margin-bottom: var(--gutter);\n    flex: 0 1 calc(66.66666666666667% - var(--gutter));\n  }\n\n  .blob-1-4 {\n    margin-right: var(--gutter);\n    margin-bottom: var(--gutter);\n    flex: 0 1 calc(25% - var(--gutter));\n  }\n\n  .blob-3-4 {\n    margin-right: var(--gutter);\n    margin-bottom: var(--gutter);\n    flex: 0 1 calc(75% - var(--gutter));\n  }\n\n  .blob-btn {\n    margin-right: 1.5rem;\n    margin-right: var(--gutter);\n    margin-bottom: 1.5rem;\n    margin-bottom: var(--gutter);\n    flex: 0 1 3rem;\n  }\n\n  .blob-3-4-btn {\n    margin-right: 1.5rem;\n    margin-right: var(--gutter);\n    margin-bottom: 1.5rem;\n    margin-bottom: var(--gutter);\n    flex: 0 1 calc(75% - 6rem);\n    flex: 0 1 calc(75% - var(--gutter) - 3rem - var(--gutter));\n  }\n}\n\n/*\n    Utils\n-------------------------------\n*/\n\n/*\nhttp://cssmojo.com/the-very-latest-clearfix-reloaded/\n*/\n\n.clearfix::before,\n.clearfix::after {\n  content: '';\n  display: block;\n  clear: both;\n}\n\n.hide {\n  display: none;\n  visibility: hidden;\n}\n\n.pointer {\n  cursor: pointer;\n}\n\n.pointer-none {\n  pointer-events: none;\n}\n\n.overflow-hidden {\n  overflow: hidden;\n}\n\n.inline-block {\n  display: inline-block;\n}\n\n.flex {\n  display: flex;\n}\n\n.flex-start {\n  align-items: flex-start;\n}\n\n.flex-direction-column {\n  flex-direction: column;\n}\n\n.left {\n  float: left;\n}\n\n.right {\n  float: right;\n}\n\n.flex-right {\n  margin-left: auto;\n}\n\n.relative {\n  position: relative;\n}\n\n.fixed {\n  position: fixed;\n}\n\n.absolute {\n  position: absolute;\n}\n\n.center {\n  left: 50%;\n  transform: translate(-50%, 0);\n}\n\n.full {\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n\n.full-x {\n  width: 100%;\n}\n\n.full-y {\n  height: 100%;\n}\n\n/*\n      Margins\n-------------------------------\n\n*/\n\n.m {\n  margin: 24px;\n  margin: 1.5rem;\n  margin: var(--unit);\n}\n\n.m-xxs {\n  margin: 3px;\n  margin: 0.1875rem;\n  margin: var(--unit-xxs);\n}\n\n.m-xs {\n  margin: 6px;\n  margin: 0.375rem;\n  margin: var(--unit-xs);\n}\n\n.m-s {\n  margin: 12px;\n  margin: 0.75rem;\n  margin: var(--unit-s);\n}\n\n.m-m {\n  margin: 18px;\n  margin: 1.125rem;\n  margin: var(--unit-m);\n}\n\n.m-l {\n  margin: 36px;\n  margin: 2.25rem;\n  margin: var(--unit-l);\n}\n\n.m-xl {\n  margin: 48px;\n  margin: 3rem;\n  margin: var(--unit-xl);\n}\n\n.m-0 {\n  margin: 0;\n}\n\n.mr {\n  margin-right: 24px;\n  margin-right: 1.5rem;\n  margin-right: var(--unit);\n}\n\n.mr-xxs {\n  margin-right: 3px;\n  margin-right: 0.1875rem;\n  margin-right: var(--unit-xxs);\n}\n\n.mr-xs {\n  margin-right: 6px;\n  margin-right: 0.375rem;\n  margin-right: var(--unit-xs);\n}\n\n.mr-s {\n  margin-right: 12px;\n  margin-right: 0.75rem;\n  margin-right: var(--unit-s);\n}\n\n.mr-m {\n  margin-right: 18px;\n  margin-right: 1.125rem;\n  margin-right: var(--unit-m);\n}\n\n.mr-l {\n  margin-right: 36px;\n  margin-right: 2.25rem;\n  margin-right: var(--unit-l);\n}\n\n.mr-xl {\n  margin-right: 48px;\n  margin-right: 3rem;\n  margin-right: var(--unit-xl);\n}\n\n.mr-0 {\n  margin-right: 0;\n}\n\n.ml {\n  margin-left: 24px;\n  margin-left: 1.5rem;\n  margin-left: var(--unit);\n}\n\n.ml-xxs {\n  margin-left: 3px;\n  margin-left: 0.1875rem;\n  margin-left: var(--unit-xxs);\n}\n\n.ml-xs {\n  margin-left: 6px;\n  margin-left: 0.375rem;\n  margin-left: var(--unit-xs);\n}\n\n.ml-s {\n  margin-left: 12px;\n  margin-left: 0.75rem;\n  margin-left: var(--unit-s);\n}\n\n.ml-m {\n  margin-left: 18px;\n  margin-left: 1.125rem;\n  margin-left: var(--unit-m);\n}\n\n.ml-l {\n  margin-left: 36px;\n  margin-left: 2.25rem;\n  margin-left: var(--unit-l);\n}\n\n.ml-xl {\n  margin-left: 48px;\n  margin-left: 3rem;\n  margin-left: var(--unit-xl);\n}\n\n.ml-0 {\n  margin-left: 0;\n}\n\n.mt {\n  margin-top: 24px;\n  margin-top: 1.5rem;\n  margin-top: var(--unit);\n}\n\n.mt-xxs {\n  margin-top: 3px;\n  margin-top: 0.1875rem;\n  margin-top: var(--unit-xxs);\n}\n\n.mt-xs {\n  margin-top: 6px;\n  margin-top: 0.375rem;\n  margin-top: var(--unit-xs);\n}\n\n.mt-s {\n  margin-top: 12px;\n  margin-top: 0.75rem;\n  margin-top: var(--unit-s);\n}\n\n.mt-m {\n  margin-top: 18px;\n  margin-top: 1.125rem;\n  margin-top: var(--unit-m);\n}\n\n.mt-l {\n  margin-top: 36px;\n  margin-top: 2.25rem;\n  margin-top: var(--unit-l);\n}\n\n.mt-xl {\n  margin-top: 48px;\n  margin-top: 3rem;\n  margin-top: var(--unit-xl);\n}\n\n.mt-xxl {\n  margin-top: 60px;\n  margin-top: 3.75rem;\n  margin-top: var(--unit-xxl);\n}\n\n.mt-0 {\n  margin-top: 0;\n}\n\n.mb {\n  margin-bottom: 24px;\n  margin-bottom: 1.5rem;\n  margin-bottom: var(--unit);\n}\n\n.mb-xxs {\n  margin-bottom: 3px;\n  margin-bottom: 0.1875rem;\n  margin-bottom: var(--unit-xxs);\n}\n\n.mb-xs {\n  margin-bottom: 6px;\n  margin-bottom: 0.375rem;\n  margin-bottom: var(--unit-xs);\n}\n\n.mb-s {\n  margin-bottom: 12px;\n  margin-bottom: 0.75rem;\n  margin-bottom: var(--unit-s);\n}\n\n.mb-m {\n  margin-bottom: 18px;\n  margin-bottom: 1.125rem;\n  margin-bottom: var(--unit-m);\n}\n\n.mb-l {\n  margin-bottom: 36px;\n  margin-bottom: 2.25rem;\n  margin-bottom: var(--unit-l);\n}\n\n.mb-xl {\n  margin-bottom: 48px;\n  margin-bottom: 3rem;\n  margin-bottom: var(--unit-xl);\n}\n\n.mb-xxl {\n  margin-bottom: 60px;\n  margin-bottom: 3.75rem;\n  margin-bottom: var(--unit-xxl);\n}\n\n.mb-0 {\n  margin-bottom: 0;\n}\n\n.mx {\n  margin-right: 24px;\n  margin-right: 1.5rem;\n  margin-right: var(--unit);\n  margin-left: 24px;\n  margin-left: 1.5rem;\n  margin-left: var(--unit);\n}\n\n.mx-xxs {\n  margin-right: 3px;\n  margin-right: 0.1875rem;\n  margin-right: var(--unit-xxs);\n  margin-left: 3px;\n  margin-left: 0.1875rem;\n  margin-left: var(--unit-xxs);\n}\n\n.mx-xs {\n  margin-right: 6px;\n  margin-right: 0.375rem;\n  margin-right: var(--unit-xs);\n  margin-left: 6px;\n  margin-left: 0.375rem;\n  margin-left: var(--unit-xs);\n}\n\n.mx-s {\n  margin-right: 12px;\n  margin-right: 0.75rem;\n  margin-right: var(--unit-s);\n  margin-left: 12px;\n  margin-left: 0.75rem;\n  margin-left: var(--unit-s);\n}\n\n.mx-m {\n  margin-right: 18px;\n  margin-right: 1.125rem;\n  margin-right: var(--unit-m);\n  margin-left: 18px;\n  margin-left: 1.125rem;\n  margin-left: var(--unit-m);\n}\n\n.mx-l {\n  margin-right: 36px;\n  margin-right: 2.25rem;\n  margin-right: var(--unit-l);\n  margin-left: 36px;\n  margin-left: 2.25rem;\n  margin-left: var(--unit-l);\n}\n\n.mx-xl {\n  margin-right: 48px;\n  margin-right: 3rem;\n  margin-right: var(--unit-xl);\n  margin-left: 48px;\n  margin-left: 3rem;\n  margin-left: var(--unit-xl);\n}\n\n.mx-xxl {\n  margin-right: 60px;\n  margin-right: 3.75rem;\n  margin-right: var(--unit-xxl);\n  margin-left: 60px;\n  margin-left: 3.75rem;\n  margin-left: var(--unit-xxl);\n}\n\n.mx-0 {\n  margin-right: 0;\n  margin-left: 0;\n}\n\n.my {\n  margin-top: 24px;\n  margin-top: 1.5rem;\n  margin-top: var(--unit);\n  margin-bottom: 24px;\n  margin-bottom: 1.5rem;\n  margin-bottom: var(--unit);\n}\n\n.my-xxs {\n  margin-top: 3px;\n  margin-top: 0.1875rem;\n  margin-top: var(--unit-xxs);\n  margin-bottom: 3px;\n  margin-bottom: 0.1875rem;\n  margin-bottom: var(--unit-xxs);\n}\n\n.my-xs {\n  margin-top: 6px;\n  margin-top: 0.375rem;\n  margin-top: var(--unit-xs);\n  margin-bottom: 6px;\n  margin-bottom: 0.375rem;\n  margin-bottom: var(--unit-xs);\n}\n\n.my-s {\n  margin-top: 12px;\n  margin-top: 0.75rem;\n  margin-top: var(--unit-s);\n  margin-bottom: 12px;\n  margin-bottom: 0.75rem;\n  margin-bottom: var(--unit-s);\n}\n\n.my-m {\n  margin-top: 18px;\n  margin-top: 1.125rem;\n  margin-top: var(--unit-m);\n  margin-bottom: 18px;\n  margin-bottom: 1.125rem;\n  margin-bottom: var(--unit-m);\n}\n\n.my-l {\n  margin-top: 36px;\n  margin-top: 2.25rem;\n  margin-top: var(--unit-l);\n  margin-bottom: 36px;\n  margin-bottom: 2.25rem;\n  margin-bottom: var(--unit-l);\n}\n\n.my-xl {\n  margin-top: 48px;\n  margin-top: 3rem;\n  margin-top: var(--unit-xl);\n  margin-bottom: 48px;\n  margin-bottom: 3rem;\n  margin-bottom: var(--unit-xl);\n}\n\n.my-0 {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.mx-auto {\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.mt--s {\n  margin-top: -12px;\n  margin-top: -0.75rem;\n  margin-top: calc(var(--unit-s) * -1);\n}\n\n.mt--m {\n  margin-top: -18px;\n  margin-top: -1.125rem;\n  margin-top: calc(var(--unit-m) * -1);\n}\n\n.my--s {\n  margin-top: -12px;\n  margin-top: -0.75rem;\n  margin-top: calc(var(--unit-s) * -1);\n  margin-bottom: -12px;\n  margin-bottom: -0.75rem;\n  margin-bottom: calc(var(--unit-s) * -1);\n}\n\n.my--xs {\n  margin-top: -6px;\n  margin-top: -0.375rem;\n  margin-top: calc(var(--unit-xs) * -1);\n  margin-bottom: -6px;\n  margin-bottom: -0.375rem;\n  margin-bottom: calc(var(--unit-xs) * -1);\n}\n\n/*\n    Padding\n-------------------------------\n*/\n\n.p {\n  padding: 24px;\n  padding: 1.5rem;\n  padding: var(--unit);\n}\n\n.p-xxs {\n  padding: 3px;\n  padding: 0.1875rem;\n  padding: var(--unit-xxs);\n}\n\n.p-xs {\n  padding: 6px;\n  padding: 0.375rem;\n  padding: var(--unit-xs);\n}\n\n.p-s {\n  padding: 12px;\n  padding: 0.75rem;\n  padding: var(--unit-s);\n}\n\n.p-m {\n  padding: 18px;\n  padding: 1.125rem;\n  padding: var(--unit-m);\n}\n\n.p-l {\n  padding: 36px;\n  padding: 2.25rem;\n  padding: var(--unit-l);\n}\n\n.p-xl {\n  padding: 48px;\n  padding: 3rem;\n  padding: var(--unit-xl);\n}\n\n.p-xxl {\n  padding: 60px;\n  padding: 3.75rem;\n  padding: var(--unit-xxl);\n}\n\n.px {\n  padding-left: 24px;\n  padding-left: 1.5rem;\n  padding-left: var(--unit);\n  padding-right: 24px;\n  padding-right: 1.5rem;\n  padding-right: var(--unit);\n}\n\n.px-xxs {\n  padding-left: 3px;\n  padding-left: 0.1875rem;\n  padding-left: var(--unit-xxs);\n  padding-right: 3px;\n  padding-right: 0.1875rem;\n  padding-right: var(--unit-xxs);\n}\n\n.px-xs {\n  padding-left: 6px;\n  padding-left: 0.375rem;\n  padding-left: var(--unit-xs);\n  padding-right: 6px;\n  padding-right: 0.375rem;\n  padding-right: var(--unit-xs);\n}\n\n.px-s {\n  padding-left: 12px;\n  padding-left: 0.75rem;\n  padding-left: var(--unit-s);\n  padding-right: 12px;\n  padding-right: 0.75rem;\n  padding-right: var(--unit-s);\n}\n\n.px-m {\n  padding-left: 18px;\n  padding-left: 1.125rem;\n  padding-left: var(--unit-m);\n  padding-right: 18px;\n  padding-right: 1.125rem;\n  padding-right: var(--unit-m);\n}\n\n.px-l {\n  padding-left: 36px;\n  padding-left: 2.25rem;\n  padding-left: var(--unit-l);\n  padding-right: 36px;\n  padding-right: 2.25rem;\n  padding-right: var(--unit-l);\n}\n\n.px-xl {\n  padding-left: 48px;\n  padding-left: 3rem;\n  padding-left: var(--unit-xl);\n  padding-right: 48px;\n  padding-right: 3rem;\n  padding-right: var(--unit-xl);\n}\n\n.px-xxl {\n  padding-left: 60px;\n  padding-left: 3.75rem;\n  padding-left: var(--unit-xxl);\n  padding-right: 60px;\n  padding-right: 3.75rem;\n  padding-right: var(--unit-xxl);\n}\n\n.py {\n  padding-top: 24px;\n  padding-top: 1.5rem;\n  padding-top: var(--unit);\n  padding-bottom: 24px;\n  padding-bottom: 1.5rem;\n  padding-bottom: var(--unit);\n}\n\n.py-xxs {\n  padding-top: 3px;\n  padding-top: 0.1875rem;\n  padding-top: var(--unit-xxs);\n  padding-bottom: 3px;\n  padding-bottom: 0.1875rem;\n  padding-bottom: var(--unit-xxs);\n}\n\n.py-xs {\n  padding-top: 6px;\n  padding-top: 0.375rem;\n  padding-top: var(--unit-xs);\n  padding-bottom: 6px;\n  padding-bottom: 0.375rem;\n  padding-bottom: var(--unit-xs);\n}\n\n.py-s {\n  padding-top: 12px;\n  padding-top: 0.75rem;\n  padding-top: var(--unit-s);\n  padding-bottom: 12px;\n  padding-bottom: 0.75rem;\n  padding-bottom: var(--unit-s);\n}\n\n.py-m {\n  padding-top: 18px;\n  padding-top: 1.125rem;\n  padding-top: var(--unit-m);\n  padding-bottom: 18px;\n  padding-bottom: 1.125rem;\n  padding-bottom: var(--unit-m);\n}\n\n.py-l {\n  padding-top: 36px;\n  padding-top: 2.25rem;\n  padding-top: var(--unit-l);\n  padding-bottom: 36px;\n  padding-bottom: 2.25rem;\n  padding-bottom: var(--unit-l);\n}\n\n.py-xl {\n  padding-top: 48px;\n  padding-top: 3rem;\n  padding-top: var(--unit-xl);\n  padding-bottom: 48px;\n  padding-bottom: 3rem;\n  padding-bottom: var(--unit-xl);\n}\n\n.py-xxl {\n  padding-top: 60px;\n  padding-top: 3.75rem;\n  padding-top: var(--unit-xxl);\n  padding-bottom: 60px;\n  padding-bottom: 3.75rem;\n  padding-bottom: var(--unit-xxl);\n}\n\n.pt {\n  padding-top: 24px;\n  padding-top: 1.5rem;\n  padding-top: var(--unit);\n}\n\n.pt-xxs {\n  padding-top: 3px;\n  padding-top: 0.1875rem;\n  padding-top: var(--unit-xxs);\n}\n\n.pt-xs {\n  padding-top: 6px;\n  padding-top: 0.375rem;\n  padding-top: var(--unit-xs);\n}\n\n.pt-s {\n  padding-top: 12px;\n  padding-top: 0.75rem;\n  padding-top: var(--unit-s);\n}\n\n.pt-m {\n  padding-top: 18px;\n  padding-top: 1.125rem;\n  padding-top: var(--unit-m);\n}\n\n.pt-l {\n  padding-top: 36px;\n  padding-top: 2.25rem;\n  padding-top: var(--unit-l);\n}\n\n.pt-xl {\n  padding-top: 48px;\n  padding-top: 3rem;\n  padding-top: var(--unit-xl);\n}\n\n.pt-xxl {\n  padding-top: 60px;\n  padding-top: 3.75rem;\n  padding-top: var(--unit-xxl);\n}\n\n.pb {\n  padding-bottom: 24px;\n  padding-bottom: 1.5rem;\n  padding-bottom: var(--unit);\n}\n\n.pb-xxs {\n  padding-bottom: 3px;\n  padding-bottom: 0.1875rem;\n  padding-bottom: var(--unit-xxs);\n}\n\n.pb-xs {\n  padding-bottom: 6px;\n  padding-bottom: 0.375rem;\n  padding-bottom: var(--unit-xs);\n}\n\n.pb-s {\n  padding-bottom: 12px;\n  padding-bottom: 0.75rem;\n  padding-bottom: var(--unit-s);\n}\n\n.pb-m {\n  padding-bottom: 18px;\n  padding-bottom: 1.125rem;\n  padding-bottom: var(--unit-m);\n}\n\n.pb-l {\n  padding-bottom: 36px;\n  padding-bottom: 2.25rem;\n  padding-bottom: var(--unit-l);\n}\n\n.pb-xl {\n  padding-bottom: 48px;\n  padding-bottom: 3rem;\n  padding-bottom: var(--unit-xl);\n}\n\n.pb-xxl {\n  padding-bottom: 60px;\n  padding-bottom: 3.75rem;\n  padding-bottom: var(--unit-xxl);\n}\n\n/* Ui             ------------------------------- */\n\n/*\n    Colors\n-------------------------------\n*/\n\n.color-bg {\n  color: white;\n  color: var(--color-bg);\n}\n\n.color-highlight {\n  color: #f50;\n  color: var(--color-highlight);\n}\n\n.color-alt {\n  color: #f8f7f3;\n  color: var(--color-alt);\n}\n\n.color-neutral {\n  color: #bcb9af;\n  color: var(--color-neutral);\n}\n\n.color-inverse {\n  color: #3d3d35;\n  color: var(--color-inverse);\n}\n\n.bg-bg {\n  background-color: white;\n  background-color: var(--color-bg);\n}\n\n.bg-highlight {\n  background-color: #f50;\n  background-color: var(--color-highlight);\n}\n\n.bg-alt {\n  background-color: #f8f7f3;\n  background-color: var(--color-alt);\n}\n\n.bg-neutral {\n  background-color: #bcb9af;\n  background-color: var(--color-neutral);\n}\n\n.bg-inverse {\n  background-color: #3d3d35;\n  background-color: var(--color-inverse);\n}\n\n.bg-info {\n  background: #5798aa;\n  background: var(--color-info);\n}\n\n.bg-error {\n  background: #e82239;\n  background: var(--color-error);\n}\n\n.bg-warning {\n  background: #ff891c;\n  background: var(--color-warning);\n}\n\n.bg-success {\n  background: #6ea040;\n  background: var(--color-success);\n}\n\n.bg-bg-alpha {\n  background-color: rgba(255, 255, 255, 0.5);\n  background-color: rgba(255, 255, 255, 0.5);\n}\n\n.bg-alt-alpha {\n  background-color: rgba(248, 247, 243, 0.5);\n  background-color: rgba(248, 247, 243, 0.5);\n}\n\n/*\n    UI elements\n-------------------------------\n*/\n\n.pill {\n  border-radius: 9999px;\n  border-radius: var(--unit-infinity);\n}\n\n.rnd {\n  border-radius: 0.375rem;\n  border-radius: var(--unit-xs);\n}\n\n.border-bottom {\n  border-bottom: 1px dotted;\n  border-bottom: 0.0625rem dotted;\n  border-bottom: var(--unit-line) var(--border-style);\n  margin-bottom: 23px;\n  margin-bottom: 1.4375rem;\n  margin-bottom: calc(var(--unit) - var(--unit-line));\n  border-color: #bcb9af;\n  border-color: var(--border-color);\n}\n\n.border {\n  border: 1px dotted;\n  border: 0.0625rem dotted;\n  border: var(--unit-line) var(--border-style);\n  border-color: #bcb9af;\n  border-color: var(--border-color);\n  padding: 23px\n    23px 24px;\n  padding: 1.4375rem\n    1.4375rem 1.5rem;\n  padding: calc(var(--unit) - var(--unit-line))\n    calc(var(--unit) - var(--unit-line)) var(--unit);\n  margin-bottom: 23px;\n  margin-bottom: 1.4375rem;\n  margin-bottom: calc(var(--unit) - var(--unit-line));\n}\n\n.tooltip {\n  position: relative;\n}\n\n.tooltip span {\n  position: absolute;\n  color: #f8f7f3;\n  color: var(--color-alt);\n  background: #bcb9af;\n  background: var(--color-neutral);\n  text-align: center;\n  border-radius: 0.375rem;\n  border-radius: var(--unit-xs);\n  top: -48px;\n  top: -3rem;\n  top: calc(var(--unit-xl) * -1);\n  right: 0;\n  padding: 6px;\n  padding: 0.375rem;\n  padding: var(--unit-xs);\n  z-index: 999;\n}\n\n.tooltip span::after {\n  content: '';\n  position: absolute;\n  top: 100%;\n  right: 24px;\n  right: 1.5rem;\n  right: var(--unit);\n  border-top: 6px solid #bcb9af;\n  border-top: 0.375rem solid #bcb9af;\n  border-top: var(--unit-xs) solid var(--color-neutral);\n  border-right: 6px solid transparent;\n  border-right: 0.375rem solid transparent;\n  border-right: var(--unit-xs) solid transparent;\n  border-left: 6px solid transparent;\n  border-left: 0.375rem solid transparent;\n  border-left: var(--unit-xs) solid transparent;\n}\n\npre code {\n  display: block;\n}\n\ncode {\n  background-color: #f8f7f3;\n  background-color: var(--color-alt);\n  padding: 6px 12px;\n  padding: 0.375rem 0.75rem;\n  padding: var(--unit-xs) var(--unit-s);\n  border-radius: 0.375rem;\n  border-radius: var(--unit-xs);\n  white-space: pre;\n  -webkit-hyphens: none;\n      -ms-hyphens: none;\n          hyphens: none;\n  word-wrap: break-word;\n}\n\n.icon {\n  width: 100%;\n  height: 100%;\n  display: inline-block;\n  vertical-align: middle;\n  background-size: cover;\n}\n\n.icon-8 {\n  width: 8px;\n  width: 0.5rem;\n  width: calc(var(--base-font-size) / 2);\n  height: 8px;\n  height: 0.5rem;\n  height: calc(var(--base-font-size) / 2);\n  display: inline-block;\n  vertical-align: middle;\n}\n\n.icon-24 {\n  width: 24px;\n  width: 1.5rem;\n  width: var(--unit);\n  height: 24px;\n  height: 1.5rem;\n  height: var(--unit);\n  display: inline-block;\n  vertical-align: middle;\n  background-repeat: no-repeat;\n}\n\n.icon-48 {\n  width: 48px;\n  width: 3rem;\n  width: var(--unit-xl);\n  height: 48px;\n  height: 3rem;\n  height: var(--unit-xl);\n  display: inline-block;\n  vertical-align: middle;\n  background-repeat: no-repeat;\n}\n\n.icon-24-close {\n  background-image: url(\n    \"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='none' stroke='%23666' stroke-linecap='round' stroke-linejoin='round' stroke-miterlimit='10' stroke-width='1px'%3E %3Cpath class='st0' d='M2 2l20 20m0-20L2 22'/%3E %3C/svg%3E\"\n  );\n}\n\n.btn-border:hover .icon-24-close {\n  background-image: url(\n    \"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='none' stroke='white' stroke-linecap='round' stroke-linejoin='round' stroke-miterlimit='10' stroke-width='1px'%3E %3Cpath class='st0' d='M2 2l20 20m0-20L2 22'/%3E %3C/svg%3E\"\n  );\n}\n\n.icon-24-plus {\n  background-image: url(\n    \"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='none' stroke='%23666' stroke-linecap='round' stroke-linejoin='round' stroke-miterlimit='10' stroke-width='1px'%3E %3Cpath class='st0' d='M1.5 11.5h20m-10 10v-20'/%3E %3C/svg%3E\"\n  );\n}\n\n.btn-alt .icon-24-plus,\n.btn-alt:hover .icon-24-plus,\n.btn-border:hover .icon-24-plus {\n  background-image: url(\n    \"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='none' stroke='white' stroke-linecap='round' stroke-linejoin='round' stroke-miterlimit='10' stroke-width='1px'%3E %3Cpath class='st0' d='M1.5 11.5h20m-10 10v-20'/%3E %3C/svg%3E\"\n  );\n}\n\n.btn-alt .icon-24-minus,\n.btn-alt:hover .icon-24-minus {\n  background-image: url(\n    \"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='none' stroke='white' stroke-linecap='round' stroke-linejoin='round' stroke-miterlimit='10' stroke-width='1px'%3E %3Cpath d='M1.5 11.5h20'/%3E %3C/svg%3E\"\n  );\n}\n\n.btn-menubar .icon-24-dot {\n  background-image: url(\n    \"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='none' stroke='white' stroke-linecap='round' stroke-linejoin='round' stroke-miterlimit='10' stroke-width='1px'%3E %3Ccircle cx='11.5' cy='11.5' r='6'/%3E %3C/svg%3E\"\n  );\n}\n\n.icon-24-dot.blink {\n  animation: blinker 0.2s ease infinite;\n}\n\n@keyframes blinker {\n  50% {\n    background-image: url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='white'%3E %3Ccircle cx='11.5' cy='11.5' r='6'/%3E %3C/svg%3E\");\n  }\n}\n\n/* .icon-48-close {\n  background-image: svg-load(\n    './icons/48-close.svg',\n    fill=none,\n    stroke=var(--color-highlight),\n    stroke-linecap=round,\n    stroke-linejoin=round,\n    stroke-miterlimit=10,\n    stroke-width=1px\n  );\n}\n\n.btn-icon:hover .icon-48-close {\n  background-image: svg-load(\n    './icons/48-close.svg',\n    stroke=var(--color-bg),\n    stroke-linecap=round,\n    stroke-linejoin=round,\n    stroke-miterlimit=10,\n    stroke-width=1px\n  );\n} */\n\n/* Tools          ------------------------------- */\n\n/* Debug trick -------------------------------\nhttp://qr.ae/ROqymT */\n\n.debug {\n  background-color: rgba(255, 0, 0, 0.2);\n}\n\n.debug * {\n  background-color: rgba(0, 255, 0, 0.2);\n}\n\n.debug * * {\n  background-color: rgba(0, 0, 255, 0.2);\n}\n\n.debug * * * {\n  background-color: rgba(255, 0, 255, 0.2);\n}\n\n.debug * * * * {\n  background-color: rgba(0, 255, 255, 0.2);\n}\n\n.debug * * * * * {\n  background-color: rgba(255, 255, 0, 0.2);\n}\n\n.debug * * * * * * {\n  background-color: rgba(255, 255, 0, 0.2);\n}\n\n.grid {\n  background-size: 20.5rem 0.75rem;\n  background-size: var(--col-width) calc(var(--unit) / 2);\n  background-position: center top;\n  background-image: linear-gradient(\n    rgba(0, 0, 0, 0.05) 0.01rem,\n    transparent 0.09rem\n  ),\n    linear-gradient(90deg, rgba(255, 0, 0, 0.25) 0, transparent 0.25%),\n    linear-gradient(\n    90deg,\n    transparent 50%,\n    rgba(255, 0, 0, 0.25) 50%,\n    transparent 50.25%\n  );\n}\n\n/* Theme          ------------------------------- */\n\n/*\n    Sticky footer\n-------------------------------\nhttp://mystrd.at/modern-clean-css-sticky-footer/\n*/\n\n:root {\n  --footer-height: 0;\n}\n\nhtml {\n  position: relative;\n  height: 100%;\n}\n\nbody {\n  margin: 0 0 0;\n  margin: 0 0 var(--footer-height);\n  height: 100%;\n}\n\nfooter {\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  height: 0;\n  height: var(--footer-height);\n  width: 100%;\n}\n\n#loader-app {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n}\n\n#loader-bar {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  background-color: white;\n  background-color: var(--color-bg);\n}\n\n#app {\n  overflow: hidden;\n}\n\n/*\n    Theme\n-------------------------------\n*/\n\n:root {\n  --header-height: 48px;\n  --header-height: 3rem;\n  --header-height: calc(var(--unit) * 2);\n}\n\n[v-cloak] {\n  display: none;\n}\n\n.container {\n  padding-left: 24px;\n  padding-left: 1.5rem;\n  padding-left: var(--container-padding);\n  padding-right: 24px;\n  padding-right: 1.5rem;\n  padding-right: var(--container-padding);\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.header {\n  box-shadow: rgba(61, 61, 53, 0.25) 4px 4px 16px;\n  box-shadow: rgba(61, 61, 53, 0.25) 4px 4px 16px;\n}\n\n.menubar-infos {\n  padding-top: 0;\n  padding-bottom: 12px;\n  padding-bottom: 0.75rem;\n  padding-bottom: var(--unit-s);\n}\n\n.btn-menubar,.btn-menubar:visited {\n  cursor: pointer;\n  text-decoration: none;\n  border: none;\n  display: inline-block;\n  color: var(--color-bg);\n  background-color: var(--color-transparent);\n  font-weight: 700;\n  height: 48px;\n  height: 3rem;\n}\n\n.btn-menubar:active,.btn-menubar.active {\n  color: var(--color-inverse);\n  background-color: var(--color-alt);\n}\n\n.btn-menubar:hover,.btn-menubar.active:hover {\n  color: var(--color-bg);\n  background-color: var(--color-highlight);\n}\n\n.btn-menubar:disabled,.btn-menubar:disabled:active,.btn-menubar:disabled:hover,.btn-menubar.disabled,.btn-menubar.disabled:active,.btn-menubar.disabled:hover {\n  opacity: 0.25;\n  cursor: default;\n  color: var(--color-bg);\n  background-color: var(--color-transparent);\n  box-shadow: inset 0 0 0 0 grey;\n}\n\n.page {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n}\n\n.main {\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n}\n\n.content {\n  overflow-y: scroll;\n  flex: 1 1 auto;\n}\n\n.messages {\n  bottom: 0;\n}\n\n.dropdown {\n  margin-bottom: 24px;\n  margin-bottom: 1.5rem;\n  margin-bottom: var(--unit);\n  background-color: #f8f7f3;\n  background-color: var(--color-alt);\n}\n\n.menubar-infos {\n  margin-top: 12px;\n  margin-top: 0.75rem;\n  margin-top: var(--unit-s);\n}\n\n.annotation {\n  background-color: rgba(255, 0, 0, 0.5);\n}\n\n.handle {\n  width: 32px;\n  background-color: yellow;\n  cursor: ew-resize;\n}\n\n.handle-right {\n  right: -32px;\n  top: 0;\n  bottom: 0;\n}\n\n.handle-left {\n  left: -32px;\n  top: 0;\n  bottom: 0;\n}\n\n.handle-topleft {\n  top: 0;\n  left: 0;\n  height: 32px;\n}\n\n.handle-bottomright {\n  bottom: 0;\n  right: 0;\n  height: 32px;\n}\n\n.timeline-cursor {\n  left: 50%;\n  transform: translateX(-50%);\n  width: 1px;\n  width: 0.0625rem;\n  width: var(--unit-line);\n  background-color: rgb(0, 162, 255);\n  background-color: var(--color-brand);\n  top: 0;\n  bottom: 0;\n}\n\n.timeline-annotations {\n  z-index: 0;\n}\n\n.annotations {\n  height: 40px;\n}\n\n.annotation {\n  top: 0;\n  bottom: 0;\n  text-align: center;\n}\n\n.annotation.active {\n  z-index: 1;\n  background-color: rgba(255, 0, 0, 1);\n}\n\n.pophover hr {\n  border-top-width: 3px;\n  border-top-width: 0.1875rem;\n  border-top-width: var(--unit-xxs);\n  border-top-style: solid;\n  border-top-color: #f8f7f3;\n  border-top-color: var(--color-alt);\n  margin-bottom: 21px;\n  margin-bottom: 1.3125rem;\n  margin-bottom: calc(var(--unit) - var(--unit-xxs));\n  margin-left: -36px;\n  margin-left: -2.25rem;\n  margin-left: calc(var(--unit-l) * -1);\n  margin-right: -36px;\n  margin-right: -2.25rem;\n  margin-right: calc(var(--unit-l) * -1);\n}\n\n@media (min-width: 42.5em) {\n  --header-height: 3rem;\n  --header-height: calc(var(--unit) * 2);\n\n  .container {\n    width: 42.5rem;\n    width: calc(2 * var(--col-width) + var(--gutter));\n  }\n\n  .menubar-infos {\n    padding-top: 1.125rem;\n    padding-top: var(--unit-m);\n    margin-top: 0;\n  }\n\n  .pophover {\n    width: 39.5rem;\n    width: calc(2 * var(--col-width) - var(--gutter));\n    transform: translate(-50%, 0);\n    top: 3rem;\n    top: var(--header-height);\n    left: 50%;\n    right: auto;\n    bottom: auto;\n    z-index: 2;\n    box-shadow: rgba(61, 61, 53, 0.25) 4px 4px 16px;\n    box-shadow: rgba(61, 61, 53, 0.25) 4px 4px 16px;\n  }\n\n  .messages {\n    width: 39.5rem;\n    width: calc(2 * var(--col-width) - var(--gutter));\n  }\n\n  .dropdown {\n    position: absolute;\n    right: 1.5rem;\n    right: var(--gutter);\n    top: 0;\n  }\n}\n\n@media (min-width: 63em) {\n  .container {\n    width: 63rem;\n    width: calc(3 * var(--col-width) + var(--gutter));\n  }\n}\n\n.truncate-demo {\n  height: 48px;\n  height: 3rem;\n  height: var(--unit-xl);\n}\n\n.transition-bottom-enter-active,\n.transition-bottom-leave-active,\n.transition-fade-enter-active,\n.transition-fade-leave-active,\n.transition-top-enter-active,\n.transition-top-leave-active,\n.transition-top-enter-active .pophover,\n.transition-top-leave-active .pophover {\n  transition: all 0.5s;\n}\n\n.transition-bottom-enter,\n.transition-bottom-leave-to {\n  opacity: 0;\n  margin-bottom: -60px;\n  margin-bottom: -3.75rem;\n  margin-bottom: calc(var(--unit-xxl) * -1);\n}\n\n.transition-fade-enter,\n.transition-fade-leave-to {\n  opacity: 0;\n}\n\n.transition-top-enter,\n.transition-top-leave-to {\n  opacity: 0;\n}\n\n.transition-top-enter .pophover,\n.transition-top-leave-to .pophover {\n  margin-top: -60px;\n  margin-top: -3.75rem;\n  margin-top: calc(var(--unit-xxl) * -1);\n}\n\n/* from https://github.com/PrismJS/prism/blob/gh-pages/themes/prism.css */\n\n:not(pre) > code[class*='language-'] {\n  padding: 0.1em;\n  white-space: normal;\n}\n\n.token.comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n  color: #bcb9af;\n  color: var(--color-neutral);\n}\n\n.token.punctuation {\n  color: #bcb9af;\n  color: var(--color-neutral);\n}\n\n.namespace {\n  opacity: 0.7;\n}\n\n.token.property,\n.token.tag,\n.token.boolean,\n.token.number,\n.token.constant,\n.token.symbol,\n.token.deleted {\n  color: rgba(212, 67, 74, 1);\n}\n\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.builtin,\n.token.inserted {\n  color: rgba(57, 119, 191, 1);\n}\n\n.token.operator,\n.token.entity,\n.token.url,\n.language-css .token.string,\n.style .token.string {\n  color: #a67f59;\n  background: hsla(0, 0%, 100%, 0.5);\n}\n\n.token.atrule,\n.token.attr-value,\n.token.keyword {\n  color: rgba(105, 134, 46, 1);\n}\n\n.token.function {\n  color: #dd4a68;\n}\n\n.token.regex,\n.token.important,\n.token.variable {\n  color: #e90;\n}\n\n.token.important,\n.token.bold {\n  font-weight: bold;\n}\n\n.token.italic {\n  font-style: italic;\n}\n\n.token.entity {\n  cursor: help;\n}\n\n.spinner {\n  margin: 25% auto;\n  width: 160px;\n  width: 10rem;\n  text-align: center;\n}\n\n.spinner > div {\n  width: 24px;\n  width: 1.5rem;\n  width: var(--unit);\n  height: 24px;\n  height: 1.5rem;\n  height: var(--unit);\n  background-color: #3d3d35;\n  background-color: var(--color-inverse);\n  border-radius: 100%;\n  display: inline-block;\n  animation: sk-bouncedelay 1.4s infinite ease-in-out both;\n}\n\n.spinner .bounce1 {\n  animation-delay: -0.32s;\n}\n\n.spinner .bounce2 {\n  animation-delay: -0.16s;\n}\n\n@keyframes sk-bouncedelay {\n  0%,\n  80%,\n  100% {\n    transform: scale(0);\n  }\n\n  50% {\n    transform: scale(1);\n  }\n}\n\n.mediacontroller {\n  transition: all 0.3s;\n}\n\n.mediacontroller-button {\n  height: 36px;\n  height: 2.25rem;\n  height: var(--unit-l);\n  width: 48px;\n  width: 3rem;\n  width: var(--unit-xl);\n  padding: 0;\n  line-height: 1;\n  text-align: center;\n  float: left;\n}\n\n.mediacontroller-counter {\n  height: 36px;\n  height: 2.25rem;\n  height: var(--unit-l);\n  padding: 6px 12px;\n  padding: 0.375rem 0.75rem;\n  padding: var(--unit-xs) var(--unit-s);\n  float: left;\n}\n\n.mediacontroller-progress {\n  position: relative;\n  height: 24px;\n  height: 1.5rem;\n  height: var(--unit);\n  background-color: rgba(248, 247, 243, 0.5);\n  background-color: rgba(248, 247, 243, 0.5);\n}\n\n.mediacontroller-progress.loaded {\n  background-color: #f8f7f3;\n  background-color: var(--color-alt);\n  cursor: ew-resize;\n}\n\n.mediacontroller-progress-bar {\n  background: #f50;\n  background: var(--color-highlight);\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  top: 0;\n\n  /*transition: width 1s;*/\n}\n";
  styleInject(css);

  /**
   * vuex v3.0.1
   * (c) 2017 Evan You
   * @license MIT
   */
  var applyMixin = function (Vue) {
    var version = Number(Vue.version.split('.')[0]);

    if (version >= 2) {
      Vue.mixin({ beforeCreate: vuexInit });
    } else {
      // override init and inject vuex init procedure
      // for 1.x backwards compatibility.
      var _init = Vue.prototype._init;
      Vue.prototype._init = function (options) {
        if ( options === void 0 ) { options = {}; }

        options.init = options.init
          ? [vuexInit].concat(options.init)
          : vuexInit;
        _init.call(this, options);
      };
    }

    /**
     * Vuex init hook, injected into each instances init hooks list.
     */

    function vuexInit () {
      var options = this.$options;
      // store injection
      if (options.store) {
        this.$store = typeof options.store === 'function'
          ? options.store()
          : options.store;
      } else if (options.parent && options.parent.$store) {
        this.$store = options.parent.$store;
      }
    }
  };

  var devtoolHook =
    typeof window !== 'undefined' &&
    window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

  function devtoolPlugin (store) {
    if (!devtoolHook) { return }

    store._devtoolHook = devtoolHook;

    devtoolHook.emit('vuex:init', store);

    devtoolHook.on('vuex:travel-to-state', function (targetState) {
      store.replaceState(targetState);
    });

    store.subscribe(function (mutation, state) {
      devtoolHook.emit('vuex:mutation', mutation, state);
    });
  }

  /**
   * Get the first item that pass the test
   * by second argument function
   *
   * @param {Array} list
   * @param {Function} f
   * @return {*}
   */
  /**
   * Deep copy the given object considering circular structure.
   * This function caches all nested objects and its copies.
   * If it detects circular structure, use cached copy to avoid infinite loop.
   *
   * @param {*} obj
   * @param {Array<Object>} cache
   * @return {*}
   */


  /**
   * forEach for object
   */
  function forEachValue (obj, fn) {
    Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });
  }

  function isObject (obj) {
    return obj !== null && typeof obj === 'object'
  }

  function isPromise (val) {
    return val && typeof val.then === 'function'
  }

  function assert (condition, msg) {
    if (!condition) { throw new Error(("[vuex] " + msg)) }
  }

  var Module = function Module (rawModule, runtime) {
    this.runtime = runtime;
    this._children = Object.create(null);
    this._rawModule = rawModule;
    var rawState = rawModule.state;
    this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};
  };

  var prototypeAccessors$1 = { namespaced: { configurable: true } };

  prototypeAccessors$1.namespaced.get = function () {
    return !!this._rawModule.namespaced
  };

  Module.prototype.addChild = function addChild (key, module) {
    this._children[key] = module;
  };

  Module.prototype.removeChild = function removeChild (key) {
    delete this._children[key];
  };

  Module.prototype.getChild = function getChild (key) {
    return this._children[key]
  };

  Module.prototype.update = function update (rawModule) {
    this._rawModule.namespaced = rawModule.namespaced;
    if (rawModule.actions) {
      this._rawModule.actions = rawModule.actions;
    }
    if (rawModule.mutations) {
      this._rawModule.mutations = rawModule.mutations;
    }
    if (rawModule.getters) {
      this._rawModule.getters = rawModule.getters;
    }
  };

  Module.prototype.forEachChild = function forEachChild (fn) {
    forEachValue(this._children, fn);
  };

  Module.prototype.forEachGetter = function forEachGetter (fn) {
    if (this._rawModule.getters) {
      forEachValue(this._rawModule.getters, fn);
    }
  };

  Module.prototype.forEachAction = function forEachAction (fn) {
    if (this._rawModule.actions) {
      forEachValue(this._rawModule.actions, fn);
    }
  };

  Module.prototype.forEachMutation = function forEachMutation (fn) {
    if (this._rawModule.mutations) {
      forEachValue(this._rawModule.mutations, fn);
    }
  };

  Object.defineProperties( Module.prototype, prototypeAccessors$1 );

  var ModuleCollection = function ModuleCollection (rawRootModule) {
    // register root module (Vuex.Store options)
    this.register([], rawRootModule, false);
  };

  ModuleCollection.prototype.get = function get (path) {
    return path.reduce(function (module, key) {
      return module.getChild(key)
    }, this.root)
  };

  ModuleCollection.prototype.getNamespace = function getNamespace (path) {
    var module = this.root;
    return path.reduce(function (namespace, key) {
      module = module.getChild(key);
      return namespace + (module.namespaced ? key + '/' : '')
    }, '')
  };

  ModuleCollection.prototype.update = function update$1 (rawRootModule) {
    update([], this.root, rawRootModule);
  };

  ModuleCollection.prototype.register = function register (path, rawModule, runtime) {
      var this$1 = this;
      if ( runtime === void 0 ) { runtime = true; }

    if (process.env.NODE_ENV !== 'production') {
      assertRawModule(path, rawModule);
    }

    var newModule = new Module(rawModule, runtime);
    if (path.length === 0) {
      this.root = newModule;
    } else {
      var parent = this.get(path.slice(0, -1));
      parent.addChild(path[path.length - 1], newModule);
    }

    // register nested modules
    if (rawModule.modules) {
      forEachValue(rawModule.modules, function (rawChildModule, key) {
        this$1.register(path.concat(key), rawChildModule, runtime);
      });
    }
  };

  ModuleCollection.prototype.unregister = function unregister (path) {
    var parent = this.get(path.slice(0, -1));
    var key = path[path.length - 1];
    if (!parent.getChild(key).runtime) { return }

    parent.removeChild(key);
  };

  function update (path, targetModule, newModule) {
    if (process.env.NODE_ENV !== 'production') {
      assertRawModule(path, newModule);
    }

    // update target module
    targetModule.update(newModule);

    // update nested modules
    if (newModule.modules) {
      for (var key in newModule.modules) {
        if (!targetModule.getChild(key)) {
          if (process.env.NODE_ENV !== 'production') {
            console.warn(
              "[vuex] trying to add a new module '" + key + "' on hot reloading, " +
              'manual reload is needed'
            );
          }
          return
        }
        update(
          path.concat(key),
          targetModule.getChild(key),
          newModule.modules[key]
        );
      }
    }
  }

  var functionAssert = {
    assert: function (value) { return typeof value === 'function'; },
    expected: 'function'
  };

  var objectAssert = {
    assert: function (value) { return typeof value === 'function' ||
      (typeof value === 'object' && typeof value.handler === 'function'); },
    expected: 'function or object with "handler" function'
  };

  var assertTypes = {
    getters: functionAssert,
    mutations: functionAssert,
    actions: objectAssert
  };

  function assertRawModule (path, rawModule) {
    Object.keys(assertTypes).forEach(function (key) {
      if (!rawModule[key]) { return }

      var assertOptions = assertTypes[key];

      forEachValue(rawModule[key], function (value, type) {
        assert(
          assertOptions.assert(value),
          makeAssertionMessage(path, key, type, value, assertOptions.expected)
        );
      });
    });
  }

  function makeAssertionMessage (path, key, type, value, expected) {
    var buf = key + " should be " + expected + " but \"" + key + "." + type + "\"";
    if (path.length > 0) {
      buf += " in module \"" + (path.join('.')) + "\"";
    }
    buf += " is " + (JSON.stringify(value)) + ".";
    return buf
  }

  var Vue; // bind on install

  var Store = function Store (options) {
    var this$1 = this;
    if ( options === void 0 ) { options = {}; }

    // Auto install if it is not done yet and `window` has `Vue`.
    // To allow users to avoid auto-installation in some cases,
    // this code should be placed here. See #731
    if (!Vue && typeof window !== 'undefined' && window.Vue) {
      install(window.Vue);
    }

    if (process.env.NODE_ENV !== 'production') {
      assert(Vue, "must call Vue.use(Vuex) before creating a store instance.");
      assert(typeof Promise !== 'undefined', "vuex requires a Promise polyfill in this browser.");
      assert(this instanceof Store, "Store must be called with the new operator.");
    }

    var plugins = options.plugins; if ( plugins === void 0 ) { plugins = []; }
    var strict = options.strict; if ( strict === void 0 ) { strict = false; }

    var state = options.state; if ( state === void 0 ) { state = {}; }
    if (typeof state === 'function') {
      state = state() || {};
    }

    // store internal state
    this._committing = false;
    this._actions = Object.create(null);
    this._actionSubscribers = [];
    this._mutations = Object.create(null);
    this._wrappedGetters = Object.create(null);
    this._modules = new ModuleCollection(options);
    this._modulesNamespaceMap = Object.create(null);
    this._subscribers = [];
    this._watcherVM = new Vue();

    // bind commit and dispatch to self
    var store = this;
    var ref = this;
    var dispatch = ref.dispatch;
    var commit = ref.commit;
    this.dispatch = function boundDispatch (type, payload) {
      return dispatch.call(store, type, payload)
    };
    this.commit = function boundCommit (type, payload, options) {
      return commit.call(store, type, payload, options)
    };

    // strict mode
    this.strict = strict;

    // init root module.
    // this also recursively registers all sub-modules
    // and collects all module getters inside this._wrappedGetters
    installModule(this, state, [], this._modules.root);

    // initialize the store vm, which is responsible for the reactivity
    // (also registers _wrappedGetters as computed properties)
    resetStoreVM(this, state);

    // apply plugins
    plugins.forEach(function (plugin) { return plugin(this$1); });

    if (Vue.config.devtools) {
      devtoolPlugin(this);
    }
  };

  var prototypeAccessors = { state: { configurable: true } };

  prototypeAccessors.state.get = function () {
    return this._vm._data.$$state
  };

  prototypeAccessors.state.set = function (v) {
    if (process.env.NODE_ENV !== 'production') {
      assert(false, "Use store.replaceState() to explicit replace store state.");
    }
  };

  Store.prototype.commit = function commit (_type, _payload, _options) {
      var this$1 = this;

    // check object-style commit
    var ref = unifyObjectStyle(_type, _payload, _options);
      var type = ref.type;
      var payload = ref.payload;
      var options = ref.options;

    var mutation = { type: type, payload: payload };
    var entry = this._mutations[type];
    if (!entry) {
      if (process.env.NODE_ENV !== 'production') {
        console.error(("[vuex] unknown mutation type: " + type));
      }
      return
    }
    this._withCommit(function () {
      entry.forEach(function commitIterator (handler) {
        handler(payload);
      });
    });
    this._subscribers.forEach(function (sub) { return sub(mutation, this$1.state); });

    if (
      process.env.NODE_ENV !== 'production' &&
      options && options.silent
    ) {
      console.warn(
        "[vuex] mutation type: " + type + ". Silent option has been removed. " +
        'Use the filter functionality in the vue-devtools'
      );
    }
  };

  Store.prototype.dispatch = function dispatch (_type, _payload) {
      var this$1 = this;

    // check object-style dispatch
    var ref = unifyObjectStyle(_type, _payload);
      var type = ref.type;
      var payload = ref.payload;

    var action = { type: type, payload: payload };
    var entry = this._actions[type];
    if (!entry) {
      if (process.env.NODE_ENV !== 'production') {
        console.error(("[vuex] unknown action type: " + type));
      }
      return
    }

    this._actionSubscribers.forEach(function (sub) { return sub(action, this$1.state); });

    return entry.length > 1
      ? Promise.all(entry.map(function (handler) { return handler(payload); }))
      : entry[0](payload)
  };

  Store.prototype.subscribe = function subscribe (fn) {
    return genericSubscribe(fn, this._subscribers)
  };

  Store.prototype.subscribeAction = function subscribeAction (fn) {
    return genericSubscribe(fn, this._actionSubscribers)
  };

  Store.prototype.watch = function watch (getter, cb, options) {
      var this$1 = this;

    if (process.env.NODE_ENV !== 'production') {
      assert(typeof getter === 'function', "store.watch only accepts a function.");
    }
    return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)
  };

  Store.prototype.replaceState = function replaceState (state) {
      var this$1 = this;

    this._withCommit(function () {
      this$1._vm._data.$$state = state;
    });
  };

  Store.prototype.registerModule = function registerModule (path, rawModule, options) {
      if ( options === void 0 ) { options = {}; }

    if (typeof path === 'string') { path = [path]; }

    if (process.env.NODE_ENV !== 'production') {
      assert(Array.isArray(path), "module path must be a string or an Array.");
      assert(path.length > 0, 'cannot register the root module by using registerModule.');
    }

    this._modules.register(path, rawModule);
    installModule(this, this.state, path, this._modules.get(path), options.preserveState);
    // reset store to update getters...
    resetStoreVM(this, this.state);
  };

  Store.prototype.unregisterModule = function unregisterModule (path) {
      var this$1 = this;

    if (typeof path === 'string') { path = [path]; }

    if (process.env.NODE_ENV !== 'production') {
      assert(Array.isArray(path), "module path must be a string or an Array.");
    }

    this._modules.unregister(path);
    this._withCommit(function () {
      var parentState = getNestedState(this$1.state, path.slice(0, -1));
      Vue.delete(parentState, path[path.length - 1]);
    });
    resetStore(this);
  };

  Store.prototype.hotUpdate = function hotUpdate (newOptions) {
    this._modules.update(newOptions);
    resetStore(this, true);
  };

  Store.prototype._withCommit = function _withCommit (fn) {
    var committing = this._committing;
    this._committing = true;
    fn();
    this._committing = committing;
  };

  Object.defineProperties( Store.prototype, prototypeAccessors );

  function genericSubscribe (fn, subs) {
    if (subs.indexOf(fn) < 0) {
      subs.push(fn);
    }
    return function () {
      var i = subs.indexOf(fn);
      if (i > -1) {
        subs.splice(i, 1);
      }
    }
  }

  function resetStore (store, hot) {
    store._actions = Object.create(null);
    store._mutations = Object.create(null);
    store._wrappedGetters = Object.create(null);
    store._modulesNamespaceMap = Object.create(null);
    var state = store.state;
    // init all modules
    installModule(store, state, [], store._modules.root, true);
    // reset vm
    resetStoreVM(store, state, hot);
  }

  function resetStoreVM (store, state, hot) {
    var oldVm = store._vm;

    // bind store public getters
    store.getters = {};
    var wrappedGetters = store._wrappedGetters;
    var computed = {};
    forEachValue(wrappedGetters, function (fn, key) {
      // use computed to leverage its lazy-caching mechanism
      computed[key] = function () { return fn(store); };
      Object.defineProperty(store.getters, key, {
        get: function () { return store._vm[key]; },
        enumerable: true // for local getters
      });
    });

    // use a Vue instance to store the state tree
    // suppress warnings just in case the user has added
    // some funky global mixins
    var silent = Vue.config.silent;
    Vue.config.silent = true;
    store._vm = new Vue({
      data: {
        $$state: state
      },
      computed: computed
    });
    Vue.config.silent = silent;

    // enable strict mode for new vm
    if (store.strict) {
      enableStrictMode(store);
    }

    if (oldVm) {
      if (hot) {
        // dispatch changes in all subscribed watchers
        // to force getter re-evaluation for hot reloading.
        store._withCommit(function () {
          oldVm._data.$$state = null;
        });
      }
      Vue.nextTick(function () { return oldVm.$destroy(); });
    }
  }

  function installModule (store, rootState, path, module, hot) {
    var isRoot = !path.length;
    var namespace = store._modules.getNamespace(path);

    // register in namespace map
    if (module.namespaced) {
      store._modulesNamespaceMap[namespace] = module;
    }

    // set state
    if (!isRoot && !hot) {
      var parentState = getNestedState(rootState, path.slice(0, -1));
      var moduleName = path[path.length - 1];
      store._withCommit(function () {
        Vue.set(parentState, moduleName, module.state);
      });
    }

    var local = module.context = makeLocalContext(store, namespace, path);

    module.forEachMutation(function (mutation, key) {
      var namespacedType = namespace + key;
      registerMutation(store, namespacedType, mutation, local);
    });

    module.forEachAction(function (action, key) {
      var type = action.root ? key : namespace + key;
      var handler = action.handler || action;
      registerAction(store, type, handler, local);
    });

    module.forEachGetter(function (getter, key) {
      var namespacedType = namespace + key;
      registerGetter(store, namespacedType, getter, local);
    });

    module.forEachChild(function (child, key) {
      installModule(store, rootState, path.concat(key), child, hot);
    });
  }

  /**
   * make localized dispatch, commit, getters and state
   * if there is no namespace, just use root ones
   */
  function makeLocalContext (store, namespace, path) {
    var noNamespace = namespace === '';

    var local = {
      dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {
        var args = unifyObjectStyle(_type, _payload, _options);
        var payload = args.payload;
        var options = args.options;
        var type = args.type;

        if (!options || !options.root) {
          type = namespace + type;
          if (process.env.NODE_ENV !== 'production' && !store._actions[type]) {
            console.error(("[vuex] unknown local action type: " + (args.type) + ", global type: " + type));
            return
          }
        }

        return store.dispatch(type, payload)
      },

      commit: noNamespace ? store.commit : function (_type, _payload, _options) {
        var args = unifyObjectStyle(_type, _payload, _options);
        var payload = args.payload;
        var options = args.options;
        var type = args.type;

        if (!options || !options.root) {
          type = namespace + type;
          if (process.env.NODE_ENV !== 'production' && !store._mutations[type]) {
            console.error(("[vuex] unknown local mutation type: " + (args.type) + ", global type: " + type));
            return
          }
        }

        store.commit(type, payload, options);
      }
    };

    // getters and state object must be gotten lazily
    // because they will be changed by vm update
    Object.defineProperties(local, {
      getters: {
        get: noNamespace
          ? function () { return store.getters; }
          : function () { return makeLocalGetters(store, namespace); }
      },
      state: {
        get: function () { return getNestedState(store.state, path); }
      }
    });

    return local
  }

  function makeLocalGetters (store, namespace) {
    var gettersProxy = {};

    var splitPos = namespace.length;
    Object.keys(store.getters).forEach(function (type) {
      // skip if the target getter is not match this namespace
      if (type.slice(0, splitPos) !== namespace) { return }

      // extract local getter type
      var localType = type.slice(splitPos);

      // Add a port to the getters proxy.
      // Define as getter property because
      // we do not want to evaluate the getters in this time.
      Object.defineProperty(gettersProxy, localType, {
        get: function () { return store.getters[type]; },
        enumerable: true
      });
    });

    return gettersProxy
  }

  function registerMutation (store, type, handler, local) {
    var entry = store._mutations[type] || (store._mutations[type] = []);
    entry.push(function wrappedMutationHandler (payload) {
      handler.call(store, local.state, payload);
    });
  }

  function registerAction (store, type, handler, local) {
    var entry = store._actions[type] || (store._actions[type] = []);
    entry.push(function wrappedActionHandler (payload, cb) {
      var res = handler.call(store, {
        dispatch: local.dispatch,
        commit: local.commit,
        getters: local.getters,
        state: local.state,
        rootGetters: store.getters,
        rootState: store.state
      }, payload, cb);
      if (!isPromise(res)) {
        res = Promise.resolve(res);
      }
      if (store._devtoolHook) {
        return res.catch(function (err) {
          store._devtoolHook.emit('vuex:error', err);
          throw err
        })
      } else {
        return res
      }
    });
  }

  function registerGetter (store, type, rawGetter, local) {
    if (store._wrappedGetters[type]) {
      if (process.env.NODE_ENV !== 'production') {
        console.error(("[vuex] duplicate getter key: " + type));
      }
      return
    }
    store._wrappedGetters[type] = function wrappedGetter (store) {
      return rawGetter(
        local.state, // local state
        local.getters, // local getters
        store.state, // root state
        store.getters // root getters
      )
    };
  }

  function enableStrictMode (store) {
    store._vm.$watch(function () { return this._data.$$state }, function () {
      if (process.env.NODE_ENV !== 'production') {
        assert(store._committing, "Do not mutate vuex store state outside mutation handlers.");
      }
    }, { deep: true, sync: true });
  }

  function getNestedState (state, path) {
    return path.length
      ? path.reduce(function (state, key) { return state[key]; }, state)
      : state
  }

  function unifyObjectStyle (type, payload, options) {
    if (isObject(type) && type.type) {
      options = payload;
      payload = type;
      type = type.type;
    }

    if (process.env.NODE_ENV !== 'production') {
      assert(typeof type === 'string', ("Expects string as the type, but found " + (typeof type) + "."));
    }

    return { type: type, payload: payload, options: options }
  }

  function install (_Vue) {
    if (Vue && _Vue === Vue) {
      if (process.env.NODE_ENV !== 'production') {
        console.error(
          '[vuex] already installed. Vue.use(Vuex) should be called only once.'
        );
      }
      return
    }
    Vue = _Vue;
    applyMixin(Vue);
  }

  var mapState = normalizeNamespace(function (namespace, states) {
    var res = {};
    normalizeMap(states).forEach(function (ref) {
      var key = ref.key;
      var val = ref.val;

      res[key] = function mappedState () {
        var state = this.$store.state;
        var getters = this.$store.getters;
        if (namespace) {
          var module = getModuleByNamespace(this.$store, 'mapState', namespace);
          if (!module) {
            return
          }
          state = module.context.state;
          getters = module.context.getters;
        }
        return typeof val === 'function'
          ? val.call(this, state, getters)
          : state[val]
      };
      // mark vuex getter for devtools
      res[key].vuex = true;
    });
    return res
  });

  var mapMutations = normalizeNamespace(function (namespace, mutations) {
    var res = {};
    normalizeMap(mutations).forEach(function (ref) {
      var key = ref.key;
      var val = ref.val;

      res[key] = function mappedMutation () {
        var arguments$1 = arguments;

        var args = [], len = arguments.length;
        while ( len-- ) { args[ len ] = arguments$1[ len ]; }

        var commit = this.$store.commit;
        if (namespace) {
          var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);
          if (!module) {
            return
          }
          commit = module.context.commit;
        }
        return typeof val === 'function'
          ? val.apply(this, [commit].concat(args))
          : commit.apply(this.$store, [val].concat(args))
      };
    });
    return res
  });

  var mapGetters = normalizeNamespace(function (namespace, getters) {
    var res = {};
    normalizeMap(getters).forEach(function (ref) {
      var key = ref.key;
      var val = ref.val;

      val = namespace + val;
      res[key] = function mappedGetter () {
        if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {
          return
        }
        if (process.env.NODE_ENV !== 'production' && !(val in this.$store.getters)) {
          console.error(("[vuex] unknown getter: " + val));
          return
        }
        return this.$store.getters[val]
      };
      // mark vuex getter for devtools
      res[key].vuex = true;
    });
    return res
  });

  var mapActions = normalizeNamespace(function (namespace, actions) {
    var res = {};
    normalizeMap(actions).forEach(function (ref) {
      var key = ref.key;
      var val = ref.val;

      res[key] = function mappedAction () {
        var arguments$1 = arguments;

        var args = [], len = arguments.length;
        while ( len-- ) { args[ len ] = arguments$1[ len ]; }

        var dispatch = this.$store.dispatch;
        if (namespace) {
          var module = getModuleByNamespace(this.$store, 'mapActions', namespace);
          if (!module) {
            return
          }
          dispatch = module.context.dispatch;
        }
        return typeof val === 'function'
          ? val.apply(this, [dispatch].concat(args))
          : dispatch.apply(this.$store, [val].concat(args))
      };
    });
    return res
  });

  var createNamespacedHelpers = function (namespace) { return ({
    mapState: mapState.bind(null, namespace),
    mapGetters: mapGetters.bind(null, namespace),
    mapMutations: mapMutations.bind(null, namespace),
    mapActions: mapActions.bind(null, namespace)
  }); };

  function normalizeMap (map) {
    return Array.isArray(map)
      ? map.map(function (key) { return ({ key: key, val: key }); })
      : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })
  }

  function normalizeNamespace (fn) {
    return function (namespace, map) {
      if (typeof namespace !== 'string') {
        map = namespace;
        namespace = '';
      } else if (namespace.charAt(namespace.length - 1) !== '/') {
        namespace += '/';
      }
      return fn(namespace, map)
    }
  }

  function getModuleByNamespace (store, helper, namespace) {
    var module = store._modulesNamespaceMap[namespace];
    if (process.env.NODE_ENV !== 'production' && !module) {
      console.error(("[vuex] module namespace not found in " + helper + "(): " + namespace));
    }
    return module
  }

  var index_esm = {
    Store: Store,
    install: install,
    version: '3.0.1',
    mapState: mapState,
    mapMutations: mapMutations,
    mapGetters: mapGetters,
    mapActions: mapActions,
    createNamespacedHelpers: createNamespacedHelpers
  };

  /*!
   * Vue.js v2.5.16
   * (c) 2014-2018 Evan You
   * Released under the MIT License.
   */
  /*  */

  var emptyObject = Object.freeze({});

  // these helpers produces better vm code in JS engines due to their
  // explicitness and function inlining
  function isUndef (v) {
    return v === undefined || v === null
  }

  function isDef (v) {
    return v !== undefined && v !== null
  }

  function isTrue (v) {
    return v === true
  }

  function isFalse (v) {
    return v === false
  }

  /**
   * Check if value is primitive
   */
  function isPrimitive (value) {
    return (
      typeof value === 'string' ||
      typeof value === 'number' ||
      // $flow-disable-line
      typeof value === 'symbol' ||
      typeof value === 'boolean'
    )
  }

  /**
   * Quick object check - this is primarily used to tell
   * Objects from primitive values when we know the value
   * is a JSON-compliant type.
   */
  function isObject$1 (obj) {
    return obj !== null && typeof obj === 'object'
  }

  /**
   * Get the raw type string of a value e.g. [object Object]
   */
  var _toString = Object.prototype.toString;

  function toRawType (value) {
    return _toString.call(value).slice(8, -1)
  }

  /**
   * Strict object type check. Only returns true
   * for plain JavaScript objects.
   */
  function isPlainObject (obj) {
    return _toString.call(obj) === '[object Object]'
  }

  function isRegExp (v) {
    return _toString.call(v) === '[object RegExp]'
  }

  /**
   * Check if val is a valid array index.
   */
  function isValidArrayIndex (val) {
    var n = parseFloat(String(val));
    return n >= 0 && Math.floor(n) === n && isFinite(val)
  }

  /**
   * Convert a value to a string that is actually rendered.
   */
  function toString (val) {
    return val == null
      ? ''
      : typeof val === 'object'
        ? JSON.stringify(val, null, 2)
        : String(val)
  }

  /**
   * Convert a input value to a number for persistence.
   * If the conversion fails, return original string.
   */
  function toNumber (val) {
    var n = parseFloat(val);
    return isNaN(n) ? val : n
  }

  /**
   * Make a map and return a function for checking if a key
   * is in that map.
   */
  function makeMap (
    str,
    expectsLowerCase
  ) {
    var map = Object.create(null);
    var list = str.split(',');
    for (var i = 0; i < list.length; i++) {
      map[list[i]] = true;
    }
    return expectsLowerCase
      ? function (val) { return map[val.toLowerCase()]; }
      : function (val) { return map[val]; }
  }

  /**
   * Check if a tag is a built-in tag.
   */
  var isBuiltInTag = makeMap('slot,component', true);

  /**
   * Check if a attribute is a reserved attribute.
   */
  var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

  /**
   * Remove an item from an array
   */
  function remove (arr, item) {
    if (arr.length) {
      var index = arr.indexOf(item);
      if (index > -1) {
        return arr.splice(index, 1)
      }
    }
  }

  /**
   * Check whether the object has the property.
   */
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  function hasOwn (obj, key) {
    return hasOwnProperty.call(obj, key)
  }

  /**
   * Create a cached version of a pure function.
   */
  function cached (fn) {
    var cache = Object.create(null);
    return (function cachedFn (str) {
      var hit = cache[str];
      return hit || (cache[str] = fn(str))
    })
  }

  /**
   * Camelize a hyphen-delimited string.
   */
  var camelizeRE = /-(\w)/g;
  var camelize = cached(function (str) {
    return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
  });

  /**
   * Capitalize a string.
   */
  var capitalize = cached(function (str) {
    return str.charAt(0).toUpperCase() + str.slice(1)
  });

  /**
   * Hyphenate a camelCase string.
   */
  var hyphenateRE = /\B([A-Z])/g;
  var hyphenate = cached(function (str) {
    return str.replace(hyphenateRE, '-$1').toLowerCase()
  });

  /**
   * Simple bind polyfill for environments that do not support it... e.g.
   * PhantomJS 1.x. Technically we don't need this anymore since native bind is
   * now more performant in most browsers, but removing it would be breaking for
   * code that was able to run in PhantomJS 1.x, so this must be kept for
   * backwards compatibility.
   */

  /* istanbul ignore next */
  function polyfillBind (fn, ctx) {
    function boundFn (a) {
      var l = arguments.length;
      return l
        ? l > 1
          ? fn.apply(ctx, arguments)
          : fn.call(ctx, a)
        : fn.call(ctx)
    }

    boundFn._length = fn.length;
    return boundFn
  }

  function nativeBind (fn, ctx) {
    return fn.bind(ctx)
  }

  var bind = Function.prototype.bind
    ? nativeBind
    : polyfillBind;

  /**
   * Convert an Array-like object to a real Array.
   */
  function toArray (list, start) {
    start = start || 0;
    var i = list.length - start;
    var ret = new Array(i);
    while (i--) {
      ret[i] = list[i + start];
    }
    return ret
  }

  /**
   * Mix properties into target object.
   */
  function extend (to, _from) {
    for (var key in _from) {
      to[key] = _from[key];
    }
    return to
  }

  /**
   * Merge an Array of Objects into a single Object.
   */
  function toObject (arr) {
    var res = {};
    for (var i = 0; i < arr.length; i++) {
      if (arr[i]) {
        extend(res, arr[i]);
      }
    }
    return res
  }

  /**
   * Perform no operation.
   * Stubbing args to make Flow happy without leaving useless transpiled code
   * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)
   */
  function noop (a, b, c) {}

  /**
   * Always return false.
   */
  var no = function (a, b, c) { return false; };

  /**
   * Return same value
   */
  var identity = function (_) { return _; };

  /**
   * Generate a static keys string from compiler modules.
   */


  /**
   * Check if two values are loosely equal - that is,
   * if they are plain objects, do they have the same shape?
   */
  function looseEqual (a, b) {
    if (a === b) { return true }
    var isObjectA = isObject$1(a);
    var isObjectB = isObject$1(b);
    if (isObjectA && isObjectB) {
      try {
        var isArrayA = Array.isArray(a);
        var isArrayB = Array.isArray(b);
        if (isArrayA && isArrayB) {
          return a.length === b.length && a.every(function (e, i) {
            return looseEqual(e, b[i])
          })
        } else if (!isArrayA && !isArrayB) {
          var keysA = Object.keys(a);
          var keysB = Object.keys(b);
          return keysA.length === keysB.length && keysA.every(function (key) {
            return looseEqual(a[key], b[key])
          })
        } else {
          /* istanbul ignore next */
          return false
        }
      } catch (e) {
        /* istanbul ignore next */
        return false
      }
    } else if (!isObjectA && !isObjectB) {
      return String(a) === String(b)
    } else {
      return false
    }
  }

  function looseIndexOf (arr, val) {
    for (var i = 0; i < arr.length; i++) {
      if (looseEqual(arr[i], val)) { return i }
    }
    return -1
  }

  /**
   * Ensure a function is called only once.
   */
  function once (fn) {
    var called = false;
    return function () {
      if (!called) {
        called = true;
        fn.apply(this, arguments);
      }
    }
  }

  var SSR_ATTR = 'data-server-rendered';

  var ASSET_TYPES = [
    'component',
    'directive',
    'filter'
  ];

  var LIFECYCLE_HOOKS = [
    'beforeCreate',
    'created',
    'beforeMount',
    'mounted',
    'beforeUpdate',
    'updated',
    'beforeDestroy',
    'destroyed',
    'activated',
    'deactivated',
    'errorCaptured'
  ];

  /*  */

  var config = ({
    /**
     * Option merge strategies (used in core/util/options)
     */
    // $flow-disable-line
    optionMergeStrategies: Object.create(null),

    /**
     * Whether to suppress warnings.
     */
    silent: false,

    /**
     * Show production mode tip message on boot?
     */
    productionTip: process.env.NODE_ENV !== 'production',

    /**
     * Whether to enable devtools
     */
    devtools: process.env.NODE_ENV !== 'production',

    /**
     * Whether to record perf
     */
    performance: false,

    /**
     * Error handler for watcher errors
     */
    errorHandler: null,

    /**
     * Warn handler for watcher warns
     */
    warnHandler: null,

    /**
     * Ignore certain custom elements
     */
    ignoredElements: [],

    /**
     * Custom user key aliases for v-on
     */
    // $flow-disable-line
    keyCodes: Object.create(null),

    /**
     * Check if a tag is reserved so that it cannot be registered as a
     * component. This is platform-dependent and may be overwritten.
     */
    isReservedTag: no,

    /**
     * Check if an attribute is reserved so that it cannot be used as a component
     * prop. This is platform-dependent and may be overwritten.
     */
    isReservedAttr: no,

    /**
     * Check if a tag is an unknown element.
     * Platform-dependent.
     */
    isUnknownElement: no,

    /**
     * Get the namespace of an element
     */
    getTagNamespace: noop,

    /**
     * Parse the real tag name for the specific platform.
     */
    parsePlatformTagName: identity,

    /**
     * Check if an attribute must be bound using property, e.g. value
     * Platform-dependent.
     */
    mustUseProp: no,

    /**
     * Exposed for legacy reasons
     */
    _lifecycleHooks: LIFECYCLE_HOOKS
  });

  /*  */

  /**
   * Check if a string starts with $ or _
   */
  function isReserved (str) {
    var c = (str + '').charCodeAt(0);
    return c === 0x24 || c === 0x5F
  }

  /**
   * Define a property.
   */
  function def (obj, key, val, enumerable) {
    Object.defineProperty(obj, key, {
      value: val,
      enumerable: !!enumerable,
      writable: true,
      configurable: true
    });
  }

  /**
   * Parse simple path.
   */
  var bailRE = /[^\w.$]/;
  function parsePath (path) {
    if (bailRE.test(path)) {
      return
    }
    var segments = path.split('.');
    return function (obj) {
      for (var i = 0; i < segments.length; i++) {
        if (!obj) { return }
        obj = obj[segments[i]];
      }
      return obj
    }
  }

  /*  */

  // can we use __proto__?
  var hasProto = '__proto__' in {};

  // Browser environment sniffing
  var inBrowser = typeof window !== 'undefined';
  var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
  var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
  var UA = inBrowser && window.navigator.userAgent.toLowerCase();
  var isIE = UA && /msie|trident/.test(UA);
  var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
  var isEdge = UA && UA.indexOf('edge/') > 0;
  var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
  var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
  var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;

  // Firefox has a "watch" function on Object.prototype...
  var nativeWatch = ({}).watch;

  var supportsPassive = false;
  if (inBrowser) {
    try {
      var opts = {};
      Object.defineProperty(opts, 'passive', ({
        get: function get () {
          /* istanbul ignore next */
          supportsPassive = true;
        }
      })); // https://github.com/facebook/flow/issues/285
      window.addEventListener('test-passive', null, opts);
    } catch (e) {}
  }

  // this needs to be lazy-evaled because vue may be required before
  // vue-server-renderer can set VUE_ENV
  var _isServer;
  var isServerRendering = function () {
    if (_isServer === undefined) {
      /* istanbul ignore if */
      if (!inBrowser && !inWeex && typeof global !== 'undefined') {
        // detect presence of vue-server-renderer and avoid
        // Webpack shimming the process
        _isServer = global['process'].env.VUE_ENV === 'server';
      } else {
        _isServer = false;
      }
    }
    return _isServer
  };

  // detect devtools
  var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

  /* istanbul ignore next */
  function isNative (Ctor) {
    return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
  }

  var hasSymbol =
    typeof Symbol !== 'undefined' && isNative(Symbol) &&
    typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

  var _Set;
  /* istanbul ignore if */ // $flow-disable-line
  if (typeof Set !== 'undefined' && isNative(Set)) {
    // use native Set when available.
    _Set = Set;
  } else {
    // a non-standard Set polyfill that only works with primitive keys.
    _Set = (function () {
      function Set () {
        this.set = Object.create(null);
      }
      Set.prototype.has = function has (key) {
        return this.set[key] === true
      };
      Set.prototype.add = function add (key) {
        this.set[key] = true;
      };
      Set.prototype.clear = function clear () {
        this.set = Object.create(null);
      };

      return Set;
    }());
  }

  /*  */

  var warn = noop;
  var tip = noop;
  var generateComponentTrace = (noop); // work around flow check
  var formatComponentName = (noop);

  if (process.env.NODE_ENV !== 'production') {
    var hasConsole = typeof console !== 'undefined';
    var classifyRE = /(?:^|[-_])(\w)/g;
    var classify = function (str) { return str
      .replace(classifyRE, function (c) { return c.toUpperCase(); })
      .replace(/[-_]/g, ''); };

    warn = function (msg, vm) {
      var trace = vm ? generateComponentTrace(vm) : '';

      if (config.warnHandler) {
        config.warnHandler.call(null, msg, vm, trace);
      } else if (hasConsole && (!config.silent)) {
        console.error(("[Vue warn]: " + msg + trace));
      }
    };

    tip = function (msg, vm) {
      if (hasConsole && (!config.silent)) {
        console.warn("[Vue tip]: " + msg + (
          vm ? generateComponentTrace(vm) : ''
        ));
      }
    };

    formatComponentName = function (vm, includeFile) {
      if (vm.$root === vm) {
        return '<Root>'
      }
      var options = typeof vm === 'function' && vm.cid != null
        ? vm.options
        : vm._isVue
          ? vm.$options || vm.constructor.options
          : vm || {};
      var name = options.name || options._componentTag;
      var file = options.__file;
      if (!name && file) {
        var match = file.match(/([^/\\]+)\.vue$/);
        name = match && match[1];
      }

      return (
        (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
        (file && includeFile !== false ? (" at " + file) : '')
      )
    };

    var repeat = function (str, n) {
      var res = '';
      while (n) {
        if (n % 2 === 1) { res += str; }
        if (n > 1) { str += str; }
        n >>= 1;
      }
      return res
    };

    generateComponentTrace = function (vm) {
      if (vm._isVue && vm.$parent) {
        var tree = [];
        var currentRecursiveSequence = 0;
        while (vm) {
          if (tree.length > 0) {
            var last = tree[tree.length - 1];
            if (last.constructor === vm.constructor) {
              currentRecursiveSequence++;
              vm = vm.$parent;
              continue
            } else if (currentRecursiveSequence > 0) {
              tree[tree.length - 1] = [last, currentRecursiveSequence];
              currentRecursiveSequence = 0;
            }
          }
          tree.push(vm);
          vm = vm.$parent;
        }
        return '\n\nfound in\n\n' + tree
          .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
              ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
              : formatComponentName(vm))); })
          .join('\n')
      } else {
        return ("\n\n(found in " + (formatComponentName(vm)) + ")")
      }
    };
  }

  /*  */


  var uid = 0;

  /**
   * A dep is an observable that can have multiple
   * directives subscribing to it.
   */
  var Dep = function Dep () {
    this.id = uid++;
    this.subs = [];
  };

  Dep.prototype.addSub = function addSub (sub) {
    this.subs.push(sub);
  };

  Dep.prototype.removeSub = function removeSub (sub) {
    remove(this.subs, sub);
  };

  Dep.prototype.depend = function depend () {
    if (Dep.target) {
      Dep.target.addDep(this);
    }
  };

  Dep.prototype.notify = function notify () {
    // stabilize the subscriber list first
    var subs = this.subs.slice();
    for (var i = 0, l = subs.length; i < l; i++) {
      subs[i].update();
    }
  };

  // the current target watcher being evaluated.
  // this is globally unique because there could be only one
  // watcher being evaluated at any time.
  Dep.target = null;
  var targetStack = [];

  function pushTarget (_target) {
    if (Dep.target) { targetStack.push(Dep.target); }
    Dep.target = _target;
  }

  function popTarget () {
    Dep.target = targetStack.pop();
  }

  /*  */

  var VNode = function VNode (
    tag,
    data,
    children,
    text,
    elm,
    context,
    componentOptions,
    asyncFactory
  ) {
    this.tag = tag;
    this.data = data;
    this.children = children;
    this.text = text;
    this.elm = elm;
    this.ns = undefined;
    this.context = context;
    this.fnContext = undefined;
    this.fnOptions = undefined;
    this.fnScopeId = undefined;
    this.key = data && data.key;
    this.componentOptions = componentOptions;
    this.componentInstance = undefined;
    this.parent = undefined;
    this.raw = false;
    this.isStatic = false;
    this.isRootInsert = true;
    this.isComment = false;
    this.isCloned = false;
    this.isOnce = false;
    this.asyncFactory = asyncFactory;
    this.asyncMeta = undefined;
    this.isAsyncPlaceholder = false;
  };

  var prototypeAccessors$2 = { child: { configurable: true } };

  // DEPRECATED: alias for componentInstance for backwards compat.
  /* istanbul ignore next */
  prototypeAccessors$2.child.get = function () {
    return this.componentInstance
  };

  Object.defineProperties( VNode.prototype, prototypeAccessors$2 );

  var createEmptyVNode = function (text) {
    if ( text === void 0 ) { text = ''; }

    var node = new VNode();
    node.text = text;
    node.isComment = true;
    return node
  };

  function createTextVNode (val) {
    return new VNode(undefined, undefined, undefined, String(val))
  }

  // optimized shallow clone
  // used for static nodes and slot nodes because they may be reused across
  // multiple renders, cloning them avoids errors when DOM manipulations rely
  // on their elm reference.
  function cloneVNode (vnode) {
    var cloned = new VNode(
      vnode.tag,
      vnode.data,
      vnode.children,
      vnode.text,
      vnode.elm,
      vnode.context,
      vnode.componentOptions,
      vnode.asyncFactory
    );
    cloned.ns = vnode.ns;
    cloned.isStatic = vnode.isStatic;
    cloned.key = vnode.key;
    cloned.isComment = vnode.isComment;
    cloned.fnContext = vnode.fnContext;
    cloned.fnOptions = vnode.fnOptions;
    cloned.fnScopeId = vnode.fnScopeId;
    cloned.isCloned = true;
    return cloned
  }

  /*
   * not type checking this file because flow doesn't play well with
   * dynamically accessing methods on Array prototype
   */

  var arrayProto = Array.prototype;
  var arrayMethods = Object.create(arrayProto);

  var methodsToPatch = [
    'push',
    'pop',
    'shift',
    'unshift',
    'splice',
    'sort',
    'reverse'
  ];

  /**
   * Intercept mutating methods and emit events
   */
  methodsToPatch.forEach(function (method) {
    // cache original method
    var original = arrayProto[method];
    def(arrayMethods, method, function mutator () {
      var arguments$1 = arguments;

      var args = [], len = arguments.length;
      while ( len-- ) { args[ len ] = arguments$1[ len ]; }

      var result = original.apply(this, args);
      var ob = this.__ob__;
      var inserted;
      switch (method) {
        case 'push':
        case 'unshift':
          inserted = args;
          break
        case 'splice':
          inserted = args.slice(2);
          break
      }
      if (inserted) { ob.observeArray(inserted); }
      // notify change
      ob.dep.notify();
      return result
    });
  });

  /*  */

  var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

  /**
   * In some cases we may want to disable observation inside a component's
   * update computation.
   */
  var shouldObserve = true;

  function toggleObserving (value) {
    shouldObserve = value;
  }

  /**
   * Observer class that is attached to each observed
   * object. Once attached, the observer converts the target
   * object's property keys into getter/setters that
   * collect dependencies and dispatch updates.
   */
  var Observer = function Observer (value) {
    this.value = value;
    this.dep = new Dep();
    this.vmCount = 0;
    def(value, '__ob__', this);
    if (Array.isArray(value)) {
      var augment = hasProto
        ? protoAugment
        : copyAugment;
      augment(value, arrayMethods, arrayKeys);
      this.observeArray(value);
    } else {
      this.walk(value);
    }
  };

  /**
   * Walk through each property and convert them into
   * getter/setters. This method should only be called when
   * value type is Object.
   */
  Observer.prototype.walk = function walk (obj) {
    var keys = Object.keys(obj);
    for (var i = 0; i < keys.length; i++) {
      defineReactive(obj, keys[i]);
    }
  };

  /**
   * Observe a list of Array items.
   */
  Observer.prototype.observeArray = function observeArray (items) {
    for (var i = 0, l = items.length; i < l; i++) {
      observe(items[i]);
    }
  };

  // helpers

  /**
   * Augment an target Object or Array by intercepting
   * the prototype chain using __proto__
   */
  function protoAugment (target, src, keys) {
    /* eslint-disable no-proto */
    target.__proto__ = src;
    /* eslint-enable no-proto */
  }

  /**
   * Augment an target Object or Array by defining
   * hidden properties.
   */
  /* istanbul ignore next */
  function copyAugment (target, src, keys) {
    for (var i = 0, l = keys.length; i < l; i++) {
      var key = keys[i];
      def(target, key, src[key]);
    }
  }

  /**
   * Attempt to create an observer instance for a value,
   * returns the new observer if successfully observed,
   * or the existing observer if the value already has one.
   */
  function observe (value, asRootData) {
    if (!isObject$1(value) || value instanceof VNode) {
      return
    }
    var ob;
    if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
      ob = value.__ob__;
    } else if (
      shouldObserve &&
      !isServerRendering() &&
      (Array.isArray(value) || isPlainObject(value)) &&
      Object.isExtensible(value) &&
      !value._isVue
    ) {
      ob = new Observer(value);
    }
    if (asRootData && ob) {
      ob.vmCount++;
    }
    return ob
  }

  /**
   * Define a reactive property on an Object.
   */
  function defineReactive (
    obj,
    key,
    val,
    customSetter,
    shallow
  ) {
    var dep = new Dep();

    var property = Object.getOwnPropertyDescriptor(obj, key);
    if (property && property.configurable === false) {
      return
    }

    // cater for pre-defined getter/setters
    var getter = property && property.get;
    if (!getter && arguments.length === 2) {
      val = obj[key];
    }
    var setter = property && property.set;

    var childOb = !shallow && observe(val);
    Object.defineProperty(obj, key, {
      enumerable: true,
      configurable: true,
      get: function reactiveGetter () {
        var value = getter ? getter.call(obj) : val;
        if (Dep.target) {
          dep.depend();
          if (childOb) {
            childOb.dep.depend();
            if (Array.isArray(value)) {
              dependArray(value);
            }
          }
        }
        return value
      },
      set: function reactiveSetter (newVal) {
        var value = getter ? getter.call(obj) : val;
        /* eslint-disable no-self-compare */
        if (newVal === value || (newVal !== newVal && value !== value)) {
          return
        }
        /* eslint-enable no-self-compare */
        if (process.env.NODE_ENV !== 'production' && customSetter) {
          customSetter();
        }
        if (setter) {
          setter.call(obj, newVal);
        } else {
          val = newVal;
        }
        childOb = !shallow && observe(newVal);
        dep.notify();
      }
    });
  }

  /**
   * Set a property on an object. Adds the new property and
   * triggers change notification if the property doesn't
   * already exist.
   */
  function set (target, key, val) {
    if (process.env.NODE_ENV !== 'production' &&
      (isUndef(target) || isPrimitive(target))
    ) {
      warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
    }
    if (Array.isArray(target) && isValidArrayIndex(key)) {
      target.length = Math.max(target.length, key);
      target.splice(key, 1, val);
      return val
    }
    if (key in target && !(key in Object.prototype)) {
      target[key] = val;
      return val
    }
    var ob = (target).__ob__;
    if (target._isVue || (ob && ob.vmCount)) {
      process.env.NODE_ENV !== 'production' && warn(
        'Avoid adding reactive properties to a Vue instance or its root $data ' +
        'at runtime - declare it upfront in the data option.'
      );
      return val
    }
    if (!ob) {
      target[key] = val;
      return val
    }
    defineReactive(ob.value, key, val);
    ob.dep.notify();
    return val
  }

  /**
   * Delete a property and trigger change if necessary.
   */
  function del (target, key) {
    if (process.env.NODE_ENV !== 'production' &&
      (isUndef(target) || isPrimitive(target))
    ) {
      warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
    }
    if (Array.isArray(target) && isValidArrayIndex(key)) {
      target.splice(key, 1);
      return
    }
    var ob = (target).__ob__;
    if (target._isVue || (ob && ob.vmCount)) {
      process.env.NODE_ENV !== 'production' && warn(
        'Avoid deleting properties on a Vue instance or its root $data ' +
        '- just set it to null.'
      );
      return
    }
    if (!hasOwn(target, key)) {
      return
    }
    delete target[key];
    if (!ob) {
      return
    }
    ob.dep.notify();
  }

  /**
   * Collect dependencies on array elements when the array is touched, since
   * we cannot intercept array element access like property getters.
   */
  function dependArray (value) {
    for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
      e = value[i];
      e && e.__ob__ && e.__ob__.dep.depend();
      if (Array.isArray(e)) {
        dependArray(e);
      }
    }
  }

  /*  */

  /**
   * Option overwriting strategies are functions that handle
   * how to merge a parent option value and a child option
   * value into the final value.
   */
  var strats = config.optionMergeStrategies;

  /**
   * Options with restrictions
   */
  if (process.env.NODE_ENV !== 'production') {
    strats.el = strats.propsData = function (parent, child, vm, key) {
      if (!vm) {
        warn(
          "option \"" + key + "\" can only be used during instance " +
          'creation with the `new` keyword.'
        );
      }
      return defaultStrat(parent, child)
    };
  }

  /**
   * Helper that recursively merges two data objects together.
   */
  function mergeData (to, from) {
    if (!from) { return to }
    var key, toVal, fromVal;
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      key = keys[i];
      toVal = to[key];
      fromVal = from[key];
      if (!hasOwn(to, key)) {
        set(to, key, fromVal);
      } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
        mergeData(toVal, fromVal);
      }
    }
    return to
  }

  /**
   * Data
   */
  function mergeDataOrFn (
    parentVal,
    childVal,
    vm
  ) {
    if (!vm) {
      // in a Vue.extend merge, both should be functions
      if (!childVal) {
        return parentVal
      }
      if (!parentVal) {
        return childVal
      }
      // when parentVal & childVal are both present,
      // we need to return a function that returns the
      // merged result of both functions... no need to
      // check if parentVal is a function here because
      // it has to be a function to pass previous merges.
      return function mergedDataFn () {
        return mergeData(
          typeof childVal === 'function' ? childVal.call(this, this) : childVal,
          typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
        )
      }
    } else {
      return function mergedInstanceDataFn () {
        // instance merge
        var instanceData = typeof childVal === 'function'
          ? childVal.call(vm, vm)
          : childVal;
        var defaultData = typeof parentVal === 'function'
          ? parentVal.call(vm, vm)
          : parentVal;
        if (instanceData) {
          return mergeData(instanceData, defaultData)
        } else {
          return defaultData
        }
      }
    }
  }

  strats.data = function (
    parentVal,
    childVal,
    vm
  ) {
    if (!vm) {
      if (childVal && typeof childVal !== 'function') {
        process.env.NODE_ENV !== 'production' && warn(
          'The "data" option should be a function ' +
          'that returns a per-instance value in component ' +
          'definitions.',
          vm
        );

        return parentVal
      }
      return mergeDataOrFn(parentVal, childVal)
    }

    return mergeDataOrFn(parentVal, childVal, vm)
  };

  /**
   * Hooks and props are merged as arrays.
   */
  function mergeHook (
    parentVal,
    childVal
  ) {
    return childVal
      ? parentVal
        ? parentVal.concat(childVal)
        : Array.isArray(childVal)
          ? childVal
          : [childVal]
      : parentVal
  }

  LIFECYCLE_HOOKS.forEach(function (hook) {
    strats[hook] = mergeHook;
  });

  /**
   * Assets
   *
   * When a vm is present (instance creation), we need to do
   * a three-way merge between constructor options, instance
   * options and parent options.
   */
  function mergeAssets (
    parentVal,
    childVal,
    vm,
    key
  ) {
    var res = Object.create(parentVal || null);
    if (childVal) {
      process.env.NODE_ENV !== 'production' && assertObjectType(key, childVal, vm);
      return extend(res, childVal)
    } else {
      return res
    }
  }

  ASSET_TYPES.forEach(function (type) {
    strats[type + 's'] = mergeAssets;
  });

  /**
   * Watchers.
   *
   * Watchers hashes should not overwrite one
   * another, so we merge them as arrays.
   */
  strats.watch = function (
    parentVal,
    childVal,
    vm,
    key
  ) {
    // work around Firefox's Object.prototype.watch...
    if (parentVal === nativeWatch) { parentVal = undefined; }
    if (childVal === nativeWatch) { childVal = undefined; }
    /* istanbul ignore if */
    if (!childVal) { return Object.create(parentVal || null) }
    if (process.env.NODE_ENV !== 'production') {
      assertObjectType(key, childVal, vm);
    }
    if (!parentVal) { return childVal }
    var ret = {};
    extend(ret, parentVal);
    for (var key$1 in childVal) {
      var parent = ret[key$1];
      var child = childVal[key$1];
      if (parent && !Array.isArray(parent)) {
        parent = [parent];
      }
      ret[key$1] = parent
        ? parent.concat(child)
        : Array.isArray(child) ? child : [child];
    }
    return ret
  };

  /**
   * Other object hashes.
   */
  strats.props =
  strats.methods =
  strats.inject =
  strats.computed = function (
    parentVal,
    childVal,
    vm,
    key
  ) {
    if (childVal && process.env.NODE_ENV !== 'production') {
      assertObjectType(key, childVal, vm);
    }
    if (!parentVal) { return childVal }
    var ret = Object.create(null);
    extend(ret, parentVal);
    if (childVal) { extend(ret, childVal); }
    return ret
  };
  strats.provide = mergeDataOrFn;

  /**
   * Default strategy.
   */
  var defaultStrat = function (parentVal, childVal) {
    return childVal === undefined
      ? parentVal
      : childVal
  };

  /**
   * Validate component names
   */
  function checkComponents (options) {
    for (var key in options.components) {
      validateComponentName(key);
    }
  }

  function validateComponentName (name) {
    if (!/^[a-zA-Z][\w-]*$/.test(name)) {
      warn(
        'Invalid component name: "' + name + '". Component names ' +
        'can only contain alphanumeric characters and the hyphen, ' +
        'and must start with a letter.'
      );
    }
    if (isBuiltInTag(name) || config.isReservedTag(name)) {
      warn(
        'Do not use built-in or reserved HTML elements as component ' +
        'id: ' + name
      );
    }
  }

  /**
   * Ensure all props option syntax are normalized into the
   * Object-based format.
   */
  function normalizeProps (options, vm) {
    var props = options.props;
    if (!props) { return }
    var res = {};
    var i, val, name;
    if (Array.isArray(props)) {
      i = props.length;
      while (i--) {
        val = props[i];
        if (typeof val === 'string') {
          name = camelize(val);
          res[name] = { type: null };
        } else if (process.env.NODE_ENV !== 'production') {
          warn('props must be strings when using array syntax.');
        }
      }
    } else if (isPlainObject(props)) {
      for (var key in props) {
        val = props[key];
        name = camelize(key);
        res[name] = isPlainObject(val)
          ? val
          : { type: val };
      }
    } else if (process.env.NODE_ENV !== 'production') {
      warn(
        "Invalid value for option \"props\": expected an Array or an Object, " +
        "but got " + (toRawType(props)) + ".",
        vm
      );
    }
    options.props = res;
  }

  /**
   * Normalize all injections into Object-based format
   */
  function normalizeInject (options, vm) {
    var inject = options.inject;
    if (!inject) { return }
    var normalized = options.inject = {};
    if (Array.isArray(inject)) {
      for (var i = 0; i < inject.length; i++) {
        normalized[inject[i]] = { from: inject[i] };
      }
    } else if (isPlainObject(inject)) {
      for (var key in inject) {
        var val = inject[key];
        normalized[key] = isPlainObject(val)
          ? extend({ from: key }, val)
          : { from: val };
      }
    } else if (process.env.NODE_ENV !== 'production') {
      warn(
        "Invalid value for option \"inject\": expected an Array or an Object, " +
        "but got " + (toRawType(inject)) + ".",
        vm
      );
    }
  }

  /**
   * Normalize raw function directives into object format.
   */
  function normalizeDirectives (options) {
    var dirs = options.directives;
    if (dirs) {
      for (var key in dirs) {
        var def = dirs[key];
        if (typeof def === 'function') {
          dirs[key] = { bind: def, update: def };
        }
      }
    }
  }

  function assertObjectType (name, value, vm) {
    if (!isPlainObject(value)) {
      warn(
        "Invalid value for option \"" + name + "\": expected an Object, " +
        "but got " + (toRawType(value)) + ".",
        vm
      );
    }
  }

  /**
   * Merge two option objects into a new one.
   * Core utility used in both instantiation and inheritance.
   */
  function mergeOptions (
    parent,
    child,
    vm
  ) {
    if (process.env.NODE_ENV !== 'production') {
      checkComponents(child);
    }

    if (typeof child === 'function') {
      child = child.options;
    }

    normalizeProps(child, vm);
    normalizeInject(child, vm);
    normalizeDirectives(child);
    var extendsFrom = child.extends;
    if (extendsFrom) {
      parent = mergeOptions(parent, extendsFrom, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
    var options = {};
    var key;
    for (key in parent) {
      mergeField(key);
    }
    for (key in child) {
      if (!hasOwn(parent, key)) {
        mergeField(key);
      }
    }
    function mergeField (key) {
      var strat = strats[key] || defaultStrat;
      options[key] = strat(parent[key], child[key], vm, key);
    }
    return options
  }

  /**
   * Resolve an asset.
   * This function is used because child instances need access
   * to assets defined in its ancestor chain.
   */
  function resolveAsset (
    options,
    type,
    id,
    warnMissing
  ) {
    /* istanbul ignore if */
    if (typeof id !== 'string') {
      return
    }
    var assets = options[type];
    // check local registration variations first
    if (hasOwn(assets, id)) { return assets[id] }
    var camelizedId = camelize(id);
    if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
    var PascalCaseId = capitalize(camelizedId);
    if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
    // fallback to prototype chain
    var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
    if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {
      warn(
        'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
        options
      );
    }
    return res
  }

  /*  */

  function validateProp (
    key,
    propOptions,
    propsData,
    vm
  ) {
    var prop = propOptions[key];
    var absent = !hasOwn(propsData, key);
    var value = propsData[key];
    // boolean casting
    var booleanIndex = getTypeIndex(Boolean, prop.type);
    if (booleanIndex > -1) {
      if (absent && !hasOwn(prop, 'default')) {
        value = false;
      } else if (value === '' || value === hyphenate(key)) {
        // only cast empty string / same name to boolean if
        // boolean has higher priority
        var stringIndex = getTypeIndex(String, prop.type);
        if (stringIndex < 0 || booleanIndex < stringIndex) {
          value = true;
        }
      }
    }
    // check default value
    if (value === undefined) {
      value = getPropDefaultValue(vm, prop, key);
      // since the default value is a fresh copy,
      // make sure to observe it.
      var prevShouldObserve = shouldObserve;
      toggleObserving(true);
      observe(value);
      toggleObserving(prevShouldObserve);
    }
    if (
      process.env.NODE_ENV !== 'production' &&
      // skip validation for weex recycle-list child component props
      !(false && isObject$1(value) && ('@binding' in value))
    ) {
      assertProp(prop, key, value, vm, absent);
    }
    return value
  }

  /**
   * Get the default value of a prop.
   */
  function getPropDefaultValue (vm, prop, key) {
    // no default, return undefined
    if (!hasOwn(prop, 'default')) {
      return undefined
    }
    var def = prop.default;
    // warn against non-factory defaults for Object & Array
    if (process.env.NODE_ENV !== 'production' && isObject$1(def)) {
      warn(
        'Invalid default value for prop "' + key + '": ' +
        'Props with type Object/Array must use a factory function ' +
        'to return the default value.',
        vm
      );
    }
    // the raw prop value was also undefined from previous render,
    // return previous default value to avoid unnecessary watcher trigger
    if (vm && vm.$options.propsData &&
      vm.$options.propsData[key] === undefined &&
      vm._props[key] !== undefined
    ) {
      return vm._props[key]
    }
    // call factory function for non-Function types
    // a value is Function if its prototype is function even across different execution context
    return typeof def === 'function' && getType(prop.type) !== 'Function'
      ? def.call(vm)
      : def
  }

  /**
   * Assert whether a prop is valid.
   */
  function assertProp (
    prop,
    name,
    value,
    vm,
    absent
  ) {
    if (prop.required && absent) {
      warn(
        'Missing required prop: "' + name + '"',
        vm
      );
      return
    }
    if (value == null && !prop.required) {
      return
    }
    var type = prop.type;
    var valid = !type || type === true;
    var expectedTypes = [];
    if (type) {
      if (!Array.isArray(type)) {
        type = [type];
      }
      for (var i = 0; i < type.length && !valid; i++) {
        var assertedType = assertType(value, type[i]);
        expectedTypes.push(assertedType.expectedType || '');
        valid = assertedType.valid;
      }
    }
    if (!valid) {
      warn(
        "Invalid prop: type check failed for prop \"" + name + "\"." +
        " Expected " + (expectedTypes.map(capitalize).join(', ')) +
        ", got " + (toRawType(value)) + ".",
        vm
      );
      return
    }
    var validator = prop.validator;
    if (validator) {
      if (!validator(value)) {
        warn(
          'Invalid prop: custom validator check failed for prop "' + name + '".',
          vm
        );
      }
    }
  }

  var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

  function assertType (value, type) {
    var valid;
    var expectedType = getType(type);
    if (simpleCheckRE.test(expectedType)) {
      var t = typeof value;
      valid = t === expectedType.toLowerCase();
      // for primitive wrapper objects
      if (!valid && t === 'object') {
        valid = value instanceof type;
      }
    } else if (expectedType === 'Object') {
      valid = isPlainObject(value);
    } else if (expectedType === 'Array') {
      valid = Array.isArray(value);
    } else {
      valid = value instanceof type;
    }
    return {
      valid: valid,
      expectedType: expectedType
    }
  }

  /**
   * Use function string name to check built-in types,
   * because a simple equality check will fail when running
   * across different vms / iframes.
   */
  function getType (fn) {
    var match = fn && fn.toString().match(/^\s*function (\w+)/);
    return match ? match[1] : ''
  }

  function isSameType (a, b) {
    return getType(a) === getType(b)
  }

  function getTypeIndex (type, expectedTypes) {
    if (!Array.isArray(expectedTypes)) {
      return isSameType(expectedTypes, type) ? 0 : -1
    }
    for (var i = 0, len = expectedTypes.length; i < len; i++) {
      if (isSameType(expectedTypes[i], type)) {
        return i
      }
    }
    return -1
  }

  /*  */

  function handleError (err, vm, info) {
    if (vm) {
      var cur = vm;
      while ((cur = cur.$parent)) {
        var hooks = cur.$options.errorCaptured;
        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;
              if (capture) { return }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  }

  function globalHandleError (err, vm, info) {
    if (config.errorHandler) {
      try {
        return config.errorHandler.call(null, err, vm, info)
      } catch (e) {
        logError(e, null, 'config.errorHandler');
      }
    }
    logError(err, vm, info);
  }

  function logError (err, vm, info) {
    if (process.env.NODE_ENV !== 'production') {
      warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
    }
    /* istanbul ignore else */
    if ((inBrowser || inWeex) && typeof console !== 'undefined') {
      console.error(err);
    } else {
      throw err
    }
  }

  /*  */
  /* globals MessageChannel */

  var callbacks = [];
  var pending = false;

  function flushCallbacks () {
    pending = false;
    var copies = callbacks.slice(0);
    callbacks.length = 0;
    for (var i = 0; i < copies.length; i++) {
      copies[i]();
    }
  }

  // Here we have async deferring wrappers using both microtasks and (macro) tasks.
  // In < 2.4 we used microtasks everywhere, but there are some scenarios where
  // microtasks have too high a priority and fire in between supposedly
  // sequential events (e.g. #4521, #6690) or even between bubbling of the same
  // event (#6566). However, using (macro) tasks everywhere also has subtle problems
  // when state is changed right before repaint (e.g. #6813, out-in transitions).
  // Here we use microtask by default, but expose a way to force (macro) task when
  // needed (e.g. in event handlers attached by v-on).
  var microTimerFunc;
  var macroTimerFunc;
  var useMacroTask = false;

  // Determine (macro) task defer implementation.
  // Technically setImmediate should be the ideal choice, but it's only available
  // in IE. The only polyfill that consistently queues the callback after all DOM
  // events triggered in the same loop is by using MessageChannel.
  /* istanbul ignore if */
  if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
    macroTimerFunc = function () {
      setImmediate(flushCallbacks);
    };
  } else if (typeof MessageChannel !== 'undefined' && (
    isNative(MessageChannel) ||
    // PhantomJS
    MessageChannel.toString() === '[object MessageChannelConstructor]'
  )) {
    var channel = new MessageChannel();
    var port = channel.port2;
    channel.port1.onmessage = flushCallbacks;
    macroTimerFunc = function () {
      port.postMessage(1);
    };
  } else {
    /* istanbul ignore next */
    macroTimerFunc = function () {
      setTimeout(flushCallbacks, 0);
    };
  }

  // Determine microtask defer implementation.
  /* istanbul ignore next, $flow-disable-line */
  if (typeof Promise !== 'undefined' && isNative(Promise)) {
    var p = Promise.resolve();
    microTimerFunc = function () {
      p.then(flushCallbacks);
      // in problematic UIWebViews, Promise.then doesn't completely break, but
      // it can get stuck in a weird state where callbacks are pushed into the
      // microtask queue but the queue isn't being flushed, until the browser
      // needs to do some other work, e.g. handle a timer. Therefore we can
      // "force" the microtask queue to be flushed by adding an empty timer.
      if (isIOS) { setTimeout(noop); }
    };
  } else {
    // fallback to macro
    microTimerFunc = macroTimerFunc;
  }

  /**
   * Wrap a function so that if any code inside triggers state change,
   * the changes are queued using a (macro) task instead of a microtask.
   */
  function withMacroTask (fn) {
    return fn._withTask || (fn._withTask = function () {
      useMacroTask = true;
      var res = fn.apply(null, arguments);
      useMacroTask = false;
      return res
    })
  }

  function nextTick (cb, ctx) {
    var _resolve;
    callbacks.push(function () {
      if (cb) {
        try {
          cb.call(ctx);
        } catch (e) {
          handleError(e, ctx, 'nextTick');
        }
      } else if (_resolve) {
        _resolve(ctx);
      }
    });
    if (!pending) {
      pending = true;
      if (useMacroTask) {
        macroTimerFunc();
      } else {
        microTimerFunc();
      }
    }
    // $flow-disable-line
    if (!cb && typeof Promise !== 'undefined') {
      return new Promise(function (resolve) {
        _resolve = resolve;
      })
    }
  }

  /*  */

  /* not type checking this file because flow doesn't play well with Proxy */

  var initProxy;

  if (process.env.NODE_ENV !== 'production') {
    var allowedGlobals = makeMap(
      'Infinity,undefined,NaN,isFinite,isNaN,' +
      'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
      'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
      'require' // for Webpack/Browserify
    );

    var warnNonPresent = function (target, key) {
      warn(
        "Property or method \"" + key + "\" is not defined on the instance but " +
        'referenced during render. Make sure that this property is reactive, ' +
        'either in the data option, or for class-based components, by ' +
        'initializing the property. ' +
        'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
        target
      );
    };

    var hasProxy =
      typeof Proxy !== 'undefined' && isNative(Proxy);

    if (hasProxy) {
      var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
      config.keyCodes = new Proxy(config.keyCodes, {
        set: function set (target, key, value) {
          if (isBuiltInModifier(key)) {
            warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
            return false
          } else {
            target[key] = value;
            return true
          }
        }
      });
    }

    var hasHandler = {
      has: function has (target, key) {
        var has = key in target;
        var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';
        if (!has && !isAllowed) {
          warnNonPresent(target, key);
        }
        return has || !isAllowed
      }
    };

    var getHandler = {
      get: function get (target, key) {
        if (typeof key === 'string' && !(key in target)) {
          warnNonPresent(target, key);
        }
        return target[key]
      }
    };

    initProxy = function initProxy (vm) {
      if (hasProxy) {
        // determine which proxy handler to use
        var options = vm.$options;
        var handlers = options.render && options.render._withStripped
          ? getHandler
          : hasHandler;
        vm._renderProxy = new Proxy(vm, handlers);
      } else {
        vm._renderProxy = vm;
      }
    };
  }

  /*  */

  var seenObjects = new _Set();

  /**
   * Recursively traverse an object to evoke all converted
   * getters, so that every nested property inside the object
   * is collected as a "deep" dependency.
   */
  function traverse (val) {
    _traverse(val, seenObjects);
    seenObjects.clear();
  }

  function _traverse (val, seen) {
    var i, keys;
    var isA = Array.isArray(val);
    if ((!isA && !isObject$1(val)) || Object.isFrozen(val) || val instanceof VNode) {
      return
    }
    if (val.__ob__) {
      var depId = val.__ob__.dep.id;
      if (seen.has(depId)) {
        return
      }
      seen.add(depId);
    }
    if (isA) {
      i = val.length;
      while (i--) { _traverse(val[i], seen); }
    } else {
      keys = Object.keys(val);
      i = keys.length;
      while (i--) { _traverse(val[keys[i]], seen); }
    }
  }

  var mark;
  var measure;

  if (process.env.NODE_ENV !== 'production') {
    var perf = inBrowser && window.performance;
    /* istanbul ignore if */
    if (
      perf &&
      perf.mark &&
      perf.measure &&
      perf.clearMarks &&
      perf.clearMeasures
    ) {
      mark = function (tag) { return perf.mark(tag); };
      measure = function (name, startTag, endTag) {
        perf.measure(name, startTag, endTag);
        perf.clearMarks(startTag);
        perf.clearMarks(endTag);
        perf.clearMeasures(name);
      };
    }
  }

  /*  */

  var normalizeEvent = cached(function (name) {
    var passive = name.charAt(0) === '&';
    name = passive ? name.slice(1) : name;
    var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
    name = once$$1 ? name.slice(1) : name;
    var capture = name.charAt(0) === '!';
    name = capture ? name.slice(1) : name;
    return {
      name: name,
      once: once$$1,
      capture: capture,
      passive: passive
    }
  });

  function createFnInvoker (fns) {
    function invoker () {
      var arguments$1 = arguments;

      var fns = invoker.fns;
      if (Array.isArray(fns)) {
        var cloned = fns.slice();
        for (var i = 0; i < cloned.length; i++) {
          cloned[i].apply(null, arguments$1);
        }
      } else {
        // return handler return value for single handlers
        return fns.apply(null, arguments)
      }
    }
    invoker.fns = fns;
    return invoker
  }

  function updateListeners (
    on,
    oldOn,
    add,
    remove$$1,
    vm
  ) {
    var name, def, cur, old, event;
    for (name in on) {
      def = cur = on[name];
      old = oldOn[name];
      event = normalizeEvent(name);
      /* istanbul ignore if */
      if (isUndef(cur)) {
        process.env.NODE_ENV !== 'production' && warn(
          "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
          vm
        );
      } else if (isUndef(old)) {
        if (isUndef(cur.fns)) {
          cur = on[name] = createFnInvoker(cur);
        }
        add(event.name, cur, event.once, event.capture, event.passive, event.params);
      } else if (cur !== old) {
        old.fns = cur;
        on[name] = old;
      }
    }
    for (name in oldOn) {
      if (isUndef(on[name])) {
        event = normalizeEvent(name);
        remove$$1(event.name, oldOn[name], event.capture);
      }
    }
  }

  /*  */

  function mergeVNodeHook (def, hookKey, hook) {
    if (def instanceof VNode) {
      def = def.data.hook || (def.data.hook = {});
    }
    var invoker;
    var oldHook = def[hookKey];

    function wrappedHook () {
      hook.apply(this, arguments);
      // important: remove merged hook to ensure it's called only once
      // and prevent memory leak
      remove(invoker.fns, wrappedHook);
    }

    if (isUndef(oldHook)) {
      // no existing hook
      invoker = createFnInvoker([wrappedHook]);
    } else {
      /* istanbul ignore if */
      if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
        // already a merged invoker
        invoker = oldHook;
        invoker.fns.push(wrappedHook);
      } else {
        // existing plain hook
        invoker = createFnInvoker([oldHook, wrappedHook]);
      }
    }

    invoker.merged = true;
    def[hookKey] = invoker;
  }

  /*  */

  function extractPropsFromVNodeData (
    data,
    Ctor,
    tag
  ) {
    // we are only extracting raw values here.
    // validation and default values are handled in the child
    // component itself.
    var propOptions = Ctor.options.props;
    if (isUndef(propOptions)) {
      return
    }
    var res = {};
    var attrs = data.attrs;
    var props = data.props;
    if (isDef(attrs) || isDef(props)) {
      for (var key in propOptions) {
        var altKey = hyphenate(key);
        if (process.env.NODE_ENV !== 'production') {
          var keyInLowerCase = key.toLowerCase();
          if (
            key !== keyInLowerCase &&
            attrs && hasOwn(attrs, keyInLowerCase)
          ) {
            tip(
              "Prop \"" + keyInLowerCase + "\" is passed to component " +
              (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
              " \"" + key + "\". " +
              "Note that HTML attributes are case-insensitive and camelCased " +
              "props need to use their kebab-case equivalents when using in-DOM " +
              "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
            );
          }
        }
        checkProp(res, props, key, altKey, true) ||
        checkProp(res, attrs, key, altKey, false);
      }
    }
    return res
  }

  function checkProp (
    res,
    hash,
    key,
    altKey,
    preserve
  ) {
    if (isDef(hash)) {
      if (hasOwn(hash, key)) {
        res[key] = hash[key];
        if (!preserve) {
          delete hash[key];
        }
        return true
      } else if (hasOwn(hash, altKey)) {
        res[key] = hash[altKey];
        if (!preserve) {
          delete hash[altKey];
        }
        return true
      }
    }
    return false
  }

  /*  */

  // The template compiler attempts to minimize the need for normalization by
  // statically analyzing the template at compile time.
  //
  // For plain HTML markup, normalization can be completely skipped because the
  // generated render function is guaranteed to return Array<VNode>. There are
  // two cases where extra normalization is needed:

  // 1. When the children contains components - because a functional component
  // may return an Array instead of a single root. In this case, just a simple
  // normalization is needed - if any child is an Array, we flatten the whole
  // thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
  // because functional components already normalize their own children.
  function simpleNormalizeChildren (children) {
    for (var i = 0; i < children.length; i++) {
      if (Array.isArray(children[i])) {
        return Array.prototype.concat.apply([], children)
      }
    }
    return children
  }

  // 2. When the children contains constructs that always generated nested Arrays,
  // e.g. <template>, <slot>, v-for, or when the children is provided by user
  // with hand-written render functions / JSX. In such cases a full normalization
  // is needed to cater to all possible types of children values.
  function normalizeChildren (children) {
    return isPrimitive(children)
      ? [createTextVNode(children)]
      : Array.isArray(children)
        ? normalizeArrayChildren(children)
        : undefined
  }

  function isTextNode (node) {
    return isDef(node) && isDef(node.text) && isFalse(node.isComment)
  }

  function normalizeArrayChildren (children, nestedIndex) {
    var res = [];
    var i, c, lastIndex, last;
    for (i = 0; i < children.length; i++) {
      c = children[i];
      if (isUndef(c) || typeof c === 'boolean') { continue }
      lastIndex = res.length - 1;
      last = res[lastIndex];
      //  nested
      if (Array.isArray(c)) {
        if (c.length > 0) {
          c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
          // merge adjacent text nodes
          if (isTextNode(c[0]) && isTextNode(last)) {
            res[lastIndex] = createTextVNode(last.text + (c[0]).text);
            c.shift();
          }
          res.push.apply(res, c);
        }
      } else if (isPrimitive(c)) {
        if (isTextNode(last)) {
          // merge adjacent text nodes
          // this is necessary for SSR hydration because text nodes are
          // essentially merged when rendered to HTML strings
          res[lastIndex] = createTextVNode(last.text + c);
        } else if (c !== '') {
          // convert primitive to vnode
          res.push(createTextVNode(c));
        }
      } else {
        if (isTextNode(c) && isTextNode(last)) {
          // merge adjacent text nodes
          res[lastIndex] = createTextVNode(last.text + c.text);
        } else {
          // default key for nested array children (likely generated by v-for)
          if (isTrue(children._isVList) &&
            isDef(c.tag) &&
            isUndef(c.key) &&
            isDef(nestedIndex)) {
            c.key = "__vlist" + nestedIndex + "_" + i + "__";
          }
          res.push(c);
        }
      }
    }
    return res
  }

  /*  */

  function ensureCtor (comp, base) {
    if (
      comp.__esModule ||
      (hasSymbol && comp[Symbol.toStringTag] === 'Module')
    ) {
      comp = comp.default;
    }
    return isObject$1(comp)
      ? base.extend(comp)
      : comp
  }

  function createAsyncPlaceholder (
    factory,
    data,
    context,
    children,
    tag
  ) {
    var node = createEmptyVNode();
    node.asyncFactory = factory;
    node.asyncMeta = { data: data, context: context, children: children, tag: tag };
    return node
  }

  function resolveAsyncComponent (
    factory,
    baseCtor,
    context
  ) {
    if (isTrue(factory.error) && isDef(factory.errorComp)) {
      return factory.errorComp
    }

    if (isDef(factory.resolved)) {
      return factory.resolved
    }

    if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
      return factory.loadingComp
    }

    if (isDef(factory.contexts)) {
      // already pending
      factory.contexts.push(context);
    } else {
      var contexts = factory.contexts = [context];
      var sync = true;

      var forceRender = function () {
        for (var i = 0, l = contexts.length; i < l; i++) {
          contexts[i].$forceUpdate();
        }
      };

      var resolve = once(function (res) {
        // cache resolved
        factory.resolved = ensureCtor(res, baseCtor);
        // invoke callbacks only if this is not a synchronous resolve
        // (async resolves are shimmed as synchronous during SSR)
        if (!sync) {
          forceRender();
        }
      });

      var reject = once(function (reason) {
        process.env.NODE_ENV !== 'production' && warn(
          "Failed to resolve async component: " + (String(factory)) +
          (reason ? ("\nReason: " + reason) : '')
        );
        if (isDef(factory.errorComp)) {
          factory.error = true;
          forceRender();
        }
      });

      var res = factory(resolve, reject);

      if (isObject$1(res)) {
        if (typeof res.then === 'function') {
          // () => Promise
          if (isUndef(factory.resolved)) {
            res.then(resolve, reject);
          }
        } else if (isDef(res.component) && typeof res.component.then === 'function') {
          res.component.then(resolve, reject);

          if (isDef(res.error)) {
            factory.errorComp = ensureCtor(res.error, baseCtor);
          }

          if (isDef(res.loading)) {
            factory.loadingComp = ensureCtor(res.loading, baseCtor);
            if (res.delay === 0) {
              factory.loading = true;
            } else {
              setTimeout(function () {
                if (isUndef(factory.resolved) && isUndef(factory.error)) {
                  factory.loading = true;
                  forceRender();
                }
              }, res.delay || 200);
            }
          }

          if (isDef(res.timeout)) {
            setTimeout(function () {
              if (isUndef(factory.resolved)) {
                reject(
                  process.env.NODE_ENV !== 'production'
                    ? ("timeout (" + (res.timeout) + "ms)")
                    : null
                );
              }
            }, res.timeout);
          }
        }
      }

      sync = false;
      // return in case resolved synchronously
      return factory.loading
        ? factory.loadingComp
        : factory.resolved
    }
  }

  /*  */

  function isAsyncPlaceholder (node) {
    return node.isComment && node.asyncFactory
  }

  /*  */

  function getFirstComponentChild (children) {
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var c = children[i];
        if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
          return c
        }
      }
    }
  }

  /*  */

  /*  */

  function initEvents (vm) {
    vm._events = Object.create(null);
    vm._hasHookEvent = false;
    // init parent attached events
    var listeners = vm.$options._parentListeners;
    if (listeners) {
      updateComponentListeners(vm, listeners);
    }
  }

  var target;

  function add (event, fn, once) {
    if (once) {
      target.$once(event, fn);
    } else {
      target.$on(event, fn);
    }
  }

  function remove$1 (event, fn) {
    target.$off(event, fn);
  }

  function updateComponentListeners (
    vm,
    listeners,
    oldListeners
  ) {
    target = vm;
    updateListeners(listeners, oldListeners || {}, add, remove$1, vm);
    target = undefined;
  }

  function eventsMixin (Vue) {
    var hookRE = /^hook:/;
    Vue.prototype.$on = function (event, fn) {
      var this$1 = this;

      var vm = this;
      if (Array.isArray(event)) {
        for (var i = 0, l = event.length; i < l; i++) {
          this$1.$on(event[i], fn);
        }
      } else {
        (vm._events[event] || (vm._events[event] = [])).push(fn);
        // optimize hook:event cost by using a boolean flag marked at registration
        // instead of a hash lookup
        if (hookRE.test(event)) {
          vm._hasHookEvent = true;
        }
      }
      return vm
    };

    Vue.prototype.$once = function (event, fn) {
      var vm = this;
      function on () {
        vm.$off(event, on);
        fn.apply(vm, arguments);
      }
      on.fn = fn;
      vm.$on(event, on);
      return vm
    };

    Vue.prototype.$off = function (event, fn) {
      var this$1 = this;

      var vm = this;
      // all
      if (!arguments.length) {
        vm._events = Object.create(null);
        return vm
      }
      // array of events
      if (Array.isArray(event)) {
        for (var i = 0, l = event.length; i < l; i++) {
          this$1.$off(event[i], fn);
        }
        return vm
      }
      // specific event
      var cbs = vm._events[event];
      if (!cbs) {
        return vm
      }
      if (!fn) {
        vm._events[event] = null;
        return vm
      }
      if (fn) {
        // specific handler
        var cb;
        var i$1 = cbs.length;
        while (i$1--) {
          cb = cbs[i$1];
          if (cb === fn || cb.fn === fn) {
            cbs.splice(i$1, 1);
            break
          }
        }
      }
      return vm
    };

    Vue.prototype.$emit = function (event) {
      var vm = this;
      if (process.env.NODE_ENV !== 'production') {
        var lowerCaseEvent = event.toLowerCase();
        if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
          tip(
            "Event \"" + lowerCaseEvent + "\" is emitted in component " +
            (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
            "Note that HTML attributes are case-insensitive and you cannot use " +
            "v-on to listen to camelCase events when using in-DOM templates. " +
            "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
          );
        }
      }
      var cbs = vm._events[event];
      if (cbs) {
        cbs = cbs.length > 1 ? toArray(cbs) : cbs;
        var args = toArray(arguments, 1);
        for (var i = 0, l = cbs.length; i < l; i++) {
          try {
            cbs[i].apply(vm, args);
          } catch (e) {
            handleError(e, vm, ("event handler for \"" + event + "\""));
          }
        }
      }
      return vm
    };
  }

  /*  */



  /**
   * Runtime helper for resolving raw children VNodes into a slot object.
   */
  function resolveSlots (
    children,
    context
  ) {
    var slots = {};
    if (!children) {
      return slots
    }
    for (var i = 0, l = children.length; i < l; i++) {
      var child = children[i];
      var data = child.data;
      // remove slot attribute if the node is resolved as a Vue slot node
      if (data && data.attrs && data.attrs.slot) {
        delete data.attrs.slot;
      }
      // named slots should only be respected if the vnode was rendered in the
      // same context.
      if ((child.context === context || child.fnContext === context) &&
        data && data.slot != null
      ) {
        var name = data.slot;
        var slot = (slots[name] || (slots[name] = []));
        if (child.tag === 'template') {
          slot.push.apply(slot, child.children || []);
        } else {
          slot.push(child);
        }
      } else {
        (slots.default || (slots.default = [])).push(child);
      }
    }
    // ignore slots that contains only whitespace
    for (var name$1 in slots) {
      if (slots[name$1].every(isWhitespace)) {
        delete slots[name$1];
      }
    }
    return slots
  }

  function isWhitespace (node) {
    return (node.isComment && !node.asyncFactory) || node.text === ' '
  }

  function resolveScopedSlots (
    fns, // see flow/vnode
    res
  ) {
    res = res || {};
    for (var i = 0; i < fns.length; i++) {
      if (Array.isArray(fns[i])) {
        resolveScopedSlots(fns[i], res);
      } else {
        res[fns[i].key] = fns[i].fn;
      }
    }
    return res
  }

  /*  */

  var activeInstance = null;
  var isUpdatingChildComponent = false;

  function initLifecycle (vm) {
    var options = vm.$options;

    // locate first non-abstract parent
    var parent = options.parent;
    if (parent && !options.abstract) {
      while (parent.$options.abstract && parent.$parent) {
        parent = parent.$parent;
      }
      parent.$children.push(vm);
    }

    vm.$parent = parent;
    vm.$root = parent ? parent.$root : vm;

    vm.$children = [];
    vm.$refs = {};

    vm._watcher = null;
    vm._inactive = null;
    vm._directInactive = false;
    vm._isMounted = false;
    vm._isDestroyed = false;
    vm._isBeingDestroyed = false;
  }

  function lifecycleMixin (Vue) {
    Vue.prototype._update = function (vnode, hydrating) {
      var vm = this;
      if (vm._isMounted) {
        callHook(vm, 'beforeUpdate');
      }
      var prevEl = vm.$el;
      var prevVnode = vm._vnode;
      var prevActiveInstance = activeInstance;
      activeInstance = vm;
      vm._vnode = vnode;
      // Vue.prototype.__patch__ is injected in entry points
      // based on the rendering backend used.
      if (!prevVnode) {
        // initial render
        vm.$el = vm.__patch__(
          vm.$el, vnode, hydrating, false /* removeOnly */,
          vm.$options._parentElm,
          vm.$options._refElm
        );
        // no need for the ref nodes after initial patch
        // this prevents keeping a detached DOM tree in memory (#5851)
        vm.$options._parentElm = vm.$options._refElm = null;
      } else {
        // updates
        vm.$el = vm.__patch__(prevVnode, vnode);
      }
      activeInstance = prevActiveInstance;
      // update __vue__ reference
      if (prevEl) {
        prevEl.__vue__ = null;
      }
      if (vm.$el) {
        vm.$el.__vue__ = vm;
      }
      // if parent is an HOC, update its $el as well
      if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
        vm.$parent.$el = vm.$el;
      }
      // updated hook is called by the scheduler to ensure that children are
      // updated in a parent's updated hook.
    };

    Vue.prototype.$forceUpdate = function () {
      var vm = this;
      if (vm._watcher) {
        vm._watcher.update();
      }
    };

    Vue.prototype.$destroy = function () {
      var vm = this;
      if (vm._isBeingDestroyed) {
        return
      }
      callHook(vm, 'beforeDestroy');
      vm._isBeingDestroyed = true;
      // remove self from parent
      var parent = vm.$parent;
      if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
        remove(parent.$children, vm);
      }
      // teardown watchers
      if (vm._watcher) {
        vm._watcher.teardown();
      }
      var i = vm._watchers.length;
      while (i--) {
        vm._watchers[i].teardown();
      }
      // remove reference from data ob
      // frozen object may not have observer.
      if (vm._data.__ob__) {
        vm._data.__ob__.vmCount--;
      }
      // call the last hook...
      vm._isDestroyed = true;
      // invoke destroy hooks on current rendered tree
      vm.__patch__(vm._vnode, null);
      // fire destroyed hook
      callHook(vm, 'destroyed');
      // turn off all instance listeners.
      vm.$off();
      // remove __vue__ reference
      if (vm.$el) {
        vm.$el.__vue__ = null;
      }
      // release circular reference (#6759)
      if (vm.$vnode) {
        vm.$vnode.parent = null;
      }
    };
  }

  function mountComponent (
    vm,
    el,
    hydrating
  ) {
    vm.$el = el;
    if (!vm.$options.render) {
      vm.$options.render = createEmptyVNode;
      if (process.env.NODE_ENV !== 'production') {
        /* istanbul ignore if */
        if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
          vm.$options.el || el) {
          warn(
            'You are using the runtime-only build of Vue where the template ' +
            'compiler is not available. Either pre-compile the templates into ' +
            'render functions, or use the compiler-included build.',
            vm
          );
        } else {
          warn(
            'Failed to mount component: template or render function not defined.',
            vm
          );
        }
      }
    }
    callHook(vm, 'beforeMount');

    var updateComponent;
    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
      updateComponent = function () {
        var name = vm._name;
        var id = vm._uid;
        var startTag = "vue-perf-start:" + id;
        var endTag = "vue-perf-end:" + id;

        mark(startTag);
        var vnode = vm._render();
        mark(endTag);
        measure(("vue " + name + " render"), startTag, endTag);

        mark(startTag);
        vm._update(vnode, hydrating);
        mark(endTag);
        measure(("vue " + name + " patch"), startTag, endTag);
      };
    } else {
      updateComponent = function () {
        vm._update(vm._render(), hydrating);
      };
    }

    // we set this to vm._watcher inside the watcher's constructor
    // since the watcher's initial patch may call $forceUpdate (e.g. inside child
    // component's mounted hook), which relies on vm._watcher being already defined
    new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */);
    hydrating = false;

    // manually mounted instance, call mounted on self
    // mounted is called for render-created child components in its inserted hook
    if (vm.$vnode == null) {
      vm._isMounted = true;
      callHook(vm, 'mounted');
    }
    return vm
  }

  function updateChildComponent (
    vm,
    propsData,
    listeners,
    parentVnode,
    renderChildren
  ) {
    if (process.env.NODE_ENV !== 'production') {
      isUpdatingChildComponent = true;
    }

    // determine whether component has slot children
    // we need to do this before overwriting $options._renderChildren
    var hasChildren = !!(
      renderChildren ||               // has new static slots
      vm.$options._renderChildren ||  // has old static slots
      parentVnode.data.scopedSlots || // has new scoped slots
      vm.$scopedSlots !== emptyObject // has old scoped slots
    );

    vm.$options._parentVnode = parentVnode;
    vm.$vnode = parentVnode; // update vm's placeholder node without re-render

    if (vm._vnode) { // update child tree's parent
      vm._vnode.parent = parentVnode;
    }
    vm.$options._renderChildren = renderChildren;

    // update $attrs and $listeners hash
    // these are also reactive so they may trigger child update if the child
    // used them during render
    vm.$attrs = parentVnode.data.attrs || emptyObject;
    vm.$listeners = listeners || emptyObject;

    // update props
    if (propsData && vm.$options.props) {
      toggleObserving(false);
      var props = vm._props;
      var propKeys = vm.$options._propKeys || [];
      for (var i = 0; i < propKeys.length; i++) {
        var key = propKeys[i];
        var propOptions = vm.$options.props; // wtf flow?
        props[key] = validateProp(key, propOptions, propsData, vm);
      }
      toggleObserving(true);
      // keep a copy of raw propsData
      vm.$options.propsData = propsData;
    }

    // update listeners
    listeners = listeners || emptyObject;
    var oldListeners = vm.$options._parentListeners;
    vm.$options._parentListeners = listeners;
    updateComponentListeners(vm, listeners, oldListeners);

    // resolve slots + force update if has children
    if (hasChildren) {
      vm.$slots = resolveSlots(renderChildren, parentVnode.context);
      vm.$forceUpdate();
    }

    if (process.env.NODE_ENV !== 'production') {
      isUpdatingChildComponent = false;
    }
  }

  function isInInactiveTree (vm) {
    while (vm && (vm = vm.$parent)) {
      if (vm._inactive) { return true }
    }
    return false
  }

  function activateChildComponent (vm, direct) {
    if (direct) {
      vm._directInactive = false;
      if (isInInactiveTree(vm)) {
        return
      }
    } else if (vm._directInactive) {
      return
    }
    if (vm._inactive || vm._inactive === null) {
      vm._inactive = false;
      for (var i = 0; i < vm.$children.length; i++) {
        activateChildComponent(vm.$children[i]);
      }
      callHook(vm, 'activated');
    }
  }

  function deactivateChildComponent (vm, direct) {
    if (direct) {
      vm._directInactive = true;
      if (isInInactiveTree(vm)) {
        return
      }
    }
    if (!vm._inactive) {
      vm._inactive = true;
      for (var i = 0; i < vm.$children.length; i++) {
        deactivateChildComponent(vm.$children[i]);
      }
      callHook(vm, 'deactivated');
    }
  }

  function callHook (vm, hook) {
    // #7573 disable dep collection when invoking lifecycle hooks
    pushTarget();
    var handlers = vm.$options[hook];
    if (handlers) {
      for (var i = 0, j = handlers.length; i < j; i++) {
        try {
          handlers[i].call(vm);
        } catch (e) {
          handleError(e, vm, (hook + " hook"));
        }
      }
    }
    if (vm._hasHookEvent) {
      vm.$emit('hook:' + hook);
    }
    popTarget();
  }

  /*  */


  var MAX_UPDATE_COUNT = 100;

  var queue = [];
  var activatedChildren = [];
  var has = {};
  var circular = {};
  var waiting = false;
  var flushing = false;
  var index = 0;

  /**
   * Reset the scheduler's state.
   */
  function resetSchedulerState () {
    index = queue.length = activatedChildren.length = 0;
    has = {};
    if (process.env.NODE_ENV !== 'production') {
      circular = {};
    }
    waiting = flushing = false;
  }

  /**
   * Flush both queues and run the watchers.
   */
  function flushSchedulerQueue () {
    flushing = true;
    var watcher, id;

    // Sort queue before flush.
    // This ensures that:
    // 1. Components are updated from parent to child. (because parent is always
    //    created before the child)
    // 2. A component's user watchers are run before its render watcher (because
    //    user watchers are created before the render watcher)
    // 3. If a component is destroyed during a parent component's watcher run,
    //    its watchers can be skipped.
    queue.sort(function (a, b) { return a.id - b.id; });

    // do not cache length because more watchers might be pushed
    // as we run existing watchers
    for (index = 0; index < queue.length; index++) {
      watcher = queue[index];
      id = watcher.id;
      has[id] = null;
      watcher.run();
      // in dev build, check and stop circular updates.
      if (process.env.NODE_ENV !== 'production' && has[id] != null) {
        circular[id] = (circular[id] || 0) + 1;
        if (circular[id] > MAX_UPDATE_COUNT) {
          warn(
            'You may have an infinite update loop ' + (
              watcher.user
                ? ("in watcher with expression \"" + (watcher.expression) + "\"")
                : "in a component render function."
            ),
            watcher.vm
          );
          break
        }
      }
    }

    // keep copies of post queues before resetting state
    var activatedQueue = activatedChildren.slice();
    var updatedQueue = queue.slice();

    resetSchedulerState();

    // call component updated and activated hooks
    callActivatedHooks(activatedQueue);
    callUpdatedHooks(updatedQueue);

    // devtool hook
    /* istanbul ignore if */
    if (devtools && config.devtools) {
      devtools.emit('flush');
    }
  }

  function callUpdatedHooks (queue) {
    var i = queue.length;
    while (i--) {
      var watcher = queue[i];
      var vm = watcher.vm;
      if (vm._watcher === watcher && vm._isMounted) {
        callHook(vm, 'updated');
      }
    }
  }

  /**
   * Queue a kept-alive component that was activated during patch.
   * The queue will be processed after the entire tree has been patched.
   */
  function queueActivatedComponent (vm) {
    // setting _inactive to false here so that a render function can
    // rely on checking whether it's in an inactive tree (e.g. router-view)
    vm._inactive = false;
    activatedChildren.push(vm);
  }

  function callActivatedHooks (queue) {
    for (var i = 0; i < queue.length; i++) {
      queue[i]._inactive = true;
      activateChildComponent(queue[i], true /* true */);
    }
  }

  /**
   * Push a watcher into the watcher queue.
   * Jobs with duplicate IDs will be skipped unless it's
   * pushed when the queue is being flushed.
   */
  function queueWatcher (watcher) {
    var id = watcher.id;
    if (has[id] == null) {
      has[id] = true;
      if (!flushing) {
        queue.push(watcher);
      } else {
        // if already flushing, splice the watcher based on its id
        // if already past its id, it will be run next immediately.
        var i = queue.length - 1;
        while (i > index && queue[i].id > watcher.id) {
          i--;
        }
        queue.splice(i + 1, 0, watcher);
      }
      // queue the flush
      if (!waiting) {
        waiting = true;
        nextTick(flushSchedulerQueue);
      }
    }
  }

  /*  */

  var uid$1 = 0;

  /**
   * A watcher parses an expression, collects dependencies,
   * and fires callback when the expression value changes.
   * This is used for both the $watch() api and directives.
   */
  var Watcher = function Watcher (
    vm,
    expOrFn,
    cb,
    options,
    isRenderWatcher
  ) {
    this.vm = vm;
    if (isRenderWatcher) {
      vm._watcher = this;
    }
    vm._watchers.push(this);
    // options
    if (options) {
      this.deep = !!options.deep;
      this.user = !!options.user;
      this.lazy = !!options.lazy;
      this.sync = !!options.sync;
    } else {
      this.deep = this.user = this.lazy = this.sync = false;
    }
    this.cb = cb;
    this.id = ++uid$1; // uid for batching
    this.active = true;
    this.dirty = this.lazy; // for lazy watchers
    this.deps = [];
    this.newDeps = [];
    this.depIds = new _Set();
    this.newDepIds = new _Set();
    this.expression = process.env.NODE_ENV !== 'production'
      ? expOrFn.toString()
      : '';
    // parse expression for getter
    if (typeof expOrFn === 'function') {
      this.getter = expOrFn;
    } else {
      this.getter = parsePath(expOrFn);
      if (!this.getter) {
        this.getter = function () {};
        process.env.NODE_ENV !== 'production' && warn(
          "Failed watching path: \"" + expOrFn + "\" " +
          'Watcher only accepts simple dot-delimited paths. ' +
          'For full control, use a function instead.',
          vm
        );
      }
    }
    this.value = this.lazy
      ? undefined
      : this.get();
  };

  /**
   * Evaluate the getter, and re-collect dependencies.
   */
  Watcher.prototype.get = function get () {
    pushTarget(this);
    var value;
    var vm = this.vm;
    try {
      value = this.getter.call(vm, vm);
    } catch (e) {
      if (this.user) {
        handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
      } else {
        throw e
      }
    } finally {
      // "touch" every property so they are all tracked as
      // dependencies for deep watching
      if (this.deep) {
        traverse(value);
      }
      popTarget();
      this.cleanupDeps();
    }
    return value
  };

  /**
   * Add a dependency to this directive.
   */
  Watcher.prototype.addDep = function addDep (dep) {
    var id = dep.id;
    if (!this.newDepIds.has(id)) {
      this.newDepIds.add(id);
      this.newDeps.push(dep);
      if (!this.depIds.has(id)) {
        dep.addSub(this);
      }
    }
  };

  /**
   * Clean up for dependency collection.
   */
  Watcher.prototype.cleanupDeps = function cleanupDeps () {
      var this$1 = this;

    var i = this.deps.length;
    while (i--) {
      var dep = this$1.deps[i];
      if (!this$1.newDepIds.has(dep.id)) {
        dep.removeSub(this$1);
      }
    }
    var tmp = this.depIds;
    this.depIds = this.newDepIds;
    this.newDepIds = tmp;
    this.newDepIds.clear();
    tmp = this.deps;
    this.deps = this.newDeps;
    this.newDeps = tmp;
    this.newDeps.length = 0;
  };

  /**
   * Subscriber interface.
   * Will be called when a dependency changes.
   */
  Watcher.prototype.update = function update () {
    /* istanbul ignore else */
    if (this.lazy) {
      this.dirty = true;
    } else if (this.sync) {
      this.run();
    } else {
      queueWatcher(this);
    }
  };

  /**
   * Scheduler job interface.
   * Will be called by the scheduler.
   */
  Watcher.prototype.run = function run () {
    if (this.active) {
      var value = this.get();
      if (
        value !== this.value ||
        // Deep watchers and watchers on Object/Arrays should fire even
        // when the value is the same, because the value may
        // have mutated.
        isObject$1(value) ||
        this.deep
      ) {
        // set new value
        var oldValue = this.value;
        this.value = value;
        if (this.user) {
          try {
            this.cb.call(this.vm, value, oldValue);
          } catch (e) {
            handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
          }
        } else {
          this.cb.call(this.vm, value, oldValue);
        }
      }
    }
  };

  /**
   * Evaluate the value of the watcher.
   * This only gets called for lazy watchers.
   */
  Watcher.prototype.evaluate = function evaluate () {
    this.value = this.get();
    this.dirty = false;
  };

  /**
   * Depend on all deps collected by this watcher.
   */
  Watcher.prototype.depend = function depend () {
      var this$1 = this;

    var i = this.deps.length;
    while (i--) {
      this$1.deps[i].depend();
    }
  };

  /**
   * Remove self from all dependencies' subscriber list.
   */
  Watcher.prototype.teardown = function teardown () {
      var this$1 = this;

    if (this.active) {
      // remove self from vm's watcher list
      // this is a somewhat expensive operation so we skip it
      // if the vm is being destroyed.
      if (!this.vm._isBeingDestroyed) {
        remove(this.vm._watchers, this);
      }
      var i = this.deps.length;
      while (i--) {
        this$1.deps[i].removeSub(this$1);
      }
      this.active = false;
    }
  };

  /*  */

  var sharedPropertyDefinition = {
    enumerable: true,
    configurable: true,
    get: noop,
    set: noop
  };

  function proxy (target, sourceKey, key) {
    sharedPropertyDefinition.get = function proxyGetter () {
      return this[sourceKey][key]
    };
    sharedPropertyDefinition.set = function proxySetter (val) {
      this[sourceKey][key] = val;
    };
    Object.defineProperty(target, key, sharedPropertyDefinition);
  }

  function initState (vm) {
    vm._watchers = [];
    var opts = vm.$options;
    if (opts.props) { initProps(vm, opts.props); }
    if (opts.methods) { initMethods(vm, opts.methods); }
    if (opts.data) {
      initData(vm);
    } else {
      observe(vm._data = {}, true /* asRootData */);
    }
    if (opts.computed) { initComputed(vm, opts.computed); }
    if (opts.watch && opts.watch !== nativeWatch) {
      initWatch(vm, opts.watch);
    }
  }

  function initProps (vm, propsOptions) {
    var propsData = vm.$options.propsData || {};
    var props = vm._props = {};
    // cache prop keys so that future props updates can iterate using Array
    // instead of dynamic object key enumeration.
    var keys = vm.$options._propKeys = [];
    var isRoot = !vm.$parent;
    // root instance props should be converted
    if (!isRoot) {
      toggleObserving(false);
    }
    var loop = function ( key ) {
      keys.push(key);
      var value = validateProp(key, propsOptions, propsData, vm);
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        var hyphenatedKey = hyphenate(key);
        if (isReservedAttribute(hyphenatedKey) ||
            config.isReservedAttr(hyphenatedKey)) {
          warn(
            ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
            vm
          );
        }
        defineReactive(props, key, value, function () {
          if (vm.$parent && !isUpdatingChildComponent) {
            warn(
              "Avoid mutating a prop directly since the value will be " +
              "overwritten whenever the parent component re-renders. " +
              "Instead, use a data or computed property based on the prop's " +
              "value. Prop being mutated: \"" + key + "\"",
              vm
            );
          }
        });
      } else {
        defineReactive(props, key, value);
      }
      // static props are already proxied on the component's prototype
      // during Vue.extend(). We only need to proxy props defined at
      // instantiation here.
      if (!(key in vm)) {
        proxy(vm, "_props", key);
      }
    };

    for (var key in propsOptions) { loop( key ); }
    toggleObserving(true);
  }

  function initData (vm) {
    var data = vm.$options.data;
    data = vm._data = typeof data === 'function'
      ? getData(data, vm)
      : data || {};
    if (!isPlainObject(data)) {
      data = {};
      process.env.NODE_ENV !== 'production' && warn(
        'data functions should return an object:\n' +
        'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
        vm
      );
    }
    // proxy data on instance
    var keys = Object.keys(data);
    var props = vm.$options.props;
    var methods = vm.$options.methods;
    var i = keys.length;
    while (i--) {
      var key = keys[i];
      if (process.env.NODE_ENV !== 'production') {
        if (methods && hasOwn(methods, key)) {
          warn(
            ("Method \"" + key + "\" has already been defined as a data property."),
            vm
          );
        }
      }
      if (props && hasOwn(props, key)) {
        process.env.NODE_ENV !== 'production' && warn(
          "The data property \"" + key + "\" is already declared as a prop. " +
          "Use prop default value instead.",
          vm
        );
      } else if (!isReserved(key)) {
        proxy(vm, "_data", key);
      }
    }
    // observe data
    observe(data, true /* asRootData */);
  }

  function getData (data, vm) {
    // #7573 disable dep collection when invoking data getters
    pushTarget();
    try {
      return data.call(vm, vm)
    } catch (e) {
      handleError(e, vm, "data()");
      return {}
    } finally {
      popTarget();
    }
  }

  var computedWatcherOptions = { lazy: true };

  function initComputed (vm, computed) {
    // $flow-disable-line
    var watchers = vm._computedWatchers = Object.create(null);
    // computed properties are just getters during SSR
    var isSSR = isServerRendering();

    for (var key in computed) {
      var userDef = computed[key];
      var getter = typeof userDef === 'function' ? userDef : userDef.get;
      if (process.env.NODE_ENV !== 'production' && getter == null) {
        warn(
          ("Getter is missing for computed property \"" + key + "\"."),
          vm
        );
      }

      if (!isSSR) {
        // create internal watcher for the computed property.
        watchers[key] = new Watcher(
          vm,
          getter || noop,
          noop,
          computedWatcherOptions
        );
      }

      // component-defined computed properties are already defined on the
      // component prototype. We only need to define computed properties defined
      // at instantiation here.
      if (!(key in vm)) {
        defineComputed(vm, key, userDef);
      } else if (process.env.NODE_ENV !== 'production') {
        if (key in vm.$data) {
          warn(("The computed property \"" + key + "\" is already defined in data."), vm);
        } else if (vm.$options.props && key in vm.$options.props) {
          warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
        }
      }
    }
  }

  function defineComputed (
    target,
    key,
    userDef
  ) {
    var shouldCache = !isServerRendering();
    if (typeof userDef === 'function') {
      sharedPropertyDefinition.get = shouldCache
        ? createComputedGetter(key)
        : userDef;
      sharedPropertyDefinition.set = noop;
    } else {
      sharedPropertyDefinition.get = userDef.get
        ? shouldCache && userDef.cache !== false
          ? createComputedGetter(key)
          : userDef.get
        : noop;
      sharedPropertyDefinition.set = userDef.set
        ? userDef.set
        : noop;
    }
    if (process.env.NODE_ENV !== 'production' &&
        sharedPropertyDefinition.set === noop) {
      sharedPropertyDefinition.set = function () {
        warn(
          ("Computed property \"" + key + "\" was assigned to but it has no setter."),
          this
        );
      };
    }
    Object.defineProperty(target, key, sharedPropertyDefinition);
  }

  function createComputedGetter (key) {
    return function computedGetter () {
      var watcher = this._computedWatchers && this._computedWatchers[key];
      if (watcher) {
        if (watcher.dirty) {
          watcher.evaluate();
        }
        if (Dep.target) {
          watcher.depend();
        }
        return watcher.value
      }
    }
  }

  function initMethods (vm, methods) {
    var props = vm.$options.props;
    for (var key in methods) {
      if (process.env.NODE_ENV !== 'production') {
        if (methods[key] == null) {
          warn(
            "Method \"" + key + "\" has an undefined value in the component definition. " +
            "Did you reference the function correctly?",
            vm
          );
        }
        if (props && hasOwn(props, key)) {
          warn(
            ("Method \"" + key + "\" has already been defined as a prop."),
            vm
          );
        }
        if ((key in vm) && isReserved(key)) {
          warn(
            "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
            "Avoid defining component methods that start with _ or $."
          );
        }
      }
      vm[key] = methods[key] == null ? noop : bind(methods[key], vm);
    }
  }

  function initWatch (vm, watch) {
    for (var key in watch) {
      var handler = watch[key];
      if (Array.isArray(handler)) {
        for (var i = 0; i < handler.length; i++) {
          createWatcher(vm, key, handler[i]);
        }
      } else {
        createWatcher(vm, key, handler);
      }
    }
  }

  function createWatcher (
    vm,
    expOrFn,
    handler,
    options
  ) {
    if (isPlainObject(handler)) {
      options = handler;
      handler = handler.handler;
    }
    if (typeof handler === 'string') {
      handler = vm[handler];
    }
    return vm.$watch(expOrFn, handler, options)
  }

  function stateMixin (Vue) {
    // flow somehow has problems with directly declared definition object
    // when using Object.defineProperty, so we have to procedurally build up
    // the object here.
    var dataDef = {};
    dataDef.get = function () { return this._data };
    var propsDef = {};
    propsDef.get = function () { return this._props };
    if (process.env.NODE_ENV !== 'production') {
      dataDef.set = function (newData) {
        warn(
          'Avoid replacing instance root $data. ' +
          'Use nested data properties instead.',
          this
        );
      };
      propsDef.set = function () {
        warn("$props is readonly.", this);
      };
    }
    Object.defineProperty(Vue.prototype, '$data', dataDef);
    Object.defineProperty(Vue.prototype, '$props', propsDef);

    Vue.prototype.$set = set;
    Vue.prototype.$delete = del;

    Vue.prototype.$watch = function (
      expOrFn,
      cb,
      options
    ) {
      var vm = this;
      if (isPlainObject(cb)) {
        return createWatcher(vm, expOrFn, cb, options)
      }
      options = options || {};
      options.user = true;
      var watcher = new Watcher(vm, expOrFn, cb, options);
      if (options.immediate) {
        cb.call(vm, watcher.value);
      }
      return function unwatchFn () {
        watcher.teardown();
      }
    };
  }

  /*  */

  function initProvide (vm) {
    var provide = vm.$options.provide;
    if (provide) {
      vm._provided = typeof provide === 'function'
        ? provide.call(vm)
        : provide;
    }
  }

  function initInjections (vm) {
    var result = resolveInject(vm.$options.inject, vm);
    if (result) {
      toggleObserving(false);
      Object.keys(result).forEach(function (key) {
        /* istanbul ignore else */
        if (process.env.NODE_ENV !== 'production') {
          defineReactive(vm, key, result[key], function () {
            warn(
              "Avoid mutating an injected value directly since the changes will be " +
              "overwritten whenever the provided component re-renders. " +
              "injection being mutated: \"" + key + "\"",
              vm
            );
          });
        } else {
          defineReactive(vm, key, result[key]);
        }
      });
      toggleObserving(true);
    }
  }

  function resolveInject (inject, vm) {
    if (inject) {
      // inject is :any because flow is not smart enough to figure out cached
      var result = Object.create(null);
      var keys = hasSymbol
        ? Reflect.ownKeys(inject).filter(function (key) {
          /* istanbul ignore next */
          return Object.getOwnPropertyDescriptor(inject, key).enumerable
        })
        : Object.keys(inject);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var provideKey = inject[key].from;
        var source = vm;
        while (source) {
          if (source._provided && hasOwn(source._provided, provideKey)) {
            result[key] = source._provided[provideKey];
            break
          }
          source = source.$parent;
        }
        if (!source) {
          if ('default' in inject[key]) {
            var provideDefault = inject[key].default;
            result[key] = typeof provideDefault === 'function'
              ? provideDefault.call(vm)
              : provideDefault;
          } else if (process.env.NODE_ENV !== 'production') {
            warn(("Injection \"" + key + "\" not found"), vm);
          }
        }
      }
      return result
    }
  }

  /*  */

  /**
   * Runtime helper for rendering v-for lists.
   */
  function renderList (
    val,
    render
  ) {
    var ret, i, l, keys, key;
    if (Array.isArray(val) || typeof val === 'string') {
      ret = new Array(val.length);
      for (i = 0, l = val.length; i < l; i++) {
        ret[i] = render(val[i], i);
      }
    } else if (typeof val === 'number') {
      ret = new Array(val);
      for (i = 0; i < val; i++) {
        ret[i] = render(i + 1, i);
      }
    } else if (isObject$1(val)) {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
    if (isDef(ret)) {
      (ret)._isVList = true;
    }
    return ret
  }

  /*  */

  /**
   * Runtime helper for rendering <slot>
   */
  function renderSlot (
    name,
    fallback,
    props,
    bindObject
  ) {
    var scopedSlotFn = this.$scopedSlots[name];
    var nodes;
    if (scopedSlotFn) { // scoped slot
      props = props || {};
      if (bindObject) {
        if (process.env.NODE_ENV !== 'production' && !isObject$1(bindObject)) {
          warn(
            'slot v-bind without argument expects an Object',
            this
          );
        }
        props = extend(extend({}, bindObject), props);
      }
      nodes = scopedSlotFn(props) || fallback;
    } else {
      var slotNodes = this.$slots[name];
      // warn duplicate slot usage
      if (slotNodes) {
        if (process.env.NODE_ENV !== 'production' && slotNodes._rendered) {
          warn(
            "Duplicate presence of slot \"" + name + "\" found in the same render tree " +
            "- this will likely cause render errors.",
            this
          );
        }
        slotNodes._rendered = true;
      }
      nodes = slotNodes || fallback;
    }

    var target = props && props.slot;
    if (target) {
      return this.$createElement('template', { slot: target }, nodes)
    } else {
      return nodes
    }
  }

  /*  */

  /**
   * Runtime helper for resolving filters
   */
  function resolveFilter (id) {
    return resolveAsset(this.$options, 'filters', id, true) || identity
  }

  /*  */

  function isKeyNotMatch (expect, actual) {
    if (Array.isArray(expect)) {
      return expect.indexOf(actual) === -1
    } else {
      return expect !== actual
    }
  }

  /**
   * Runtime helper for checking keyCodes from config.
   * exposed as Vue.prototype._k
   * passing in eventKeyName as last argument separately for backwards compat
   */
  function checkKeyCodes (
    eventKeyCode,
    key,
    builtInKeyCode,
    eventKeyName,
    builtInKeyName
  ) {
    var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
    if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
      return isKeyNotMatch(builtInKeyName, eventKeyName)
    } else if (mappedKeyCode) {
      return isKeyNotMatch(mappedKeyCode, eventKeyCode)
    } else if (eventKeyName) {
      return hyphenate(eventKeyName) !== key
    }
  }

  /*  */

  /**
   * Runtime helper for merging v-bind="object" into a VNode's data.
   */
  function bindObjectProps (
    data,
    tag,
    value,
    asProp,
    isSync
  ) {
    if (value) {
      if (!isObject$1(value)) {
        process.env.NODE_ENV !== 'production' && warn(
          'v-bind without argument expects an Object or Array value',
          this
        );
      } else {
        if (Array.isArray(value)) {
          value = toObject(value);
        }
        var hash;
        var loop = function ( key ) {
          if (
            key === 'class' ||
            key === 'style' ||
            isReservedAttribute(key)
          ) {
            hash = data;
          } else {
            var type = data.attrs && data.attrs.type;
            hash = asProp || config.mustUseProp(tag, type, key)
              ? data.domProps || (data.domProps = {})
              : data.attrs || (data.attrs = {});
          }
          if (!(key in hash)) {
            hash[key] = value[key];

            if (isSync) {
              var on = data.on || (data.on = {});
              on[("update:" + key)] = function ($event) {
                value[key] = $event;
              };
            }
          }
        };

        for (var key in value) { loop( key ); }
      }
    }
    return data
  }

  /*  */

  /**
   * Runtime helper for rendering static trees.
   */
  function renderStatic (
    index,
    isInFor
  ) {
    var cached = this._staticTrees || (this._staticTrees = []);
    var tree = cached[index];
    // if has already-rendered static tree and not inside v-for,
    // we can reuse the same tree.
    if (tree && !isInFor) {
      return tree
    }
    // otherwise, render a fresh tree.
    tree = cached[index] = this.$options.staticRenderFns[index].call(
      this._renderProxy,
      null,
      this // for render fns generated for functional component templates
    );
    markStatic(tree, ("__static__" + index), false);
    return tree
  }

  /**
   * Runtime helper for v-once.
   * Effectively it means marking the node as static with a unique key.
   */
  function markOnce (
    tree,
    index,
    key
  ) {
    markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
    return tree
  }

  function markStatic (
    tree,
    key,
    isOnce
  ) {
    if (Array.isArray(tree)) {
      for (var i = 0; i < tree.length; i++) {
        if (tree[i] && typeof tree[i] !== 'string') {
          markStaticNode(tree[i], (key + "_" + i), isOnce);
        }
      }
    } else {
      markStaticNode(tree, key, isOnce);
    }
  }

  function markStaticNode (node, key, isOnce) {
    node.isStatic = true;
    node.key = key;
    node.isOnce = isOnce;
  }

  /*  */

  function bindObjectListeners (data, value) {
    if (value) {
      if (!isPlainObject(value)) {
        process.env.NODE_ENV !== 'production' && warn(
          'v-on without argument expects an Object value',
          this
        );
      } else {
        var on = data.on = data.on ? extend({}, data.on) : {};
        for (var key in value) {
          var existing = on[key];
          var ours = value[key];
          on[key] = existing ? [].concat(existing, ours) : ours;
        }
      }
    }
    return data
  }

  /*  */

  function installRenderHelpers (target) {
    target._o = markOnce;
    target._n = toNumber;
    target._s = toString;
    target._l = renderList;
    target._t = renderSlot;
    target._q = looseEqual;
    target._i = looseIndexOf;
    target._m = renderStatic;
    target._f = resolveFilter;
    target._k = checkKeyCodes;
    target._b = bindObjectProps;
    target._v = createTextVNode;
    target._e = createEmptyVNode;
    target._u = resolveScopedSlots;
    target._g = bindObjectListeners;
  }

  /*  */

  function FunctionalRenderContext (
    data,
    props,
    children,
    parent,
    Ctor
  ) {
    var options = Ctor.options;
    // ensure the createElement function in functional components
    // gets a unique context - this is necessary for correct named slot check
    var contextVm;
    if (hasOwn(parent, '_uid')) {
      contextVm = Object.create(parent);
      // $flow-disable-line
      contextVm._original = parent;
    } else {
      // the context vm passed in is a functional context as well.
      // in this case we want to make sure we are able to get a hold to the
      // real context instance.
      contextVm = parent;
      // $flow-disable-line
      parent = parent._original;
    }
    var isCompiled = isTrue(options._compiled);
    var needNormalization = !isCompiled;

    this.data = data;
    this.props = props;
    this.children = children;
    this.parent = parent;
    this.listeners = data.on || emptyObject;
    this.injections = resolveInject(options.inject, parent);
    this.slots = function () { return resolveSlots(children, parent); };

    // support for compiled functional template
    if (isCompiled) {
      // exposing $options for renderStatic()
      this.$options = options;
      // pre-resolve slots for renderSlot()
      this.$slots = this.slots();
      this.$scopedSlots = data.scopedSlots || emptyObject;
    }

    if (options._scopeId) {
      this._c = function (a, b, c, d) {
        var vnode = createElement(contextVm, a, b, c, d, needNormalization);
        if (vnode && !Array.isArray(vnode)) {
          vnode.fnScopeId = options._scopeId;
          vnode.fnContext = parent;
        }
        return vnode
      };
    } else {
      this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
    }
  }

  installRenderHelpers(FunctionalRenderContext.prototype);

  function createFunctionalComponent (
    Ctor,
    propsData,
    data,
    contextVm,
    children
  ) {
    var options = Ctor.options;
    var props = {};
    var propOptions = options.props;
    if (isDef(propOptions)) {
      for (var key in propOptions) {
        props[key] = validateProp(key, propOptions, propsData || emptyObject);
      }
    } else {
      if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
      if (isDef(data.props)) { mergeProps(props, data.props); }
    }

    var renderContext = new FunctionalRenderContext(
      data,
      props,
      children,
      contextVm,
      Ctor
    );

    var vnode = options.render.call(null, renderContext._c, renderContext);

    if (vnode instanceof VNode) {
      return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options)
    } else if (Array.isArray(vnode)) {
      var vnodes = normalizeChildren(vnode) || [];
      var res = new Array(vnodes.length);
      for (var i = 0; i < vnodes.length; i++) {
        res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options);
      }
      return res
    }
  }

  function cloneAndMarkFunctionalResult (vnode, data, contextVm, options) {
    // #7817 clone node before setting fnContext, otherwise if the node is reused
    // (e.g. it was from a cached normal slot) the fnContext causes named slots
    // that should not be matched to match.
    var clone = cloneVNode(vnode);
    clone.fnContext = contextVm;
    clone.fnOptions = options;
    if (data.slot) {
      (clone.data || (clone.data = {})).slot = data.slot;
    }
    return clone
  }

  function mergeProps (to, from) {
    for (var key in from) {
      to[camelize(key)] = from[key];
    }
  }

  /*  */




  // Register the component hook to weex native render engine.
  // The hook will be triggered by native, not javascript.


  // Updates the state of the component to weex native render engine.

  /*  */

  // https://github.com/Hanks10100/weex-native-directive/tree/master/component

  // listening on native callback

  /*  */

  /*  */

  // inline hooks to be invoked on component VNodes during patch
  var componentVNodeHooks = {
    init: function init (
      vnode,
      hydrating,
      parentElm,
      refElm
    ) {
      if (
        vnode.componentInstance &&
        !vnode.componentInstance._isDestroyed &&
        vnode.data.keepAlive
      ) {
        // kept-alive components, treat as a patch
        var mountedNode = vnode; // work around flow
        componentVNodeHooks.prepatch(mountedNode, mountedNode);
      } else {
        var child = vnode.componentInstance = createComponentInstanceForVnode(
          vnode,
          activeInstance,
          parentElm,
          refElm
        );
        child.$mount(hydrating ? vnode.elm : undefined, hydrating);
      }
    },

    prepatch: function prepatch (oldVnode, vnode) {
      var options = vnode.componentOptions;
      var child = vnode.componentInstance = oldVnode.componentInstance;
      updateChildComponent(
        child,
        options.propsData, // updated props
        options.listeners, // updated listeners
        vnode, // new parent vnode
        options.children // new children
      );
    },

    insert: function insert (vnode) {
      var context = vnode.context;
      var componentInstance = vnode.componentInstance;
      if (!componentInstance._isMounted) {
        componentInstance._isMounted = true;
        callHook(componentInstance, 'mounted');
      }
      if (vnode.data.keepAlive) {
        if (context._isMounted) {
          // vue-router#1212
          // During updates, a kept-alive component's child components may
          // change, so directly walking the tree here may call activated hooks
          // on incorrect children. Instead we push them into a queue which will
          // be processed after the whole patch process ended.
          queueActivatedComponent(componentInstance);
        } else {
          activateChildComponent(componentInstance, true /* direct */);
        }
      }
    },

    destroy: function destroy (vnode) {
      var componentInstance = vnode.componentInstance;
      if (!componentInstance._isDestroyed) {
        if (!vnode.data.keepAlive) {
          componentInstance.$destroy();
        } else {
          deactivateChildComponent(componentInstance, true /* direct */);
        }
      }
    }
  };

  var hooksToMerge = Object.keys(componentVNodeHooks);

  function createComponent (
    Ctor,
    data,
    context,
    children,
    tag
  ) {
    if (isUndef(Ctor)) {
      return
    }

    var baseCtor = context.$options._base;

    // plain options object: turn it into a constructor
    if (isObject$1(Ctor)) {
      Ctor = baseCtor.extend(Ctor);
    }

    // if at this stage it's not a constructor or an async component factory,
    // reject.
    if (typeof Ctor !== 'function') {
      if (process.env.NODE_ENV !== 'production') {
        warn(("Invalid Component definition: " + (String(Ctor))), context);
      }
      return
    }

    // async component
    var asyncFactory;
    if (isUndef(Ctor.cid)) {
      asyncFactory = Ctor;
      Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);
      if (Ctor === undefined) {
        // return a placeholder node for async component, which is rendered
        // as a comment node but preserves all the raw information for the node.
        // the information will be used for async server-rendering and hydration.
        return createAsyncPlaceholder(
          asyncFactory,
          data,
          context,
          children,
          tag
        )
      }
    }

    data = data || {};

    // resolve constructor options in case global mixins are applied after
    // component constructor creation
    resolveConstructorOptions(Ctor);

    // transform component v-model data into props & events
    if (isDef(data.model)) {
      transformModel(Ctor.options, data);
    }

    // extract props
    var propsData = extractPropsFromVNodeData(data, Ctor, tag);

    // functional component
    if (isTrue(Ctor.options.functional)) {
      return createFunctionalComponent(Ctor, propsData, data, context, children)
    }

    // extract listeners, since these needs to be treated as
    // child component listeners instead of DOM listeners
    var listeners = data.on;
    // replace with listeners with .native modifier
    // so it gets processed during parent component patch.
    data.on = data.nativeOn;

    if (isTrue(Ctor.options.abstract)) {
      // abstract components do not keep anything
      // other than props & listeners & slot

      // work around flow
      var slot = data.slot;
      data = {};
      if (slot) {
        data.slot = slot;
      }
    }

    // install component management hooks onto the placeholder node
    installComponentHooks(data);

    // return a placeholder vnode
    var name = Ctor.options.name || tag;
    var vnode = new VNode(
      ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
      data, undefined, undefined, undefined, context,
      { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
      asyncFactory
    );

    // Weex specific: invoke recycle-list optimized @render function for
    // extracting cell-slot template.
    // https://github.com/Hanks10100/weex-native-directive/tree/master/component
    /* istanbul ignore if */
    return vnode
  }

  function createComponentInstanceForVnode (
    vnode, // we know it's MountedComponentVNode but flow doesn't
    parent, // activeInstance in lifecycle state
    parentElm,
    refElm
  ) {
    var options = {
      _isComponent: true,
      parent: parent,
      _parentVnode: vnode,
      _parentElm: parentElm || null,
      _refElm: refElm || null
    };
    // check inline-template render functions
    var inlineTemplate = vnode.data.inlineTemplate;
    if (isDef(inlineTemplate)) {
      options.render = inlineTemplate.render;
      options.staticRenderFns = inlineTemplate.staticRenderFns;
    }
    return new vnode.componentOptions.Ctor(options)
  }

  function installComponentHooks (data) {
    var hooks = data.hook || (data.hook = {});
    for (var i = 0; i < hooksToMerge.length; i++) {
      var key = hooksToMerge[i];
      hooks[key] = componentVNodeHooks[key];
    }
  }

  // transform component v-model info (value and callback) into
  // prop and event handler respectively.
  function transformModel (options, data) {
    var prop = (options.model && options.model.prop) || 'value';
    var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;
    var on = data.on || (data.on = {});
    if (isDef(on[event])) {
      on[event] = [data.model.callback].concat(on[event]);
    } else {
      on[event] = data.model.callback;
    }
  }

  /*  */

  var SIMPLE_NORMALIZE = 1;
  var ALWAYS_NORMALIZE = 2;

  // wrapper function for providing a more flexible interface
  // without getting yelled at by flow
  function createElement (
    context,
    tag,
    data,
    children,
    normalizationType,
    alwaysNormalize
  ) {
    if (Array.isArray(data) || isPrimitive(data)) {
      normalizationType = children;
      children = data;
      data = undefined;
    }
    if (isTrue(alwaysNormalize)) {
      normalizationType = ALWAYS_NORMALIZE;
    }
    return _createElement(context, tag, data, children, normalizationType)
  }

  function _createElement (
    context,
    tag,
    data,
    children,
    normalizationType
  ) {
    if (isDef(data) && isDef((data).__ob__)) {
      process.env.NODE_ENV !== 'production' && warn(
        "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
        'Always create fresh vnode data objects in each render!',
        context
      );
      return createEmptyVNode()
    }
    // object syntax in v-bind
    if (isDef(data) && isDef(data.is)) {
      tag = data.is;
    }
    if (!tag) {
      // in case of component :is set to falsy value
      return createEmptyVNode()
    }
    // warn against non-primitive key
    if (process.env.NODE_ENV !== 'production' &&
      isDef(data) && isDef(data.key) && !isPrimitive(data.key)
    ) {
      {
        warn(
          'Avoid using non-primitive value as key, ' +
          'use string/number value instead.',
          context
        );
      }
    }
    // support single function children as default scoped slot
    if (Array.isArray(children) &&
      typeof children[0] === 'function'
    ) {
      data = data || {};
      data.scopedSlots = { default: children[0] };
      children.length = 0;
    }
    if (normalizationType === ALWAYS_NORMALIZE) {
      children = normalizeChildren(children);
    } else if (normalizationType === SIMPLE_NORMALIZE) {
      children = simpleNormalizeChildren(children);
    }
    var vnode, ns;
    if (typeof tag === 'string') {
      var Ctor;
      ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
      if (config.isReservedTag(tag)) {
        // platform built-in elements
        vnode = new VNode(
          config.parsePlatformTagName(tag), data, children,
          undefined, undefined, context
        );
      } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
        // component
        vnode = createComponent(Ctor, data, context, children, tag);
      } else {
        // unknown or unlisted namespaced elements
        // check at runtime because it may get assigned a namespace when its
        // parent normalizes children
        vnode = new VNode(
          tag, data, children,
          undefined, undefined, context
        );
      }
    } else {
      // direct component options / constructor
      vnode = createComponent(tag, data, context, children);
    }
    if (Array.isArray(vnode)) {
      return vnode
    } else if (isDef(vnode)) {
      if (isDef(ns)) { applyNS(vnode, ns); }
      if (isDef(data)) { registerDeepBindings(data); }
      return vnode
    } else {
      return createEmptyVNode()
    }
  }

  function applyNS (vnode, ns, force) {
    vnode.ns = ns;
    if (vnode.tag === 'foreignObject') {
      // use default namespace inside foreignObject
      ns = undefined;
      force = true;
    }
    if (isDef(vnode.children)) {
      for (var i = 0, l = vnode.children.length; i < l; i++) {
        var child = vnode.children[i];
        if (isDef(child.tag) && (
          isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
          applyNS(child, ns, force);
        }
      }
    }
  }

  // ref #5318
  // necessary to ensure parent re-render when deep bindings like :style and
  // :class are used on slot nodes
  function registerDeepBindings (data) {
    if (isObject$1(data.style)) {
      traverse(data.style);
    }
    if (isObject$1(data.class)) {
      traverse(data.class);
    }
  }

  /*  */

  function initRender (vm) {
    vm._vnode = null; // the root of the child tree
    vm._staticTrees = null; // v-once cached trees
    var options = vm.$options;
    var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
    var renderContext = parentVnode && parentVnode.context;
    vm.$slots = resolveSlots(options._renderChildren, renderContext);
    vm.$scopedSlots = emptyObject;
    // bind the createElement fn to this instance
    // so that we get proper render context inside it.
    // args order: tag, data, children, normalizationType, alwaysNormalize
    // internal version is used by render functions compiled from templates
    vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
    // normalization is always applied for the public version, used in
    // user-written render functions.
    vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

    // $attrs & $listeners are exposed for easier HOC creation.
    // they need to be reactive so that HOCs using them are always updated
    var parentData = parentVnode && parentVnode.data;

    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
        !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
      }, true);
      defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {
        !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
      }, true);
    } else {
      defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);
      defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true);
    }
  }

  function renderMixin (Vue) {
    // install runtime convenience helpers
    installRenderHelpers(Vue.prototype);

    Vue.prototype.$nextTick = function (fn) {
      return nextTick(fn, this)
    };

    Vue.prototype._render = function () {
      var vm = this;
      var ref = vm.$options;
      var render = ref.render;
      var _parentVnode = ref._parentVnode;

      // reset _rendered flag on slots for duplicate slot check
      if (process.env.NODE_ENV !== 'production') {
        for (var key in vm.$slots) {
          // $flow-disable-line
          vm.$slots[key]._rendered = false;
        }
      }

      if (_parentVnode) {
        vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject;
      }

      // set parent vnode. this allows render functions to have access
      // to the data on the placeholder node.
      vm.$vnode = _parentVnode;
      // render self
      var vnode;
      try {
        vnode = render.call(vm._renderProxy, vm.$createElement);
      } catch (e) {
        handleError(e, vm, "render");
        // return error render result,
        // or previous vnode to prevent render error causing blank component
        /* istanbul ignore else */
        if (process.env.NODE_ENV !== 'production') {
          if (vm.$options.renderError) {
            try {
              vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
            } catch (e) {
              handleError(e, vm, "renderError");
              vnode = vm._vnode;
            }
          } else {
            vnode = vm._vnode;
          }
        } else {
          vnode = vm._vnode;
        }
      }
      // return empty vnode in case the render function errored out
      if (!(vnode instanceof VNode)) {
        if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {
          warn(
            'Multiple root nodes returned from render function. Render function ' +
            'should return a single root node.',
            vm
          );
        }
        vnode = createEmptyVNode();
      }
      // set parent
      vnode.parent = _parentVnode;
      return vnode
    };
  }

  /*  */

  var uid$3 = 0;

  function initMixin (Vue) {
    Vue.prototype._init = function (options) {
      var vm = this;
      // a uid
      vm._uid = uid$3++;

      var startTag, endTag;
      /* istanbul ignore if */
      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
        startTag = "vue-perf-start:" + (vm._uid);
        endTag = "vue-perf-end:" + (vm._uid);
        mark(startTag);
      }

      // a flag to avoid this being observed
      vm._isVue = true;
      // merge options
      if (options && options._isComponent) {
        // optimize internal component instantiation
        // since dynamic options merging is pretty slow, and none of the
        // internal component options needs special treatment.
        initInternalComponent(vm, options);
      } else {
        vm.$options = mergeOptions(
          resolveConstructorOptions(vm.constructor),
          options || {},
          vm
        );
      }
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        initProxy(vm);
      } else {
        vm._renderProxy = vm;
      }
      // expose real self
      vm._self = vm;
      initLifecycle(vm);
      initEvents(vm);
      initRender(vm);
      callHook(vm, 'beforeCreate');
      initInjections(vm); // resolve injections before data/props
      initState(vm);
      initProvide(vm); // resolve provide after data/props
      callHook(vm, 'created');

      /* istanbul ignore if */
      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
        vm._name = formatComponentName(vm, false);
        mark(endTag);
        measure(("vue " + (vm._name) + " init"), startTag, endTag);
      }

      if (vm.$options.el) {
        vm.$mount(vm.$options.el);
      }
    };
  }

  function initInternalComponent (vm, options) {
    var opts = vm.$options = Object.create(vm.constructor.options);
    // doing this because it's faster than dynamic enumeration.
    var parentVnode = options._parentVnode;
    opts.parent = options.parent;
    opts._parentVnode = parentVnode;
    opts._parentElm = options._parentElm;
    opts._refElm = options._refElm;

    var vnodeComponentOptions = parentVnode.componentOptions;
    opts.propsData = vnodeComponentOptions.propsData;
    opts._parentListeners = vnodeComponentOptions.listeners;
    opts._renderChildren = vnodeComponentOptions.children;
    opts._componentTag = vnodeComponentOptions.tag;

    if (options.render) {
      opts.render = options.render;
      opts.staticRenderFns = options.staticRenderFns;
    }
  }

  function resolveConstructorOptions (Ctor) {
    var options = Ctor.options;
    if (Ctor.super) {
      var superOptions = resolveConstructorOptions(Ctor.super);
      var cachedSuperOptions = Ctor.superOptions;
      if (superOptions !== cachedSuperOptions) {
        // super option changed,
        // need to resolve new options.
        Ctor.superOptions = superOptions;
        // check if there are any late-modified/attached options (#4976)
        var modifiedOptions = resolveModifiedOptions(Ctor);
        // update base extend options
        if (modifiedOptions) {
          extend(Ctor.extendOptions, modifiedOptions);
        }
        options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
        if (options.name) {
          options.components[options.name] = Ctor;
        }
      }
    }
    return options
  }

  function resolveModifiedOptions (Ctor) {
    var modified;
    var latest = Ctor.options;
    var extended = Ctor.extendOptions;
    var sealed = Ctor.sealedOptions;
    for (var key in latest) {
      if (latest[key] !== sealed[key]) {
        if (!modified) { modified = {}; }
        modified[key] = dedupe(latest[key], extended[key], sealed[key]);
      }
    }
    return modified
  }

  function dedupe (latest, extended, sealed) {
    // compare latest and sealed to ensure lifecycle hooks won't be duplicated
    // between merges
    if (Array.isArray(latest)) {
      var res = [];
      sealed = Array.isArray(sealed) ? sealed : [sealed];
      extended = Array.isArray(extended) ? extended : [extended];
      for (var i = 0; i < latest.length; i++) {
        // push original options and not sealed options to exclude duplicated options
        if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
          res.push(latest[i]);
        }
      }
      return res
    } else {
      return latest
    }
  }

  function Vue$1 (options) {
    if (process.env.NODE_ENV !== 'production' &&
      !(this instanceof Vue$1)
    ) {
      warn('Vue is a constructor and should be called with the `new` keyword');
    }
    this._init(options);
  }

  initMixin(Vue$1);
  stateMixin(Vue$1);
  eventsMixin(Vue$1);
  lifecycleMixin(Vue$1);
  renderMixin(Vue$1);

  /*  */

  function initUse (Vue) {
    Vue.use = function (plugin) {
      var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
      if (installedPlugins.indexOf(plugin) > -1) {
        return this
      }

      // additional parameters
      var args = toArray(arguments, 1);
      args.unshift(this);
      if (typeof plugin.install === 'function') {
        plugin.install.apply(plugin, args);
      } else if (typeof plugin === 'function') {
        plugin.apply(null, args);
      }
      installedPlugins.push(plugin);
      return this
    };
  }

  /*  */

  function initMixin$1 (Vue) {
    Vue.mixin = function (mixin) {
      this.options = mergeOptions(this.options, mixin);
      return this
    };
  }

  /*  */

  function initExtend (Vue) {
    /**
     * Each instance constructor, including Vue, has a unique
     * cid. This enables us to create wrapped "child
     * constructors" for prototypal inheritance and cache them.
     */
    Vue.cid = 0;
    var cid = 1;

    /**
     * Class inheritance
     */
    Vue.extend = function (extendOptions) {
      extendOptions = extendOptions || {};
      var Super = this;
      var SuperId = Super.cid;
      var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
      if (cachedCtors[SuperId]) {
        return cachedCtors[SuperId]
      }

      var name = extendOptions.name || Super.options.name;
      if (process.env.NODE_ENV !== 'production' && name) {
        validateComponentName(name);
      }

      var Sub = function VueComponent (options) {
        this._init(options);
      };
      Sub.prototype = Object.create(Super.prototype);
      Sub.prototype.constructor = Sub;
      Sub.cid = cid++;
      Sub.options = mergeOptions(
        Super.options,
        extendOptions
      );
      Sub['super'] = Super;

      // For props and computed properties, we define the proxy getters on
      // the Vue instances at extension time, on the extended prototype. This
      // avoids Object.defineProperty calls for each instance created.
      if (Sub.options.props) {
        initProps$1(Sub);
      }
      if (Sub.options.computed) {
        initComputed$1(Sub);
      }

      // allow further extension/mixin/plugin usage
      Sub.extend = Super.extend;
      Sub.mixin = Super.mixin;
      Sub.use = Super.use;

      // create asset registers, so extended classes
      // can have their private assets too.
      ASSET_TYPES.forEach(function (type) {
        Sub[type] = Super[type];
      });
      // enable recursive self-lookup
      if (name) {
        Sub.options.components[name] = Sub;
      }

      // keep a reference to the super options at extension time.
      // later at instantiation we can check if Super's options have
      // been updated.
      Sub.superOptions = Super.options;
      Sub.extendOptions = extendOptions;
      Sub.sealedOptions = extend({}, Sub.options);

      // cache constructor
      cachedCtors[SuperId] = Sub;
      return Sub
    };
  }

  function initProps$1 (Comp) {
    var props = Comp.options.props;
    for (var key in props) {
      proxy(Comp.prototype, "_props", key);
    }
  }

  function initComputed$1 (Comp) {
    var computed = Comp.options.computed;
    for (var key in computed) {
      defineComputed(Comp.prototype, key, computed[key]);
    }
  }

  /*  */

  function initAssetRegisters (Vue) {
    /**
     * Create asset registration methods.
     */
    ASSET_TYPES.forEach(function (type) {
      Vue[type] = function (
        id,
        definition
      ) {
        if (!definition) {
          return this.options[type + 's'][id]
        } else {
          /* istanbul ignore if */
          if (process.env.NODE_ENV !== 'production' && type === 'component') {
            validateComponentName(id);
          }
          if (type === 'component' && isPlainObject(definition)) {
            definition.name = definition.name || id;
            definition = this.options._base.extend(definition);
          }
          if (type === 'directive' && typeof definition === 'function') {
            definition = { bind: definition, update: definition };
          }
          this.options[type + 's'][id] = definition;
          return definition
        }
      };
    });
  }

  /*  */

  function getComponentName (opts) {
    return opts && (opts.Ctor.options.name || opts.tag)
  }

  function matches (pattern, name) {
    if (Array.isArray(pattern)) {
      return pattern.indexOf(name) > -1
    } else if (typeof pattern === 'string') {
      return pattern.split(',').indexOf(name) > -1
    } else if (isRegExp(pattern)) {
      return pattern.test(name)
    }
    /* istanbul ignore next */
    return false
  }

  function pruneCache (keepAliveInstance, filter) {
    var cache = keepAliveInstance.cache;
    var keys = keepAliveInstance.keys;
    var _vnode = keepAliveInstance._vnode;
    for (var key in cache) {
      var cachedNode = cache[key];
      if (cachedNode) {
        var name = getComponentName(cachedNode.componentOptions);
        if (name && !filter(name)) {
          pruneCacheEntry(cache, key, keys, _vnode);
        }
      }
    }
  }

  function pruneCacheEntry (
    cache,
    key,
    keys,
    current
  ) {
    var cached$$1 = cache[key];
    if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
      cached$$1.componentInstance.$destroy();
    }
    cache[key] = null;
    remove(keys, key);
  }

  var patternTypes = [String, RegExp, Array];

  var KeepAlive = {
    name: 'keep-alive',
    abstract: true,

    props: {
      include: patternTypes,
      exclude: patternTypes,
      max: [String, Number]
    },

    created: function created () {
      this.cache = Object.create(null);
      this.keys = [];
    },

    destroyed: function destroyed () {
      var this$1 = this;

      for (var key in this$1.cache) {
        pruneCacheEntry(this$1.cache, key, this$1.keys);
      }
    },

    mounted: function mounted () {
      var this$1 = this;

      this.$watch('include', function (val) {
        pruneCache(this$1, function (name) { return matches(val, name); });
      });
      this.$watch('exclude', function (val) {
        pruneCache(this$1, function (name) { return !matches(val, name); });
      });
    },

    render: function render () {
      var slot = this.$slots.default;
      var vnode = getFirstComponentChild(slot);
      var componentOptions = vnode && vnode.componentOptions;
      if (componentOptions) {
        // check pattern
        var name = getComponentName(componentOptions);
        var ref = this;
        var include = ref.include;
        var exclude = ref.exclude;
        if (
          // not included
          (include && (!name || !matches(include, name))) ||
          // excluded
          (exclude && name && matches(exclude, name))
        ) {
          return vnode
        }

        var ref$1 = this;
        var cache = ref$1.cache;
        var keys = ref$1.keys;
        var key = vnode.key == null
          // same constructor may get registered as different local components
          // so cid alone is not enough (#3269)
          ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
          : vnode.key;
        if (cache[key]) {
          vnode.componentInstance = cache[key].componentInstance;
          // make current key freshest
          remove(keys, key);
          keys.push(key);
        } else {
          cache[key] = vnode;
          keys.push(key);
          // prune oldest entry
          if (this.max && keys.length > parseInt(this.max)) {
            pruneCacheEntry(cache, keys[0], keys, this._vnode);
          }
        }

        vnode.data.keepAlive = true;
      }
      return vnode || (slot && slot[0])
    }
  };

  var builtInComponents = {
    KeepAlive: KeepAlive
  };

  /*  */

  function initGlobalAPI (Vue) {
    // config
    var configDef = {};
    configDef.get = function () { return config; };
    if (process.env.NODE_ENV !== 'production') {
      configDef.set = function () {
        warn(
          'Do not replace the Vue.config object, set individual fields instead.'
        );
      };
    }
    Object.defineProperty(Vue, 'config', configDef);

    // exposed util methods.
    // NOTE: these are not considered part of the public API - avoid relying on
    // them unless you are aware of the risk.
    Vue.util = {
      warn: warn,
      extend: extend,
      mergeOptions: mergeOptions,
      defineReactive: defineReactive
    };

    Vue.set = set;
    Vue.delete = del;
    Vue.nextTick = nextTick;

    Vue.options = Object.create(null);
    ASSET_TYPES.forEach(function (type) {
      Vue.options[type + 's'] = Object.create(null);
    });

    // this is used to identify the "base" constructor to extend all plain-object
    // components with in Weex's multi-instance scenarios.
    Vue.options._base = Vue;

    extend(Vue.options.components, builtInComponents);

    initUse(Vue);
    initMixin$1(Vue);
    initExtend(Vue);
    initAssetRegisters(Vue);
  }

  initGlobalAPI(Vue$1);

  Object.defineProperty(Vue$1.prototype, '$isServer', {
    get: isServerRendering
  });

  Object.defineProperty(Vue$1.prototype, '$ssrContext', {
    get: function get () {
      /* istanbul ignore next */
      return this.$vnode && this.$vnode.ssrContext
    }
  });

  // expose FunctionalRenderContext for ssr runtime helper installation
  Object.defineProperty(Vue$1, 'FunctionalRenderContext', {
    value: FunctionalRenderContext
  });

  Vue$1.version = '2.5.16';

  /*  */

  // these are reserved for web because they are directly compiled away
  // during template compilation
  var isReservedAttr = makeMap('style,class');

  // attributes that should be using props for binding
  var acceptValue = makeMap('input,textarea,option,select,progress');
  var mustUseProp = function (tag, type, attr) {
    return (
      (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
      (attr === 'selected' && tag === 'option') ||
      (attr === 'checked' && tag === 'input') ||
      (attr === 'muted' && tag === 'video')
    )
  };

  var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

  var isBooleanAttr = makeMap(
    'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
    'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
    'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
    'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
    'required,reversed,scoped,seamless,selected,sortable,translate,' +
    'truespeed,typemustmatch,visible'
  );

  var xlinkNS = 'http://www.w3.org/1999/xlink';

  var isXlink = function (name) {
    return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
  };

  var getXlinkProp = function (name) {
    return isXlink(name) ? name.slice(6, name.length) : ''
  };

  var isFalsyAttrValue = function (val) {
    return val == null || val === false
  };

  /*  */

  function genClassForVnode (vnode) {
    var data = vnode.data;
    var parentNode = vnode;
    var childNode = vnode;
    while (isDef(childNode.componentInstance)) {
      childNode = childNode.componentInstance._vnode;
      if (childNode && childNode.data) {
        data = mergeClassData(childNode.data, data);
      }
    }
    while (isDef(parentNode = parentNode.parent)) {
      if (parentNode && parentNode.data) {
        data = mergeClassData(data, parentNode.data);
      }
    }
    return renderClass(data.staticClass, data.class)
  }

  function mergeClassData (child, parent) {
    return {
      staticClass: concat(child.staticClass, parent.staticClass),
      class: isDef(child.class)
        ? [child.class, parent.class]
        : parent.class
    }
  }

  function renderClass (
    staticClass,
    dynamicClass
  ) {
    if (isDef(staticClass) || isDef(dynamicClass)) {
      return concat(staticClass, stringifyClass(dynamicClass))
    }
    /* istanbul ignore next */
    return ''
  }

  function concat (a, b) {
    return a ? b ? (a + ' ' + b) : a : (b || '')
  }

  function stringifyClass (value) {
    if (Array.isArray(value)) {
      return stringifyArray(value)
    }
    if (isObject$1(value)) {
      return stringifyObject(value)
    }
    if (typeof value === 'string') {
      return value
    }
    /* istanbul ignore next */
    return ''
  }

  function stringifyArray (value) {
    var res = '';
    var stringified;
    for (var i = 0, l = value.length; i < l; i++) {
      if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
        if (res) { res += ' '; }
        res += stringified;
      }
    }
    return res
  }

  function stringifyObject (value) {
    var res = '';
    for (var key in value) {
      if (value[key]) {
        if (res) { res += ' '; }
        res += key;
      }
    }
    return res
  }

  /*  */

  var namespaceMap = {
    svg: 'http://www.w3.org/2000/svg',
    math: 'http://www.w3.org/1998/Math/MathML'
  };

  var isHTMLTag = makeMap(
    'html,body,base,head,link,meta,style,title,' +
    'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
    'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
    'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
    's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
    'embed,object,param,source,canvas,script,noscript,del,ins,' +
    'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
    'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
    'output,progress,select,textarea,' +
    'details,dialog,menu,menuitem,summary,' +
    'content,element,shadow,template,blockquote,iframe,tfoot'
  );

  // this map is intentionally selective, only covering SVG elements that may
  // contain child elements.
  var isSVG = makeMap(
    'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
    'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
    'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
    true
  );



  var isReservedTag = function (tag) {
    return isHTMLTag(tag) || isSVG(tag)
  };

  function getTagNamespace (tag) {
    if (isSVG(tag)) {
      return 'svg'
    }
    // basic support for MathML
    // note it doesn't support other MathML elements being component roots
    if (tag === 'math') {
      return 'math'
    }
  }

  var unknownElementCache = Object.create(null);
  function isUnknownElement (tag) {
    /* istanbul ignore if */
    if (!inBrowser) {
      return true
    }
    if (isReservedTag(tag)) {
      return false
    }
    tag = tag.toLowerCase();
    /* istanbul ignore if */
    if (unknownElementCache[tag] != null) {
      return unknownElementCache[tag]
    }
    var el = document.createElement(tag);
    if (tag.indexOf('-') > -1) {
      // http://stackoverflow.com/a/28210364/1070244
      return (unknownElementCache[tag] = (
        el.constructor === window.HTMLUnknownElement ||
        el.constructor === window.HTMLElement
      ))
    } else {
      return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
    }
  }

  var isTextInputType = makeMap('text,number,password,search,email,tel,url');

  /*  */

  /**
   * Query an element selector if it's not an element already.
   */
  function query (el) {
    if (typeof el === 'string') {
      var selected = document.querySelector(el);
      if (!selected) {
        process.env.NODE_ENV !== 'production' && warn(
          'Cannot find element: ' + el
        );
        return document.createElement('div')
      }
      return selected
    } else {
      return el
    }
  }

  /*  */

  function createElement$1 (tagName, vnode) {
    var elm = document.createElement(tagName);
    if (tagName !== 'select') {
      return elm
    }
    // false or null will remove the attribute but undefined will not
    if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
      elm.setAttribute('multiple', 'multiple');
    }
    return elm
  }

  function createElementNS (namespace, tagName) {
    return document.createElementNS(namespaceMap[namespace], tagName)
  }

  function createTextNode (text) {
    return document.createTextNode(text)
  }

  function createComment (text) {
    return document.createComment(text)
  }

  function insertBefore (parentNode, newNode, referenceNode) {
    parentNode.insertBefore(newNode, referenceNode);
  }

  function removeChild (node, child) {
    node.removeChild(child);
  }

  function appendChild (node, child) {
    node.appendChild(child);
  }

  function parentNode (node) {
    return node.parentNode
  }

  function nextSibling (node) {
    return node.nextSibling
  }

  function tagName (node) {
    return node.tagName
  }

  function setTextContent (node, text) {
    node.textContent = text;
  }

  function setStyleScope (node, scopeId) {
    node.setAttribute(scopeId, '');
  }


  var nodeOps = Object.freeze({
  	createElement: createElement$1,
  	createElementNS: createElementNS,
  	createTextNode: createTextNode,
  	createComment: createComment,
  	insertBefore: insertBefore,
  	removeChild: removeChild,
  	appendChild: appendChild,
  	parentNode: parentNode,
  	nextSibling: nextSibling,
  	tagName: tagName,
  	setTextContent: setTextContent,
  	setStyleScope: setStyleScope
  });

  /*  */

  var ref = {
    create: function create (_, vnode) {
      registerRef(vnode);
    },
    update: function update (oldVnode, vnode) {
      if (oldVnode.data.ref !== vnode.data.ref) {
        registerRef(oldVnode, true);
        registerRef(vnode);
      }
    },
    destroy: function destroy (vnode) {
      registerRef(vnode, true);
    }
  };

  function registerRef (vnode, isRemoval) {
    var key = vnode.data.ref;
    if (!isDef(key)) { return }

    var vm = vnode.context;
    var ref = vnode.componentInstance || vnode.elm;
    var refs = vm.$refs;
    if (isRemoval) {
      if (Array.isArray(refs[key])) {
        remove(refs[key], ref);
      } else if (refs[key] === ref) {
        refs[key] = undefined;
      }
    } else {
      if (vnode.data.refInFor) {
        if (!Array.isArray(refs[key])) {
          refs[key] = [ref];
        } else if (refs[key].indexOf(ref) < 0) {
          // $flow-disable-line
          refs[key].push(ref);
        }
      } else {
        refs[key] = ref;
      }
    }
  }

  /**
   * Virtual DOM patching algorithm based on Snabbdom by
   * Simon Friis Vindum (@paldepind)
   * Licensed under the MIT License
   * https://github.com/paldepind/snabbdom/blob/master/LICENSE
   *
   * modified by Evan You (@yyx990803)
   *
   * Not type-checking this because this file is perf-critical and the cost
   * of making flow understand it is not worth it.
   */

  var emptyNode = new VNode('', {}, []);

  var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

  function sameVnode (a, b) {
    return (
      a.key === b.key && (
        (
          a.tag === b.tag &&
          a.isComment === b.isComment &&
          isDef(a.data) === isDef(b.data) &&
          sameInputType(a, b)
        ) || (
          isTrue(a.isAsyncPlaceholder) &&
          a.asyncFactory === b.asyncFactory &&
          isUndef(b.asyncFactory.error)
        )
      )
    )
  }

  function sameInputType (a, b) {
    if (a.tag !== 'input') { return true }
    var i;
    var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
    var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
    return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
  }

  function createKeyToOldIdx (children, beginIdx, endIdx) {
    var i, key;
    var map = {};
    for (i = beginIdx; i <= endIdx; ++i) {
      key = children[i].key;
      if (isDef(key)) { map[key] = i; }
    }
    return map
  }

  function createPatchFunction (backend) {
    var i, j;
    var cbs = {};

    var modules = backend.modules;
    var nodeOps = backend.nodeOps;

    for (i = 0; i < hooks.length; ++i) {
      cbs[hooks[i]] = [];
      for (j = 0; j < modules.length; ++j) {
        if (isDef(modules[j][hooks[i]])) {
          cbs[hooks[i]].push(modules[j][hooks[i]]);
        }
      }
    }

    function emptyNodeAt (elm) {
      return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
    }

    function createRmCb (childElm, listeners) {
      function remove () {
        if (--remove.listeners === 0) {
          removeNode(childElm);
        }
      }
      remove.listeners = listeners;
      return remove
    }

    function removeNode (el) {
      var parent = nodeOps.parentNode(el);
      // element may have already been removed due to v-html / v-text
      if (isDef(parent)) {
        nodeOps.removeChild(parent, el);
      }
    }

    function isUnknownElement$$1 (vnode, inVPre) {
      return (
        !inVPre &&
        !vnode.ns &&
        !(
          config.ignoredElements.length &&
          config.ignoredElements.some(function (ignore) {
            return isRegExp(ignore)
              ? ignore.test(vnode.tag)
              : ignore === vnode.tag
          })
        ) &&
        config.isUnknownElement(vnode.tag)
      )
    }

    var creatingElmInVPre = 0;

    function createElm (
      vnode,
      insertedVnodeQueue,
      parentElm,
      refElm,
      nested,
      ownerArray,
      index
    ) {
      if (isDef(vnode.elm) && isDef(ownerArray)) {
        // This vnode was used in a previous render!
        // now it's used as a new node, overwriting its elm would cause
        // potential patch errors down the road when it's used as an insertion
        // reference node. Instead, we clone the node on-demand before creating
        // associated DOM element for it.
        vnode = ownerArray[index] = cloneVNode(vnode);
      }

      vnode.isRootInsert = !nested; // for transition enter check
      if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
        return
      }

      var data = vnode.data;
      var children = vnode.children;
      var tag = vnode.tag;
      if (isDef(tag)) {
        if (process.env.NODE_ENV !== 'production') {
          if (data && data.pre) {
            creatingElmInVPre++;
          }
          if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
            warn(
              'Unknown custom element: <' + tag + '> - did you ' +
              'register the component correctly? For recursive components, ' +
              'make sure to provide the "name" option.',
              vnode.context
            );
          }
        }

        vnode.elm = vnode.ns
          ? nodeOps.createElementNS(vnode.ns, tag)
          : nodeOps.createElement(tag, vnode);
        setScope(vnode);

        /* istanbul ignore if */
        {
          createChildren(vnode, children, insertedVnodeQueue);
          if (isDef(data)) {
            invokeCreateHooks(vnode, insertedVnodeQueue);
          }
          insert(parentElm, vnode.elm, refElm);
        }

        if (process.env.NODE_ENV !== 'production' && data && data.pre) {
          creatingElmInVPre--;
        }
      } else if (isTrue(vnode.isComment)) {
        vnode.elm = nodeOps.createComment(vnode.text);
        insert(parentElm, vnode.elm, refElm);
      } else {
        vnode.elm = nodeOps.createTextNode(vnode.text);
        insert(parentElm, vnode.elm, refElm);
      }
    }

    function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
      var i = vnode.data;
      if (isDef(i)) {
        var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
        if (isDef(i = i.hook) && isDef(i = i.init)) {
          i(vnode, false /* hydrating */, parentElm, refElm);
        }
        // after calling the init hook, if the vnode is a child component
        // it should've created a child instance and mounted it. the child
        // component also has set the placeholder vnode's elm.
        // in that case we can just return the element and be done.
        if (isDef(vnode.componentInstance)) {
          initComponent(vnode, insertedVnodeQueue);
          if (isTrue(isReactivated)) {
            reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
          }
          return true
        }
      }
    }

    function initComponent (vnode, insertedVnodeQueue) {
      if (isDef(vnode.data.pendingInsert)) {
        insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
        vnode.data.pendingInsert = null;
      }
      vnode.elm = vnode.componentInstance.$el;
      if (isPatchable(vnode)) {
        invokeCreateHooks(vnode, insertedVnodeQueue);
        setScope(vnode);
      } else {
        // empty component root.
        // skip all element-related modules except for ref (#3455)
        registerRef(vnode);
        // make sure to invoke the insert hook
        insertedVnodeQueue.push(vnode);
      }
    }

    function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
      var i;
      // hack for #4339: a reactivated component with inner transition
      // does not trigger because the inner node's created hooks are not called
      // again. It's not ideal to involve module-specific logic in here but
      // there doesn't seem to be a better way to do it.
      var innerNode = vnode;
      while (innerNode.componentInstance) {
        innerNode = innerNode.componentInstance._vnode;
        if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
          for (i = 0; i < cbs.activate.length; ++i) {
            cbs.activate[i](emptyNode, innerNode);
          }
          insertedVnodeQueue.push(innerNode);
          break
        }
      }
      // unlike a newly created component,
      // a reactivated keep-alive component doesn't insert itself
      insert(parentElm, vnode.elm, refElm);
    }

    function insert (parent, elm, ref$$1) {
      if (isDef(parent)) {
        if (isDef(ref$$1)) {
          if (ref$$1.parentNode === parent) {
            nodeOps.insertBefore(parent, elm, ref$$1);
          }
        } else {
          nodeOps.appendChild(parent, elm);
        }
      }
    }

    function createChildren (vnode, children, insertedVnodeQueue) {
      if (Array.isArray(children)) {
        if (process.env.NODE_ENV !== 'production') {
          checkDuplicateKeys(children);
        }
        for (var i = 0; i < children.length; ++i) {
          createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
        }
      } else if (isPrimitive(vnode.text)) {
        nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
      }
    }

    function isPatchable (vnode) {
      while (vnode.componentInstance) {
        vnode = vnode.componentInstance._vnode;
      }
      return isDef(vnode.tag)
    }

    function invokeCreateHooks (vnode, insertedVnodeQueue) {
      for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
        cbs.create[i$1](emptyNode, vnode);
      }
      i = vnode.data.hook; // Reuse variable
      if (isDef(i)) {
        if (isDef(i.create)) { i.create(emptyNode, vnode); }
        if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
      }
    }

    // set scope id attribute for scoped CSS.
    // this is implemented as a special case to avoid the overhead
    // of going through the normal attribute patching process.
    function setScope (vnode) {
      var i;
      if (isDef(i = vnode.fnScopeId)) {
        nodeOps.setStyleScope(vnode.elm, i);
      } else {
        var ancestor = vnode;
        while (ancestor) {
          if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
            nodeOps.setStyleScope(vnode.elm, i);
          }
          ancestor = ancestor.parent;
        }
      }
      // for slot content they should also get the scopeId from the host instance.
      if (isDef(i = activeInstance) &&
        i !== vnode.context &&
        i !== vnode.fnContext &&
        isDef(i = i.$options._scopeId)
      ) {
        nodeOps.setStyleScope(vnode.elm, i);
      }
    }

    function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
      for (; startIdx <= endIdx; ++startIdx) {
        createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
      }
    }

    function invokeDestroyHook (vnode) {
      var i, j;
      var data = vnode.data;
      if (isDef(data)) {
        if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
        for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
      }
      if (isDef(i = vnode.children)) {
        for (j = 0; j < vnode.children.length; ++j) {
          invokeDestroyHook(vnode.children[j]);
        }
      }
    }

    function removeVnodes (parentElm, vnodes, startIdx, endIdx) {
      for (; startIdx <= endIdx; ++startIdx) {
        var ch = vnodes[startIdx];
        if (isDef(ch)) {
          if (isDef(ch.tag)) {
            removeAndInvokeRemoveHook(ch);
            invokeDestroyHook(ch);
          } else { // Text node
            removeNode(ch.elm);
          }
        }
      }
    }

    function removeAndInvokeRemoveHook (vnode, rm) {
      if (isDef(rm) || isDef(vnode.data)) {
        var i;
        var listeners = cbs.remove.length + 1;
        if (isDef(rm)) {
          // we have a recursively passed down rm callback
          // increase the listeners count
          rm.listeners += listeners;
        } else {
          // directly removing
          rm = createRmCb(vnode.elm, listeners);
        }
        // recursively invoke hooks on child component root node
        if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
          removeAndInvokeRemoveHook(i, rm);
        }
        for (i = 0; i < cbs.remove.length; ++i) {
          cbs.remove[i](vnode, rm);
        }
        if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
          i(vnode, rm);
        } else {
          rm();
        }
      } else {
        removeNode(vnode.elm);
      }
    }

    function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
      var oldStartIdx = 0;
      var newStartIdx = 0;
      var oldEndIdx = oldCh.length - 1;
      var oldStartVnode = oldCh[0];
      var oldEndVnode = oldCh[oldEndIdx];
      var newEndIdx = newCh.length - 1;
      var newStartVnode = newCh[0];
      var newEndVnode = newCh[newEndIdx];
      var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

      // removeOnly is a special flag used only by <transition-group>
      // to ensure removed elements stay in correct relative positions
      // during leaving transitions
      var canMove = !removeOnly;

      if (process.env.NODE_ENV !== 'production') {
        checkDuplicateKeys(newCh);
      }

      while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
        if (isUndef(oldStartVnode)) {
          oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
        } else if (isUndef(oldEndVnode)) {
          oldEndVnode = oldCh[--oldEndIdx];
        } else if (sameVnode(oldStartVnode, newStartVnode)) {
          patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
          oldStartVnode = oldCh[++oldStartIdx];
          newStartVnode = newCh[++newStartIdx];
        } else if (sameVnode(oldEndVnode, newEndVnode)) {
          patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
          oldEndVnode = oldCh[--oldEndIdx];
          newEndVnode = newCh[--newEndIdx];
        } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
          patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
          canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
          oldStartVnode = oldCh[++oldStartIdx];
          newEndVnode = newCh[--newEndIdx];
        } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
          patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
          canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
          oldEndVnode = oldCh[--oldEndIdx];
          newStartVnode = newCh[++newStartIdx];
        } else {
          if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
          idxInOld = isDef(newStartVnode.key)
            ? oldKeyToIdx[newStartVnode.key]
            : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
          if (isUndef(idxInOld)) { // New element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          } else {
            vnodeToMove = oldCh[idxInOld];
            if (sameVnode(vnodeToMove, newStartVnode)) {
              patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);
              oldCh[idxInOld] = undefined;
              canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
            } else {
              // same key but different element. treat as new element
              createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
            }
          }
          newStartVnode = newCh[++newStartIdx];
        }
      }
      if (oldStartIdx > oldEndIdx) {
        refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
        addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
      } else if (newStartIdx > newEndIdx) {
        removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
      }
    }

    function checkDuplicateKeys (children) {
      var seenKeys = {};
      for (var i = 0; i < children.length; i++) {
        var vnode = children[i];
        var key = vnode.key;
        if (isDef(key)) {
          if (seenKeys[key]) {
            warn(
              ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
              vnode.context
            );
          } else {
            seenKeys[key] = true;
          }
        }
      }
    }

    function findIdxInOld (node, oldCh, start, end) {
      for (var i = start; i < end; i++) {
        var c = oldCh[i];
        if (isDef(c) && sameVnode(node, c)) { return i }
      }
    }

    function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {
      if (oldVnode === vnode) {
        return
      }

      var elm = vnode.elm = oldVnode.elm;

      if (isTrue(oldVnode.isAsyncPlaceholder)) {
        if (isDef(vnode.asyncFactory.resolved)) {
          hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
        } else {
          vnode.isAsyncPlaceholder = true;
        }
        return
      }

      // reuse element for static trees.
      // note we only do this if the vnode is cloned -
      // if the new node is not cloned it means the render functions have been
      // reset by the hot-reload-api and we need to do a proper re-render.
      if (isTrue(vnode.isStatic) &&
        isTrue(oldVnode.isStatic) &&
        vnode.key === oldVnode.key &&
        (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
      ) {
        vnode.componentInstance = oldVnode.componentInstance;
        return
      }

      var i;
      var data = vnode.data;
      if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
        i(oldVnode, vnode);
      }

      var oldCh = oldVnode.children;
      var ch = vnode.children;
      if (isDef(data) && isPatchable(vnode)) {
        for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
        if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
      }
      if (isUndef(vnode.text)) {
        if (isDef(oldCh) && isDef(ch)) {
          if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
        } else if (isDef(ch)) {
          if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
          addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
        } else if (isDef(oldCh)) {
          removeVnodes(elm, oldCh, 0, oldCh.length - 1);
        } else if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }
      } else if (oldVnode.text !== vnode.text) {
        nodeOps.setTextContent(elm, vnode.text);
      }
      if (isDef(data)) {
        if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
      }
    }

    function invokeInsertHook (vnode, queue, initial) {
      // delay insert hooks for component root nodes, invoke them after the
      // element is really inserted
      if (isTrue(initial) && isDef(vnode.parent)) {
        vnode.parent.data.pendingInsert = queue;
      } else {
        for (var i = 0; i < queue.length; ++i) {
          queue[i].data.hook.insert(queue[i]);
        }
      }
    }

    var hydrationBailed = false;
    // list of modules that can skip create hook during hydration because they
    // are already rendered on the client or has no need for initialization
    // Note: style is excluded because it relies on initial clone for future
    // deep updates (#7063).
    var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

    // Note: this is a browser-only function so we can assume elms are DOM nodes.
    function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
      var i;
      var tag = vnode.tag;
      var data = vnode.data;
      var children = vnode.children;
      inVPre = inVPre || (data && data.pre);
      vnode.elm = elm;

      if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
        vnode.isAsyncPlaceholder = true;
        return true
      }
      // assert node match
      if (process.env.NODE_ENV !== 'production') {
        if (!assertNodeMatch(elm, vnode, inVPre)) {
          return false
        }
      }
      if (isDef(data)) {
        if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
        if (isDef(i = vnode.componentInstance)) {
          // child component. it should have hydrated its own tree.
          initComponent(vnode, insertedVnodeQueue);
          return true
        }
      }
      if (isDef(tag)) {
        if (isDef(children)) {
          // empty element, allow client to pick up and populate children
          if (!elm.hasChildNodes()) {
            createChildren(vnode, children, insertedVnodeQueue);
          } else {
            // v-html and domProps: innerHTML
            if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
              if (i !== elm.innerHTML) {
                /* istanbul ignore if */
                if (process.env.NODE_ENV !== 'production' &&
                  typeof console !== 'undefined' &&
                  !hydrationBailed
                ) {
                  hydrationBailed = true;
                  console.warn('Parent: ', elm);
                  console.warn('server innerHTML: ', i);
                  console.warn('client innerHTML: ', elm.innerHTML);
                }
                return false
              }
            } else {
              // iterate and compare children lists
              var childrenMatch = true;
              var childNode = elm.firstChild;
              for (var i$1 = 0; i$1 < children.length; i$1++) {
                if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                  childrenMatch = false;
                  break
                }
                childNode = childNode.nextSibling;
              }
              // if childNode is not null, it means the actual childNodes list is
              // longer than the virtual children list.
              if (!childrenMatch || childNode) {
                /* istanbul ignore if */
                if (process.env.NODE_ENV !== 'production' &&
                  typeof console !== 'undefined' &&
                  !hydrationBailed
                ) {
                  hydrationBailed = true;
                  console.warn('Parent: ', elm);
                  console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
                }
                return false
              }
            }
          }
        }
        if (isDef(data)) {
          var fullInvoke = false;
          for (var key in data) {
            if (!isRenderedModule(key)) {
              fullInvoke = true;
              invokeCreateHooks(vnode, insertedVnodeQueue);
              break
            }
          }
          if (!fullInvoke && data['class']) {
            // ensure collecting deps for deep class bindings for future updates
            traverse(data['class']);
          }
        }
      } else if (elm.data !== vnode.text) {
        elm.data = vnode.text;
      }
      return true
    }

    function assertNodeMatch (node, vnode, inVPre) {
      if (isDef(vnode.tag)) {
        return vnode.tag.indexOf('vue-component') === 0 || (
          !isUnknownElement$$1(vnode, inVPre) &&
          vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
        )
      } else {
        return node.nodeType === (vnode.isComment ? 8 : 3)
      }
    }

    return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
      if (isUndef(vnode)) {
        if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
        return
      }

      var isInitialPatch = false;
      var insertedVnodeQueue = [];

      if (isUndef(oldVnode)) {
        // empty mount (likely as component), create new root element
        isInitialPatch = true;
        createElm(vnode, insertedVnodeQueue, parentElm, refElm);
      } else {
        var isRealElement = isDef(oldVnode.nodeType);
        if (!isRealElement && sameVnode(oldVnode, vnode)) {
          // patch existing root node
          patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
        } else {
          if (isRealElement) {
            // mounting to a real element
            // check if this is server-rendered content and if we can perform
            // a successful hydration.
            if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
              oldVnode.removeAttribute(SSR_ATTR);
              hydrating = true;
            }
            if (isTrue(hydrating)) {
              if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
                invokeInsertHook(vnode, insertedVnodeQueue, true);
                return oldVnode
              } else if (process.env.NODE_ENV !== 'production') {
                warn(
                  'The client-side rendered virtual DOM tree is not matching ' +
                  'server-rendered content. This is likely caused by incorrect ' +
                  'HTML markup, for example nesting block-level elements inside ' +
                  '<p>, or missing <tbody>. Bailing hydration and performing ' +
                  'full client-side render.'
                );
              }
            }
            // either not server-rendered, or hydration failed.
            // create an empty node and replace it
            oldVnode = emptyNodeAt(oldVnode);
          }

          // replacing existing element
          var oldElm = oldVnode.elm;
          var parentElm$1 = nodeOps.parentNode(oldElm);

          // create new node
          createElm(
            vnode,
            insertedVnodeQueue,
            // extremely rare edge case: do not insert if old element is in a
            // leaving transition. Only happens when combining transition +
            // keep-alive + HOCs. (#4590)
            oldElm._leaveCb ? null : parentElm$1,
            nodeOps.nextSibling(oldElm)
          );

          // update parent placeholder node element, recursively
          if (isDef(vnode.parent)) {
            var ancestor = vnode.parent;
            var patchable = isPatchable(vnode);
            while (ancestor) {
              for (var i = 0; i < cbs.destroy.length; ++i) {
                cbs.destroy[i](ancestor);
              }
              ancestor.elm = vnode.elm;
              if (patchable) {
                for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                  cbs.create[i$1](emptyNode, ancestor);
                }
                // #6513
                // invoke insert hooks that may have been merged by create hooks.
                // e.g. for directives that uses the "inserted" hook.
                var insert = ancestor.data.hook.insert;
                if (insert.merged) {
                  // start at index 1 to avoid re-invoking component mounted hook
                  for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                    insert.fns[i$2]();
                  }
                }
              } else {
                registerRef(ancestor);
              }
              ancestor = ancestor.parent;
            }
          }

          // destroy old node
          if (isDef(parentElm$1)) {
            removeVnodes(parentElm$1, [oldVnode], 0, 0);
          } else if (isDef(oldVnode.tag)) {
            invokeDestroyHook(oldVnode);
          }
        }
      }

      invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
      return vnode.elm
    }
  }

  /*  */

  var directives = {
    create: updateDirectives,
    update: updateDirectives,
    destroy: function unbindDirectives (vnode) {
      updateDirectives(vnode, emptyNode);
    }
  };

  function updateDirectives (oldVnode, vnode) {
    if (oldVnode.data.directives || vnode.data.directives) {
      _update(oldVnode, vnode);
    }
  }

  function _update (oldVnode, vnode) {
    var isCreate = oldVnode === emptyNode;
    var isDestroy = vnode === emptyNode;
    var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
    var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

    var dirsWithInsert = [];
    var dirsWithPostpatch = [];

    var key, oldDir, dir;
    for (key in newDirs) {
      oldDir = oldDirs[key];
      dir = newDirs[key];
      if (!oldDir) {
        // new directive, bind
        callHook$1(dir, 'bind', vnode, oldVnode);
        if (dir.def && dir.def.inserted) {
          dirsWithInsert.push(dir);
        }
      } else {
        // existing directive, update
        dir.oldValue = oldDir.value;
        callHook$1(dir, 'update', vnode, oldVnode);
        if (dir.def && dir.def.componentUpdated) {
          dirsWithPostpatch.push(dir);
        }
      }
    }

    if (dirsWithInsert.length) {
      var callInsert = function () {
        for (var i = 0; i < dirsWithInsert.length; i++) {
          callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
        }
      };
      if (isCreate) {
        mergeVNodeHook(vnode, 'insert', callInsert);
      } else {
        callInsert();
      }
    }

    if (dirsWithPostpatch.length) {
      mergeVNodeHook(vnode, 'postpatch', function () {
        for (var i = 0; i < dirsWithPostpatch.length; i++) {
          callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
        }
      });
    }

    if (!isCreate) {
      for (key in oldDirs) {
        if (!newDirs[key]) {
          // no longer present, unbind
          callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
        }
      }
    }
  }

  var emptyModifiers = Object.create(null);

  function normalizeDirectives$1 (
    dirs,
    vm
  ) {
    var res = Object.create(null);
    if (!dirs) {
      // $flow-disable-line
      return res
    }
    var i, dir;
    for (i = 0; i < dirs.length; i++) {
      dir = dirs[i];
      if (!dir.modifiers) {
        // $flow-disable-line
        dir.modifiers = emptyModifiers;
      }
      res[getRawDirName(dir)] = dir;
      dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
    }
    // $flow-disable-line
    return res
  }

  function getRawDirName (dir) {
    return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
  }

  function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
    var fn = dir.def && dir.def[hook];
    if (fn) {
      try {
        fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
      } catch (e) {
        handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
      }
    }
  }

  var baseModules = [
    ref,
    directives
  ];

  /*  */

  function updateAttrs (oldVnode, vnode) {
    var opts = vnode.componentOptions;
    if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
      return
    }
    if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
      return
    }
    var key, cur, old;
    var elm = vnode.elm;
    var oldAttrs = oldVnode.data.attrs || {};
    var attrs = vnode.data.attrs || {};
    // clone observed objects, as the user probably wants to mutate it
    if (isDef(attrs.__ob__)) {
      attrs = vnode.data.attrs = extend({}, attrs);
    }

    for (key in attrs) {
      cur = attrs[key];
      old = oldAttrs[key];
      if (old !== cur) {
        setAttr(elm, key, cur);
      }
    }
    // #4391: in IE9, setting type can reset value for input[type=radio]
    // #6666: IE/Edge forces progress value down to 1 before setting a max
    /* istanbul ignore if */
    if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
      setAttr(elm, 'value', attrs.value);
    }
    for (key in oldAttrs) {
      if (isUndef(attrs[key])) {
        if (isXlink(key)) {
          elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
        } else if (!isEnumeratedAttr(key)) {
          elm.removeAttribute(key);
        }
      }
    }
  }

  function setAttr (el, key, value) {
    if (el.tagName.indexOf('-') > -1) {
      baseSetAttr(el, key, value);
    } else if (isBooleanAttr(key)) {
      // set attribute for blank value
      // e.g. <option disabled>Select one</option>
      if (isFalsyAttrValue(value)) {
        el.removeAttribute(key);
      } else {
        // technically allowfullscreen is a boolean attribute for <iframe>,
        // but Flash expects a value of "true" when used on <embed> tag
        value = key === 'allowfullscreen' && el.tagName === 'EMBED'
          ? 'true'
          : key;
        el.setAttribute(key, value);
      }
    } else if (isEnumeratedAttr(key)) {
      el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
    } else if (isXlink(key)) {
      if (isFalsyAttrValue(value)) {
        el.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else {
        el.setAttributeNS(xlinkNS, key, value);
      }
    } else {
      baseSetAttr(el, key, value);
    }
  }

  function baseSetAttr (el, key, value) {
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // #7138: IE10 & 11 fires input event when setting placeholder on
      // <textarea>... block the first input event and remove the blocker
      // immediately.
      /* istanbul ignore if */
      if (
        isIE && !isIE9 &&
        el.tagName === 'TEXTAREA' &&
        key === 'placeholder' && !el.__ieph
      ) {
        var blocker = function (e) {
          e.stopImmediatePropagation();
          el.removeEventListener('input', blocker);
        };
        el.addEventListener('input', blocker);
        // $flow-disable-line
        el.__ieph = true; /* IE placeholder patched */
      }
      el.setAttribute(key, value);
    }
  }

  var attrs = {
    create: updateAttrs,
    update: updateAttrs
  };

  /*  */

  function updateClass (oldVnode, vnode) {
    var el = vnode.elm;
    var data = vnode.data;
    var oldData = oldVnode.data;
    if (
      isUndef(data.staticClass) &&
      isUndef(data.class) && (
        isUndef(oldData) || (
          isUndef(oldData.staticClass) &&
          isUndef(oldData.class)
        )
      )
    ) {
      return
    }

    var cls = genClassForVnode(vnode);

    // handle transition classes
    var transitionClass = el._transitionClasses;
    if (isDef(transitionClass)) {
      cls = concat(cls, stringifyClass(transitionClass));
    }

    // set the class
    if (cls !== el._prevClass) {
      el.setAttribute('class', cls);
      el._prevClass = cls;
    }
  }

  var klass = {
    create: updateClass,
    update: updateClass
  };

  /*  */

  /*  */









  // add a raw attr (use this in preTransforms)








  // note: this only removes the attr from the Array (attrsList) so that it
  // doesn't get processed by processAttrs.
  // By default it does NOT remove it from the map (attrsMap) because the map is
  // needed during codegen.

  /*  */

  /**
   * Cross-platform code generation for component v-model
   */


  /**
   * Cross-platform codegen helper for generating v-model value assignment code.
   */

  /*  */

  // in some cases, the event used has to be determined at runtime
  // so we used some reserved tokens during compile.
  var RANGE_TOKEN = '__r';
  var CHECKBOX_RADIO_TOKEN = '__c';

  /*  */

  // normalize v-model event tokens that can only be determined at runtime.
  // it's important to place the event as the first in the array because
  // the whole point is ensuring the v-model callback gets called before
  // user-attached handlers.
  function normalizeEvents (on) {
    /* istanbul ignore if */
    if (isDef(on[RANGE_TOKEN])) {
      // IE input[type=range] only supports `change` event
      var event = isIE ? 'change' : 'input';
      on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
      delete on[RANGE_TOKEN];
    }
    // This was originally intended to fix #4521 but no longer necessary
    // after 2.5. Keeping it for backwards compat with generated code from < 2.4
    /* istanbul ignore if */
    if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
      on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
      delete on[CHECKBOX_RADIO_TOKEN];
    }
  }

  var target$1;

  function createOnceHandler (handler, event, capture) {
    var _target = target$1; // save current target element in closure
    return function onceHandler () {
      var res = handler.apply(null, arguments);
      if (res !== null) {
        remove$2(event, onceHandler, capture, _target);
      }
    }
  }

  function add$1 (
    event,
    handler,
    once$$1,
    capture,
    passive
  ) {
    handler = withMacroTask(handler);
    if (once$$1) { handler = createOnceHandler(handler, event, capture); }
    target$1.addEventListener(
      event,
      handler,
      supportsPassive
        ? { capture: capture, passive: passive }
        : capture
    );
  }

  function remove$2 (
    event,
    handler,
    capture,
    _target
  ) {
    (_target || target$1).removeEventListener(
      event,
      handler._withTask || handler,
      capture
    );
  }

  function updateDOMListeners (oldVnode, vnode) {
    if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
      return
    }
    var on = vnode.data.on || {};
    var oldOn = oldVnode.data.on || {};
    target$1 = vnode.elm;
    normalizeEvents(on);
    updateListeners(on, oldOn, add$1, remove$2, vnode.context);
    target$1 = undefined;
  }

  var events = {
    create: updateDOMListeners,
    update: updateDOMListeners
  };

  /*  */

  function updateDOMProps (oldVnode, vnode) {
    if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
      return
    }
    var key, cur;
    var elm = vnode.elm;
    var oldProps = oldVnode.data.domProps || {};
    var props = vnode.data.domProps || {};
    // clone observed objects, as the user probably wants to mutate it
    if (isDef(props.__ob__)) {
      props = vnode.data.domProps = extend({}, props);
    }

    for (key in oldProps) {
      if (isUndef(props[key])) {
        elm[key] = '';
      }
    }
    for (key in props) {
      cur = props[key];
      // ignore children if the node has textContent or innerHTML,
      // as these will throw away existing DOM nodes and cause removal errors
      // on subsequent patches (#3360)
      if (key === 'textContent' || key === 'innerHTML') {
        if (vnode.children) { vnode.children.length = 0; }
        if (cur === oldProps[key]) { continue }
        // #6601 work around Chrome version <= 55 bug where single textNode
        // replaced by innerHTML/textContent retains its parentNode property
        if (elm.childNodes.length === 1) {
          elm.removeChild(elm.childNodes[0]);
        }
      }

      if (key === 'value') {
        // store value as _value as well since
        // non-string values will be stringified
        elm._value = cur;
        // avoid resetting cursor position when value is the same
        var strCur = isUndef(cur) ? '' : String(cur);
        if (shouldUpdateValue(elm, strCur)) {
          elm.value = strCur;
        }
      } else {
        elm[key] = cur;
      }
    }
  }

  // check platforms/web/util/attrs.js acceptValue


  function shouldUpdateValue (elm, checkVal) {
    return (!elm.composing && (
      elm.tagName === 'OPTION' ||
      isNotInFocusAndDirty(elm, checkVal) ||
      isDirtyWithModifiers(elm, checkVal)
    ))
  }

  function isNotInFocusAndDirty (elm, checkVal) {
    // return true when textbox (.number and .trim) loses focus and its value is
    // not equal to the updated value
    var notInFocus = true;
    // #6157
    // work around IE bug when accessing document.activeElement in an iframe
    try { notInFocus = document.activeElement !== elm; } catch (e) {}
    return notInFocus && elm.value !== checkVal
  }

  function isDirtyWithModifiers (elm, newVal) {
    var value = elm.value;
    var modifiers = elm._vModifiers; // injected by v-model runtime
    if (isDef(modifiers)) {
      if (modifiers.lazy) {
        // inputs with lazy should only be updated when not in focus
        return false
      }
      if (modifiers.number) {
        return toNumber(value) !== toNumber(newVal)
      }
      if (modifiers.trim) {
        return value.trim() !== newVal.trim()
      }
    }
    return value !== newVal
  }

  var domProps = {
    create: updateDOMProps,
    update: updateDOMProps
  };

  /*  */

  var parseStyleText = cached(function (cssText) {
    var res = {};
    var listDelimiter = /;(?![^(]*\))/g;
    var propertyDelimiter = /:(.+)/;
    cssText.split(listDelimiter).forEach(function (item) {
      if (item) {
        var tmp = item.split(propertyDelimiter);
        tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
      }
    });
    return res
  });

  // merge static and dynamic style data on the same vnode
  function normalizeStyleData (data) {
    var style = normalizeStyleBinding(data.style);
    // static style is pre-processed into an object during compilation
    // and is always a fresh object, so it's safe to merge into it
    return data.staticStyle
      ? extend(data.staticStyle, style)
      : style
  }

  // normalize possible array / string values into Object
  function normalizeStyleBinding (bindingStyle) {
    if (Array.isArray(bindingStyle)) {
      return toObject(bindingStyle)
    }
    if (typeof bindingStyle === 'string') {
      return parseStyleText(bindingStyle)
    }
    return bindingStyle
  }

  /**
   * parent component style should be after child's
   * so that parent component's style could override it
   */
  function getStyle (vnode, checkChild) {
    var res = {};
    var styleData;

    if (checkChild) {
      var childNode = vnode;
      while (childNode.componentInstance) {
        childNode = childNode.componentInstance._vnode;
        if (
          childNode && childNode.data &&
          (styleData = normalizeStyleData(childNode.data))
        ) {
          extend(res, styleData);
        }
      }
    }

    if ((styleData = normalizeStyleData(vnode.data))) {
      extend(res, styleData);
    }

    var parentNode = vnode;
    while ((parentNode = parentNode.parent)) {
      if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
        extend(res, styleData);
      }
    }
    return res
  }

  /*  */

  var cssVarRE = /^--/;
  var importantRE = /\s*!important$/;
  var setProp = function (el, name, val) {
    /* istanbul ignore if */
    if (cssVarRE.test(name)) {
      el.style.setProperty(name, val);
    } else if (importantRE.test(val)) {
      el.style.setProperty(name, val.replace(importantRE, ''), 'important');
    } else {
      var normalizedName = normalize(name);
      if (Array.isArray(val)) {
        // Support values array created by autoprefixer, e.g.
        // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
        // Set them one by one, and the browser will only set those it can recognize
        for (var i = 0, len = val.length; i < len; i++) {
          el.style[normalizedName] = val[i];
        }
      } else {
        el.style[normalizedName] = val;
      }
    }
  };

  var vendorNames = ['Webkit', 'Moz', 'ms'];

  var emptyStyle;
  var normalize = cached(function (prop) {
    emptyStyle = emptyStyle || document.createElement('div').style;
    prop = camelize(prop);
    if (prop !== 'filter' && (prop in emptyStyle)) {
      return prop
    }
    var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
    for (var i = 0; i < vendorNames.length; i++) {
      var name = vendorNames[i] + capName;
      if (name in emptyStyle) {
        return name
      }
    }
  });

  function updateStyle (oldVnode, vnode) {
    var data = vnode.data;
    var oldData = oldVnode.data;

    if (isUndef(data.staticStyle) && isUndef(data.style) &&
      isUndef(oldData.staticStyle) && isUndef(oldData.style)
    ) {
      return
    }

    var cur, name;
    var el = vnode.elm;
    var oldStaticStyle = oldData.staticStyle;
    var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

    // if static style exists, stylebinding already merged into it when doing normalizeStyleData
    var oldStyle = oldStaticStyle || oldStyleBinding;

    var style = normalizeStyleBinding(vnode.data.style) || {};

    // store normalized style under a different key for next diff
    // make sure to clone it if it's reactive, since the user likely wants
    // to mutate it.
    vnode.data.normalizedStyle = isDef(style.__ob__)
      ? extend({}, style)
      : style;

    var newStyle = getStyle(vnode, true);

    for (name in oldStyle) {
      if (isUndef(newStyle[name])) {
        setProp(el, name, '');
      }
    }
    for (name in newStyle) {
      cur = newStyle[name];
      if (cur !== oldStyle[name]) {
        // ie9 setting to null has no effect, must use empty string
        setProp(el, name, cur == null ? '' : cur);
      }
    }
  }

  var style = {
    create: updateStyle,
    update: updateStyle
  };

  /*  */

  /**
   * Add class with compatibility for SVG since classList is not supported on
   * SVG elements in IE
   */
  function addClass (el, cls) {
    /* istanbul ignore if */
    if (!cls || !(cls = cls.trim())) {
      return
    }

    /* istanbul ignore else */
    if (el.classList) {
      if (cls.indexOf(' ') > -1) {
        cls.split(/\s+/).forEach(function (c) { return el.classList.add(c); });
      } else {
        el.classList.add(cls);
      }
    } else {
      var cur = " " + (el.getAttribute('class') || '') + " ";
      if (cur.indexOf(' ' + cls + ' ') < 0) {
        el.setAttribute('class', (cur + cls).trim());
      }
    }
  }

  /**
   * Remove class with compatibility for SVG since classList is not supported on
   * SVG elements in IE
   */
  function removeClass (el, cls) {
    /* istanbul ignore if */
    if (!cls || !(cls = cls.trim())) {
      return
    }

    /* istanbul ignore else */
    if (el.classList) {
      if (cls.indexOf(' ') > -1) {
        cls.split(/\s+/).forEach(function (c) { return el.classList.remove(c); });
      } else {
        el.classList.remove(cls);
      }
      if (!el.classList.length) {
        el.removeAttribute('class');
      }
    } else {
      var cur = " " + (el.getAttribute('class') || '') + " ";
      var tar = ' ' + cls + ' ';
      while (cur.indexOf(tar) >= 0) {
        cur = cur.replace(tar, ' ');
      }
      cur = cur.trim();
      if (cur) {
        el.setAttribute('class', cur);
      } else {
        el.removeAttribute('class');
      }
    }
  }

  /*  */

  function resolveTransition (def) {
    if (!def) {
      return
    }
    /* istanbul ignore else */
    if (typeof def === 'object') {
      var res = {};
      if (def.css !== false) {
        extend(res, autoCssTransition(def.name || 'v'));
      }
      extend(res, def);
      return res
    } else if (typeof def === 'string') {
      return autoCssTransition(def)
    }
  }

  var autoCssTransition = cached(function (name) {
    return {
      enterClass: (name + "-enter"),
      enterToClass: (name + "-enter-to"),
      enterActiveClass: (name + "-enter-active"),
      leaveClass: (name + "-leave"),
      leaveToClass: (name + "-leave-to"),
      leaveActiveClass: (name + "-leave-active")
    }
  });

  var hasTransition = inBrowser && !isIE9;
  var TRANSITION = 'transition';
  var ANIMATION = 'animation';

  // Transition property/event sniffing
  var transitionProp = 'transition';
  var transitionEndEvent = 'transitionend';
  var animationProp = 'animation';
  var animationEndEvent = 'animationend';
  if (hasTransition) {
    /* istanbul ignore if */
    if (window.ontransitionend === undefined &&
      window.onwebkittransitionend !== undefined
    ) {
      transitionProp = 'WebkitTransition';
      transitionEndEvent = 'webkitTransitionEnd';
    }
    if (window.onanimationend === undefined &&
      window.onwebkitanimationend !== undefined
    ) {
      animationProp = 'WebkitAnimation';
      animationEndEvent = 'webkitAnimationEnd';
    }
  }

  // binding to window is necessary to make hot reload work in IE in strict mode
  var raf = inBrowser
    ? window.requestAnimationFrame
      ? window.requestAnimationFrame.bind(window)
      : setTimeout
    : /* istanbul ignore next */ function (fn) { return fn(); };

  function nextFrame (fn) {
    raf(function () {
      raf(fn);
    });
  }

  function addTransitionClass (el, cls) {
    var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
    if (transitionClasses.indexOf(cls) < 0) {
      transitionClasses.push(cls);
      addClass(el, cls);
    }
  }

  function removeTransitionClass (el, cls) {
    if (el._transitionClasses) {
      remove(el._transitionClasses, cls);
    }
    removeClass(el, cls);
  }

  function whenTransitionEnds (
    el,
    expectedType,
    cb
  ) {
    var ref = getTransitionInfo(el, expectedType);
    var type = ref.type;
    var timeout = ref.timeout;
    var propCount = ref.propCount;
    if (!type) { return cb() }
    var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
    var ended = 0;
    var end = function () {
      el.removeEventListener(event, onEnd);
      cb();
    };
    var onEnd = function (e) {
      if (e.target === el) {
        if (++ended >= propCount) {
          end();
        }
      }
    };
    setTimeout(function () {
      if (ended < propCount) {
        end();
      }
    }, timeout + 1);
    el.addEventListener(event, onEnd);
  }

  var transformRE = /\b(transform|all)(,|$)/;

  function getTransitionInfo (el, expectedType) {
    var styles = window.getComputedStyle(el);
    var transitionDelays = styles[transitionProp + 'Delay'].split(', ');
    var transitionDurations = styles[transitionProp + 'Duration'].split(', ');
    var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
    var animationDelays = styles[animationProp + 'Delay'].split(', ');
    var animationDurations = styles[animationProp + 'Duration'].split(', ');
    var animationTimeout = getTimeout(animationDelays, animationDurations);

    var type;
    var timeout = 0;
    var propCount = 0;
    /* istanbul ignore if */
    if (expectedType === TRANSITION) {
      if (transitionTimeout > 0) {
        type = TRANSITION;
        timeout = transitionTimeout;
        propCount = transitionDurations.length;
      }
    } else if (expectedType === ANIMATION) {
      if (animationTimeout > 0) {
        type = ANIMATION;
        timeout = animationTimeout;
        propCount = animationDurations.length;
      }
    } else {
      timeout = Math.max(transitionTimeout, animationTimeout);
      type = timeout > 0
        ? transitionTimeout > animationTimeout
          ? TRANSITION
          : ANIMATION
        : null;
      propCount = type
        ? type === TRANSITION
          ? transitionDurations.length
          : animationDurations.length
        : 0;
    }
    var hasTransform =
      type === TRANSITION &&
      transformRE.test(styles[transitionProp + 'Property']);
    return {
      type: type,
      timeout: timeout,
      propCount: propCount,
      hasTransform: hasTransform
    }
  }

  function getTimeout (delays, durations) {
    /* istanbul ignore next */
    while (delays.length < durations.length) {
      delays = delays.concat(delays);
    }

    return Math.max.apply(null, durations.map(function (d, i) {
      return toMs(d) + toMs(delays[i])
    }))
  }

  function toMs (s) {
    return Number(s.slice(0, -1)) * 1000
  }

  /*  */

  function enter (vnode, toggleDisplay) {
    var el = vnode.elm;

    // call leave callback now
    if (isDef(el._leaveCb)) {
      el._leaveCb.cancelled = true;
      el._leaveCb();
    }

    var data = resolveTransition(vnode.data.transition);
    if (isUndef(data)) {
      return
    }

    /* istanbul ignore if */
    if (isDef(el._enterCb) || el.nodeType !== 1) {
      return
    }

    var css = data.css;
    var type = data.type;
    var enterClass = data.enterClass;
    var enterToClass = data.enterToClass;
    var enterActiveClass = data.enterActiveClass;
    var appearClass = data.appearClass;
    var appearToClass = data.appearToClass;
    var appearActiveClass = data.appearActiveClass;
    var beforeEnter = data.beforeEnter;
    var enter = data.enter;
    var afterEnter = data.afterEnter;
    var enterCancelled = data.enterCancelled;
    var beforeAppear = data.beforeAppear;
    var appear = data.appear;
    var afterAppear = data.afterAppear;
    var appearCancelled = data.appearCancelled;
    var duration = data.duration;

    // activeInstance will always be the <transition> component managing this
    // transition. One edge case to check is when the <transition> is placed
    // as the root node of a child component. In that case we need to check
    // <transition>'s parent for appear check.
    var context = activeInstance;
    var transitionNode = activeInstance.$vnode;
    while (transitionNode && transitionNode.parent) {
      transitionNode = transitionNode.parent;
      context = transitionNode.context;
    }

    var isAppear = !context._isMounted || !vnode.isRootInsert;

    if (isAppear && !appear && appear !== '') {
      return
    }

    var startClass = isAppear && appearClass
      ? appearClass
      : enterClass;
    var activeClass = isAppear && appearActiveClass
      ? appearActiveClass
      : enterActiveClass;
    var toClass = isAppear && appearToClass
      ? appearToClass
      : enterToClass;

    var beforeEnterHook = isAppear
      ? (beforeAppear || beforeEnter)
      : beforeEnter;
    var enterHook = isAppear
      ? (typeof appear === 'function' ? appear : enter)
      : enter;
    var afterEnterHook = isAppear
      ? (afterAppear || afterEnter)
      : afterEnter;
    var enterCancelledHook = isAppear
      ? (appearCancelled || enterCancelled)
      : enterCancelled;

    var explicitEnterDuration = toNumber(
      isObject$1(duration)
        ? duration.enter
        : duration
    );

    if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {
      checkDuration(explicitEnterDuration, 'enter', vnode);
    }

    var expectsCSS = css !== false && !isIE9;
    var userWantsControl = getHookArgumentsLength(enterHook);

    var cb = el._enterCb = once(function () {
      if (expectsCSS) {
        removeTransitionClass(el, toClass);
        removeTransitionClass(el, activeClass);
      }
      if (cb.cancelled) {
        if (expectsCSS) {
          removeTransitionClass(el, startClass);
        }
        enterCancelledHook && enterCancelledHook(el);
      } else {
        afterEnterHook && afterEnterHook(el);
      }
      el._enterCb = null;
    });

    if (!vnode.data.show) {
      // remove pending leave element on enter by injecting an insert hook
      mergeVNodeHook(vnode, 'insert', function () {
        var parent = el.parentNode;
        var pendingNode = parent && parent._pending && parent._pending[vnode.key];
        if (pendingNode &&
          pendingNode.tag === vnode.tag &&
          pendingNode.elm._leaveCb
        ) {
          pendingNode.elm._leaveCb();
        }
        enterHook && enterHook(el, cb);
      });
    }

    // start enter transition
    beforeEnterHook && beforeEnterHook(el);
    if (expectsCSS) {
      addTransitionClass(el, startClass);
      addTransitionClass(el, activeClass);
      nextFrame(function () {
        removeTransitionClass(el, startClass);
        if (!cb.cancelled) {
          addTransitionClass(el, toClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitEnterDuration)) {
              setTimeout(cb, explicitEnterDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }

    if (vnode.data.show) {
      toggleDisplay && toggleDisplay();
      enterHook && enterHook(el, cb);
    }

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }

  function leave (vnode, rm) {
    var el = vnode.elm;

    // call enter callback now
    if (isDef(el._enterCb)) {
      el._enterCb.cancelled = true;
      el._enterCb();
    }

    var data = resolveTransition(vnode.data.transition);
    if (isUndef(data) || el.nodeType !== 1) {
      return rm()
    }

    /* istanbul ignore if */
    if (isDef(el._leaveCb)) {
      return
    }

    var css = data.css;
    var type = data.type;
    var leaveClass = data.leaveClass;
    var leaveToClass = data.leaveToClass;
    var leaveActiveClass = data.leaveActiveClass;
    var beforeLeave = data.beforeLeave;
    var leave = data.leave;
    var afterLeave = data.afterLeave;
    var leaveCancelled = data.leaveCancelled;
    var delayLeave = data.delayLeave;
    var duration = data.duration;

    var expectsCSS = css !== false && !isIE9;
    var userWantsControl = getHookArgumentsLength(leave);

    var explicitLeaveDuration = toNumber(
      isObject$1(duration)
        ? duration.leave
        : duration
    );

    if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {
      checkDuration(explicitLeaveDuration, 'leave', vnode);
    }

    var cb = el._leaveCb = once(function () {
      if (el.parentNode && el.parentNode._pending) {
        el.parentNode._pending[vnode.key] = null;
      }
      if (expectsCSS) {
        removeTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveActiveClass);
      }
      if (cb.cancelled) {
        if (expectsCSS) {
          removeTransitionClass(el, leaveClass);
        }
        leaveCancelled && leaveCancelled(el);
      } else {
        rm();
        afterLeave && afterLeave(el);
      }
      el._leaveCb = null;
    });

    if (delayLeave) {
      delayLeave(performLeave);
    } else {
      performLeave();
    }

    function performLeave () {
      // the delayed leave may have already been cancelled
      if (cb.cancelled) {
        return
      }
      // record leaving element
      if (!vnode.data.show) {
        (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
      }
      beforeLeave && beforeLeave(el);
      if (expectsCSS) {
        addTransitionClass(el, leaveClass);
        addTransitionClass(el, leaveActiveClass);
        nextFrame(function () {
          removeTransitionClass(el, leaveClass);
          if (!cb.cancelled) {
            addTransitionClass(el, leaveToClass);
            if (!userWantsControl) {
              if (isValidDuration(explicitLeaveDuration)) {
                setTimeout(cb, explicitLeaveDuration);
              } else {
                whenTransitionEnds(el, type, cb);
              }
            }
          }
        });
      }
      leave && leave(el, cb);
      if (!expectsCSS && !userWantsControl) {
        cb();
      }
    }
  }

  // only used in dev mode
  function checkDuration (val, name, vnode) {
    if (typeof val !== 'number') {
      warn(
        "<transition> explicit " + name + " duration is not a valid number - " +
        "got " + (JSON.stringify(val)) + ".",
        vnode.context
      );
    } else if (isNaN(val)) {
      warn(
        "<transition> explicit " + name + " duration is NaN - " +
        'the duration expression might be incorrect.',
        vnode.context
      );
    }
  }

  function isValidDuration (val) {
    return typeof val === 'number' && !isNaN(val)
  }

  /**
   * Normalize a transition hook's argument length. The hook may be:
   * - a merged hook (invoker) with the original in .fns
   * - a wrapped component method (check ._length)
   * - a plain function (.length)
   */
  function getHookArgumentsLength (fn) {
    if (isUndef(fn)) {
      return false
    }
    var invokerFns = fn.fns;
    if (isDef(invokerFns)) {
      // invoker
      return getHookArgumentsLength(
        Array.isArray(invokerFns)
          ? invokerFns[0]
          : invokerFns
      )
    } else {
      return (fn._length || fn.length) > 1
    }
  }

  function _enter (_, vnode) {
    if (vnode.data.show !== true) {
      enter(vnode);
    }
  }

  var transition = inBrowser ? {
    create: _enter,
    activate: _enter,
    remove: function remove$$1 (vnode, rm) {
      /* istanbul ignore else */
      if (vnode.data.show !== true) {
        leave(vnode, rm);
      } else {
        rm();
      }
    }
  } : {};

  var platformModules = [
    attrs,
    klass,
    events,
    domProps,
    style,
    transition
  ];

  /*  */

  // the directive module should be applied last, after all
  // built-in modules have been applied.
  var modules = platformModules.concat(baseModules);

  var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

  /**
   * Not type checking this file because flow doesn't like attaching
   * properties to Elements.
   */

  /* istanbul ignore if */
  if (isIE9) {
    // http://www.matts411.com/post/internet-explorer-9-oninput/
    document.addEventListener('selectionchange', function () {
      var el = document.activeElement;
      if (el && el.vmodel) {
        trigger(el, 'input');
      }
    });
  }

  var directive = {
    inserted: function inserted (el, binding, vnode, oldVnode) {
      if (vnode.tag === 'select') {
        // #6903
        if (oldVnode.elm && !oldVnode.elm._vOptions) {
          mergeVNodeHook(vnode, 'postpatch', function () {
            directive.componentUpdated(el, binding, vnode);
          });
        } else {
          setSelected(el, binding, vnode.context);
        }
        el._vOptions = [].map.call(el.options, getValue);
      } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
        el._vModifiers = binding.modifiers;
        if (!binding.modifiers.lazy) {
          el.addEventListener('compositionstart', onCompositionStart);
          el.addEventListener('compositionend', onCompositionEnd);
          // Safari < 10.2 & UIWebView doesn't fire compositionend when
          // switching focus before confirming composition choice
          // this also fixes the issue where some browsers e.g. iOS Chrome
          // fires "change" instead of "input" on autocomplete.
          el.addEventListener('change', onCompositionEnd);
          /* istanbul ignore if */
          if (isIE9) {
            el.vmodel = true;
          }
        }
      }
    },

    componentUpdated: function componentUpdated (el, binding, vnode) {
      if (vnode.tag === 'select') {
        setSelected(el, binding, vnode.context);
        // in case the options rendered by v-for have changed,
        // it's possible that the value is out-of-sync with the rendered options.
        // detect such cases and filter out values that no longer has a matching
        // option in the DOM.
        var prevOptions = el._vOptions;
        var curOptions = el._vOptions = [].map.call(el.options, getValue);
        if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
          // trigger change event if
          // no matching option found for at least one value
          var needReset = el.multiple
            ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
            : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
          if (needReset) {
            trigger(el, 'change');
          }
        }
      }
    }
  };

  function setSelected (el, binding, vm) {
    actuallySetSelected(el, binding, vm);
    /* istanbul ignore if */
    if (isIE || isEdge) {
      setTimeout(function () {
        actuallySetSelected(el, binding, vm);
      }, 0);
    }
  }

  function actuallySetSelected (el, binding, vm) {
    var value = binding.value;
    var isMultiple = el.multiple;
    if (isMultiple && !Array.isArray(value)) {
      process.env.NODE_ENV !== 'production' && warn(
        "<select multiple v-model=\"" + (binding.expression) + "\"> " +
        "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
        vm
      );
      return
    }
    var selected, option;
    for (var i = 0, l = el.options.length; i < l; i++) {
      option = el.options[i];
      if (isMultiple) {
        selected = looseIndexOf(value, getValue(option)) > -1;
        if (option.selected !== selected) {
          option.selected = selected;
        }
      } else {
        if (looseEqual(getValue(option), value)) {
          if (el.selectedIndex !== i) {
            el.selectedIndex = i;
          }
          return
        }
      }
    }
    if (!isMultiple) {
      el.selectedIndex = -1;
    }
  }

  function hasNoMatchingOption (value, options) {
    return options.every(function (o) { return !looseEqual(o, value); })
  }

  function getValue (option) {
    return '_value' in option
      ? option._value
      : option.value
  }

  function onCompositionStart (e) {
    e.target.composing = true;
  }

  function onCompositionEnd (e) {
    // prevent triggering an input event for no reason
    if (!e.target.composing) { return }
    e.target.composing = false;
    trigger(e.target, 'input');
  }

  function trigger (el, type) {
    var e = document.createEvent('HTMLEvents');
    e.initEvent(type, true, true);
    el.dispatchEvent(e);
  }

  /*  */

  // recursively search for possible transition defined inside the component root
  function locateNode (vnode) {
    return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
      ? locateNode(vnode.componentInstance._vnode)
      : vnode
  }

  var show = {
    bind: function bind (el, ref, vnode) {
      var value = ref.value;

      vnode = locateNode(vnode);
      var transition$$1 = vnode.data && vnode.data.transition;
      var originalDisplay = el.__vOriginalDisplay =
        el.style.display === 'none' ? '' : el.style.display;
      if (value && transition$$1) {
        vnode.data.show = true;
        enter(vnode, function () {
          el.style.display = originalDisplay;
        });
      } else {
        el.style.display = value ? originalDisplay : 'none';
      }
    },

    update: function update (el, ref, vnode) {
      var value = ref.value;
      var oldValue = ref.oldValue;

      /* istanbul ignore if */
      if (!value === !oldValue) { return }
      vnode = locateNode(vnode);
      var transition$$1 = vnode.data && vnode.data.transition;
      if (transition$$1) {
        vnode.data.show = true;
        if (value) {
          enter(vnode, function () {
            el.style.display = el.__vOriginalDisplay;
          });
        } else {
          leave(vnode, function () {
            el.style.display = 'none';
          });
        }
      } else {
        el.style.display = value ? el.__vOriginalDisplay : 'none';
      }
    },

    unbind: function unbind (
      el,
      binding,
      vnode,
      oldVnode,
      isDestroy
    ) {
      if (!isDestroy) {
        el.style.display = el.__vOriginalDisplay;
      }
    }
  };

  var platformDirectives = {
    model: directive,
    show: show
  };

  /*  */

  // Provides transition support for a single element/component.
  // supports transition mode (out-in / in-out)

  var transitionProps = {
    name: String,
    appear: Boolean,
    css: Boolean,
    mode: String,
    type: String,
    enterClass: String,
    leaveClass: String,
    enterToClass: String,
    leaveToClass: String,
    enterActiveClass: String,
    leaveActiveClass: String,
    appearClass: String,
    appearActiveClass: String,
    appearToClass: String,
    duration: [Number, String, Object]
  };

  // in case the child is also an abstract component, e.g. <keep-alive>
  // we want to recursively retrieve the real component to be rendered
  function getRealChild (vnode) {
    var compOptions = vnode && vnode.componentOptions;
    if (compOptions && compOptions.Ctor.options.abstract) {
      return getRealChild(getFirstComponentChild(compOptions.children))
    } else {
      return vnode
    }
  }

  function extractTransitionData (comp) {
    var data = {};
    var options = comp.$options;
    // props
    for (var key in options.propsData) {
      data[key] = comp[key];
    }
    // events.
    // extract listeners and pass them directly to the transition methods
    var listeners = options._parentListeners;
    for (var key$1 in listeners) {
      data[camelize(key$1)] = listeners[key$1];
    }
    return data
  }

  function placeholder (h, rawChild) {
    if (/\d-keep-alive$/.test(rawChild.tag)) {
      return h('keep-alive', {
        props: rawChild.componentOptions.propsData
      })
    }
  }

  function hasParentTransition (vnode) {
    while ((vnode = vnode.parent)) {
      if (vnode.data.transition) {
        return true
      }
    }
  }

  function isSameChild (child, oldChild) {
    return oldChild.key === child.key && oldChild.tag === child.tag
  }

  var Transition = {
    name: 'transition',
    props: transitionProps,
    abstract: true,

    render: function render (h) {
      var this$1 = this;

      var children = this.$slots.default;
      if (!children) {
        return
      }

      // filter out text nodes (possible whitespaces)
      children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });
      /* istanbul ignore if */
      if (!children.length) {
        return
      }

      // warn multiple elements
      if (process.env.NODE_ENV !== 'production' && children.length > 1) {
        warn(
          '<transition> can only be used on a single element. Use ' +
          '<transition-group> for lists.',
          this.$parent
        );
      }

      var mode = this.mode;

      // warn invalid mode
      if (process.env.NODE_ENV !== 'production' &&
        mode && mode !== 'in-out' && mode !== 'out-in'
      ) {
        warn(
          'invalid <transition> mode: ' + mode,
          this.$parent
        );
      }

      var rawChild = children[0];

      // if this is a component root node and the component's
      // parent container node also has transition, skip.
      if (hasParentTransition(this.$vnode)) {
        return rawChild
      }

      // apply transition data to child
      // use getRealChild() to ignore abstract components e.g. keep-alive
      var child = getRealChild(rawChild);
      /* istanbul ignore if */
      if (!child) {
        return rawChild
      }

      if (this._leaving) {
        return placeholder(h, rawChild)
      }

      // ensure a key that is unique to the vnode type and to this transition
      // component instance. This key will be used to remove pending leaving nodes
      // during entering.
      var id = "__transition-" + (this._uid) + "-";
      child.key = child.key == null
        ? child.isComment
          ? id + 'comment'
          : id + child.tag
        : isPrimitive(child.key)
          ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
          : child.key;

      var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
      var oldRawChild = this._vnode;
      var oldChild = getRealChild(oldRawChild);

      // mark v-show
      // so that the transition module can hand over the control to the directive
      if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {
        child.data.show = true;
      }

      if (
        oldChild &&
        oldChild.data &&
        !isSameChild(child, oldChild) &&
        !isAsyncPlaceholder(oldChild) &&
        // #6687 component root is a comment node
        !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
      ) {
        // replace old child transition data with fresh one
        // important for dynamic transitions!
        var oldData = oldChild.data.transition = extend({}, data);
        // handle transition mode
        if (mode === 'out-in') {
          // return placeholder node and queue update when leave finishes
          this._leaving = true;
          mergeVNodeHook(oldData, 'afterLeave', function () {
            this$1._leaving = false;
            this$1.$forceUpdate();
          });
          return placeholder(h, rawChild)
        } else if (mode === 'in-out') {
          if (isAsyncPlaceholder(child)) {
            return oldRawChild
          }
          var delayedLeave;
          var performLeave = function () { delayedLeave(); };
          mergeVNodeHook(data, 'afterEnter', performLeave);
          mergeVNodeHook(data, 'enterCancelled', performLeave);
          mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
        }
      }

      return rawChild
    }
  };

  /*  */

  // Provides transition support for list items.
  // supports move transitions using the FLIP technique.

  // Because the vdom's children update algorithm is "unstable" - i.e.
  // it doesn't guarantee the relative positioning of removed elements,
  // we force transition-group to update its children into two passes:
  // in the first pass, we remove all nodes that need to be removed,
  // triggering their leaving transition; in the second pass, we insert/move
  // into the final desired state. This way in the second pass removed
  // nodes will remain where they should be.

  var props = extend({
    tag: String,
    moveClass: String
  }, transitionProps);

  delete props.mode;

  var TransitionGroup = {
    props: props,

    render: function render (h) {
      var tag = this.tag || this.$vnode.data.tag || 'span';
      var map = Object.create(null);
      var prevChildren = this.prevChildren = this.children;
      var rawChildren = this.$slots.default || [];
      var children = this.children = [];
      var transitionData = extractTransitionData(this);

      for (var i = 0; i < rawChildren.length; i++) {
        var c = rawChildren[i];
        if (c.tag) {
          if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
            children.push(c);
            map[c.key] = c
            ;(c.data || (c.data = {})).transition = transitionData;
          } else if (process.env.NODE_ENV !== 'production') {
            var opts = c.componentOptions;
            var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
            warn(("<transition-group> children must be keyed: <" + name + ">"));
          }
        }
      }

      if (prevChildren) {
        var kept = [];
        var removed = [];
        for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
          var c$1 = prevChildren[i$1];
          c$1.data.transition = transitionData;
          c$1.data.pos = c$1.elm.getBoundingClientRect();
          if (map[c$1.key]) {
            kept.push(c$1);
          } else {
            removed.push(c$1);
          }
        }
        this.kept = h(tag, null, kept);
        this.removed = removed;
      }

      return h(tag, null, children)
    },

    beforeUpdate: function beforeUpdate () {
      // force removing pass
      this.__patch__(
        this._vnode,
        this.kept,
        false, // hydrating
        true // removeOnly (!important, avoids unnecessary moves)
      );
      this._vnode = this.kept;
    },

    updated: function updated () {
      var children = this.prevChildren;
      var moveClass = this.moveClass || ((this.name || 'v') + '-move');
      if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
        return
      }

      // we divide the work into three loops to avoid mixing DOM reads and writes
      // in each iteration - which helps prevent layout thrashing.
      children.forEach(callPendingCbs);
      children.forEach(recordPosition);
      children.forEach(applyTranslation);

      // force reflow to put everything in position
      // assign to this to avoid being removed in tree-shaking
      // $flow-disable-line
      this._reflow = document.body.offsetHeight;

      children.forEach(function (c) {
        if (c.data.moved) {
          var el = c.elm;
          var s = el.style;
          addTransitionClass(el, moveClass);
          s.transform = s.WebkitTransform = s.transitionDuration = '';
          el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
            if (!e || /transform$/.test(e.propertyName)) {
              el.removeEventListener(transitionEndEvent, cb);
              el._moveCb = null;
              removeTransitionClass(el, moveClass);
            }
          });
        }
      });
    },

    methods: {
      hasMove: function hasMove (el, moveClass) {
        /* istanbul ignore if */
        if (!hasTransition) {
          return false
        }
        /* istanbul ignore if */
        if (this._hasMove) {
          return this._hasMove
        }
        // Detect whether an element with the move class applied has
        // CSS transitions. Since the element may be inside an entering
        // transition at this very moment, we make a clone of it and remove
        // all other transition classes applied to ensure only the move class
        // is applied.
        var clone = el.cloneNode();
        if (el._transitionClasses) {
          el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
        }
        addClass(clone, moveClass);
        clone.style.display = 'none';
        this.$el.appendChild(clone);
        var info = getTransitionInfo(clone);
        this.$el.removeChild(clone);
        return (this._hasMove = info.hasTransform)
      }
    }
  };

  function callPendingCbs (c) {
    /* istanbul ignore if */
    if (c.elm._moveCb) {
      c.elm._moveCb();
    }
    /* istanbul ignore if */
    if (c.elm._enterCb) {
      c.elm._enterCb();
    }
  }

  function recordPosition (c) {
    c.data.newPos = c.elm.getBoundingClientRect();
  }

  function applyTranslation (c) {
    var oldPos = c.data.pos;
    var newPos = c.data.newPos;
    var dx = oldPos.left - newPos.left;
    var dy = oldPos.top - newPos.top;
    if (dx || dy) {
      c.data.moved = true;
      var s = c.elm.style;
      s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
      s.transitionDuration = '0s';
    }
  }

  var platformComponents = {
    Transition: Transition,
    TransitionGroup: TransitionGroup
  };

  /*  */

  // install platform specific utils
  Vue$1.config.mustUseProp = mustUseProp;
  Vue$1.config.isReservedTag = isReservedTag;
  Vue$1.config.isReservedAttr = isReservedAttr;
  Vue$1.config.getTagNamespace = getTagNamespace;
  Vue$1.config.isUnknownElement = isUnknownElement;

  // install platform runtime directives & components
  extend(Vue$1.options.directives, platformDirectives);
  extend(Vue$1.options.components, platformComponents);

  // install platform patch function
  Vue$1.prototype.__patch__ = inBrowser ? patch : noop;

  // public mount method
  Vue$1.prototype.$mount = function (
    el,
    hydrating
  ) {
    el = el && inBrowser ? query(el) : undefined;
    return mountComponent(this, el, hydrating)
  };

  // devtools global hook
  /* istanbul ignore next */
  if (inBrowser) {
    setTimeout(function () {
      if (config.devtools) {
        if (devtools) {
          devtools.emit('init', Vue$1);
        } else if (
          process.env.NODE_ENV !== 'production' &&
          process.env.NODE_ENV !== 'test' &&
          isChrome
        ) {
          console[console.info ? 'info' : 'log'](
            'Download the Vue Devtools extension for a better development experience:\n' +
            'https://github.com/vuejs/vue-devtools'
          );
        }
      }
      if (process.env.NODE_ENV !== 'production' &&
        process.env.NODE_ENV !== 'test' &&
        config.productionTip !== false &&
        typeof console !== 'undefined'
      ) {
        console[console.info ? 'info' : 'log'](
          "You are running Vue in development mode.\n" +
          "Make sure to turn on production mode when deploying for production.\n" +
          "See more tips at https://vuejs.org/guide/deployment.html"
        );
      }
    }, 0);
  }

  var hasOwn$1 = Object.prototype.hasOwnProperty;
  var toStr = Object.prototype.toString;

  var isArray = function isArray(arr) {
  	if (typeof Array.isArray === 'function') {
  		return Array.isArray(arr);
  	}

  	return toStr.call(arr) === '[object Array]';
  };

  var isPlainObject$1 = function isPlainObject(obj) {
  	if (!obj || toStr.call(obj) !== '[object Object]') {
  		return false;
  	}

  	var hasOwnConstructor = hasOwn$1.call(obj, 'constructor');
  	var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn$1.call(obj.constructor.prototype, 'isPrototypeOf');
  	// Not own constructor property must be Object
  	if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
  		return false;
  	}

  	// Own properties are enumerated firstly, so to speed up,
  	// if last one is own, then all properties are own.
  	var key;
  	for (key in obj) { /**/ }

  	return typeof key === 'undefined' || hasOwn$1.call(obj, key);
  };

  var extend$1 = function extend() {
  	var arguments$1 = arguments;

  	var options, name, src, copy, copyIsArray, clone;
  	var target = arguments[0];
  	var i = 1;
  	var length = arguments.length;
  	var deep = false;

  	// Handle a deep copy situation
  	if (typeof target === 'boolean') {
  		deep = target;
  		target = arguments[1] || {};
  		// skip the boolean and the target
  		i = 2;
  	}
  	if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
  		target = {};
  	}

  	for (; i < length; ++i) {
  		options = arguments$1[i];
  		// Only deal with non-null/undefined values
  		if (options != null) {
  			// Extend the base object
  			for (name in options) {
  				src = target[name];
  				copy = options[name];

  				// Prevent never-ending loop
  				if (target !== copy) {
  					// Recurse if we're merging plain objects or arrays
  					if (deep && copy && (isPlainObject$1(copy) || (copyIsArray = isArray(copy)))) {
  						if (copyIsArray) {
  							copyIsArray = false;
  							clone = src && isArray(src) ? src : [];
  						} else {
  							clone = src && isPlainObject$1(src) ? src : {};
  						}

  						// Never move original objects, clone them
  						target[name] = extend(deep, clone, copy);

  					// Don't bring in undefined values
  					} else if (typeof copy !== 'undefined') {
  						target[name] = copy;
  					}
  				}
  			}
  		}
  	}

  	// Return the modified object
  	return target;
  };

  var empty = {};

  var empty$1 = /*#__PURE__*/Object.freeze({
    default: empty
  });

  /*! https://mths.be/punycode v1.4.1 by @mathias */


  /** Highest positive signed 32-bit float value */
  var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */
  var base = 36;
  var tMin = 1;
  var tMax = 26;
  var skew = 38;
  var damp = 700;
  var initialBias = 72;
  var initialN = 128; // 0x80
  var delimiter = '-'; // '\x2D'

  /** Regular expressions */
  var regexPunycode = /^xn--/;
  var regexNonASCII = /[^\x20-\x7E]/; // unprintable ASCII chars + non-ASCII chars
  var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

  /** Error messages */
  var errors = {
    'overflow': 'Overflow: input needs wider integers to process',
    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    'invalid-input': 'Invalid input'
  };

  /** Convenience shortcuts */
  var baseMinusTMin = base - tMin;
  var floor = Math.floor;
  var stringFromCharCode = String.fromCharCode;

  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */
  function error(type) {
    throw new RangeError(errors[type]);
  }

  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */
  function map(array, fn) {
    var length = array.length;
    var result = [];
    while (length--) {
      result[length] = fn(array[length]);
    }
    return result;
  }

  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {Array} A new string of characters returned by the callback
   * function.
   */
  function mapDomain(string, fn) {
    var parts = string.split('@');
    var result = '';
    if (parts.length > 1) {
      // In email addresses, only the domain name should be punycoded. Leave
      // the local part (i.e. everything up to `@`) intact.
      result = parts[0] + '@';
      string = parts[1];
    }
    // Avoid `split(regex)` for IE8 compatibility. See #17.
    string = string.replace(regexSeparators, '\x2E');
    var labels = string.split('.');
    var encoded = map(labels, fn).join('.');
    return result + encoded;
  }

  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */
  function ucs2decode(string) {
    var output = [],
      counter = 0,
      length = string.length,
      value,
      extra;
    while (counter < length) {
      value = string.charCodeAt(counter++);
      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // high surrogate, and there is a next character
        extra = string.charCodeAt(counter++);
        if ((extra & 0xFC00) == 0xDC00) { // low surrogate
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // unmatched surrogate; only append this code unit, in case the next
          // code unit is the high surrogate of a surrogate pair
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }
    return output;
  }

  /**
   * Creates a string based on an array of numeric code points.
   * @see `punycode.ucs2.decode`
   * @memberOf punycode.ucs2
   * @name encode
   * @param {Array} codePoints The array of numeric code points.
   * @returns {String} The new Unicode string (UCS-2).
   */
  function ucs2encode(array) {
    return map(array, function(value) {
      var output = '';
      if (value > 0xFFFF) {
        value -= 0x10000;
        output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
        value = 0xDC00 | value & 0x3FF;
      }
      output += stringFromCharCode(value);
      return output;
    }).join('');
  }

  /**
   * Converts a basic code point into a digit/integer.
   * @see `digitToBasic()`
   * @private
   * @param {Number} codePoint The basic numeric code point value.
   * @returns {Number} The numeric value of a basic code point (for use in
   * representing integers) in the range `0` to `base - 1`, or `base` if
   * the code point does not represent a value.
   */
  function basicToDigit(codePoint) {
    if (codePoint - 48 < 10) {
      return codePoint - 22;
    }
    if (codePoint - 65 < 26) {
      return codePoint - 65;
    }
    if (codePoint - 97 < 26) {
      return codePoint - 97;
    }
    return base;
  }

  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */
  function digitToBasic(digit, flag) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  }

  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */
  function adapt(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);
    for ( /* no initialization */ ; delta > baseMinusTMin * tMax >> 1; k += base) {
      delta = floor(delta / baseMinusTMin);
    }
    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  }

  /**
   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
   * symbols.
   * @memberOf punycode
   * @param {String} input The Punycode string of ASCII-only symbols.
   * @returns {String} The resulting string of Unicode symbols.
   */
  function decode(input) {
    // Don't use UCS-2
    var output = [],
      inputLength = input.length,
      out,
      i = 0,
      n = initialN,
      bias = initialBias,
      basic,
      j,
      index,
      oldi,
      w,
      k,
      digit,
      t,
      /** Cached calculation results */
      baseMinusT;

    // Handle the basic code points: let `basic` be the number of input code
    // points before the last delimiter, or `0` if there is none, then copy
    // the first basic code points to the output.

    basic = input.lastIndexOf(delimiter);
    if (basic < 0) {
      basic = 0;
    }

    for (j = 0; j < basic; ++j) {
      // if it's not a basic code point
      if (input.charCodeAt(j) >= 0x80) {
        error('not-basic');
      }
      output.push(input.charCodeAt(j));
    }

    // Main decoding loop: start just after the last delimiter if any basic code
    // points were copied; start at the beginning otherwise.

    for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */ ) {

      // `index` is the index of the next character to be consumed.
      // Decode a generalized variable-length integer into `delta`,
      // which gets added to `i`. The overflow checking is easier
      // if we increase `i` as we go, then subtract off its starting
      // value at the end to obtain `delta`.
      for (oldi = i, w = 1, k = base; /* no condition */ ; k += base) {

        if (index >= inputLength) {
          error('invalid-input');
        }

        digit = basicToDigit(input.charCodeAt(index++));

        if (digit >= base || digit > floor((maxInt - i) / w)) {
          error('overflow');
        }

        i += digit * w;
        t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

        if (digit < t) {
          break;
        }

        baseMinusT = base - t;
        if (w > floor(maxInt / baseMinusT)) {
          error('overflow');
        }

        w *= baseMinusT;

      }

      out = output.length + 1;
      bias = adapt(i - oldi, out, oldi == 0);

      // `i` was supposed to wrap around from `out` to `0`,
      // incrementing `n` each time, so we'll fix that now:
      if (floor(i / out) > maxInt - n) {
        error('overflow');
      }

      n += floor(i / out);
      i %= out;

      // Insert `n` at position `i` of the output
      output.splice(i++, 0, n);

    }

    return ucs2encode(output);
  }

  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */
  function encode(input) {
    var n,
      delta,
      handledCPCount,
      basicLength,
      bias,
      j,
      m,
      q,
      k,
      t,
      currentValue,
      output = [],
      /** `inputLength` will hold the number of code points in `input`. */
      inputLength,
      /** Cached calculation results */
      handledCPCountPlusOne,
      baseMinusT,
      qMinusT;

    // Convert the input in UCS-2 to Unicode
    input = ucs2decode(input);

    // Cache the length
    inputLength = input.length;

    // Initialize the state
    n = initialN;
    delta = 0;
    bias = initialBias;

    // Handle the basic code points
    for (j = 0; j < inputLength; ++j) {
      currentValue = input[j];
      if (currentValue < 0x80) {
        output.push(stringFromCharCode(currentValue));
      }
    }

    handledCPCount = basicLength = output.length;

    // `handledCPCount` is the number of code points that have been handled;
    // `basicLength` is the number of basic code points.

    // Finish the basic string - if it is not empty - with a delimiter
    if (basicLength) {
      output.push(delimiter);
    }

    // Main encoding loop:
    while (handledCPCount < inputLength) {

      // All non-basic code points < n have been handled already. Find the next
      // larger one:
      for (m = maxInt, j = 0; j < inputLength; ++j) {
        currentValue = input[j];
        if (currentValue >= n && currentValue < m) {
          m = currentValue;
        }
      }

      // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
      // but guard against overflow
      handledCPCountPlusOne = handledCPCount + 1;
      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error('overflow');
      }

      delta += (m - n) * handledCPCountPlusOne;
      n = m;

      for (j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue < n && ++delta > maxInt) {
          error('overflow');
        }

        if (currentValue == n) {
          // Represent delta as a generalized variable-length integer
          for (q = delta, k = base; /* no condition */ ; k += base) {
            t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
            if (q < t) {
              break;
            }
            qMinusT = q - t;
            baseMinusT = base - t;
            output.push(
              stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
            );
            q = floor(qMinusT / baseMinusT);
          }

          output.push(stringFromCharCode(digitToBasic(q, 0)));
          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
          delta = 0;
          ++handledCPCount;
        }
      }

      ++delta;
      ++n;

    }
    return output.join('');
  }

  /**
   * Converts a Punycode string representing a domain name or an email address
   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
   * it doesn't matter if you call it on a string that has already been
   * converted to Unicode.
   * @memberOf punycode
   * @param {String} input The Punycoded domain name or email address to
   * convert to Unicode.
   * @returns {String} The Unicode representation of the given Punycode
   * string.
   */
  function toUnicode(input) {
    return mapDomain(input, function(string) {
      return regexPunycode.test(string) ?
        decode(string.slice(4).toLowerCase()) :
        string;
    });
  }

  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */
  function toASCII(input) {
    return mapDomain(input, function(string) {
      return regexNonASCII.test(string) ?
        'xn--' + encode(string) :
        string;
    });
  }
  var version = '1.4.1';
  /**
   * An object of methods to convert from JavaScript's internal character
   * representation (UCS-2) to Unicode code points, and back.
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode
   * @type Object
   */

  var ucs2 = {
    decode: ucs2decode,
    encode: ucs2encode
  };
  var punycode = {
    version: version,
    ucs2: ucs2,
    toASCII: toASCII,
    toUnicode: toUnicode,
    encode: encode,
    decode: decode
  }

  var punycode$1 = /*#__PURE__*/Object.freeze({
    decode: decode,
    encode: encode,
    toUnicode: toUnicode,
    toASCII: toASCII,
    version: version,
    ucs2: ucs2,
    default: punycode
  });

  // shim for using process in browser
  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

  function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
  }
  function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
  }
  var cachedSetTimeout = defaultSetTimout;
  var cachedClearTimeout = defaultClearTimeout;
  if (typeof global.setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
  }
  if (typeof global.clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
  }

  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
      } catch(e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }


  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
      } catch (e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }



  }
  var queue$1 = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue$1 = currentQueue.concat(queue$1);
      } else {
          queueIndex = -1;
      }
      if (queue$1.length) {
          drainQueue();
      }
  }

  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue$1.length;
      while(len) {
          currentQueue = queue$1;
          queue$1 = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue$1.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }
  function nextTick$1(fun) {
      var arguments$1 = arguments;

      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments$1[i];
          }
      }
      queue$1.push(new Item(fun, args));
      if (queue$1.length === 1 && !draining) {
          runTimeout(drainQueue);
      }
  }
  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  var title = 'browser';
  var platform = 'browser';
  var browser = true;
  var env = {};
  var argv = [];
  var version$1 = ''; // empty string to avoid regexp issues
  var versions = {};
  var release = {};
  var config$1 = {};

  function noop$1() {}

  var on = noop$1;
  var addListener = noop$1;
  var once$1 = noop$1;
  var off = noop$1;
  var removeListener = noop$1;
  var removeAllListeners = noop$1;
  var emit = noop$1;

  function binding(name) {
      throw new Error('process.binding is not supported');
  }

  function cwd () { return '/' }
  function chdir (dir) {
      throw new Error('process.chdir is not supported');
  }function umask() { return 0; }

  // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
  var performance$1 = global.performance || {};
  var performanceNow =
    performance$1.now        ||
    performance$1.mozNow     ||
    performance$1.msNow      ||
    performance$1.oNow       ||
    performance$1.webkitNow  ||
    function(){ return (new Date()).getTime() };

  // generate timestamp or delta
  // see http://nodejs.org/api/process.html#process_process_hrtime
  function hrtime(previousTimestamp){
    var clocktime = performanceNow.call(performance$1)*1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor((clocktime%1)*1e9);
    if (previousTimestamp) {
      seconds = seconds - previousTimestamp[0];
      nanoseconds = nanoseconds - previousTimestamp[1];
      if (nanoseconds<0) {
        seconds--;
        nanoseconds += 1e9;
      }
    }
    return [seconds,nanoseconds]
  }

  var startTime = new Date();
  function uptime() {
    var currentTime = new Date();
    var dif = currentTime - startTime;
    return dif / 1000;
  }

  var process$1 = {
    nextTick: nextTick$1,
    title: title,
    browser: browser,
    env: env,
    argv: argv,
    version: version$1,
    versions: versions,
    on: on,
    addListener: addListener,
    once: once$1,
    off: off,
    removeListener: removeListener,
    removeAllListeners: removeAllListeners,
    emit: emit,
    binding: binding,
    cwd: cwd,
    chdir: chdir,
    umask: umask,
    hrtime: hrtime,
    platform: platform,
    release: release,
    config: config$1,
    uptime: uptime
  };

  var inherits;
  if (typeof Object.create === 'function'){
    inherits = function inherits(ctor, superCtor) {
      // implementation from standard node.js 'util' module
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    inherits = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }
  var inherits$1 = inherits;

  // Copyright Joyent, Inc. and other Node contributors.
  var formatRegExp = /%[sdj%]/g;
  function format(f) {
    var arguments$1 = arguments;

    if (!isString(f)) {
      var objects = [];
      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments$1[i]));
      }
      return objects.join(' ');
    }

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
      if (x === '%%') { return '%'; }
      if (i >= len) { return x; }
      switch (x) {
        case '%s': return String(args[i++]);
        case '%d': return Number(args[i++]);
        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }
        default:
          return x;
      }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject$2(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }
    return str;
  }

  // Mark that a method should not be used.
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.
  function deprecate(fn, msg) {
    // Allow for deprecating things in the process of starting up.
    if (isUndefined(global.process)) {
      return function() {
        return deprecate(fn, msg).apply(this, arguments);
      };
    }

    if (process$1.noDeprecation === true) {
      return fn;
    }

    var warned = false;
    function deprecated() {
      if (!warned) {
        if (process$1.throwDeprecation) {
          throw new Error(msg);
        } else if (process$1.traceDeprecation) {
          console.trace(msg);
        } else {
          console.error(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }

    return deprecated;
  }

  var debugs = {};
  var debugEnviron;
  function debuglog(set) {
    if (isUndefined(debugEnviron))
      { debugEnviron = process$1.env.NODE_DEBUG || ''; }
    set = set.toUpperCase();
    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = 0;
        debugs[set] = function() {
          var msg = format.apply(null, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function() {};
      }
    }
    return debugs[set];
  }

  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */
  /* legacy: obj, showHidden, depth, colors*/
  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) { ctx.depth = arguments[2]; }
    if (arguments.length >= 4) { ctx.colors = arguments[3]; }
    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      _extend(ctx, opts);
    }
    // set default options
    if (isUndefined(ctx.showHidden)) { ctx.showHidden = false; }
    if (isUndefined(ctx.depth)) { ctx.depth = 2; }
    if (isUndefined(ctx.colors)) { ctx.colors = false; }
    if (isUndefined(ctx.customInspect)) { ctx.customInspect = true; }
    if (ctx.colors) { ctx.stylize = stylizeWithColor; }
    return formatValue(ctx, obj, ctx.depth);
  }

  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
  inspect.colors = {
    'bold' : [1, 22],
    'italic' : [3, 23],
    'underline' : [4, 24],
    'inverse' : [7, 27],
    'white' : [37, 39],
    'grey' : [90, 39],
    'black' : [30, 39],
    'blue' : [34, 39],
    'cyan' : [36, 39],
    'green' : [32, 39],
    'magenta' : [35, 39],
    'red' : [31, 39],
    'yellow' : [33, 39]
  };

  // Don't use 'blue' not visible on cmd.exe
  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };


  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];

    if (style) {
      return '\u001b[' + inspect.colors[style][0] + 'm' + str +
             '\u001b[' + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }


  function stylizeNoColor(str, styleType) {
    return str;
  }


  function arrayToHash(array) {
    var hash = {};

    array.forEach(function(val, idx) {
      hash[val] = true;
    });

    return hash;
  }


  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect &&
        value &&
        isFunction(value.inspect) &&
        // Filter out the util module, it's inspect function is special
        value.inspect !== inspect &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }
      return ret;
    }

    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }

    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    }

    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value)
        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }

    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp$1(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '', array = false, braces = ['{', '}'];

    // Make Array say that they are Array
    if (isArray$1(value)) {
      array = true;
      braces = ['[', ']'];
    }

    // Make functions say that they are functions
    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }

    // Make RegExps say that they are RegExps
    if (isRegExp$1(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }

    // Make error with message first say the error
    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp$1(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);

    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();

    return reduceToSingleString(output, base, braces);
  }


  function formatPrimitive(ctx, value) {
    if (isUndefined(value))
      { return ctx.stylize('undefined', 'undefined'); }
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber(value))
      { return ctx.stylize('' + value, 'number'); }
    if (isBoolean(value))
      { return ctx.stylize('' + value, 'boolean'); }
    // For some reason typeof null is "object", so special case here.
    if (isNull(value))
      { return ctx.stylize('null', 'null'); }
  }


  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }


  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty$1(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function(key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            key, true));
      }
    });
    return output;
  }


  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty$1(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function(line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function(line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'")
                   .replace(/\\"/g, '"')
                   .replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }


  function reduceToSingleString(output, base, braces) {
    var length = output.reduce(function(prev, cur) {
      if (cur.indexOf('\n') >= 0) { }
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] +
             (base === '' ? '' : base + '\n ') +
             ' ' +
             output.join(',\n  ') +
             ' ' +
             braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }


  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.
  function isArray$1(ar) {
    return Array.isArray(ar);
  }

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }

  function isNull(arg) {
    return arg === null;
  }

  function isNullOrUndefined(arg) {
    return arg == null;
  }

  function isNumber(arg) {
    return typeof arg === 'number';
  }

  function isString(arg) {
    return typeof arg === 'string';
  }

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }

  function isUndefined(arg) {
    return arg === void 0;
  }

  function isRegExp$1(re) {
    return isObject$2(re) && objectToString(re) === '[object RegExp]';
  }

  function isObject$2(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  function isDate(d) {
    return isObject$2(d) && objectToString(d) === '[object Date]';
  }

  function isError(e) {
    return isObject$2(e) &&
        (objectToString(e) === '[object Error]' || e instanceof Error);
  }

  function isFunction(arg) {
    return typeof arg === 'function';
  }

  function isPrimitive$1(arg) {
    return arg === null ||
           typeof arg === 'boolean' ||
           typeof arg === 'number' ||
           typeof arg === 'string' ||
           typeof arg === 'symbol' ||  // ES6 symbol
           typeof arg === 'undefined';
  }

  function isBuffer(maybeBuf) {
    return Buffer.isBuffer(maybeBuf);
  }

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }


  function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
  }


  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                'Oct', 'Nov', 'Dec'];

  // 26 Feb 16:19:34
  function timestamp() {
    var d = new Date();
    var time = [pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds())].join(':');
    return [d.getDate(), months[d.getMonth()], time].join(' ');
  }


  // log is just a thin wrapper to console.log that prepends a timestamp
  function log() {
    console.log('%s - %s', timestamp(), format.apply(null, arguments));
  }

  function _extend(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject$2(add)) { return origin; }

    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  }
  function hasOwnProperty$1(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  var util = {
    inherits: inherits$1,
    _extend: _extend,
    log: log,
    isBuffer: isBuffer,
    isPrimitive: isPrimitive$1,
    isFunction: isFunction,
    isError: isError,
    isDate: isDate,
    isObject: isObject$2,
    isRegExp: isRegExp$1,
    isUndefined: isUndefined,
    isSymbol: isSymbol,
    isString: isString,
    isNumber: isNumber,
    isNullOrUndefined: isNullOrUndefined,
    isNull: isNull,
    isBoolean: isBoolean,
    isArray: isArray$1,
    inspect: inspect,
    deprecate: deprecate,
    format: format,
    debuglog: debuglog
  }

  var util$1 = /*#__PURE__*/Object.freeze({
    format: format,
    deprecate: deprecate,
    debuglog: debuglog,
    inspect: inspect,
    isArray: isArray$1,
    isBoolean: isBoolean,
    isNull: isNull,
    isNullOrUndefined: isNullOrUndefined,
    isNumber: isNumber,
    isString: isString,
    isSymbol: isSymbol,
    isUndefined: isUndefined,
    isRegExp: isRegExp$1,
    isObject: isObject$2,
    isDate: isDate,
    isError: isError,
    isFunction: isFunction,
    isPrimitive: isPrimitive$1,
    isBuffer: isBuffer,
    log: log,
    inherits: inherits$1,
    _extend: _extend,
    default: util
  });

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.


  // If obj.hasOwnProperty has been overridden, then calling
  // obj.hasOwnProperty(prop) will break.
  // See: https://github.com/joyent/node/issues/1707
  function hasOwnProperty$2(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }
  var isArray$2 = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
  };
  function stringifyPrimitive(v) {
    switch (typeof v) {
      case 'string':
        return v;

      case 'boolean':
        return v ? 'true' : 'false';

      case 'number':
        return isFinite(v) ? v : '';

      default:
        return '';
    }
  }

  function stringify (obj, sep, eq, name) {
    sep = sep || '&';
    eq = eq || '=';
    if (obj === null) {
      obj = undefined;
    }

    if (typeof obj === 'object') {
      return map$1(objectKeys(obj), function(k) {
        var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
        if (isArray$2(obj[k])) {
          return map$1(obj[k], function(v) {
            return ks + encodeURIComponent(stringifyPrimitive(v));
          }).join(sep);
        } else {
          return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
        }
      }).join(sep);

    }

    if (!name) { return ''; }
    return encodeURIComponent(stringifyPrimitive(name)) + eq +
           encodeURIComponent(stringifyPrimitive(obj));
  }
  function map$1 (xs, f) {
    if (xs.map) { return xs.map(f); }
    var res = [];
    for (var i = 0; i < xs.length; i++) {
      res.push(f(xs[i], i));
    }
    return res;
  }

  var objectKeys = Object.keys || function (obj) {
    var res = [];
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) { res.push(key); }
    }
    return res;
  };

  function parse(qs, sep, eq, options) {
    sep = sep || '&';
    eq = eq || '=';
    var obj = {};

    if (typeof qs !== 'string' || qs.length === 0) {
      return obj;
    }

    var regexp = /\+/g;
    qs = qs.split(sep);

    var maxKeys = 1000;
    if (options && typeof options.maxKeys === 'number') {
      maxKeys = options.maxKeys;
    }

    var len = qs.length;
    // maxKeys <= 0 means that we should not limit keys count
    if (maxKeys > 0 && len > maxKeys) {
      len = maxKeys;
    }

    for (var i = 0; i < len; ++i) {
      var x = qs[i].replace(regexp, '%20'),
          idx = x.indexOf(eq),
          kstr, vstr, k, v;

      if (idx >= 0) {
        kstr = x.substr(0, idx);
        vstr = x.substr(idx + 1);
      } else {
        kstr = x;
        vstr = '';
      }

      k = decodeURIComponent(kstr);
      v = decodeURIComponent(vstr);

      if (!hasOwnProperty$2(obj, k)) {
        obj[k] = v;
      } else if (isArray$2(obj[k])) {
        obj[k].push(v);
      } else {
        obj[k] = [obj[k], v];
      }
    }

    return obj;
  }var qs = {
    encode: stringify,
    stringify: stringify,
    decode: parse,
    parse: parse
  }

  var qs$1 = /*#__PURE__*/Object.freeze({
    stringify: stringify,
    parse: parse,
    default: qs,
    encode: stringify,
    decode: parse
  });

  // Copyright Joyent, Inc. and other Node contributors.
  var url = {
    parse: urlParse,
    resolve: urlResolve,
    resolveObject: urlResolveObject,
    format: urlFormat,
    Url: Url
  }
  function Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
  }

  // Reference: RFC 3986, RFC 1808, RFC 2396

  // define these here so at least they only have to be
  // compiled once on the first module load.
  var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    };

  function urlParse(url, parseQueryString, slashesDenoteHost) {
    if (url && isObject$2(url) && url instanceof Url) { return url; }

    var u = new Url;
    u.parse(url, parseQueryString, slashesDenoteHost);
    return u;
  }
  Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
    return parse$1(this, url, parseQueryString, slashesDenoteHost);
  };

  function parse$1(self, url, parseQueryString, slashesDenoteHost) {
    if (!isString(url)) {
      throw new TypeError('Parameter \'url\' must be a string, not ' + typeof url);
    }

    // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://code.google.com/p/chromium/issues/detail?id=25916
    var queryIndex = url.indexOf('?'),
      splitter =
      (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
    uSplit[0] = uSplit[0].replace(slashRegex, '/');
    url = uSplit.join(splitter);

    var rest = url;

    // trim before proceeding.
    // This is to support parse stuff like "  http://foo.com  \n"
    rest = rest.trim();

    if (!slashesDenoteHost && url.split('#').length === 1) {
      // Try fast path regexp
      var simplePath = simplePathPattern.exec(rest);
      if (simplePath) {
        self.path = rest;
        self.href = rest;
        self.pathname = simplePath[1];
        if (simplePath[2]) {
          self.search = simplePath[2];
          if (parseQueryString) {
            self.query = parse(self.search.substr(1));
          } else {
            self.query = self.search.substr(1);
          }
        } else if (parseQueryString) {
          self.search = '';
          self.query = {};
        }
        return self;
      }
    }

    var proto = protocolPattern.exec(rest);
    if (proto) {
      proto = proto[0];
      var lowerProto = proto.toLowerCase();
      self.protocol = lowerProto;
      rest = rest.substr(proto.length);
    }

    // figure out if it's got a host
    // user@server is *always* interpreted as a hostname, and url
    // resolution will treat //foo/bar as host=foo,path=bar because that's
    // how the browser resolves relative URLs.
    if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
      var slashes = rest.substr(0, 2) === '//';
      if (slashes && !(proto && hostlessProtocol[proto])) {
        rest = rest.substr(2);
        self.slashes = true;
      }
    }
    var i, hec, l, p;
    if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

      // there's a hostname.
      // the first instance of /, ?, ;, or # ends the host.
      //
      // If there is an @ in the hostname, then non-host chars *are* allowed
      // to the left of the last @ sign, unless some host-ending character
      // comes *before* the @-sign.
      // URLs are obnoxious.
      //
      // ex:
      // http://a@b@c/ => user:a@b host:c
      // http://a@b?@c => user:a host:c path:/?@c

      // v0.12 TODO(isaacs): This is not quite how Chrome does things.
      // Review our test case against browsers more comprehensively.

      // find the first instance of any hostEndingChars
      var hostEnd = -1;
      for (i = 0; i < hostEndingChars.length; i++) {
        hec = rest.indexOf(hostEndingChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
          { hostEnd = hec; }
      }

      // at this point, either we have an explicit point where the
      // auth portion cannot go past, or the last @ char is the decider.
      var auth, atSign;
      if (hostEnd === -1) {
        // atSign can be anywhere.
        atSign = rest.lastIndexOf('@');
      } else {
        // atSign must be in auth portion.
        // http://a@b/c@d => host:b auth:a path:/c@d
        atSign = rest.lastIndexOf('@', hostEnd);
      }

      // Now we have a portion which is definitely the auth.
      // Pull that off.
      if (atSign !== -1) {
        auth = rest.slice(0, atSign);
        rest = rest.slice(atSign + 1);
        self.auth = decodeURIComponent(auth);
      }

      // the host is the remaining to the left of the first non-host char
      hostEnd = -1;
      for (i = 0; i < nonHostChars.length; i++) {
        hec = rest.indexOf(nonHostChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
          { hostEnd = hec; }
      }
      // if we still have not hit it, then the entire thing is a host.
      if (hostEnd === -1)
        { hostEnd = rest.length; }

      self.host = rest.slice(0, hostEnd);
      rest = rest.slice(hostEnd);

      // pull out port.
      parseHost(self);

      // we've indicated that there is a hostname,
      // so even if it's empty, it has to be present.
      self.hostname = self.hostname || '';

      // if hostname begins with [ and ends with ]
      // assume that it's an IPv6 address.
      var ipv6Hostname = self.hostname[0] === '[' &&
        self.hostname[self.hostname.length - 1] === ']';

      // validate a little.
      if (!ipv6Hostname) {
        var hostparts = self.hostname.split(/\./);
        for (i = 0, l = hostparts.length; i < l; i++) {
          var part = hostparts[i];
          if (!part) { continue; }
          if (!part.match(hostnamePartPattern)) {
            var newpart = '';
            for (var j = 0, k = part.length; j < k; j++) {
              if (part.charCodeAt(j) > 127) {
                // we replace non-ASCII char with a temporary placeholder
                // we need this to make sure size of hostname is not
                // broken by replacing non-ASCII by nothing
                newpart += 'x';
              } else {
                newpart += part[j];
              }
            }
            // we test again with ASCII char only
            if (!newpart.match(hostnamePartPattern)) {
              var validParts = hostparts.slice(0, i);
              var notHost = hostparts.slice(i + 1);
              var bit = part.match(hostnamePartStart);
              if (bit) {
                validParts.push(bit[1]);
                notHost.unshift(bit[2]);
              }
              if (notHost.length) {
                rest = '/' + notHost.join('.') + rest;
              }
              self.hostname = validParts.join('.');
              break;
            }
          }
        }
      }

      if (self.hostname.length > hostnameMaxLen) {
        self.hostname = '';
      } else {
        // hostnames are always lower case.
        self.hostname = self.hostname.toLowerCase();
      }

      if (!ipv6Hostname) {
        // IDNA Support: Returns a punycoded representation of "domain".
        // It only converts parts of the domain name that
        // have non-ASCII characters, i.e. it doesn't matter if
        // you call it with a domain that already is ASCII-only.
        self.hostname = toASCII(self.hostname);
      }

      p = self.port ? ':' + self.port : '';
      var h = self.hostname || '';
      self.host = h + p;
      self.href += self.host;

      // strip [ and ] from the hostname
      // the host field still retains them, though
      if (ipv6Hostname) {
        self.hostname = self.hostname.substr(1, self.hostname.length - 2);
        if (rest[0] !== '/') {
          rest = '/' + rest;
        }
      }
    }

    // now rest is set to the post-host stuff.
    // chop off any delim chars.
    if (!unsafeProtocol[lowerProto]) {

      // First, make 100% sure that any "autoEscape" chars get
      // escaped, even if encodeURIComponent doesn't think they
      // need to be.
      for (i = 0, l = autoEscape.length; i < l; i++) {
        var ae = autoEscape[i];
        if (rest.indexOf(ae) === -1)
          { continue; }
        var esc = encodeURIComponent(ae);
        if (esc === ae) {
          esc = escape(ae);
        }
        rest = rest.split(ae).join(esc);
      }
    }


    // chop off from the tail first.
    var hash = rest.indexOf('#');
    if (hash !== -1) {
      // got a fragment string.
      self.hash = rest.substr(hash);
      rest = rest.slice(0, hash);
    }
    var qm = rest.indexOf('?');
    if (qm !== -1) {
      self.search = rest.substr(qm);
      self.query = rest.substr(qm + 1);
      if (parseQueryString) {
        self.query = parse(self.query);
      }
      rest = rest.slice(0, qm);
    } else if (parseQueryString) {
      // no query string, but parseQueryString still requested
      self.search = '';
      self.query = {};
    }
    if (rest) { self.pathname = rest; }
    if (slashedProtocol[lowerProto] &&
      self.hostname && !self.pathname) {
      self.pathname = '/';
    }

    //to support http.request
    if (self.pathname || self.search) {
      p = self.pathname || '';
      var s = self.search || '';
      self.path = p + s;
    }

    // finally, reconstruct the href based on what has been validated.
    self.href = format$1(self);
    return self;
  }

  // format a parsed object into a url string
  function urlFormat(obj) {
    // ensure it's an object, and not a string url.
    // If it's an obj, this is a no-op.
    // this way, you can call url_format() on strings
    // to clean up potentially wonky urls.
    if (isString(obj)) { obj = parse$1({}, obj); }
    return format$1(obj);
  }

  function format$1(self) {
    var auth = self.auth || '';
    if (auth) {
      auth = encodeURIComponent(auth);
      auth = auth.replace(/%3A/i, ':');
      auth += '@';
    }

    var protocol = self.protocol || '',
      pathname = self.pathname || '',
      hash = self.hash || '',
      host = false,
      query = '';

    if (self.host) {
      host = auth + self.host;
    } else if (self.hostname) {
      host = auth + (self.hostname.indexOf(':') === -1 ?
        self.hostname :
        '[' + this.hostname + ']');
      if (self.port) {
        host += ':' + self.port;
      }
    }

    if (self.query &&
      isObject$2(self.query) &&
      Object.keys(self.query).length) {
      query = stringify(self.query);
    }

    var search = self.search || (query && ('?' + query)) || '';

    if (protocol && protocol.substr(-1) !== ':') { protocol += ':'; }

    // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
    // unless they had them to begin with.
    if (self.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
      host = '//' + (host || '');
      if (pathname && pathname.charAt(0) !== '/') { pathname = '/' + pathname; }
    } else if (!host) {
      host = '';
    }

    if (hash && hash.charAt(0) !== '#') { hash = '#' + hash; }
    if (search && search.charAt(0) !== '?') { search = '?' + search; }

    pathname = pathname.replace(/[?#]/g, function(match) {
      return encodeURIComponent(match);
    });
    search = search.replace('#', '%23');

    return protocol + host + pathname + search + hash;
  }

  Url.prototype.format = function() {
    return format$1(this);
  };

  function urlResolve(source, relative) {
    return urlParse(source, false, true).resolve(relative);
  }

  Url.prototype.resolve = function(relative) {
    return this.resolveObject(urlParse(relative, false, true)).format();
  };

  function urlResolveObject(source, relative) {
    if (!source) { return relative; }
    return urlParse(source, false, true).resolveObject(relative);
  }

  Url.prototype.resolveObject = function(relative) {
    var this$1 = this;

    if (isString(relative)) {
      var rel = new Url();
      rel.parse(relative, false, true);
      relative = rel;
    }

    var result = new Url();
    var tkeys = Object.keys(this);
    for (var tk = 0; tk < tkeys.length; tk++) {
      var tkey = tkeys[tk];
      result[tkey] = this$1[tkey];
    }

    // hash is always overridden, no matter what.
    // even href="" will remove it.
    result.hash = relative.hash;

    // if the relative url is empty, then there's nothing left to do here.
    if (relative.href === '') {
      result.href = result.format();
      return result;
    }

    // hrefs like //foo/bar always cut to the protocol.
    if (relative.slashes && !relative.protocol) {
      // take everything except the protocol from relative
      var rkeys = Object.keys(relative);
      for (var rk = 0; rk < rkeys.length; rk++) {
        var rkey = rkeys[rk];
        if (rkey !== 'protocol')
          { result[rkey] = relative[rkey]; }
      }

      //urlParse appends trailing / to urls like http://www.example.com
      if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
        result.path = result.pathname = '/';
      }

      result.href = result.format();
      return result;
    }
    var relPath;
    if (relative.protocol && relative.protocol !== result.protocol) {
      // if it's a known url protocol, then changing
      // the protocol does weird things
      // first, if it's not file:, then we MUST have a host,
      // and if there was a path
      // to begin with, then we MUST have a path.
      // if it is file:, then the host is dropped,
      // because that's known to be hostless.
      // anything else is assumed to be absolute.
      if (!slashedProtocol[relative.protocol]) {
        var keys = Object.keys(relative);
        for (var v = 0; v < keys.length; v++) {
          var k = keys[v];
          result[k] = relative[k];
        }
        result.href = result.format();
        return result;
      }

      result.protocol = relative.protocol;
      if (!relative.host && !hostlessProtocol[relative.protocol]) {
        relPath = (relative.pathname || '').split('/');
        while (relPath.length && !(relative.host = relPath.shift())){ }
        if (!relative.host) { relative.host = ''; }
        if (!relative.hostname) { relative.hostname = ''; }
        if (relPath[0] !== '') { relPath.unshift(''); }
        if (relPath.length < 2) { relPath.unshift(''); }
        result.pathname = relPath.join('/');
      } else {
        result.pathname = relative.pathname;
      }
      result.search = relative.search;
      result.query = relative.query;
      result.host = relative.host || '';
      result.auth = relative.auth;
      result.hostname = relative.hostname || relative.host;
      result.port = relative.port;
      // to support http.request
      if (result.pathname || result.search) {
        var p = result.pathname || '';
        var s = result.search || '';
        result.path = p + s;
      }
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    }

    var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
        relative.host ||
        relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
        (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];
    relPath = relative.pathname && relative.pathname.split('/') || [];
    // if the url is a non-slashed url, then relative
    // links like ../.. should be able
    // to crawl up to the hostname, as well.  This is strange.
    // result.protocol has already been set by now.
    // Later on, put the first path part into the host field.
    if (psychotic) {
      result.hostname = '';
      result.port = null;
      if (result.host) {
        if (srcPath[0] === '') { srcPath[0] = result.host; }
        else { srcPath.unshift(result.host); }
      }
      result.host = '';
      if (relative.protocol) {
        relative.hostname = null;
        relative.port = null;
        if (relative.host) {
          if (relPath[0] === '') { relPath[0] = relative.host; }
          else { relPath.unshift(relative.host); }
        }
        relative.host = null;
      }
      mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
    }
    var authInHost;
    if (isRelAbs) {
      // it's absolute.
      result.host = (relative.host || relative.host === '') ?
        relative.host : result.host;
      result.hostname = (relative.hostname || relative.hostname === '') ?
        relative.hostname : result.hostname;
      result.search = relative.search;
      result.query = relative.query;
      srcPath = relPath;
      // fall through to the dot-handling below.
    } else if (relPath.length) {
      // it's relative
      // throw away the existing file, and take the new path instead.
      if (!srcPath) { srcPath = []; }
      srcPath.pop();
      srcPath = srcPath.concat(relPath);
      result.search = relative.search;
      result.query = relative.query;
    } else if (!isNullOrUndefined(relative.search)) {
      // just pull out the search.
      // like href='?foo'.
      // Put this after the other two cases because it simplifies the booleans
      if (psychotic) {
        result.hostname = result.host = srcPath.shift();
        //occationaly the auth can get stuck only in host
        //this especially happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
        authInHost = result.host && result.host.indexOf('@') > 0 ?
          result.host.split('@') : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }
      result.search = relative.search;
      result.query = relative.query;
      //to support http.request
      if (!isNull(result.pathname) || !isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : '') +
          (result.search ? result.search : '');
      }
      result.href = result.format();
      return result;
    }

    if (!srcPath.length) {
      // no path at all.  easy.
      // we've already handled the other stuff above.
      result.pathname = null;
      //to support http.request
      if (result.search) {
        result.path = '/' + result.search;
      } else {
        result.path = null;
      }
      result.href = result.format();
      return result;
    }

    // if a url ENDs in . or .., then it must get a trailing slash.
    // however, if it ends in anything else non-slashy,
    // then it must NOT get a trailing slash.
    var last = srcPath.slice(-1)[0];
    var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

    // strip single dots, resolve double dots to parent dir
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for (var i = srcPath.length; i >= 0; i--) {
      last = srcPath[i];
      if (last === '.') {
        srcPath.splice(i, 1);
      } else if (last === '..') {
        srcPath.splice(i, 1);
        up++;
      } else if (up) {
        srcPath.splice(i, 1);
        up--;
      }
    }

    // if the path is allowed to go above the root, restore leading ..s
    if (!mustEndAbs && !removeAllDots) {
      for (; up--; up) {
        srcPath.unshift('..');
      }
    }

    if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
      srcPath.unshift('');
    }

    if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
      srcPath.push('');
    }

    var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

    // put the host back
    if (psychotic) {
      result.hostname = result.host = isAbsolute ? '' :
        srcPath.length ? srcPath.shift() : '';
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      authInHost = result.host && result.host.indexOf('@') > 0 ?
        result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }

    mustEndAbs = mustEndAbs || (result.host && srcPath.length);

    if (mustEndAbs && !isAbsolute) {
      srcPath.unshift('');
    }

    if (!srcPath.length) {
      result.pathname = null;
      result.path = null;
    } else {
      result.pathname = srcPath.join('/');
    }

    //to support request.http
    if (!isNull(result.pathname) || !isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
        (result.search ? result.search : '');
    }
    result.auth = relative.auth || result.auth;
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  };

  Url.prototype.parseHost = function() {
    return parseHost(this);
  };

  function parseHost(self) {
    var host = self.host;
    var port = portPattern.exec(host);
    if (port) {
      port = port[0];
      if (port !== ':') {
        self.port = port.substr(1);
      }
      host = host.substr(0, host.length - port.length);
    }
    if (host) { self.hostname = host; }
  }

  var url$1 = /*#__PURE__*/Object.freeze({
    parse: urlParse,
    resolve: urlResolve,
    resolveObject: urlResolveObject,
    format: urlFormat,
    default: url,
    Url: Url
  });

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function commonjsRequire () {
  	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var punycode$2 = ( punycode$1 && punycode ) || punycode$1;

  var pubsuffix = createCommonjsModule(function (module) {



  module.exports.getPublicSuffix = function getPublicSuffix(domain) {
    /*!
     * Copyright (c) 2015, Salesforce.com, Inc.
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are met:
     *
     * 1. Redistributions of source code must retain the above copyright notice,
     * this list of conditions and the following disclaimer.
     *
     * 2. Redistributions in binary form must reproduce the above copyright notice,
     * this list of conditions and the following disclaimer in the documentation
     * and/or other materials provided with the distribution.
     *
     * 3. Neither the name of Salesforce.com nor the names of its contributors may
     * be used to endorse or promote products derived from this software without
     * specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
     * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
     * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
     * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
     * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     */
    if (!domain) {
      return null;
    }
    if (domain.match(/^\./)) {
      return null;
    }
    var asciiDomain = punycode$2.toASCII(domain);
    var converted = false;
    if (asciiDomain !== domain) {
      domain = asciiDomain;
      converted = true;
    }
    if (index[domain]) {
      return null;
    }

    domain = domain.toLowerCase();
    var parts = domain.split('.').reverse();

    var suffix = '';
    var suffixLen = 0;
    for (var i=0; i<parts.length; i++) {
      var part = parts[i];
      var starstr = '*'+suffix;
      var partstr = part+suffix;

      if (index[starstr]) { // star rule matches
        suffixLen = i+1;
        if (index[partstr] === false) { // exception rule matches (NB: false, not undefined)
          suffixLen--;
        }
      } else if (index[partstr]) { // exact match, not exception
        suffixLen = i+1;
      }

      suffix = '.'+partstr;
    }

    if (index['*'+suffix]) { // *.domain exists (e.g. *.kyoto.jp for domain='kyoto.jp');
      return null;
    }

    suffixLen = suffixLen || 1;
    if (parts.length > suffixLen) {
      var publicSuffix = parts.slice(0,suffixLen+1).reverse().join('.');
      return converted ? punycode$2.toUnicode(publicSuffix) : publicSuffix;
    }

    return null;
  };

  // The following generated structure is used under the MPL version 2.0
  // See public-suffix.txt for more information

  var index = module.exports.index = Object.freeze(
  {"ac":true,"com.ac":true,"edu.ac":true,"gov.ac":true,"net.ac":true,"mil.ac":true,"org.ac":true,"ad":true,"nom.ad":true,"ae":true,"co.ae":true,"net.ae":true,"org.ae":true,"sch.ae":true,"ac.ae":true,"gov.ae":true,"mil.ae":true,"aero":true,"accident-investigation.aero":true,"accident-prevention.aero":true,"aerobatic.aero":true,"aeroclub.aero":true,"aerodrome.aero":true,"agents.aero":true,"aircraft.aero":true,"airline.aero":true,"airport.aero":true,"air-surveillance.aero":true,"airtraffic.aero":true,"air-traffic-control.aero":true,"ambulance.aero":true,"amusement.aero":true,"association.aero":true,"author.aero":true,"ballooning.aero":true,"broker.aero":true,"caa.aero":true,"cargo.aero":true,"catering.aero":true,"certification.aero":true,"championship.aero":true,"charter.aero":true,"civilaviation.aero":true,"club.aero":true,"conference.aero":true,"consultant.aero":true,"consulting.aero":true,"control.aero":true,"council.aero":true,"crew.aero":true,"design.aero":true,"dgca.aero":true,"educator.aero":true,"emergency.aero":true,"engine.aero":true,"engineer.aero":true,"entertainment.aero":true,"equipment.aero":true,"exchange.aero":true,"express.aero":true,"federation.aero":true,"flight.aero":true,"freight.aero":true,"fuel.aero":true,"gliding.aero":true,"government.aero":true,"groundhandling.aero":true,"group.aero":true,"hanggliding.aero":true,"homebuilt.aero":true,"insurance.aero":true,"journal.aero":true,"journalist.aero":true,"leasing.aero":true,"logistics.aero":true,"magazine.aero":true,"maintenance.aero":true,"media.aero":true,"microlight.aero":true,"modelling.aero":true,"navigation.aero":true,"parachuting.aero":true,"paragliding.aero":true,"passenger-association.aero":true,"pilot.aero":true,"press.aero":true,"production.aero":true,"recreation.aero":true,"repbody.aero":true,"res.aero":true,"research.aero":true,"rotorcraft.aero":true,"safety.aero":true,"scientist.aero":true,"services.aero":true,"show.aero":true,"skydiving.aero":true,"software.aero":true,"student.aero":true,"trader.aero":true,"trading.aero":true,"trainer.aero":true,"union.aero":true,"workinggroup.aero":true,"works.aero":true,"af":true,"gov.af":true,"com.af":true,"org.af":true,"net.af":true,"edu.af":true,"ag":true,"com.ag":true,"org.ag":true,"net.ag":true,"co.ag":true,"nom.ag":true,"ai":true,"off.ai":true,"com.ai":true,"net.ai":true,"org.ai":true,"al":true,"com.al":true,"edu.al":true,"gov.al":true,"mil.al":true,"net.al":true,"org.al":true,"am":true,"ao":true,"ed.ao":true,"gv.ao":true,"og.ao":true,"co.ao":true,"pb.ao":true,"it.ao":true,"aq":true,"ar":true,"com.ar":true,"edu.ar":true,"gob.ar":true,"gov.ar":true,"int.ar":true,"mil.ar":true,"musica.ar":true,"net.ar":true,"org.ar":true,"tur.ar":true,"arpa":true,"e164.arpa":true,"in-addr.arpa":true,"ip6.arpa":true,"iris.arpa":true,"uri.arpa":true,"urn.arpa":true,"as":true,"gov.as":true,"asia":true,"at":true,"ac.at":true,"co.at":true,"gv.at":true,"or.at":true,"au":true,"com.au":true,"net.au":true,"org.au":true,"edu.au":true,"gov.au":true,"asn.au":true,"id.au":true,"info.au":true,"conf.au":true,"oz.au":true,"act.au":true,"nsw.au":true,"nt.au":true,"qld.au":true,"sa.au":true,"tas.au":true,"vic.au":true,"wa.au":true,"act.edu.au":true,"nsw.edu.au":true,"nt.edu.au":true,"qld.edu.au":true,"sa.edu.au":true,"tas.edu.au":true,"vic.edu.au":true,"wa.edu.au":true,"qld.gov.au":true,"sa.gov.au":true,"tas.gov.au":true,"vic.gov.au":true,"wa.gov.au":true,"aw":true,"com.aw":true,"ax":true,"az":true,"com.az":true,"net.az":true,"int.az":true,"gov.az":true,"org.az":true,"edu.az":true,"info.az":true,"pp.az":true,"mil.az":true,"name.az":true,"pro.az":true,"biz.az":true,"ba":true,"com.ba":true,"edu.ba":true,"gov.ba":true,"mil.ba":true,"net.ba":true,"org.ba":true,"bb":true,"biz.bb":true,"co.bb":true,"com.bb":true,"edu.bb":true,"gov.bb":true,"info.bb":true,"net.bb":true,"org.bb":true,"store.bb":true,"tv.bb":true,"*.bd":true,"be":true,"ac.be":true,"bf":true,"gov.bf":true,"bg":true,"a.bg":true,"b.bg":true,"c.bg":true,"d.bg":true,"e.bg":true,"f.bg":true,"g.bg":true,"h.bg":true,"i.bg":true,"j.bg":true,"k.bg":true,"l.bg":true,"m.bg":true,"n.bg":true,"o.bg":true,"p.bg":true,"q.bg":true,"r.bg":true,"s.bg":true,"t.bg":true,"u.bg":true,"v.bg":true,"w.bg":true,"x.bg":true,"y.bg":true,"z.bg":true,"0.bg":true,"1.bg":true,"2.bg":true,"3.bg":true,"4.bg":true,"5.bg":true,"6.bg":true,"7.bg":true,"8.bg":true,"9.bg":true,"bh":true,"com.bh":true,"edu.bh":true,"net.bh":true,"org.bh":true,"gov.bh":true,"bi":true,"co.bi":true,"com.bi":true,"edu.bi":true,"or.bi":true,"org.bi":true,"biz":true,"bj":true,"asso.bj":true,"barreau.bj":true,"gouv.bj":true,"bm":true,"com.bm":true,"edu.bm":true,"gov.bm":true,"net.bm":true,"org.bm":true,"*.bn":true,"bo":true,"com.bo":true,"edu.bo":true,"gob.bo":true,"int.bo":true,"org.bo":true,"net.bo":true,"mil.bo":true,"tv.bo":true,"web.bo":true,"academia.bo":true,"agro.bo":true,"arte.bo":true,"blog.bo":true,"bolivia.bo":true,"ciencia.bo":true,"cooperativa.bo":true,"democracia.bo":true,"deporte.bo":true,"ecologia.bo":true,"economia.bo":true,"empresa.bo":true,"indigena.bo":true,"industria.bo":true,"info.bo":true,"medicina.bo":true,"movimiento.bo":true,"musica.bo":true,"natural.bo":true,"nombre.bo":true,"noticias.bo":true,"patria.bo":true,"politica.bo":true,"profesional.bo":true,"plurinacional.bo":true,"pueblo.bo":true,"revista.bo":true,"salud.bo":true,"tecnologia.bo":true,"tksat.bo":true,"transporte.bo":true,"wiki.bo":true,"br":true,"9guacu.br":true,"abc.br":true,"adm.br":true,"adv.br":true,"agr.br":true,"aju.br":true,"am.br":true,"anani.br":true,"aparecida.br":true,"arq.br":true,"art.br":true,"ato.br":true,"b.br":true,"belem.br":true,"bhz.br":true,"bio.br":true,"blog.br":true,"bmd.br":true,"boavista.br":true,"bsb.br":true,"campinagrande.br":true,"campinas.br":true,"caxias.br":true,"cim.br":true,"cng.br":true,"cnt.br":true,"com.br":true,"contagem.br":true,"coop.br":true,"cri.br":true,"cuiaba.br":true,"curitiba.br":true,"def.br":true,"ecn.br":true,"eco.br":true,"edu.br":true,"emp.br":true,"eng.br":true,"esp.br":true,"etc.br":true,"eti.br":true,"far.br":true,"feira.br":true,"flog.br":true,"floripa.br":true,"fm.br":true,"fnd.br":true,"fortal.br":true,"fot.br":true,"foz.br":true,"fst.br":true,"g12.br":true,"ggf.br":true,"goiania.br":true,"gov.br":true,"ac.gov.br":true,"al.gov.br":true,"am.gov.br":true,"ap.gov.br":true,"ba.gov.br":true,"ce.gov.br":true,"df.gov.br":true,"es.gov.br":true,"go.gov.br":true,"ma.gov.br":true,"mg.gov.br":true,"ms.gov.br":true,"mt.gov.br":true,"pa.gov.br":true,"pb.gov.br":true,"pe.gov.br":true,"pi.gov.br":true,"pr.gov.br":true,"rj.gov.br":true,"rn.gov.br":true,"ro.gov.br":true,"rr.gov.br":true,"rs.gov.br":true,"sc.gov.br":true,"se.gov.br":true,"sp.gov.br":true,"to.gov.br":true,"gru.br":true,"imb.br":true,"ind.br":true,"inf.br":true,"jab.br":true,"jampa.br":true,"jdf.br":true,"joinville.br":true,"jor.br":true,"jus.br":true,"leg.br":true,"lel.br":true,"londrina.br":true,"macapa.br":true,"maceio.br":true,"manaus.br":true,"maringa.br":true,"mat.br":true,"med.br":true,"mil.br":true,"morena.br":true,"mp.br":true,"mus.br":true,"natal.br":true,"net.br":true,"niteroi.br":true,"*.nom.br":true,"not.br":true,"ntr.br":true,"odo.br":true,"org.br":true,"osasco.br":true,"palmas.br":true,"poa.br":true,"ppg.br":true,"pro.br":true,"psc.br":true,"psi.br":true,"pvh.br":true,"qsl.br":true,"radio.br":true,"rec.br":true,"recife.br":true,"ribeirao.br":true,"rio.br":true,"riobranco.br":true,"riopreto.br":true,"salvador.br":true,"sampa.br":true,"santamaria.br":true,"santoandre.br":true,"saobernardo.br":true,"saogonca.br":true,"sjc.br":true,"slg.br":true,"slz.br":true,"sorocaba.br":true,"srv.br":true,"taxi.br":true,"teo.br":true,"the.br":true,"tmp.br":true,"trd.br":true,"tur.br":true,"tv.br":true,"udi.br":true,"vet.br":true,"vix.br":true,"vlog.br":true,"wiki.br":true,"zlg.br":true,"bs":true,"com.bs":true,"net.bs":true,"org.bs":true,"edu.bs":true,"gov.bs":true,"bt":true,"com.bt":true,"edu.bt":true,"gov.bt":true,"net.bt":true,"org.bt":true,"bv":true,"bw":true,"co.bw":true,"org.bw":true,"by":true,"gov.by":true,"mil.by":true,"com.by":true,"of.by":true,"bz":true,"com.bz":true,"net.bz":true,"org.bz":true,"edu.bz":true,"gov.bz":true,"ca":true,"ab.ca":true,"bc.ca":true,"mb.ca":true,"nb.ca":true,"nf.ca":true,"nl.ca":true,"ns.ca":true,"nt.ca":true,"nu.ca":true,"on.ca":true,"pe.ca":true,"qc.ca":true,"sk.ca":true,"yk.ca":true,"gc.ca":true,"cat":true,"cc":true,"cd":true,"gov.cd":true,"cf":true,"cg":true,"ch":true,"ci":true,"org.ci":true,"or.ci":true,"com.ci":true,"co.ci":true,"edu.ci":true,"ed.ci":true,"ac.ci":true,"net.ci":true,"go.ci":true,"asso.ci":true,"xn--aroport-bya.ci":true,"int.ci":true,"presse.ci":true,"md.ci":true,"gouv.ci":true,"*.ck":true,"www.ck":false,"cl":true,"gov.cl":true,"gob.cl":true,"co.cl":true,"mil.cl":true,"cm":true,"co.cm":true,"com.cm":true,"gov.cm":true,"net.cm":true,"cn":true,"ac.cn":true,"com.cn":true,"edu.cn":true,"gov.cn":true,"net.cn":true,"org.cn":true,"mil.cn":true,"xn--55qx5d.cn":true,"xn--io0a7i.cn":true,"xn--od0alg.cn":true,"ah.cn":true,"bj.cn":true,"cq.cn":true,"fj.cn":true,"gd.cn":true,"gs.cn":true,"gz.cn":true,"gx.cn":true,"ha.cn":true,"hb.cn":true,"he.cn":true,"hi.cn":true,"hl.cn":true,"hn.cn":true,"jl.cn":true,"js.cn":true,"jx.cn":true,"ln.cn":true,"nm.cn":true,"nx.cn":true,"qh.cn":true,"sc.cn":true,"sd.cn":true,"sh.cn":true,"sn.cn":true,"sx.cn":true,"tj.cn":true,"xj.cn":true,"xz.cn":true,"yn.cn":true,"zj.cn":true,"hk.cn":true,"mo.cn":true,"tw.cn":true,"co":true,"arts.co":true,"com.co":true,"edu.co":true,"firm.co":true,"gov.co":true,"info.co":true,"int.co":true,"mil.co":true,"net.co":true,"nom.co":true,"org.co":true,"rec.co":true,"web.co":true,"com":true,"coop":true,"cr":true,"ac.cr":true,"co.cr":true,"ed.cr":true,"fi.cr":true,"go.cr":true,"or.cr":true,"sa.cr":true,"cu":true,"com.cu":true,"edu.cu":true,"org.cu":true,"net.cu":true,"gov.cu":true,"inf.cu":true,"cv":true,"cw":true,"com.cw":true,"edu.cw":true,"net.cw":true,"org.cw":true,"cx":true,"gov.cx":true,"cy":true,"ac.cy":true,"biz.cy":true,"com.cy":true,"ekloges.cy":true,"gov.cy":true,"ltd.cy":true,"name.cy":true,"net.cy":true,"org.cy":true,"parliament.cy":true,"press.cy":true,"pro.cy":true,"tm.cy":true,"cz":true,"de":true,"dj":true,"dk":true,"dm":true,"com.dm":true,"net.dm":true,"org.dm":true,"edu.dm":true,"gov.dm":true,"do":true,"art.do":true,"com.do":true,"edu.do":true,"gob.do":true,"gov.do":true,"mil.do":true,"net.do":true,"org.do":true,"sld.do":true,"web.do":true,"dz":true,"com.dz":true,"org.dz":true,"net.dz":true,"gov.dz":true,"edu.dz":true,"asso.dz":true,"pol.dz":true,"art.dz":true,"ec":true,"com.ec":true,"info.ec":true,"net.ec":true,"fin.ec":true,"k12.ec":true,"med.ec":true,"pro.ec":true,"org.ec":true,"edu.ec":true,"gov.ec":true,"gob.ec":true,"mil.ec":true,"edu":true,"ee":true,"edu.ee":true,"gov.ee":true,"riik.ee":true,"lib.ee":true,"med.ee":true,"com.ee":true,"pri.ee":true,"aip.ee":true,"org.ee":true,"fie.ee":true,"eg":true,"com.eg":true,"edu.eg":true,"eun.eg":true,"gov.eg":true,"mil.eg":true,"name.eg":true,"net.eg":true,"org.eg":true,"sci.eg":true,"*.er":true,"es":true,"com.es":true,"nom.es":true,"org.es":true,"gob.es":true,"edu.es":true,"et":true,"com.et":true,"gov.et":true,"org.et":true,"edu.et":true,"biz.et":true,"name.et":true,"info.et":true,"net.et":true,"eu":true,"fi":true,"aland.fi":true,"*.fj":true,"*.fk":true,"fm":true,"fo":true,"fr":true,"com.fr":true,"asso.fr":true,"nom.fr":true,"prd.fr":true,"presse.fr":true,"tm.fr":true,"aeroport.fr":true,"assedic.fr":true,"avocat.fr":true,"avoues.fr":true,"cci.fr":true,"chambagri.fr":true,"chirurgiens-dentistes.fr":true,"experts-comptables.fr":true,"geometre-expert.fr":true,"gouv.fr":true,"greta.fr":true,"huissier-justice.fr":true,"medecin.fr":true,"notaires.fr":true,"pharmacien.fr":true,"port.fr":true,"veterinaire.fr":true,"ga":true,"gb":true,"gd":true,"ge":true,"com.ge":true,"edu.ge":true,"gov.ge":true,"org.ge":true,"mil.ge":true,"net.ge":true,"pvt.ge":true,"gf":true,"gg":true,"co.gg":true,"net.gg":true,"org.gg":true,"gh":true,"com.gh":true,"edu.gh":true,"gov.gh":true,"org.gh":true,"mil.gh":true,"gi":true,"com.gi":true,"ltd.gi":true,"gov.gi":true,"mod.gi":true,"edu.gi":true,"org.gi":true,"gl":true,"co.gl":true,"com.gl":true,"edu.gl":true,"net.gl":true,"org.gl":true,"gm":true,"gn":true,"ac.gn":true,"com.gn":true,"edu.gn":true,"gov.gn":true,"org.gn":true,"net.gn":true,"gov":true,"gp":true,"com.gp":true,"net.gp":true,"mobi.gp":true,"edu.gp":true,"org.gp":true,"asso.gp":true,"gq":true,"gr":true,"com.gr":true,"edu.gr":true,"net.gr":true,"org.gr":true,"gov.gr":true,"gs":true,"gt":true,"com.gt":true,"edu.gt":true,"gob.gt":true,"ind.gt":true,"mil.gt":true,"net.gt":true,"org.gt":true,"*.gu":true,"gw":true,"gy":true,"co.gy":true,"com.gy":true,"edu.gy":true,"gov.gy":true,"net.gy":true,"org.gy":true,"hk":true,"com.hk":true,"edu.hk":true,"gov.hk":true,"idv.hk":true,"net.hk":true,"org.hk":true,"xn--55qx5d.hk":true,"xn--wcvs22d.hk":true,"xn--lcvr32d.hk":true,"xn--mxtq1m.hk":true,"xn--gmqw5a.hk":true,"xn--ciqpn.hk":true,"xn--gmq050i.hk":true,"xn--zf0avx.hk":true,"xn--io0a7i.hk":true,"xn--mk0axi.hk":true,"xn--od0alg.hk":true,"xn--od0aq3b.hk":true,"xn--tn0ag.hk":true,"xn--uc0atv.hk":true,"xn--uc0ay4a.hk":true,"hm":true,"hn":true,"com.hn":true,"edu.hn":true,"org.hn":true,"net.hn":true,"mil.hn":true,"gob.hn":true,"hr":true,"iz.hr":true,"from.hr":true,"name.hr":true,"com.hr":true,"ht":true,"com.ht":true,"shop.ht":true,"firm.ht":true,"info.ht":true,"adult.ht":true,"net.ht":true,"pro.ht":true,"org.ht":true,"med.ht":true,"art.ht":true,"coop.ht":true,"pol.ht":true,"asso.ht":true,"edu.ht":true,"rel.ht":true,"gouv.ht":true,"perso.ht":true,"hu":true,"co.hu":true,"info.hu":true,"org.hu":true,"priv.hu":true,"sport.hu":true,"tm.hu":true,"2000.hu":true,"agrar.hu":true,"bolt.hu":true,"casino.hu":true,"city.hu":true,"erotica.hu":true,"erotika.hu":true,"film.hu":true,"forum.hu":true,"games.hu":true,"hotel.hu":true,"ingatlan.hu":true,"jogasz.hu":true,"konyvelo.hu":true,"lakas.hu":true,"media.hu":true,"news.hu":true,"reklam.hu":true,"sex.hu":true,"shop.hu":true,"suli.hu":true,"szex.hu":true,"tozsde.hu":true,"utazas.hu":true,"video.hu":true,"id":true,"ac.id":true,"biz.id":true,"co.id":true,"desa.id":true,"go.id":true,"mil.id":true,"my.id":true,"net.id":true,"or.id":true,"sch.id":true,"web.id":true,"ie":true,"gov.ie":true,"il":true,"ac.il":true,"co.il":true,"gov.il":true,"idf.il":true,"k12.il":true,"muni.il":true,"net.il":true,"org.il":true,"im":true,"ac.im":true,"co.im":true,"com.im":true,"ltd.co.im":true,"net.im":true,"org.im":true,"plc.co.im":true,"tt.im":true,"tv.im":true,"in":true,"co.in":true,"firm.in":true,"net.in":true,"org.in":true,"gen.in":true,"ind.in":true,"nic.in":true,"ac.in":true,"edu.in":true,"res.in":true,"gov.in":true,"mil.in":true,"info":true,"int":true,"eu.int":true,"io":true,"com.io":true,"iq":true,"gov.iq":true,"edu.iq":true,"mil.iq":true,"com.iq":true,"org.iq":true,"net.iq":true,"ir":true,"ac.ir":true,"co.ir":true,"gov.ir":true,"id.ir":true,"net.ir":true,"org.ir":true,"sch.ir":true,"xn--mgba3a4f16a.ir":true,"xn--mgba3a4fra.ir":true,"is":true,"net.is":true,"com.is":true,"edu.is":true,"gov.is":true,"org.is":true,"int.is":true,"it":true,"gov.it":true,"edu.it":true,"abr.it":true,"abruzzo.it":true,"aosta-valley.it":true,"aostavalley.it":true,"bas.it":true,"basilicata.it":true,"cal.it":true,"calabria.it":true,"cam.it":true,"campania.it":true,"emilia-romagna.it":true,"emiliaromagna.it":true,"emr.it":true,"friuli-v-giulia.it":true,"friuli-ve-giulia.it":true,"friuli-vegiulia.it":true,"friuli-venezia-giulia.it":true,"friuli-veneziagiulia.it":true,"friuli-vgiulia.it":true,"friuliv-giulia.it":true,"friulive-giulia.it":true,"friulivegiulia.it":true,"friulivenezia-giulia.it":true,"friuliveneziagiulia.it":true,"friulivgiulia.it":true,"fvg.it":true,"laz.it":true,"lazio.it":true,"lig.it":true,"liguria.it":true,"lom.it":true,"lombardia.it":true,"lombardy.it":true,"lucania.it":true,"mar.it":true,"marche.it":true,"mol.it":true,"molise.it":true,"piedmont.it":true,"piemonte.it":true,"pmn.it":true,"pug.it":true,"puglia.it":true,"sar.it":true,"sardegna.it":true,"sardinia.it":true,"sic.it":true,"sicilia.it":true,"sicily.it":true,"taa.it":true,"tos.it":true,"toscana.it":true,"trentino-a-adige.it":true,"trentino-aadige.it":true,"trentino-alto-adige.it":true,"trentino-altoadige.it":true,"trentino-s-tirol.it":true,"trentino-stirol.it":true,"trentino-sud-tirol.it":true,"trentino-sudtirol.it":true,"trentino-sued-tirol.it":true,"trentino-suedtirol.it":true,"trentinoa-adige.it":true,"trentinoaadige.it":true,"trentinoalto-adige.it":true,"trentinoaltoadige.it":true,"trentinos-tirol.it":true,"trentinostirol.it":true,"trentinosud-tirol.it":true,"trentinosudtirol.it":true,"trentinosued-tirol.it":true,"trentinosuedtirol.it":true,"tuscany.it":true,"umb.it":true,"umbria.it":true,"val-d-aosta.it":true,"val-daosta.it":true,"vald-aosta.it":true,"valdaosta.it":true,"valle-aosta.it":true,"valle-d-aosta.it":true,"valle-daosta.it":true,"valleaosta.it":true,"valled-aosta.it":true,"valledaosta.it":true,"vallee-aoste.it":true,"valleeaoste.it":true,"vao.it":true,"vda.it":true,"ven.it":true,"veneto.it":true,"ag.it":true,"agrigento.it":true,"al.it":true,"alessandria.it":true,"alto-adige.it":true,"altoadige.it":true,"an.it":true,"ancona.it":true,"andria-barletta-trani.it":true,"andria-trani-barletta.it":true,"andriabarlettatrani.it":true,"andriatranibarletta.it":true,"ao.it":true,"aosta.it":true,"aoste.it":true,"ap.it":true,"aq.it":true,"aquila.it":true,"ar.it":true,"arezzo.it":true,"ascoli-piceno.it":true,"ascolipiceno.it":true,"asti.it":true,"at.it":true,"av.it":true,"avellino.it":true,"ba.it":true,"balsan.it":true,"bari.it":true,"barletta-trani-andria.it":true,"barlettatraniandria.it":true,"belluno.it":true,"benevento.it":true,"bergamo.it":true,"bg.it":true,"bi.it":true,"biella.it":true,"bl.it":true,"bn.it":true,"bo.it":true,"bologna.it":true,"bolzano.it":true,"bozen.it":true,"br.it":true,"brescia.it":true,"brindisi.it":true,"bs.it":true,"bt.it":true,"bz.it":true,"ca.it":true,"cagliari.it":true,"caltanissetta.it":true,"campidano-medio.it":true,"campidanomedio.it":true,"campobasso.it":true,"carbonia-iglesias.it":true,"carboniaiglesias.it":true,"carrara-massa.it":true,"carraramassa.it":true,"caserta.it":true,"catania.it":true,"catanzaro.it":true,"cb.it":true,"ce.it":true,"cesena-forli.it":true,"cesenaforli.it":true,"ch.it":true,"chieti.it":true,"ci.it":true,"cl.it":true,"cn.it":true,"co.it":true,"como.it":true,"cosenza.it":true,"cr.it":true,"cremona.it":true,"crotone.it":true,"cs.it":true,"ct.it":true,"cuneo.it":true,"cz.it":true,"dell-ogliastra.it":true,"dellogliastra.it":true,"en.it":true,"enna.it":true,"fc.it":true,"fe.it":true,"fermo.it":true,"ferrara.it":true,"fg.it":true,"fi.it":true,"firenze.it":true,"florence.it":true,"fm.it":true,"foggia.it":true,"forli-cesena.it":true,"forlicesena.it":true,"fr.it":true,"frosinone.it":true,"ge.it":true,"genoa.it":true,"genova.it":true,"go.it":true,"gorizia.it":true,"gr.it":true,"grosseto.it":true,"iglesias-carbonia.it":true,"iglesiascarbonia.it":true,"im.it":true,"imperia.it":true,"is.it":true,"isernia.it":true,"kr.it":true,"la-spezia.it":true,"laquila.it":true,"laspezia.it":true,"latina.it":true,"lc.it":true,"le.it":true,"lecce.it":true,"lecco.it":true,"li.it":true,"livorno.it":true,"lo.it":true,"lodi.it":true,"lt.it":true,"lu.it":true,"lucca.it":true,"macerata.it":true,"mantova.it":true,"massa-carrara.it":true,"massacarrara.it":true,"matera.it":true,"mb.it":true,"mc.it":true,"me.it":true,"medio-campidano.it":true,"mediocampidano.it":true,"messina.it":true,"mi.it":true,"milan.it":true,"milano.it":true,"mn.it":true,"mo.it":true,"modena.it":true,"monza-brianza.it":true,"monza-e-della-brianza.it":true,"monza.it":true,"monzabrianza.it":true,"monzaebrianza.it":true,"monzaedellabrianza.it":true,"ms.it":true,"mt.it":true,"na.it":true,"naples.it":true,"napoli.it":true,"no.it":true,"novara.it":true,"nu.it":true,"nuoro.it":true,"og.it":true,"ogliastra.it":true,"olbia-tempio.it":true,"olbiatempio.it":true,"or.it":true,"oristano.it":true,"ot.it":true,"pa.it":true,"padova.it":true,"padua.it":true,"palermo.it":true,"parma.it":true,"pavia.it":true,"pc.it":true,"pd.it":true,"pe.it":true,"perugia.it":true,"pesaro-urbino.it":true,"pesarourbino.it":true,"pescara.it":true,"pg.it":true,"pi.it":true,"piacenza.it":true,"pisa.it":true,"pistoia.it":true,"pn.it":true,"po.it":true,"pordenone.it":true,"potenza.it":true,"pr.it":true,"prato.it":true,"pt.it":true,"pu.it":true,"pv.it":true,"pz.it":true,"ra.it":true,"ragusa.it":true,"ravenna.it":true,"rc.it":true,"re.it":true,"reggio-calabria.it":true,"reggio-emilia.it":true,"reggiocalabria.it":true,"reggioemilia.it":true,"rg.it":true,"ri.it":true,"rieti.it":true,"rimini.it":true,"rm.it":true,"rn.it":true,"ro.it":true,"roma.it":true,"rome.it":true,"rovigo.it":true,"sa.it":true,"salerno.it":true,"sassari.it":true,"savona.it":true,"si.it":true,"siena.it":true,"siracusa.it":true,"so.it":true,"sondrio.it":true,"sp.it":true,"sr.it":true,"ss.it":true,"suedtirol.it":true,"sv.it":true,"ta.it":true,"taranto.it":true,"te.it":true,"tempio-olbia.it":true,"tempioolbia.it":true,"teramo.it":true,"terni.it":true,"tn.it":true,"to.it":true,"torino.it":true,"tp.it":true,"tr.it":true,"trani-andria-barletta.it":true,"trani-barletta-andria.it":true,"traniandriabarletta.it":true,"tranibarlettaandria.it":true,"trapani.it":true,"trentino.it":true,"trento.it":true,"treviso.it":true,"trieste.it":true,"ts.it":true,"turin.it":true,"tv.it":true,"ud.it":true,"udine.it":true,"urbino-pesaro.it":true,"urbinopesaro.it":true,"va.it":true,"varese.it":true,"vb.it":true,"vc.it":true,"ve.it":true,"venezia.it":true,"venice.it":true,"verbania.it":true,"vercelli.it":true,"verona.it":true,"vi.it":true,"vibo-valentia.it":true,"vibovalentia.it":true,"vicenza.it":true,"viterbo.it":true,"vr.it":true,"vs.it":true,"vt.it":true,"vv.it":true,"je":true,"co.je":true,"net.je":true,"org.je":true,"*.jm":true,"jo":true,"com.jo":true,"org.jo":true,"net.jo":true,"edu.jo":true,"sch.jo":true,"gov.jo":true,"mil.jo":true,"name.jo":true,"jobs":true,"jp":true,"ac.jp":true,"ad.jp":true,"co.jp":true,"ed.jp":true,"go.jp":true,"gr.jp":true,"lg.jp":true,"ne.jp":true,"or.jp":true,"aichi.jp":true,"akita.jp":true,"aomori.jp":true,"chiba.jp":true,"ehime.jp":true,"fukui.jp":true,"fukuoka.jp":true,"fukushima.jp":true,"gifu.jp":true,"gunma.jp":true,"hiroshima.jp":true,"hokkaido.jp":true,"hyogo.jp":true,"ibaraki.jp":true,"ishikawa.jp":true,"iwate.jp":true,"kagawa.jp":true,"kagoshima.jp":true,"kanagawa.jp":true,"kochi.jp":true,"kumamoto.jp":true,"kyoto.jp":true,"mie.jp":true,"miyagi.jp":true,"miyazaki.jp":true,"nagano.jp":true,"nagasaki.jp":true,"nara.jp":true,"niigata.jp":true,"oita.jp":true,"okayama.jp":true,"okinawa.jp":true,"osaka.jp":true,"saga.jp":true,"saitama.jp":true,"shiga.jp":true,"shimane.jp":true,"shizuoka.jp":true,"tochigi.jp":true,"tokushima.jp":true,"tokyo.jp":true,"tottori.jp":true,"toyama.jp":true,"wakayama.jp":true,"yamagata.jp":true,"yamaguchi.jp":true,"yamanashi.jp":true,"xn--4pvxs.jp":true,"xn--vgu402c.jp":true,"xn--c3s14m.jp":true,"xn--f6qx53a.jp":true,"xn--8pvr4u.jp":true,"xn--uist22h.jp":true,"xn--djrs72d6uy.jp":true,"xn--mkru45i.jp":true,"xn--0trq7p7nn.jp":true,"xn--8ltr62k.jp":true,"xn--2m4a15e.jp":true,"xn--efvn9s.jp":true,"xn--32vp30h.jp":true,"xn--4it797k.jp":true,"xn--1lqs71d.jp":true,"xn--5rtp49c.jp":true,"xn--5js045d.jp":true,"xn--ehqz56n.jp":true,"xn--1lqs03n.jp":true,"xn--qqqt11m.jp":true,"xn--kbrq7o.jp":true,"xn--pssu33l.jp":true,"xn--ntsq17g.jp":true,"xn--uisz3g.jp":true,"xn--6btw5a.jp":true,"xn--1ctwo.jp":true,"xn--6orx2r.jp":true,"xn--rht61e.jp":true,"xn--rht27z.jp":true,"xn--djty4k.jp":true,"xn--nit225k.jp":true,"xn--rht3d.jp":true,"xn--klty5x.jp":true,"xn--kltx9a.jp":true,"xn--kltp7d.jp":true,"xn--uuwu58a.jp":true,"xn--zbx025d.jp":true,"xn--ntso0iqx3a.jp":true,"xn--elqq16h.jp":true,"xn--4it168d.jp":true,"xn--klt787d.jp":true,"xn--rny31h.jp":true,"xn--7t0a264c.jp":true,"xn--5rtq34k.jp":true,"xn--k7yn95e.jp":true,"xn--tor131o.jp":true,"xn--d5qv7z876c.jp":true,"*.kawasaki.jp":true,"*.kitakyushu.jp":true,"*.kobe.jp":true,"*.nagoya.jp":true,"*.sapporo.jp":true,"*.sendai.jp":true,"*.yokohama.jp":true,"city.kawasaki.jp":false,"city.kitakyushu.jp":false,"city.kobe.jp":false,"city.nagoya.jp":false,"city.sapporo.jp":false,"city.sendai.jp":false,"city.yokohama.jp":false,"aisai.aichi.jp":true,"ama.aichi.jp":true,"anjo.aichi.jp":true,"asuke.aichi.jp":true,"chiryu.aichi.jp":true,"chita.aichi.jp":true,"fuso.aichi.jp":true,"gamagori.aichi.jp":true,"handa.aichi.jp":true,"hazu.aichi.jp":true,"hekinan.aichi.jp":true,"higashiura.aichi.jp":true,"ichinomiya.aichi.jp":true,"inazawa.aichi.jp":true,"inuyama.aichi.jp":true,"isshiki.aichi.jp":true,"iwakura.aichi.jp":true,"kanie.aichi.jp":true,"kariya.aichi.jp":true,"kasugai.aichi.jp":true,"kira.aichi.jp":true,"kiyosu.aichi.jp":true,"komaki.aichi.jp":true,"konan.aichi.jp":true,"kota.aichi.jp":true,"mihama.aichi.jp":true,"miyoshi.aichi.jp":true,"nishio.aichi.jp":true,"nisshin.aichi.jp":true,"obu.aichi.jp":true,"oguchi.aichi.jp":true,"oharu.aichi.jp":true,"okazaki.aichi.jp":true,"owariasahi.aichi.jp":true,"seto.aichi.jp":true,"shikatsu.aichi.jp":true,"shinshiro.aichi.jp":true,"shitara.aichi.jp":true,"tahara.aichi.jp":true,"takahama.aichi.jp":true,"tobishima.aichi.jp":true,"toei.aichi.jp":true,"togo.aichi.jp":true,"tokai.aichi.jp":true,"tokoname.aichi.jp":true,"toyoake.aichi.jp":true,"toyohashi.aichi.jp":true,"toyokawa.aichi.jp":true,"toyone.aichi.jp":true,"toyota.aichi.jp":true,"tsushima.aichi.jp":true,"yatomi.aichi.jp":true,"akita.akita.jp":true,"daisen.akita.jp":true,"fujisato.akita.jp":true,"gojome.akita.jp":true,"hachirogata.akita.jp":true,"happou.akita.jp":true,"higashinaruse.akita.jp":true,"honjo.akita.jp":true,"honjyo.akita.jp":true,"ikawa.akita.jp":true,"kamikoani.akita.jp":true,"kamioka.akita.jp":true,"katagami.akita.jp":true,"kazuno.akita.jp":true,"kitaakita.akita.jp":true,"kosaka.akita.jp":true,"kyowa.akita.jp":true,"misato.akita.jp":true,"mitane.akita.jp":true,"moriyoshi.akita.jp":true,"nikaho.akita.jp":true,"noshiro.akita.jp":true,"odate.akita.jp":true,"oga.akita.jp":true,"ogata.akita.jp":true,"semboku.akita.jp":true,"yokote.akita.jp":true,"yurihonjo.akita.jp":true,"aomori.aomori.jp":true,"gonohe.aomori.jp":true,"hachinohe.aomori.jp":true,"hashikami.aomori.jp":true,"hiranai.aomori.jp":true,"hirosaki.aomori.jp":true,"itayanagi.aomori.jp":true,"kuroishi.aomori.jp":true,"misawa.aomori.jp":true,"mutsu.aomori.jp":true,"nakadomari.aomori.jp":true,"noheji.aomori.jp":true,"oirase.aomori.jp":true,"owani.aomori.jp":true,"rokunohe.aomori.jp":true,"sannohe.aomori.jp":true,"shichinohe.aomori.jp":true,"shingo.aomori.jp":true,"takko.aomori.jp":true,"towada.aomori.jp":true,"tsugaru.aomori.jp":true,"tsuruta.aomori.jp":true,"abiko.chiba.jp":true,"asahi.chiba.jp":true,"chonan.chiba.jp":true,"chosei.chiba.jp":true,"choshi.chiba.jp":true,"chuo.chiba.jp":true,"funabashi.chiba.jp":true,"futtsu.chiba.jp":true,"hanamigawa.chiba.jp":true,"ichihara.chiba.jp":true,"ichikawa.chiba.jp":true,"ichinomiya.chiba.jp":true,"inzai.chiba.jp":true,"isumi.chiba.jp":true,"kamagaya.chiba.jp":true,"kamogawa.chiba.jp":true,"kashiwa.chiba.jp":true,"katori.chiba.jp":true,"katsuura.chiba.jp":true,"kimitsu.chiba.jp":true,"kisarazu.chiba.jp":true,"kozaki.chiba.jp":true,"kujukuri.chiba.jp":true,"kyonan.chiba.jp":true,"matsudo.chiba.jp":true,"midori.chiba.jp":true,"mihama.chiba.jp":true,"minamiboso.chiba.jp":true,"mobara.chiba.jp":true,"mutsuzawa.chiba.jp":true,"nagara.chiba.jp":true,"nagareyama.chiba.jp":true,"narashino.chiba.jp":true,"narita.chiba.jp":true,"noda.chiba.jp":true,"oamishirasato.chiba.jp":true,"omigawa.chiba.jp":true,"onjuku.chiba.jp":true,"otaki.chiba.jp":true,"sakae.chiba.jp":true,"sakura.chiba.jp":true,"shimofusa.chiba.jp":true,"shirako.chiba.jp":true,"shiroi.chiba.jp":true,"shisui.chiba.jp":true,"sodegaura.chiba.jp":true,"sosa.chiba.jp":true,"tako.chiba.jp":true,"tateyama.chiba.jp":true,"togane.chiba.jp":true,"tohnosho.chiba.jp":true,"tomisato.chiba.jp":true,"urayasu.chiba.jp":true,"yachimata.chiba.jp":true,"yachiyo.chiba.jp":true,"yokaichiba.chiba.jp":true,"yokoshibahikari.chiba.jp":true,"yotsukaido.chiba.jp":true,"ainan.ehime.jp":true,"honai.ehime.jp":true,"ikata.ehime.jp":true,"imabari.ehime.jp":true,"iyo.ehime.jp":true,"kamijima.ehime.jp":true,"kihoku.ehime.jp":true,"kumakogen.ehime.jp":true,"masaki.ehime.jp":true,"matsuno.ehime.jp":true,"matsuyama.ehime.jp":true,"namikata.ehime.jp":true,"niihama.ehime.jp":true,"ozu.ehime.jp":true,"saijo.ehime.jp":true,"seiyo.ehime.jp":true,"shikokuchuo.ehime.jp":true,"tobe.ehime.jp":true,"toon.ehime.jp":true,"uchiko.ehime.jp":true,"uwajima.ehime.jp":true,"yawatahama.ehime.jp":true,"echizen.fukui.jp":true,"eiheiji.fukui.jp":true,"fukui.fukui.jp":true,"ikeda.fukui.jp":true,"katsuyama.fukui.jp":true,"mihama.fukui.jp":true,"minamiechizen.fukui.jp":true,"obama.fukui.jp":true,"ohi.fukui.jp":true,"ono.fukui.jp":true,"sabae.fukui.jp":true,"sakai.fukui.jp":true,"takahama.fukui.jp":true,"tsuruga.fukui.jp":true,"wakasa.fukui.jp":true,"ashiya.fukuoka.jp":true,"buzen.fukuoka.jp":true,"chikugo.fukuoka.jp":true,"chikuho.fukuoka.jp":true,"chikujo.fukuoka.jp":true,"chikushino.fukuoka.jp":true,"chikuzen.fukuoka.jp":true,"chuo.fukuoka.jp":true,"dazaifu.fukuoka.jp":true,"fukuchi.fukuoka.jp":true,"hakata.fukuoka.jp":true,"higashi.fukuoka.jp":true,"hirokawa.fukuoka.jp":true,"hisayama.fukuoka.jp":true,"iizuka.fukuoka.jp":true,"inatsuki.fukuoka.jp":true,"kaho.fukuoka.jp":true,"kasuga.fukuoka.jp":true,"kasuya.fukuoka.jp":true,"kawara.fukuoka.jp":true,"keisen.fukuoka.jp":true,"koga.fukuoka.jp":true,"kurate.fukuoka.jp":true,"kurogi.fukuoka.jp":true,"kurume.fukuoka.jp":true,"minami.fukuoka.jp":true,"miyako.fukuoka.jp":true,"miyama.fukuoka.jp":true,"miyawaka.fukuoka.jp":true,"mizumaki.fukuoka.jp":true,"munakata.fukuoka.jp":true,"nakagawa.fukuoka.jp":true,"nakama.fukuoka.jp":true,"nishi.fukuoka.jp":true,"nogata.fukuoka.jp":true,"ogori.fukuoka.jp":true,"okagaki.fukuoka.jp":true,"okawa.fukuoka.jp":true,"oki.fukuoka.jp":true,"omuta.fukuoka.jp":true,"onga.fukuoka.jp":true,"onojo.fukuoka.jp":true,"oto.fukuoka.jp":true,"saigawa.fukuoka.jp":true,"sasaguri.fukuoka.jp":true,"shingu.fukuoka.jp":true,"shinyoshitomi.fukuoka.jp":true,"shonai.fukuoka.jp":true,"soeda.fukuoka.jp":true,"sue.fukuoka.jp":true,"tachiarai.fukuoka.jp":true,"tagawa.fukuoka.jp":true,"takata.fukuoka.jp":true,"toho.fukuoka.jp":true,"toyotsu.fukuoka.jp":true,"tsuiki.fukuoka.jp":true,"ukiha.fukuoka.jp":true,"umi.fukuoka.jp":true,"usui.fukuoka.jp":true,"yamada.fukuoka.jp":true,"yame.fukuoka.jp":true,"yanagawa.fukuoka.jp":true,"yukuhashi.fukuoka.jp":true,"aizubange.fukushima.jp":true,"aizumisato.fukushima.jp":true,"aizuwakamatsu.fukushima.jp":true,"asakawa.fukushima.jp":true,"bandai.fukushima.jp":true,"date.fukushima.jp":true,"fukushima.fukushima.jp":true,"furudono.fukushima.jp":true,"futaba.fukushima.jp":true,"hanawa.fukushima.jp":true,"higashi.fukushima.jp":true,"hirata.fukushima.jp":true,"hirono.fukushima.jp":true,"iitate.fukushima.jp":true,"inawashiro.fukushima.jp":true,"ishikawa.fukushima.jp":true,"iwaki.fukushima.jp":true,"izumizaki.fukushima.jp":true,"kagamiishi.fukushima.jp":true,"kaneyama.fukushima.jp":true,"kawamata.fukushima.jp":true,"kitakata.fukushima.jp":true,"kitashiobara.fukushima.jp":true,"koori.fukushima.jp":true,"koriyama.fukushima.jp":true,"kunimi.fukushima.jp":true,"miharu.fukushima.jp":true,"mishima.fukushima.jp":true,"namie.fukushima.jp":true,"nango.fukushima.jp":true,"nishiaizu.fukushima.jp":true,"nishigo.fukushima.jp":true,"okuma.fukushima.jp":true,"omotego.fukushima.jp":true,"ono.fukushima.jp":true,"otama.fukushima.jp":true,"samegawa.fukushima.jp":true,"shimogo.fukushima.jp":true,"shirakawa.fukushima.jp":true,"showa.fukushima.jp":true,"soma.fukushima.jp":true,"sukagawa.fukushima.jp":true,"taishin.fukushima.jp":true,"tamakawa.fukushima.jp":true,"tanagura.fukushima.jp":true,"tenei.fukushima.jp":true,"yabuki.fukushima.jp":true,"yamato.fukushima.jp":true,"yamatsuri.fukushima.jp":true,"yanaizu.fukushima.jp":true,"yugawa.fukushima.jp":true,"anpachi.gifu.jp":true,"ena.gifu.jp":true,"gifu.gifu.jp":true,"ginan.gifu.jp":true,"godo.gifu.jp":true,"gujo.gifu.jp":true,"hashima.gifu.jp":true,"hichiso.gifu.jp":true,"hida.gifu.jp":true,"higashishirakawa.gifu.jp":true,"ibigawa.gifu.jp":true,"ikeda.gifu.jp":true,"kakamigahara.gifu.jp":true,"kani.gifu.jp":true,"kasahara.gifu.jp":true,"kasamatsu.gifu.jp":true,"kawaue.gifu.jp":true,"kitagata.gifu.jp":true,"mino.gifu.jp":true,"minokamo.gifu.jp":true,"mitake.gifu.jp":true,"mizunami.gifu.jp":true,"motosu.gifu.jp":true,"nakatsugawa.gifu.jp":true,"ogaki.gifu.jp":true,"sakahogi.gifu.jp":true,"seki.gifu.jp":true,"sekigahara.gifu.jp":true,"shirakawa.gifu.jp":true,"tajimi.gifu.jp":true,"takayama.gifu.jp":true,"tarui.gifu.jp":true,"toki.gifu.jp":true,"tomika.gifu.jp":true,"wanouchi.gifu.jp":true,"yamagata.gifu.jp":true,"yaotsu.gifu.jp":true,"yoro.gifu.jp":true,"annaka.gunma.jp":true,"chiyoda.gunma.jp":true,"fujioka.gunma.jp":true,"higashiagatsuma.gunma.jp":true,"isesaki.gunma.jp":true,"itakura.gunma.jp":true,"kanna.gunma.jp":true,"kanra.gunma.jp":true,"katashina.gunma.jp":true,"kawaba.gunma.jp":true,"kiryu.gunma.jp":true,"kusatsu.gunma.jp":true,"maebashi.gunma.jp":true,"meiwa.gunma.jp":true,"midori.gunma.jp":true,"minakami.gunma.jp":true,"naganohara.gunma.jp":true,"nakanojo.gunma.jp":true,"nanmoku.gunma.jp":true,"numata.gunma.jp":true,"oizumi.gunma.jp":true,"ora.gunma.jp":true,"ota.gunma.jp":true,"shibukawa.gunma.jp":true,"shimonita.gunma.jp":true,"shinto.gunma.jp":true,"showa.gunma.jp":true,"takasaki.gunma.jp":true,"takayama.gunma.jp":true,"tamamura.gunma.jp":true,"tatebayashi.gunma.jp":true,"tomioka.gunma.jp":true,"tsukiyono.gunma.jp":true,"tsumagoi.gunma.jp":true,"ueno.gunma.jp":true,"yoshioka.gunma.jp":true,"asaminami.hiroshima.jp":true,"daiwa.hiroshima.jp":true,"etajima.hiroshima.jp":true,"fuchu.hiroshima.jp":true,"fukuyama.hiroshima.jp":true,"hatsukaichi.hiroshima.jp":true,"higashihiroshima.hiroshima.jp":true,"hongo.hiroshima.jp":true,"jinsekikogen.hiroshima.jp":true,"kaita.hiroshima.jp":true,"kui.hiroshima.jp":true,"kumano.hiroshima.jp":true,"kure.hiroshima.jp":true,"mihara.hiroshima.jp":true,"miyoshi.hiroshima.jp":true,"naka.hiroshima.jp":true,"onomichi.hiroshima.jp":true,"osakikamijima.hiroshima.jp":true,"otake.hiroshima.jp":true,"saka.hiroshima.jp":true,"sera.hiroshima.jp":true,"seranishi.hiroshima.jp":true,"shinichi.hiroshima.jp":true,"shobara.hiroshima.jp":true,"takehara.hiroshima.jp":true,"abashiri.hokkaido.jp":true,"abira.hokkaido.jp":true,"aibetsu.hokkaido.jp":true,"akabira.hokkaido.jp":true,"akkeshi.hokkaido.jp":true,"asahikawa.hokkaido.jp":true,"ashibetsu.hokkaido.jp":true,"ashoro.hokkaido.jp":true,"assabu.hokkaido.jp":true,"atsuma.hokkaido.jp":true,"bibai.hokkaido.jp":true,"biei.hokkaido.jp":true,"bifuka.hokkaido.jp":true,"bihoro.hokkaido.jp":true,"biratori.hokkaido.jp":true,"chippubetsu.hokkaido.jp":true,"chitose.hokkaido.jp":true,"date.hokkaido.jp":true,"ebetsu.hokkaido.jp":true,"embetsu.hokkaido.jp":true,"eniwa.hokkaido.jp":true,"erimo.hokkaido.jp":true,"esan.hokkaido.jp":true,"esashi.hokkaido.jp":true,"fukagawa.hokkaido.jp":true,"fukushima.hokkaido.jp":true,"furano.hokkaido.jp":true,"furubira.hokkaido.jp":true,"haboro.hokkaido.jp":true,"hakodate.hokkaido.jp":true,"hamatonbetsu.hokkaido.jp":true,"hidaka.hokkaido.jp":true,"higashikagura.hokkaido.jp":true,"higashikawa.hokkaido.jp":true,"hiroo.hokkaido.jp":true,"hokuryu.hokkaido.jp":true,"hokuto.hokkaido.jp":true,"honbetsu.hokkaido.jp":true,"horokanai.hokkaido.jp":true,"horonobe.hokkaido.jp":true,"ikeda.hokkaido.jp":true,"imakane.hokkaido.jp":true,"ishikari.hokkaido.jp":true,"iwamizawa.hokkaido.jp":true,"iwanai.hokkaido.jp":true,"kamifurano.hokkaido.jp":true,"kamikawa.hokkaido.jp":true,"kamishihoro.hokkaido.jp":true,"kamisunagawa.hokkaido.jp":true,"kamoenai.hokkaido.jp":true,"kayabe.hokkaido.jp":true,"kembuchi.hokkaido.jp":true,"kikonai.hokkaido.jp":true,"kimobetsu.hokkaido.jp":true,"kitahiroshima.hokkaido.jp":true,"kitami.hokkaido.jp":true,"kiyosato.hokkaido.jp":true,"koshimizu.hokkaido.jp":true,"kunneppu.hokkaido.jp":true,"kuriyama.hokkaido.jp":true,"kuromatsunai.hokkaido.jp":true,"kushiro.hokkaido.jp":true,"kutchan.hokkaido.jp":true,"kyowa.hokkaido.jp":true,"mashike.hokkaido.jp":true,"matsumae.hokkaido.jp":true,"mikasa.hokkaido.jp":true,"minamifurano.hokkaido.jp":true,"mombetsu.hokkaido.jp":true,"moseushi.hokkaido.jp":true,"mukawa.hokkaido.jp":true,"muroran.hokkaido.jp":true,"naie.hokkaido.jp":true,"nakagawa.hokkaido.jp":true,"nakasatsunai.hokkaido.jp":true,"nakatombetsu.hokkaido.jp":true,"nanae.hokkaido.jp":true,"nanporo.hokkaido.jp":true,"nayoro.hokkaido.jp":true,"nemuro.hokkaido.jp":true,"niikappu.hokkaido.jp":true,"niki.hokkaido.jp":true,"nishiokoppe.hokkaido.jp":true,"noboribetsu.hokkaido.jp":true,"numata.hokkaido.jp":true,"obihiro.hokkaido.jp":true,"obira.hokkaido.jp":true,"oketo.hokkaido.jp":true,"okoppe.hokkaido.jp":true,"otaru.hokkaido.jp":true,"otobe.hokkaido.jp":true,"otofuke.hokkaido.jp":true,"otoineppu.hokkaido.jp":true,"oumu.hokkaido.jp":true,"ozora.hokkaido.jp":true,"pippu.hokkaido.jp":true,"rankoshi.hokkaido.jp":true,"rebun.hokkaido.jp":true,"rikubetsu.hokkaido.jp":true,"rishiri.hokkaido.jp":true,"rishirifuji.hokkaido.jp":true,"saroma.hokkaido.jp":true,"sarufutsu.hokkaido.jp":true,"shakotan.hokkaido.jp":true,"shari.hokkaido.jp":true,"shibecha.hokkaido.jp":true,"shibetsu.hokkaido.jp":true,"shikabe.hokkaido.jp":true,"shikaoi.hokkaido.jp":true,"shimamaki.hokkaido.jp":true,"shimizu.hokkaido.jp":true,"shimokawa.hokkaido.jp":true,"shinshinotsu.hokkaido.jp":true,"shintoku.hokkaido.jp":true,"shiranuka.hokkaido.jp":true,"shiraoi.hokkaido.jp":true,"shiriuchi.hokkaido.jp":true,"sobetsu.hokkaido.jp":true,"sunagawa.hokkaido.jp":true,"taiki.hokkaido.jp":true,"takasu.hokkaido.jp":true,"takikawa.hokkaido.jp":true,"takinoue.hokkaido.jp":true,"teshikaga.hokkaido.jp":true,"tobetsu.hokkaido.jp":true,"tohma.hokkaido.jp":true,"tomakomai.hokkaido.jp":true,"tomari.hokkaido.jp":true,"toya.hokkaido.jp":true,"toyako.hokkaido.jp":true,"toyotomi.hokkaido.jp":true,"toyoura.hokkaido.jp":true,"tsubetsu.hokkaido.jp":true,"tsukigata.hokkaido.jp":true,"urakawa.hokkaido.jp":true,"urausu.hokkaido.jp":true,"uryu.hokkaido.jp":true,"utashinai.hokkaido.jp":true,"wakkanai.hokkaido.jp":true,"wassamu.hokkaido.jp":true,"yakumo.hokkaido.jp":true,"yoichi.hokkaido.jp":true,"aioi.hyogo.jp":true,"akashi.hyogo.jp":true,"ako.hyogo.jp":true,"amagasaki.hyogo.jp":true,"aogaki.hyogo.jp":true,"asago.hyogo.jp":true,"ashiya.hyogo.jp":true,"awaji.hyogo.jp":true,"fukusaki.hyogo.jp":true,"goshiki.hyogo.jp":true,"harima.hyogo.jp":true,"himeji.hyogo.jp":true,"ichikawa.hyogo.jp":true,"inagawa.hyogo.jp":true,"itami.hyogo.jp":true,"kakogawa.hyogo.jp":true,"kamigori.hyogo.jp":true,"kamikawa.hyogo.jp":true,"kasai.hyogo.jp":true,"kasuga.hyogo.jp":true,"kawanishi.hyogo.jp":true,"miki.hyogo.jp":true,"minamiawaji.hyogo.jp":true,"nishinomiya.hyogo.jp":true,"nishiwaki.hyogo.jp":true,"ono.hyogo.jp":true,"sanda.hyogo.jp":true,"sannan.hyogo.jp":true,"sasayama.hyogo.jp":true,"sayo.hyogo.jp":true,"shingu.hyogo.jp":true,"shinonsen.hyogo.jp":true,"shiso.hyogo.jp":true,"sumoto.hyogo.jp":true,"taishi.hyogo.jp":true,"taka.hyogo.jp":true,"takarazuka.hyogo.jp":true,"takasago.hyogo.jp":true,"takino.hyogo.jp":true,"tamba.hyogo.jp":true,"tatsuno.hyogo.jp":true,"toyooka.hyogo.jp":true,"yabu.hyogo.jp":true,"yashiro.hyogo.jp":true,"yoka.hyogo.jp":true,"yokawa.hyogo.jp":true,"ami.ibaraki.jp":true,"asahi.ibaraki.jp":true,"bando.ibaraki.jp":true,"chikusei.ibaraki.jp":true,"daigo.ibaraki.jp":true,"fujishiro.ibaraki.jp":true,"hitachi.ibaraki.jp":true,"hitachinaka.ibaraki.jp":true,"hitachiomiya.ibaraki.jp":true,"hitachiota.ibaraki.jp":true,"ibaraki.ibaraki.jp":true,"ina.ibaraki.jp":true,"inashiki.ibaraki.jp":true,"itako.ibaraki.jp":true,"iwama.ibaraki.jp":true,"joso.ibaraki.jp":true,"kamisu.ibaraki.jp":true,"kasama.ibaraki.jp":true,"kashima.ibaraki.jp":true,"kasumigaura.ibaraki.jp":true,"koga.ibaraki.jp":true,"miho.ibaraki.jp":true,"mito.ibaraki.jp":true,"moriya.ibaraki.jp":true,"naka.ibaraki.jp":true,"namegata.ibaraki.jp":true,"oarai.ibaraki.jp":true,"ogawa.ibaraki.jp":true,"omitama.ibaraki.jp":true,"ryugasaki.ibaraki.jp":true,"sakai.ibaraki.jp":true,"sakuragawa.ibaraki.jp":true,"shimodate.ibaraki.jp":true,"shimotsuma.ibaraki.jp":true,"shirosato.ibaraki.jp":true,"sowa.ibaraki.jp":true,"suifu.ibaraki.jp":true,"takahagi.ibaraki.jp":true,"tamatsukuri.ibaraki.jp":true,"tokai.ibaraki.jp":true,"tomobe.ibaraki.jp":true,"tone.ibaraki.jp":true,"toride.ibaraki.jp":true,"tsuchiura.ibaraki.jp":true,"tsukuba.ibaraki.jp":true,"uchihara.ibaraki.jp":true,"ushiku.ibaraki.jp":true,"yachiyo.ibaraki.jp":true,"yamagata.ibaraki.jp":true,"yawara.ibaraki.jp":true,"yuki.ibaraki.jp":true,"anamizu.ishikawa.jp":true,"hakui.ishikawa.jp":true,"hakusan.ishikawa.jp":true,"kaga.ishikawa.jp":true,"kahoku.ishikawa.jp":true,"kanazawa.ishikawa.jp":true,"kawakita.ishikawa.jp":true,"komatsu.ishikawa.jp":true,"nakanoto.ishikawa.jp":true,"nanao.ishikawa.jp":true,"nomi.ishikawa.jp":true,"nonoichi.ishikawa.jp":true,"noto.ishikawa.jp":true,"shika.ishikawa.jp":true,"suzu.ishikawa.jp":true,"tsubata.ishikawa.jp":true,"tsurugi.ishikawa.jp":true,"uchinada.ishikawa.jp":true,"wajima.ishikawa.jp":true,"fudai.iwate.jp":true,"fujisawa.iwate.jp":true,"hanamaki.iwate.jp":true,"hiraizumi.iwate.jp":true,"hirono.iwate.jp":true,"ichinohe.iwate.jp":true,"ichinoseki.iwate.jp":true,"iwaizumi.iwate.jp":true,"iwate.iwate.jp":true,"joboji.iwate.jp":true,"kamaishi.iwate.jp":true,"kanegasaki.iwate.jp":true,"karumai.iwate.jp":true,"kawai.iwate.jp":true,"kitakami.iwate.jp":true,"kuji.iwate.jp":true,"kunohe.iwate.jp":true,"kuzumaki.iwate.jp":true,"miyako.iwate.jp":true,"mizusawa.iwate.jp":true,"morioka.iwate.jp":true,"ninohe.iwate.jp":true,"noda.iwate.jp":true,"ofunato.iwate.jp":true,"oshu.iwate.jp":true,"otsuchi.iwate.jp":true,"rikuzentakata.iwate.jp":true,"shiwa.iwate.jp":true,"shizukuishi.iwate.jp":true,"sumita.iwate.jp":true,"tanohata.iwate.jp":true,"tono.iwate.jp":true,"yahaba.iwate.jp":true,"yamada.iwate.jp":true,"ayagawa.kagawa.jp":true,"higashikagawa.kagawa.jp":true,"kanonji.kagawa.jp":true,"kotohira.kagawa.jp":true,"manno.kagawa.jp":true,"marugame.kagawa.jp":true,"mitoyo.kagawa.jp":true,"naoshima.kagawa.jp":true,"sanuki.kagawa.jp":true,"tadotsu.kagawa.jp":true,"takamatsu.kagawa.jp":true,"tonosho.kagawa.jp":true,"uchinomi.kagawa.jp":true,"utazu.kagawa.jp":true,"zentsuji.kagawa.jp":true,"akune.kagoshima.jp":true,"amami.kagoshima.jp":true,"hioki.kagoshima.jp":true,"isa.kagoshima.jp":true,"isen.kagoshima.jp":true,"izumi.kagoshima.jp":true,"kagoshima.kagoshima.jp":true,"kanoya.kagoshima.jp":true,"kawanabe.kagoshima.jp":true,"kinko.kagoshima.jp":true,"kouyama.kagoshima.jp":true,"makurazaki.kagoshima.jp":true,"matsumoto.kagoshima.jp":true,"minamitane.kagoshima.jp":true,"nakatane.kagoshima.jp":true,"nishinoomote.kagoshima.jp":true,"satsumasendai.kagoshima.jp":true,"soo.kagoshima.jp":true,"tarumizu.kagoshima.jp":true,"yusui.kagoshima.jp":true,"aikawa.kanagawa.jp":true,"atsugi.kanagawa.jp":true,"ayase.kanagawa.jp":true,"chigasaki.kanagawa.jp":true,"ebina.kanagawa.jp":true,"fujisawa.kanagawa.jp":true,"hadano.kanagawa.jp":true,"hakone.kanagawa.jp":true,"hiratsuka.kanagawa.jp":true,"isehara.kanagawa.jp":true,"kaisei.kanagawa.jp":true,"kamakura.kanagawa.jp":true,"kiyokawa.kanagawa.jp":true,"matsuda.kanagawa.jp":true,"minamiashigara.kanagawa.jp":true,"miura.kanagawa.jp":true,"nakai.kanagawa.jp":true,"ninomiya.kanagawa.jp":true,"odawara.kanagawa.jp":true,"oi.kanagawa.jp":true,"oiso.kanagawa.jp":true,"sagamihara.kanagawa.jp":true,"samukawa.kanagawa.jp":true,"tsukui.kanagawa.jp":true,"yamakita.kanagawa.jp":true,"yamato.kanagawa.jp":true,"yokosuka.kanagawa.jp":true,"yugawara.kanagawa.jp":true,"zama.kanagawa.jp":true,"zushi.kanagawa.jp":true,"aki.kochi.jp":true,"geisei.kochi.jp":true,"hidaka.kochi.jp":true,"higashitsuno.kochi.jp":true,"ino.kochi.jp":true,"kagami.kochi.jp":true,"kami.kochi.jp":true,"kitagawa.kochi.jp":true,"kochi.kochi.jp":true,"mihara.kochi.jp":true,"motoyama.kochi.jp":true,"muroto.kochi.jp":true,"nahari.kochi.jp":true,"nakamura.kochi.jp":true,"nankoku.kochi.jp":true,"nishitosa.kochi.jp":true,"niyodogawa.kochi.jp":true,"ochi.kochi.jp":true,"okawa.kochi.jp":true,"otoyo.kochi.jp":true,"otsuki.kochi.jp":true,"sakawa.kochi.jp":true,"sukumo.kochi.jp":true,"susaki.kochi.jp":true,"tosa.kochi.jp":true,"tosashimizu.kochi.jp":true,"toyo.kochi.jp":true,"tsuno.kochi.jp":true,"umaji.kochi.jp":true,"yasuda.kochi.jp":true,"yusuhara.kochi.jp":true,"amakusa.kumamoto.jp":true,"arao.kumamoto.jp":true,"aso.kumamoto.jp":true,"choyo.kumamoto.jp":true,"gyokuto.kumamoto.jp":true,"kamiamakusa.kumamoto.jp":true,"kikuchi.kumamoto.jp":true,"kumamoto.kumamoto.jp":true,"mashiki.kumamoto.jp":true,"mifune.kumamoto.jp":true,"minamata.kumamoto.jp":true,"minamioguni.kumamoto.jp":true,"nagasu.kumamoto.jp":true,"nishihara.kumamoto.jp":true,"oguni.kumamoto.jp":true,"ozu.kumamoto.jp":true,"sumoto.kumamoto.jp":true,"takamori.kumamoto.jp":true,"uki.kumamoto.jp":true,"uto.kumamoto.jp":true,"yamaga.kumamoto.jp":true,"yamato.kumamoto.jp":true,"yatsushiro.kumamoto.jp":true,"ayabe.kyoto.jp":true,"fukuchiyama.kyoto.jp":true,"higashiyama.kyoto.jp":true,"ide.kyoto.jp":true,"ine.kyoto.jp":true,"joyo.kyoto.jp":true,"kameoka.kyoto.jp":true,"kamo.kyoto.jp":true,"kita.kyoto.jp":true,"kizu.kyoto.jp":true,"kumiyama.kyoto.jp":true,"kyotamba.kyoto.jp":true,"kyotanabe.kyoto.jp":true,"kyotango.kyoto.jp":true,"maizuru.kyoto.jp":true,"minami.kyoto.jp":true,"minamiyamashiro.kyoto.jp":true,"miyazu.kyoto.jp":true,"muko.kyoto.jp":true,"nagaokakyo.kyoto.jp":true,"nakagyo.kyoto.jp":true,"nantan.kyoto.jp":true,"oyamazaki.kyoto.jp":true,"sakyo.kyoto.jp":true,"seika.kyoto.jp":true,"tanabe.kyoto.jp":true,"uji.kyoto.jp":true,"ujitawara.kyoto.jp":true,"wazuka.kyoto.jp":true,"yamashina.kyoto.jp":true,"yawata.kyoto.jp":true,"asahi.mie.jp":true,"inabe.mie.jp":true,"ise.mie.jp":true,"kameyama.mie.jp":true,"kawagoe.mie.jp":true,"kiho.mie.jp":true,"kisosaki.mie.jp":true,"kiwa.mie.jp":true,"komono.mie.jp":true,"kumano.mie.jp":true,"kuwana.mie.jp":true,"matsusaka.mie.jp":true,"meiwa.mie.jp":true,"mihama.mie.jp":true,"minamiise.mie.jp":true,"misugi.mie.jp":true,"miyama.mie.jp":true,"nabari.mie.jp":true,"shima.mie.jp":true,"suzuka.mie.jp":true,"tado.mie.jp":true,"taiki.mie.jp":true,"taki.mie.jp":true,"tamaki.mie.jp":true,"toba.mie.jp":true,"tsu.mie.jp":true,"udono.mie.jp":true,"ureshino.mie.jp":true,"watarai.mie.jp":true,"yokkaichi.mie.jp":true,"furukawa.miyagi.jp":true,"higashimatsushima.miyagi.jp":true,"ishinomaki.miyagi.jp":true,"iwanuma.miyagi.jp":true,"kakuda.miyagi.jp":true,"kami.miyagi.jp":true,"kawasaki.miyagi.jp":true,"marumori.miyagi.jp":true,"matsushima.miyagi.jp":true,"minamisanriku.miyagi.jp":true,"misato.miyagi.jp":true,"murata.miyagi.jp":true,"natori.miyagi.jp":true,"ogawara.miyagi.jp":true,"ohira.miyagi.jp":true,"onagawa.miyagi.jp":true,"osaki.miyagi.jp":true,"rifu.miyagi.jp":true,"semine.miyagi.jp":true,"shibata.miyagi.jp":true,"shichikashuku.miyagi.jp":true,"shikama.miyagi.jp":true,"shiogama.miyagi.jp":true,"shiroishi.miyagi.jp":true,"tagajo.miyagi.jp":true,"taiwa.miyagi.jp":true,"tome.miyagi.jp":true,"tomiya.miyagi.jp":true,"wakuya.miyagi.jp":true,"watari.miyagi.jp":true,"yamamoto.miyagi.jp":true,"zao.miyagi.jp":true,"aya.miyazaki.jp":true,"ebino.miyazaki.jp":true,"gokase.miyazaki.jp":true,"hyuga.miyazaki.jp":true,"kadogawa.miyazaki.jp":true,"kawaminami.miyazaki.jp":true,"kijo.miyazaki.jp":true,"kitagawa.miyazaki.jp":true,"kitakata.miyazaki.jp":true,"kitaura.miyazaki.jp":true,"kobayashi.miyazaki.jp":true,"kunitomi.miyazaki.jp":true,"kushima.miyazaki.jp":true,"mimata.miyazaki.jp":true,"miyakonojo.miyazaki.jp":true,"miyazaki.miyazaki.jp":true,"morotsuka.miyazaki.jp":true,"nichinan.miyazaki.jp":true,"nishimera.miyazaki.jp":true,"nobeoka.miyazaki.jp":true,"saito.miyazaki.jp":true,"shiiba.miyazaki.jp":true,"shintomi.miyazaki.jp":true,"takaharu.miyazaki.jp":true,"takanabe.miyazaki.jp":true,"takazaki.miyazaki.jp":true,"tsuno.miyazaki.jp":true,"achi.nagano.jp":true,"agematsu.nagano.jp":true,"anan.nagano.jp":true,"aoki.nagano.jp":true,"asahi.nagano.jp":true,"azumino.nagano.jp":true,"chikuhoku.nagano.jp":true,"chikuma.nagano.jp":true,"chino.nagano.jp":true,"fujimi.nagano.jp":true,"hakuba.nagano.jp":true,"hara.nagano.jp":true,"hiraya.nagano.jp":true,"iida.nagano.jp":true,"iijima.nagano.jp":true,"iiyama.nagano.jp":true,"iizuna.nagano.jp":true,"ikeda.nagano.jp":true,"ikusaka.nagano.jp":true,"ina.nagano.jp":true,"karuizawa.nagano.jp":true,"kawakami.nagano.jp":true,"kiso.nagano.jp":true,"kisofukushima.nagano.jp":true,"kitaaiki.nagano.jp":true,"komagane.nagano.jp":true,"komoro.nagano.jp":true,"matsukawa.nagano.jp":true,"matsumoto.nagano.jp":true,"miasa.nagano.jp":true,"minamiaiki.nagano.jp":true,"minamimaki.nagano.jp":true,"minamiminowa.nagano.jp":true,"minowa.nagano.jp":true,"miyada.nagano.jp":true,"miyota.nagano.jp":true,"mochizuki.nagano.jp":true,"nagano.nagano.jp":true,"nagawa.nagano.jp":true,"nagiso.nagano.jp":true,"nakagawa.nagano.jp":true,"nakano.nagano.jp":true,"nozawaonsen.nagano.jp":true,"obuse.nagano.jp":true,"ogawa.nagano.jp":true,"okaya.nagano.jp":true,"omachi.nagano.jp":true,"omi.nagano.jp":true,"ookuwa.nagano.jp":true,"ooshika.nagano.jp":true,"otaki.nagano.jp":true,"otari.nagano.jp":true,"sakae.nagano.jp":true,"sakaki.nagano.jp":true,"saku.nagano.jp":true,"sakuho.nagano.jp":true,"shimosuwa.nagano.jp":true,"shinanomachi.nagano.jp":true,"shiojiri.nagano.jp":true,"suwa.nagano.jp":true,"suzaka.nagano.jp":true,"takagi.nagano.jp":true,"takamori.nagano.jp":true,"takayama.nagano.jp":true,"tateshina.nagano.jp":true,"tatsuno.nagano.jp":true,"togakushi.nagano.jp":true,"togura.nagano.jp":true,"tomi.nagano.jp":true,"ueda.nagano.jp":true,"wada.nagano.jp":true,"yamagata.nagano.jp":true,"yamanouchi.nagano.jp":true,"yasaka.nagano.jp":true,"yasuoka.nagano.jp":true,"chijiwa.nagasaki.jp":true,"futsu.nagasaki.jp":true,"goto.nagasaki.jp":true,"hasami.nagasaki.jp":true,"hirado.nagasaki.jp":true,"iki.nagasaki.jp":true,"isahaya.nagasaki.jp":true,"kawatana.nagasaki.jp":true,"kuchinotsu.nagasaki.jp":true,"matsuura.nagasaki.jp":true,"nagasaki.nagasaki.jp":true,"obama.nagasaki.jp":true,"omura.nagasaki.jp":true,"oseto.nagasaki.jp":true,"saikai.nagasaki.jp":true,"sasebo.nagasaki.jp":true,"seihi.nagasaki.jp":true,"shimabara.nagasaki.jp":true,"shinkamigoto.nagasaki.jp":true,"togitsu.nagasaki.jp":true,"tsushima.nagasaki.jp":true,"unzen.nagasaki.jp":true,"ando.nara.jp":true,"gose.nara.jp":true,"heguri.nara.jp":true,"higashiyoshino.nara.jp":true,"ikaruga.nara.jp":true,"ikoma.nara.jp":true,"kamikitayama.nara.jp":true,"kanmaki.nara.jp":true,"kashiba.nara.jp":true,"kashihara.nara.jp":true,"katsuragi.nara.jp":true,"kawai.nara.jp":true,"kawakami.nara.jp":true,"kawanishi.nara.jp":true,"koryo.nara.jp":true,"kurotaki.nara.jp":true,"mitsue.nara.jp":true,"miyake.nara.jp":true,"nara.nara.jp":true,"nosegawa.nara.jp":true,"oji.nara.jp":true,"ouda.nara.jp":true,"oyodo.nara.jp":true,"sakurai.nara.jp":true,"sango.nara.jp":true,"shimoichi.nara.jp":true,"shimokitayama.nara.jp":true,"shinjo.nara.jp":true,"soni.nara.jp":true,"takatori.nara.jp":true,"tawaramoto.nara.jp":true,"tenkawa.nara.jp":true,"tenri.nara.jp":true,"uda.nara.jp":true,"yamatokoriyama.nara.jp":true,"yamatotakada.nara.jp":true,"yamazoe.nara.jp":true,"yoshino.nara.jp":true,"aga.niigata.jp":true,"agano.niigata.jp":true,"gosen.niigata.jp":true,"itoigawa.niigata.jp":true,"izumozaki.niigata.jp":true,"joetsu.niigata.jp":true,"kamo.niigata.jp":true,"kariwa.niigata.jp":true,"kashiwazaki.niigata.jp":true,"minamiuonuma.niigata.jp":true,"mitsuke.niigata.jp":true,"muika.niigata.jp":true,"murakami.niigata.jp":true,"myoko.niigata.jp":true,"nagaoka.niigata.jp":true,"niigata.niigata.jp":true,"ojiya.niigata.jp":true,"omi.niigata.jp":true,"sado.niigata.jp":true,"sanjo.niigata.jp":true,"seiro.niigata.jp":true,"seirou.niigata.jp":true,"sekikawa.niigata.jp":true,"shibata.niigata.jp":true,"tagami.niigata.jp":true,"tainai.niigata.jp":true,"tochio.niigata.jp":true,"tokamachi.niigata.jp":true,"tsubame.niigata.jp":true,"tsunan.niigata.jp":true,"uonuma.niigata.jp":true,"yahiko.niigata.jp":true,"yoita.niigata.jp":true,"yuzawa.niigata.jp":true,"beppu.oita.jp":true,"bungoono.oita.jp":true,"bungotakada.oita.jp":true,"hasama.oita.jp":true,"hiji.oita.jp":true,"himeshima.oita.jp":true,"hita.oita.jp":true,"kamitsue.oita.jp":true,"kokonoe.oita.jp":true,"kuju.oita.jp":true,"kunisaki.oita.jp":true,"kusu.oita.jp":true,"oita.oita.jp":true,"saiki.oita.jp":true,"taketa.oita.jp":true,"tsukumi.oita.jp":true,"usa.oita.jp":true,"usuki.oita.jp":true,"yufu.oita.jp":true,"akaiwa.okayama.jp":true,"asakuchi.okayama.jp":true,"bizen.okayama.jp":true,"hayashima.okayama.jp":true,"ibara.okayama.jp":true,"kagamino.okayama.jp":true,"kasaoka.okayama.jp":true,"kibichuo.okayama.jp":true,"kumenan.okayama.jp":true,"kurashiki.okayama.jp":true,"maniwa.okayama.jp":true,"misaki.okayama.jp":true,"nagi.okayama.jp":true,"niimi.okayama.jp":true,"nishiawakura.okayama.jp":true,"okayama.okayama.jp":true,"satosho.okayama.jp":true,"setouchi.okayama.jp":true,"shinjo.okayama.jp":true,"shoo.okayama.jp":true,"soja.okayama.jp":true,"takahashi.okayama.jp":true,"tamano.okayama.jp":true,"tsuyama.okayama.jp":true,"wake.okayama.jp":true,"yakage.okayama.jp":true,"aguni.okinawa.jp":true,"ginowan.okinawa.jp":true,"ginoza.okinawa.jp":true,"gushikami.okinawa.jp":true,"haebaru.okinawa.jp":true,"higashi.okinawa.jp":true,"hirara.okinawa.jp":true,"iheya.okinawa.jp":true,"ishigaki.okinawa.jp":true,"ishikawa.okinawa.jp":true,"itoman.okinawa.jp":true,"izena.okinawa.jp":true,"kadena.okinawa.jp":true,"kin.okinawa.jp":true,"kitadaito.okinawa.jp":true,"kitanakagusuku.okinawa.jp":true,"kumejima.okinawa.jp":true,"kunigami.okinawa.jp":true,"minamidaito.okinawa.jp":true,"motobu.okinawa.jp":true,"nago.okinawa.jp":true,"naha.okinawa.jp":true,"nakagusuku.okinawa.jp":true,"nakijin.okinawa.jp":true,"nanjo.okinawa.jp":true,"nishihara.okinawa.jp":true,"ogimi.okinawa.jp":true,"okinawa.okinawa.jp":true,"onna.okinawa.jp":true,"shimoji.okinawa.jp":true,"taketomi.okinawa.jp":true,"tarama.okinawa.jp":true,"tokashiki.okinawa.jp":true,"tomigusuku.okinawa.jp":true,"tonaki.okinawa.jp":true,"urasoe.okinawa.jp":true,"uruma.okinawa.jp":true,"yaese.okinawa.jp":true,"yomitan.okinawa.jp":true,"yonabaru.okinawa.jp":true,"yonaguni.okinawa.jp":true,"zamami.okinawa.jp":true,"abeno.osaka.jp":true,"chihayaakasaka.osaka.jp":true,"chuo.osaka.jp":true,"daito.osaka.jp":true,"fujiidera.osaka.jp":true,"habikino.osaka.jp":true,"hannan.osaka.jp":true,"higashiosaka.osaka.jp":true,"higashisumiyoshi.osaka.jp":true,"higashiyodogawa.osaka.jp":true,"hirakata.osaka.jp":true,"ibaraki.osaka.jp":true,"ikeda.osaka.jp":true,"izumi.osaka.jp":true,"izumiotsu.osaka.jp":true,"izumisano.osaka.jp":true,"kadoma.osaka.jp":true,"kaizuka.osaka.jp":true,"kanan.osaka.jp":true,"kashiwara.osaka.jp":true,"katano.osaka.jp":true,"kawachinagano.osaka.jp":true,"kishiwada.osaka.jp":true,"kita.osaka.jp":true,"kumatori.osaka.jp":true,"matsubara.osaka.jp":true,"minato.osaka.jp":true,"minoh.osaka.jp":true,"misaki.osaka.jp":true,"moriguchi.osaka.jp":true,"neyagawa.osaka.jp":true,"nishi.osaka.jp":true,"nose.osaka.jp":true,"osakasayama.osaka.jp":true,"sakai.osaka.jp":true,"sayama.osaka.jp":true,"sennan.osaka.jp":true,"settsu.osaka.jp":true,"shijonawate.osaka.jp":true,"shimamoto.osaka.jp":true,"suita.osaka.jp":true,"tadaoka.osaka.jp":true,"taishi.osaka.jp":true,"tajiri.osaka.jp":true,"takaishi.osaka.jp":true,"takatsuki.osaka.jp":true,"tondabayashi.osaka.jp":true,"toyonaka.osaka.jp":true,"toyono.osaka.jp":true,"yao.osaka.jp":true,"ariake.saga.jp":true,"arita.saga.jp":true,"fukudomi.saga.jp":true,"genkai.saga.jp":true,"hamatama.saga.jp":true,"hizen.saga.jp":true,"imari.saga.jp":true,"kamimine.saga.jp":true,"kanzaki.saga.jp":true,"karatsu.saga.jp":true,"kashima.saga.jp":true,"kitagata.saga.jp":true,"kitahata.saga.jp":true,"kiyama.saga.jp":true,"kouhoku.saga.jp":true,"kyuragi.saga.jp":true,"nishiarita.saga.jp":true,"ogi.saga.jp":true,"omachi.saga.jp":true,"ouchi.saga.jp":true,"saga.saga.jp":true,"shiroishi.saga.jp":true,"taku.saga.jp":true,"tara.saga.jp":true,"tosu.saga.jp":true,"yoshinogari.saga.jp":true,"arakawa.saitama.jp":true,"asaka.saitama.jp":true,"chichibu.saitama.jp":true,"fujimi.saitama.jp":true,"fujimino.saitama.jp":true,"fukaya.saitama.jp":true,"hanno.saitama.jp":true,"hanyu.saitama.jp":true,"hasuda.saitama.jp":true,"hatogaya.saitama.jp":true,"hatoyama.saitama.jp":true,"hidaka.saitama.jp":true,"higashichichibu.saitama.jp":true,"higashimatsuyama.saitama.jp":true,"honjo.saitama.jp":true,"ina.saitama.jp":true,"iruma.saitama.jp":true,"iwatsuki.saitama.jp":true,"kamiizumi.saitama.jp":true,"kamikawa.saitama.jp":true,"kamisato.saitama.jp":true,"kasukabe.saitama.jp":true,"kawagoe.saitama.jp":true,"kawaguchi.saitama.jp":true,"kawajima.saitama.jp":true,"kazo.saitama.jp":true,"kitamoto.saitama.jp":true,"koshigaya.saitama.jp":true,"kounosu.saitama.jp":true,"kuki.saitama.jp":true,"kumagaya.saitama.jp":true,"matsubushi.saitama.jp":true,"minano.saitama.jp":true,"misato.saitama.jp":true,"miyashiro.saitama.jp":true,"miyoshi.saitama.jp":true,"moroyama.saitama.jp":true,"nagatoro.saitama.jp":true,"namegawa.saitama.jp":true,"niiza.saitama.jp":true,"ogano.saitama.jp":true,"ogawa.saitama.jp":true,"ogose.saitama.jp":true,"okegawa.saitama.jp":true,"omiya.saitama.jp":true,"otaki.saitama.jp":true,"ranzan.saitama.jp":true,"ryokami.saitama.jp":true,"saitama.saitama.jp":true,"sakado.saitama.jp":true,"satte.saitama.jp":true,"sayama.saitama.jp":true,"shiki.saitama.jp":true,"shiraoka.saitama.jp":true,"soka.saitama.jp":true,"sugito.saitama.jp":true,"toda.saitama.jp":true,"tokigawa.saitama.jp":true,"tokorozawa.saitama.jp":true,"tsurugashima.saitama.jp":true,"urawa.saitama.jp":true,"warabi.saitama.jp":true,"yashio.saitama.jp":true,"yokoze.saitama.jp":true,"yono.saitama.jp":true,"yorii.saitama.jp":true,"yoshida.saitama.jp":true,"yoshikawa.saitama.jp":true,"yoshimi.saitama.jp":true,"aisho.shiga.jp":true,"gamo.shiga.jp":true,"higashiomi.shiga.jp":true,"hikone.shiga.jp":true,"koka.shiga.jp":true,"konan.shiga.jp":true,"kosei.shiga.jp":true,"koto.shiga.jp":true,"kusatsu.shiga.jp":true,"maibara.shiga.jp":true,"moriyama.shiga.jp":true,"nagahama.shiga.jp":true,"nishiazai.shiga.jp":true,"notogawa.shiga.jp":true,"omihachiman.shiga.jp":true,"otsu.shiga.jp":true,"ritto.shiga.jp":true,"ryuoh.shiga.jp":true,"takashima.shiga.jp":true,"takatsuki.shiga.jp":true,"torahime.shiga.jp":true,"toyosato.shiga.jp":true,"yasu.shiga.jp":true,"akagi.shimane.jp":true,"ama.shimane.jp":true,"gotsu.shimane.jp":true,"hamada.shimane.jp":true,"higashiizumo.shimane.jp":true,"hikawa.shimane.jp":true,"hikimi.shimane.jp":true,"izumo.shimane.jp":true,"kakinoki.shimane.jp":true,"masuda.shimane.jp":true,"matsue.shimane.jp":true,"misato.shimane.jp":true,"nishinoshima.shimane.jp":true,"ohda.shimane.jp":true,"okinoshima.shimane.jp":true,"okuizumo.shimane.jp":true,"shimane.shimane.jp":true,"tamayu.shimane.jp":true,"tsuwano.shimane.jp":true,"unnan.shimane.jp":true,"yakumo.shimane.jp":true,"yasugi.shimane.jp":true,"yatsuka.shimane.jp":true,"arai.shizuoka.jp":true,"atami.shizuoka.jp":true,"fuji.shizuoka.jp":true,"fujieda.shizuoka.jp":true,"fujikawa.shizuoka.jp":true,"fujinomiya.shizuoka.jp":true,"fukuroi.shizuoka.jp":true,"gotemba.shizuoka.jp":true,"haibara.shizuoka.jp":true,"hamamatsu.shizuoka.jp":true,"higashiizu.shizuoka.jp":true,"ito.shizuoka.jp":true,"iwata.shizuoka.jp":true,"izu.shizuoka.jp":true,"izunokuni.shizuoka.jp":true,"kakegawa.shizuoka.jp":true,"kannami.shizuoka.jp":true,"kawanehon.shizuoka.jp":true,"kawazu.shizuoka.jp":true,"kikugawa.shizuoka.jp":true,"kosai.shizuoka.jp":true,"makinohara.shizuoka.jp":true,"matsuzaki.shizuoka.jp":true,"minamiizu.shizuoka.jp":true,"mishima.shizuoka.jp":true,"morimachi.shizuoka.jp":true,"nishiizu.shizuoka.jp":true,"numazu.shizuoka.jp":true,"omaezaki.shizuoka.jp":true,"shimada.shizuoka.jp":true,"shimizu.shizuoka.jp":true,"shimoda.shizuoka.jp":true,"shizuoka.shizuoka.jp":true,"susono.shizuoka.jp":true,"yaizu.shizuoka.jp":true,"yoshida.shizuoka.jp":true,"ashikaga.tochigi.jp":true,"bato.tochigi.jp":true,"haga.tochigi.jp":true,"ichikai.tochigi.jp":true,"iwafune.tochigi.jp":true,"kaminokawa.tochigi.jp":true,"kanuma.tochigi.jp":true,"karasuyama.tochigi.jp":true,"kuroiso.tochigi.jp":true,"mashiko.tochigi.jp":true,"mibu.tochigi.jp":true,"moka.tochigi.jp":true,"motegi.tochigi.jp":true,"nasu.tochigi.jp":true,"nasushiobara.tochigi.jp":true,"nikko.tochigi.jp":true,"nishikata.tochigi.jp":true,"nogi.tochigi.jp":true,"ohira.tochigi.jp":true,"ohtawara.tochigi.jp":true,"oyama.tochigi.jp":true,"sakura.tochigi.jp":true,"sano.tochigi.jp":true,"shimotsuke.tochigi.jp":true,"shioya.tochigi.jp":true,"takanezawa.tochigi.jp":true,"tochigi.tochigi.jp":true,"tsuga.tochigi.jp":true,"ujiie.tochigi.jp":true,"utsunomiya.tochigi.jp":true,"yaita.tochigi.jp":true,"aizumi.tokushima.jp":true,"anan.tokushima.jp":true,"ichiba.tokushima.jp":true,"itano.tokushima.jp":true,"kainan.tokushima.jp":true,"komatsushima.tokushima.jp":true,"matsushige.tokushima.jp":true,"mima.tokushima.jp":true,"minami.tokushima.jp":true,"miyoshi.tokushima.jp":true,"mugi.tokushima.jp":true,"nakagawa.tokushima.jp":true,"naruto.tokushima.jp":true,"sanagochi.tokushima.jp":true,"shishikui.tokushima.jp":true,"tokushima.tokushima.jp":true,"wajiki.tokushima.jp":true,"adachi.tokyo.jp":true,"akiruno.tokyo.jp":true,"akishima.tokyo.jp":true,"aogashima.tokyo.jp":true,"arakawa.tokyo.jp":true,"bunkyo.tokyo.jp":true,"chiyoda.tokyo.jp":true,"chofu.tokyo.jp":true,"chuo.tokyo.jp":true,"edogawa.tokyo.jp":true,"fuchu.tokyo.jp":true,"fussa.tokyo.jp":true,"hachijo.tokyo.jp":true,"hachioji.tokyo.jp":true,"hamura.tokyo.jp":true,"higashikurume.tokyo.jp":true,"higashimurayama.tokyo.jp":true,"higashiyamato.tokyo.jp":true,"hino.tokyo.jp":true,"hinode.tokyo.jp":true,"hinohara.tokyo.jp":true,"inagi.tokyo.jp":true,"itabashi.tokyo.jp":true,"katsushika.tokyo.jp":true,"kita.tokyo.jp":true,"kiyose.tokyo.jp":true,"kodaira.tokyo.jp":true,"koganei.tokyo.jp":true,"kokubunji.tokyo.jp":true,"komae.tokyo.jp":true,"koto.tokyo.jp":true,"kouzushima.tokyo.jp":true,"kunitachi.tokyo.jp":true,"machida.tokyo.jp":true,"meguro.tokyo.jp":true,"minato.tokyo.jp":true,"mitaka.tokyo.jp":true,"mizuho.tokyo.jp":true,"musashimurayama.tokyo.jp":true,"musashino.tokyo.jp":true,"nakano.tokyo.jp":true,"nerima.tokyo.jp":true,"ogasawara.tokyo.jp":true,"okutama.tokyo.jp":true,"ome.tokyo.jp":true,"oshima.tokyo.jp":true,"ota.tokyo.jp":true,"setagaya.tokyo.jp":true,"shibuya.tokyo.jp":true,"shinagawa.tokyo.jp":true,"shinjuku.tokyo.jp":true,"suginami.tokyo.jp":true,"sumida.tokyo.jp":true,"tachikawa.tokyo.jp":true,"taito.tokyo.jp":true,"tama.tokyo.jp":true,"toshima.tokyo.jp":true,"chizu.tottori.jp":true,"hino.tottori.jp":true,"kawahara.tottori.jp":true,"koge.tottori.jp":true,"kotoura.tottori.jp":true,"misasa.tottori.jp":true,"nanbu.tottori.jp":true,"nichinan.tottori.jp":true,"sakaiminato.tottori.jp":true,"tottori.tottori.jp":true,"wakasa.tottori.jp":true,"yazu.tottori.jp":true,"yonago.tottori.jp":true,"asahi.toyama.jp":true,"fuchu.toyama.jp":true,"fukumitsu.toyama.jp":true,"funahashi.toyama.jp":true,"himi.toyama.jp":true,"imizu.toyama.jp":true,"inami.toyama.jp":true,"johana.toyama.jp":true,"kamiichi.toyama.jp":true,"kurobe.toyama.jp":true,"nakaniikawa.toyama.jp":true,"namerikawa.toyama.jp":true,"nanto.toyama.jp":true,"nyuzen.toyama.jp":true,"oyabe.toyama.jp":true,"taira.toyama.jp":true,"takaoka.toyama.jp":true,"tateyama.toyama.jp":true,"toga.toyama.jp":true,"tonami.toyama.jp":true,"toyama.toyama.jp":true,"unazuki.toyama.jp":true,"uozu.toyama.jp":true,"yamada.toyama.jp":true,"arida.wakayama.jp":true,"aridagawa.wakayama.jp":true,"gobo.wakayama.jp":true,"hashimoto.wakayama.jp":true,"hidaka.wakayama.jp":true,"hirogawa.wakayama.jp":true,"inami.wakayama.jp":true,"iwade.wakayama.jp":true,"kainan.wakayama.jp":true,"kamitonda.wakayama.jp":true,"katsuragi.wakayama.jp":true,"kimino.wakayama.jp":true,"kinokawa.wakayama.jp":true,"kitayama.wakayama.jp":true,"koya.wakayama.jp":true,"koza.wakayama.jp":true,"kozagawa.wakayama.jp":true,"kudoyama.wakayama.jp":true,"kushimoto.wakayama.jp":true,"mihama.wakayama.jp":true,"misato.wakayama.jp":true,"nachikatsuura.wakayama.jp":true,"shingu.wakayama.jp":true,"shirahama.wakayama.jp":true,"taiji.wakayama.jp":true,"tanabe.wakayama.jp":true,"wakayama.wakayama.jp":true,"yuasa.wakayama.jp":true,"yura.wakayama.jp":true,"asahi.yamagata.jp":true,"funagata.yamagata.jp":true,"higashine.yamagata.jp":true,"iide.yamagata.jp":true,"kahoku.yamagata.jp":true,"kaminoyama.yamagata.jp":true,"kaneyama.yamagata.jp":true,"kawanishi.yamagata.jp":true,"mamurogawa.yamagata.jp":true,"mikawa.yamagata.jp":true,"murayama.yamagata.jp":true,"nagai.yamagata.jp":true,"nakayama.yamagata.jp":true,"nanyo.yamagata.jp":true,"nishikawa.yamagata.jp":true,"obanazawa.yamagata.jp":true,"oe.yamagata.jp":true,"oguni.yamagata.jp":true,"ohkura.yamagata.jp":true,"oishida.yamagata.jp":true,"sagae.yamagata.jp":true,"sakata.yamagata.jp":true,"sakegawa.yamagata.jp":true,"shinjo.yamagata.jp":true,"shirataka.yamagata.jp":true,"shonai.yamagata.jp":true,"takahata.yamagata.jp":true,"tendo.yamagata.jp":true,"tozawa.yamagata.jp":true,"tsuruoka.yamagata.jp":true,"yamagata.yamagata.jp":true,"yamanobe.yamagata.jp":true,"yonezawa.yamagata.jp":true,"yuza.yamagata.jp":true,"abu.yamaguchi.jp":true,"hagi.yamaguchi.jp":true,"hikari.yamaguchi.jp":true,"hofu.yamaguchi.jp":true,"iwakuni.yamaguchi.jp":true,"kudamatsu.yamaguchi.jp":true,"mitou.yamaguchi.jp":true,"nagato.yamaguchi.jp":true,"oshima.yamaguchi.jp":true,"shimonoseki.yamaguchi.jp":true,"shunan.yamaguchi.jp":true,"tabuse.yamaguchi.jp":true,"tokuyama.yamaguchi.jp":true,"toyota.yamaguchi.jp":true,"ube.yamaguchi.jp":true,"yuu.yamaguchi.jp":true,"chuo.yamanashi.jp":true,"doshi.yamanashi.jp":true,"fuefuki.yamanashi.jp":true,"fujikawa.yamanashi.jp":true,"fujikawaguchiko.yamanashi.jp":true,"fujiyoshida.yamanashi.jp":true,"hayakawa.yamanashi.jp":true,"hokuto.yamanashi.jp":true,"ichikawamisato.yamanashi.jp":true,"kai.yamanashi.jp":true,"kofu.yamanashi.jp":true,"koshu.yamanashi.jp":true,"kosuge.yamanashi.jp":true,"minami-alps.yamanashi.jp":true,"minobu.yamanashi.jp":true,"nakamichi.yamanashi.jp":true,"nanbu.yamanashi.jp":true,"narusawa.yamanashi.jp":true,"nirasaki.yamanashi.jp":true,"nishikatsura.yamanashi.jp":true,"oshino.yamanashi.jp":true,"otsuki.yamanashi.jp":true,"showa.yamanashi.jp":true,"tabayama.yamanashi.jp":true,"tsuru.yamanashi.jp":true,"uenohara.yamanashi.jp":true,"yamanakako.yamanashi.jp":true,"yamanashi.yamanashi.jp":true,"ke":true,"ac.ke":true,"co.ke":true,"go.ke":true,"info.ke":true,"me.ke":true,"mobi.ke":true,"ne.ke":true,"or.ke":true,"sc.ke":true,"kg":true,"org.kg":true,"net.kg":true,"com.kg":true,"edu.kg":true,"gov.kg":true,"mil.kg":true,"*.kh":true,"ki":true,"edu.ki":true,"biz.ki":true,"net.ki":true,"org.ki":true,"gov.ki":true,"info.ki":true,"com.ki":true,"km":true,"org.km":true,"nom.km":true,"gov.km":true,"prd.km":true,"tm.km":true,"edu.km":true,"mil.km":true,"ass.km":true,"com.km":true,"coop.km":true,"asso.km":true,"presse.km":true,"medecin.km":true,"notaires.km":true,"pharmaciens.km":true,"veterinaire.km":true,"gouv.km":true,"kn":true,"net.kn":true,"org.kn":true,"edu.kn":true,"gov.kn":true,"kp":true,"com.kp":true,"edu.kp":true,"gov.kp":true,"org.kp":true,"rep.kp":true,"tra.kp":true,"kr":true,"ac.kr":true,"co.kr":true,"es.kr":true,"go.kr":true,"hs.kr":true,"kg.kr":true,"mil.kr":true,"ms.kr":true,"ne.kr":true,"or.kr":true,"pe.kr":true,"re.kr":true,"sc.kr":true,"busan.kr":true,"chungbuk.kr":true,"chungnam.kr":true,"daegu.kr":true,"daejeon.kr":true,"gangwon.kr":true,"gwangju.kr":true,"gyeongbuk.kr":true,"gyeonggi.kr":true,"gyeongnam.kr":true,"incheon.kr":true,"jeju.kr":true,"jeonbuk.kr":true,"jeonnam.kr":true,"seoul.kr":true,"ulsan.kr":true,"*.kw":true,"ky":true,"edu.ky":true,"gov.ky":true,"com.ky":true,"org.ky":true,"net.ky":true,"kz":true,"org.kz":true,"edu.kz":true,"net.kz":true,"gov.kz":true,"mil.kz":true,"com.kz":true,"la":true,"int.la":true,"net.la":true,"info.la":true,"edu.la":true,"gov.la":true,"per.la":true,"com.la":true,"org.la":true,"lb":true,"com.lb":true,"edu.lb":true,"gov.lb":true,"net.lb":true,"org.lb":true,"lc":true,"com.lc":true,"net.lc":true,"co.lc":true,"org.lc":true,"edu.lc":true,"gov.lc":true,"li":true,"lk":true,"gov.lk":true,"sch.lk":true,"net.lk":true,"int.lk":true,"com.lk":true,"org.lk":true,"edu.lk":true,"ngo.lk":true,"soc.lk":true,"web.lk":true,"ltd.lk":true,"assn.lk":true,"grp.lk":true,"hotel.lk":true,"ac.lk":true,"lr":true,"com.lr":true,"edu.lr":true,"gov.lr":true,"org.lr":true,"net.lr":true,"ls":true,"co.ls":true,"org.ls":true,"lt":true,"gov.lt":true,"lu":true,"lv":true,"com.lv":true,"edu.lv":true,"gov.lv":true,"org.lv":true,"mil.lv":true,"id.lv":true,"net.lv":true,"asn.lv":true,"conf.lv":true,"ly":true,"com.ly":true,"net.ly":true,"gov.ly":true,"plc.ly":true,"edu.ly":true,"sch.ly":true,"med.ly":true,"org.ly":true,"id.ly":true,"ma":true,"co.ma":true,"net.ma":true,"gov.ma":true,"org.ma":true,"ac.ma":true,"press.ma":true,"mc":true,"tm.mc":true,"asso.mc":true,"md":true,"me":true,"co.me":true,"net.me":true,"org.me":true,"edu.me":true,"ac.me":true,"gov.me":true,"its.me":true,"priv.me":true,"mg":true,"org.mg":true,"nom.mg":true,"gov.mg":true,"prd.mg":true,"tm.mg":true,"edu.mg":true,"mil.mg":true,"com.mg":true,"co.mg":true,"mh":true,"mil":true,"mk":true,"com.mk":true,"org.mk":true,"net.mk":true,"edu.mk":true,"gov.mk":true,"inf.mk":true,"name.mk":true,"ml":true,"com.ml":true,"edu.ml":true,"gouv.ml":true,"gov.ml":true,"net.ml":true,"org.ml":true,"presse.ml":true,"*.mm":true,"mn":true,"gov.mn":true,"edu.mn":true,"org.mn":true,"mo":true,"com.mo":true,"net.mo":true,"org.mo":true,"edu.mo":true,"gov.mo":true,"mobi":true,"mp":true,"mq":true,"mr":true,"gov.mr":true,"ms":true,"com.ms":true,"edu.ms":true,"gov.ms":true,"net.ms":true,"org.ms":true,"mt":true,"com.mt":true,"edu.mt":true,"net.mt":true,"org.mt":true,"mu":true,"com.mu":true,"net.mu":true,"org.mu":true,"gov.mu":true,"ac.mu":true,"co.mu":true,"or.mu":true,"museum":true,"academy.museum":true,"agriculture.museum":true,"air.museum":true,"airguard.museum":true,"alabama.museum":true,"alaska.museum":true,"amber.museum":true,"ambulance.museum":true,"american.museum":true,"americana.museum":true,"americanantiques.museum":true,"americanart.museum":true,"amsterdam.museum":true,"and.museum":true,"annefrank.museum":true,"anthro.museum":true,"anthropology.museum":true,"antiques.museum":true,"aquarium.museum":true,"arboretum.museum":true,"archaeological.museum":true,"archaeology.museum":true,"architecture.museum":true,"art.museum":true,"artanddesign.museum":true,"artcenter.museum":true,"artdeco.museum":true,"arteducation.museum":true,"artgallery.museum":true,"arts.museum":true,"artsandcrafts.museum":true,"asmatart.museum":true,"assassination.museum":true,"assisi.museum":true,"association.museum":true,"astronomy.museum":true,"atlanta.museum":true,"austin.museum":true,"australia.museum":true,"automotive.museum":true,"aviation.museum":true,"axis.museum":true,"badajoz.museum":true,"baghdad.museum":true,"bahn.museum":true,"bale.museum":true,"baltimore.museum":true,"barcelona.museum":true,"baseball.museum":true,"basel.museum":true,"baths.museum":true,"bauern.museum":true,"beauxarts.museum":true,"beeldengeluid.museum":true,"bellevue.museum":true,"bergbau.museum":true,"berkeley.museum":true,"berlin.museum":true,"bern.museum":true,"bible.museum":true,"bilbao.museum":true,"bill.museum":true,"birdart.museum":true,"birthplace.museum":true,"bonn.museum":true,"boston.museum":true,"botanical.museum":true,"botanicalgarden.museum":true,"botanicgarden.museum":true,"botany.museum":true,"brandywinevalley.museum":true,"brasil.museum":true,"bristol.museum":true,"british.museum":true,"britishcolumbia.museum":true,"broadcast.museum":true,"brunel.museum":true,"brussel.museum":true,"brussels.museum":true,"bruxelles.museum":true,"building.museum":true,"burghof.museum":true,"bus.museum":true,"bushey.museum":true,"cadaques.museum":true,"california.museum":true,"cambridge.museum":true,"can.museum":true,"canada.museum":true,"capebreton.museum":true,"carrier.museum":true,"cartoonart.museum":true,"casadelamoneda.museum":true,"castle.museum":true,"castres.museum":true,"celtic.museum":true,"center.museum":true,"chattanooga.museum":true,"cheltenham.museum":true,"chesapeakebay.museum":true,"chicago.museum":true,"children.museum":true,"childrens.museum":true,"childrensgarden.museum":true,"chiropractic.museum":true,"chocolate.museum":true,"christiansburg.museum":true,"cincinnati.museum":true,"cinema.museum":true,"circus.museum":true,"civilisation.museum":true,"civilization.museum":true,"civilwar.museum":true,"clinton.museum":true,"clock.museum":true,"coal.museum":true,"coastaldefence.museum":true,"cody.museum":true,"coldwar.museum":true,"collection.museum":true,"colonialwilliamsburg.museum":true,"coloradoplateau.museum":true,"columbia.museum":true,"columbus.museum":true,"communication.museum":true,"communications.museum":true,"community.museum":true,"computer.museum":true,"computerhistory.museum":true,"xn--comunicaes-v6a2o.museum":true,"contemporary.museum":true,"contemporaryart.museum":true,"convent.museum":true,"copenhagen.museum":true,"corporation.museum":true,"xn--correios-e-telecomunicaes-ghc29a.museum":true,"corvette.museum":true,"costume.museum":true,"countryestate.museum":true,"county.museum":true,"crafts.museum":true,"cranbrook.museum":true,"creation.museum":true,"cultural.museum":true,"culturalcenter.museum":true,"culture.museum":true,"cyber.museum":true,"cymru.museum":true,"dali.museum":true,"dallas.museum":true,"database.museum":true,"ddr.museum":true,"decorativearts.museum":true,"delaware.museum":true,"delmenhorst.museum":true,"denmark.museum":true,"depot.museum":true,"design.museum":true,"detroit.museum":true,"dinosaur.museum":true,"discovery.museum":true,"dolls.museum":true,"donostia.museum":true,"durham.museum":true,"eastafrica.museum":true,"eastcoast.museum":true,"education.museum":true,"educational.museum":true,"egyptian.museum":true,"eisenbahn.museum":true,"elburg.museum":true,"elvendrell.museum":true,"embroidery.museum":true,"encyclopedic.museum":true,"england.museum":true,"entomology.museum":true,"environment.museum":true,"environmentalconservation.museum":true,"epilepsy.museum":true,"essex.museum":true,"estate.museum":true,"ethnology.museum":true,"exeter.museum":true,"exhibition.museum":true,"family.museum":true,"farm.museum":true,"farmequipment.museum":true,"farmers.museum":true,"farmstead.museum":true,"field.museum":true,"figueres.museum":true,"filatelia.museum":true,"film.museum":true,"fineart.museum":true,"finearts.museum":true,"finland.museum":true,"flanders.museum":true,"florida.museum":true,"force.museum":true,"fortmissoula.museum":true,"fortworth.museum":true,"foundation.museum":true,"francaise.museum":true,"frankfurt.museum":true,"franziskaner.museum":true,"freemasonry.museum":true,"freiburg.museum":true,"fribourg.museum":true,"frog.museum":true,"fundacio.museum":true,"furniture.museum":true,"gallery.museum":true,"garden.museum":true,"gateway.museum":true,"geelvinck.museum":true,"gemological.museum":true,"geology.museum":true,"georgia.museum":true,"giessen.museum":true,"glas.museum":true,"glass.museum":true,"gorge.museum":true,"grandrapids.museum":true,"graz.museum":true,"guernsey.museum":true,"halloffame.museum":true,"hamburg.museum":true,"handson.museum":true,"harvestcelebration.museum":true,"hawaii.museum":true,"health.museum":true,"heimatunduhren.museum":true,"hellas.museum":true,"helsinki.museum":true,"hembygdsforbund.museum":true,"heritage.museum":true,"histoire.museum":true,"historical.museum":true,"historicalsociety.museum":true,"historichouses.museum":true,"historisch.museum":true,"historisches.museum":true,"history.museum":true,"historyofscience.museum":true,"horology.museum":true,"house.museum":true,"humanities.museum":true,"illustration.museum":true,"imageandsound.museum":true,"indian.museum":true,"indiana.museum":true,"indianapolis.museum":true,"indianmarket.museum":true,"intelligence.museum":true,"interactive.museum":true,"iraq.museum":true,"iron.museum":true,"isleofman.museum":true,"jamison.museum":true,"jefferson.museum":true,"jerusalem.museum":true,"jewelry.museum":true,"jewish.museum":true,"jewishart.museum":true,"jfk.museum":true,"journalism.museum":true,"judaica.museum":true,"judygarland.museum":true,"juedisches.museum":true,"juif.museum":true,"karate.museum":true,"karikatur.museum":true,"kids.museum":true,"koebenhavn.museum":true,"koeln.museum":true,"kunst.museum":true,"kunstsammlung.museum":true,"kunstunddesign.museum":true,"labor.museum":true,"labour.museum":true,"lajolla.museum":true,"lancashire.museum":true,"landes.museum":true,"lans.museum":true,"xn--lns-qla.museum":true,"larsson.museum":true,"lewismiller.museum":true,"lincoln.museum":true,"linz.museum":true,"living.museum":true,"livinghistory.museum":true,"localhistory.museum":true,"london.museum":true,"losangeles.museum":true,"louvre.museum":true,"loyalist.museum":true,"lucerne.museum":true,"luxembourg.museum":true,"luzern.museum":true,"mad.museum":true,"madrid.museum":true,"mallorca.museum":true,"manchester.museum":true,"mansion.museum":true,"mansions.museum":true,"manx.museum":true,"marburg.museum":true,"maritime.museum":true,"maritimo.museum":true,"maryland.museum":true,"marylhurst.museum":true,"media.museum":true,"medical.museum":true,"medizinhistorisches.museum":true,"meeres.museum":true,"memorial.museum":true,"mesaverde.museum":true,"michigan.museum":true,"midatlantic.museum":true,"military.museum":true,"mill.museum":true,"miners.museum":true,"mining.museum":true,"minnesota.museum":true,"missile.museum":true,"missoula.museum":true,"modern.museum":true,"moma.museum":true,"money.museum":true,"monmouth.museum":true,"monticello.museum":true,"montreal.museum":true,"moscow.museum":true,"motorcycle.museum":true,"muenchen.museum":true,"muenster.museum":true,"mulhouse.museum":true,"muncie.museum":true,"museet.museum":true,"museumcenter.museum":true,"museumvereniging.museum":true,"music.museum":true,"national.museum":true,"nationalfirearms.museum":true,"nationalheritage.museum":true,"nativeamerican.museum":true,"naturalhistory.museum":true,"naturalhistorymuseum.museum":true,"naturalsciences.museum":true,"nature.museum":true,"naturhistorisches.museum":true,"natuurwetenschappen.museum":true,"naumburg.museum":true,"naval.museum":true,"nebraska.museum":true,"neues.museum":true,"newhampshire.museum":true,"newjersey.museum":true,"newmexico.museum":true,"newport.museum":true,"newspaper.museum":true,"newyork.museum":true,"niepce.museum":true,"norfolk.museum":true,"north.museum":true,"nrw.museum":true,"nuernberg.museum":true,"nuremberg.museum":true,"nyc.museum":true,"nyny.museum":true,"oceanographic.museum":true,"oceanographique.museum":true,"omaha.museum":true,"online.museum":true,"ontario.museum":true,"openair.museum":true,"oregon.museum":true,"oregontrail.museum":true,"otago.museum":true,"oxford.museum":true,"pacific.museum":true,"paderborn.museum":true,"palace.museum":true,"paleo.museum":true,"palmsprings.museum":true,"panama.museum":true,"paris.museum":true,"pasadena.museum":true,"pharmacy.museum":true,"philadelphia.museum":true,"philadelphiaarea.museum":true,"philately.museum":true,"phoenix.museum":true,"photography.museum":true,"pilots.museum":true,"pittsburgh.museum":true,"planetarium.museum":true,"plantation.museum":true,"plants.museum":true,"plaza.museum":true,"portal.museum":true,"portland.museum":true,"portlligat.museum":true,"posts-and-telecommunications.museum":true,"preservation.museum":true,"presidio.museum":true,"press.museum":true,"project.museum":true,"public.museum":true,"pubol.museum":true,"quebec.museum":true,"railroad.museum":true,"railway.museum":true,"research.museum":true,"resistance.museum":true,"riodejaneiro.museum":true,"rochester.museum":true,"rockart.museum":true,"roma.museum":true,"russia.museum":true,"saintlouis.museum":true,"salem.museum":true,"salvadordali.museum":true,"salzburg.museum":true,"sandiego.museum":true,"sanfrancisco.museum":true,"santabarbara.museum":true,"santacruz.museum":true,"santafe.museum":true,"saskatchewan.museum":true,"satx.museum":true,"savannahga.museum":true,"schlesisches.museum":true,"schoenbrunn.museum":true,"schokoladen.museum":true,"school.museum":true,"schweiz.museum":true,"science.museum":true,"scienceandhistory.museum":true,"scienceandindustry.museum":true,"sciencecenter.museum":true,"sciencecenters.museum":true,"science-fiction.museum":true,"sciencehistory.museum":true,"sciences.museum":true,"sciencesnaturelles.museum":true,"scotland.museum":true,"seaport.museum":true,"settlement.museum":true,"settlers.museum":true,"shell.museum":true,"sherbrooke.museum":true,"sibenik.museum":true,"silk.museum":true,"ski.museum":true,"skole.museum":true,"society.museum":true,"sologne.museum":true,"soundandvision.museum":true,"southcarolina.museum":true,"southwest.museum":true,"space.museum":true,"spy.museum":true,"square.museum":true,"stadt.museum":true,"stalbans.museum":true,"starnberg.museum":true,"state.museum":true,"stateofdelaware.museum":true,"station.museum":true,"steam.museum":true,"steiermark.museum":true,"stjohn.museum":true,"stockholm.museum":true,"stpetersburg.museum":true,"stuttgart.museum":true,"suisse.museum":true,"surgeonshall.museum":true,"surrey.museum":true,"svizzera.museum":true,"sweden.museum":true,"sydney.museum":true,"tank.museum":true,"tcm.museum":true,"technology.museum":true,"telekommunikation.museum":true,"television.museum":true,"texas.museum":true,"textile.museum":true,"theater.museum":true,"time.museum":true,"timekeeping.museum":true,"topology.museum":true,"torino.museum":true,"touch.museum":true,"town.museum":true,"transport.museum":true,"tree.museum":true,"trolley.museum":true,"trust.museum":true,"trustee.museum":true,"uhren.museum":true,"ulm.museum":true,"undersea.museum":true,"university.museum":true,"usa.museum":true,"usantiques.museum":true,"usarts.museum":true,"uscountryestate.museum":true,"usculture.museum":true,"usdecorativearts.museum":true,"usgarden.museum":true,"ushistory.museum":true,"ushuaia.museum":true,"uslivinghistory.museum":true,"utah.museum":true,"uvic.museum":true,"valley.museum":true,"vantaa.museum":true,"versailles.museum":true,"viking.museum":true,"village.museum":true,"virginia.museum":true,"virtual.museum":true,"virtuel.museum":true,"vlaanderen.museum":true,"volkenkunde.museum":true,"wales.museum":true,"wallonie.museum":true,"war.museum":true,"washingtondc.museum":true,"watchandclock.museum":true,"watch-and-clock.museum":true,"western.museum":true,"westfalen.museum":true,"whaling.museum":true,"wildlife.museum":true,"williamsburg.museum":true,"windmill.museum":true,"workshop.museum":true,"york.museum":true,"yorkshire.museum":true,"yosemite.museum":true,"youth.museum":true,"zoological.museum":true,"zoology.museum":true,"xn--9dbhblg6di.museum":true,"xn--h1aegh.museum":true,"mv":true,"aero.mv":true,"biz.mv":true,"com.mv":true,"coop.mv":true,"edu.mv":true,"gov.mv":true,"info.mv":true,"int.mv":true,"mil.mv":true,"museum.mv":true,"name.mv":true,"net.mv":true,"org.mv":true,"pro.mv":true,"mw":true,"ac.mw":true,"biz.mw":true,"co.mw":true,"com.mw":true,"coop.mw":true,"edu.mw":true,"gov.mw":true,"int.mw":true,"museum.mw":true,"net.mw":true,"org.mw":true,"mx":true,"com.mx":true,"org.mx":true,"gob.mx":true,"edu.mx":true,"net.mx":true,"my":true,"com.my":true,"net.my":true,"org.my":true,"gov.my":true,"edu.my":true,"mil.my":true,"name.my":true,"mz":true,"ac.mz":true,"adv.mz":true,"co.mz":true,"edu.mz":true,"gov.mz":true,"mil.mz":true,"net.mz":true,"org.mz":true,"na":true,"info.na":true,"pro.na":true,"name.na":true,"school.na":true,"or.na":true,"dr.na":true,"us.na":true,"mx.na":true,"ca.na":true,"in.na":true,"cc.na":true,"tv.na":true,"ws.na":true,"mobi.na":true,"co.na":true,"com.na":true,"org.na":true,"name":true,"nc":true,"asso.nc":true,"nom.nc":true,"ne":true,"net":true,"nf":true,"com.nf":true,"net.nf":true,"per.nf":true,"rec.nf":true,"web.nf":true,"arts.nf":true,"firm.nf":true,"info.nf":true,"other.nf":true,"store.nf":true,"ng":true,"com.ng":true,"edu.ng":true,"gov.ng":true,"i.ng":true,"mil.ng":true,"mobi.ng":true,"name.ng":true,"net.ng":true,"org.ng":true,"sch.ng":true,"ni":true,"ac.ni":true,"biz.ni":true,"co.ni":true,"com.ni":true,"edu.ni":true,"gob.ni":true,"in.ni":true,"info.ni":true,"int.ni":true,"mil.ni":true,"net.ni":true,"nom.ni":true,"org.ni":true,"web.ni":true,"nl":true,"bv.nl":true,"no":true,"fhs.no":true,"vgs.no":true,"fylkesbibl.no":true,"folkebibl.no":true,"museum.no":true,"idrett.no":true,"priv.no":true,"mil.no":true,"stat.no":true,"dep.no":true,"kommune.no":true,"herad.no":true,"aa.no":true,"ah.no":true,"bu.no":true,"fm.no":true,"hl.no":true,"hm.no":true,"jan-mayen.no":true,"mr.no":true,"nl.no":true,"nt.no":true,"of.no":true,"ol.no":true,"oslo.no":true,"rl.no":true,"sf.no":true,"st.no":true,"svalbard.no":true,"tm.no":true,"tr.no":true,"va.no":true,"vf.no":true,"gs.aa.no":true,"gs.ah.no":true,"gs.bu.no":true,"gs.fm.no":true,"gs.hl.no":true,"gs.hm.no":true,"gs.jan-mayen.no":true,"gs.mr.no":true,"gs.nl.no":true,"gs.nt.no":true,"gs.of.no":true,"gs.ol.no":true,"gs.oslo.no":true,"gs.rl.no":true,"gs.sf.no":true,"gs.st.no":true,"gs.svalbard.no":true,"gs.tm.no":true,"gs.tr.no":true,"gs.va.no":true,"gs.vf.no":true,"akrehamn.no":true,"xn--krehamn-dxa.no":true,"algard.no":true,"xn--lgrd-poac.no":true,"arna.no":true,"brumunddal.no":true,"bryne.no":true,"bronnoysund.no":true,"xn--brnnysund-m8ac.no":true,"drobak.no":true,"xn--drbak-wua.no":true,"egersund.no":true,"fetsund.no":true,"floro.no":true,"xn--flor-jra.no":true,"fredrikstad.no":true,"hokksund.no":true,"honefoss.no":true,"xn--hnefoss-q1a.no":true,"jessheim.no":true,"jorpeland.no":true,"xn--jrpeland-54a.no":true,"kirkenes.no":true,"kopervik.no":true,"krokstadelva.no":true,"langevag.no":true,"xn--langevg-jxa.no":true,"leirvik.no":true,"mjondalen.no":true,"xn--mjndalen-64a.no":true,"mo-i-rana.no":true,"mosjoen.no":true,"xn--mosjen-eya.no":true,"nesoddtangen.no":true,"orkanger.no":true,"osoyro.no":true,"xn--osyro-wua.no":true,"raholt.no":true,"xn--rholt-mra.no":true,"sandnessjoen.no":true,"xn--sandnessjen-ogb.no":true,"skedsmokorset.no":true,"slattum.no":true,"spjelkavik.no":true,"stathelle.no":true,"stavern.no":true,"stjordalshalsen.no":true,"xn--stjrdalshalsen-sqb.no":true,"tananger.no":true,"tranby.no":true,"vossevangen.no":true,"afjord.no":true,"xn--fjord-lra.no":true,"agdenes.no":true,"al.no":true,"xn--l-1fa.no":true,"alesund.no":true,"xn--lesund-hua.no":true,"alstahaug.no":true,"alta.no":true,"xn--lt-liac.no":true,"alaheadju.no":true,"xn--laheadju-7ya.no":true,"alvdal.no":true,"amli.no":true,"xn--mli-tla.no":true,"amot.no":true,"xn--mot-tla.no":true,"andebu.no":true,"andoy.no":true,"xn--andy-ira.no":true,"andasuolo.no":true,"ardal.no":true,"xn--rdal-poa.no":true,"aremark.no":true,"arendal.no":true,"xn--s-1fa.no":true,"aseral.no":true,"xn--seral-lra.no":true,"asker.no":true,"askim.no":true,"askvoll.no":true,"askoy.no":true,"xn--asky-ira.no":true,"asnes.no":true,"xn--snes-poa.no":true,"audnedaln.no":true,"aukra.no":true,"aure.no":true,"aurland.no":true,"aurskog-holand.no":true,"xn--aurskog-hland-jnb.no":true,"austevoll.no":true,"austrheim.no":true,"averoy.no":true,"xn--avery-yua.no":true,"balestrand.no":true,"ballangen.no":true,"balat.no":true,"xn--blt-elab.no":true,"balsfjord.no":true,"bahccavuotna.no":true,"xn--bhccavuotna-k7a.no":true,"bamble.no":true,"bardu.no":true,"beardu.no":true,"beiarn.no":true,"bajddar.no":true,"xn--bjddar-pta.no":true,"baidar.no":true,"xn--bidr-5nac.no":true,"berg.no":true,"bergen.no":true,"berlevag.no":true,"xn--berlevg-jxa.no":true,"bearalvahki.no":true,"xn--bearalvhki-y4a.no":true,"bindal.no":true,"birkenes.no":true,"bjarkoy.no":true,"xn--bjarky-fya.no":true,"bjerkreim.no":true,"bjugn.no":true,"bodo.no":true,"xn--bod-2na.no":true,"badaddja.no":true,"xn--bdddj-mrabd.no":true,"budejju.no":true,"bokn.no":true,"bremanger.no":true,"bronnoy.no":true,"xn--brnny-wuac.no":true,"bygland.no":true,"bykle.no":true,"barum.no":true,"xn--brum-voa.no":true,"bo.telemark.no":true,"xn--b-5ga.telemark.no":true,"bo.nordland.no":true,"xn--b-5ga.nordland.no":true,"bievat.no":true,"xn--bievt-0qa.no":true,"bomlo.no":true,"xn--bmlo-gra.no":true,"batsfjord.no":true,"xn--btsfjord-9za.no":true,"bahcavuotna.no":true,"xn--bhcavuotna-s4a.no":true,"dovre.no":true,"drammen.no":true,"drangedal.no":true,"dyroy.no":true,"xn--dyry-ira.no":true,"donna.no":true,"xn--dnna-gra.no":true,"eid.no":true,"eidfjord.no":true,"eidsberg.no":true,"eidskog.no":true,"eidsvoll.no":true,"eigersund.no":true,"elverum.no":true,"enebakk.no":true,"engerdal.no":true,"etne.no":true,"etnedal.no":true,"evenes.no":true,"evenassi.no":true,"xn--eveni-0qa01ga.no":true,"evje-og-hornnes.no":true,"farsund.no":true,"fauske.no":true,"fuossko.no":true,"fuoisku.no":true,"fedje.no":true,"fet.no":true,"finnoy.no":true,"xn--finny-yua.no":true,"fitjar.no":true,"fjaler.no":true,"fjell.no":true,"flakstad.no":true,"flatanger.no":true,"flekkefjord.no":true,"flesberg.no":true,"flora.no":true,"fla.no":true,"xn--fl-zia.no":true,"folldal.no":true,"forsand.no":true,"fosnes.no":true,"frei.no":true,"frogn.no":true,"froland.no":true,"frosta.no":true,"frana.no":true,"xn--frna-woa.no":true,"froya.no":true,"xn--frya-hra.no":true,"fusa.no":true,"fyresdal.no":true,"forde.no":true,"xn--frde-gra.no":true,"gamvik.no":true,"gangaviika.no":true,"xn--ggaviika-8ya47h.no":true,"gaular.no":true,"gausdal.no":true,"gildeskal.no":true,"xn--gildeskl-g0a.no":true,"giske.no":true,"gjemnes.no":true,"gjerdrum.no":true,"gjerstad.no":true,"gjesdal.no":true,"gjovik.no":true,"xn--gjvik-wua.no":true,"gloppen.no":true,"gol.no":true,"gran.no":true,"grane.no":true,"granvin.no":true,"gratangen.no":true,"grimstad.no":true,"grong.no":true,"kraanghke.no":true,"xn--kranghke-b0a.no":true,"grue.no":true,"gulen.no":true,"hadsel.no":true,"halden.no":true,"halsa.no":true,"hamar.no":true,"hamaroy.no":true,"habmer.no":true,"xn--hbmer-xqa.no":true,"hapmir.no":true,"xn--hpmir-xqa.no":true,"hammerfest.no":true,"hammarfeasta.no":true,"xn--hmmrfeasta-s4ac.no":true,"haram.no":true,"hareid.no":true,"harstad.no":true,"hasvik.no":true,"aknoluokta.no":true,"xn--koluokta-7ya57h.no":true,"hattfjelldal.no":true,"aarborte.no":true,"haugesund.no":true,"hemne.no":true,"hemnes.no":true,"hemsedal.no":true,"heroy.more-og-romsdal.no":true,"xn--hery-ira.xn--mre-og-romsdal-qqb.no":true,"heroy.nordland.no":true,"xn--hery-ira.nordland.no":true,"hitra.no":true,"hjartdal.no":true,"hjelmeland.no":true,"hobol.no":true,"xn--hobl-ira.no":true,"hof.no":true,"hol.no":true,"hole.no":true,"holmestrand.no":true,"holtalen.no":true,"xn--holtlen-hxa.no":true,"hornindal.no":true,"horten.no":true,"hurdal.no":true,"hurum.no":true,"hvaler.no":true,"hyllestad.no":true,"hagebostad.no":true,"xn--hgebostad-g3a.no":true,"hoyanger.no":true,"xn--hyanger-q1a.no":true,"hoylandet.no":true,"xn--hylandet-54a.no":true,"ha.no":true,"xn--h-2fa.no":true,"ibestad.no":true,"inderoy.no":true,"xn--indery-fya.no":true,"iveland.no":true,"jevnaker.no":true,"jondal.no":true,"jolster.no":true,"xn--jlster-bya.no":true,"karasjok.no":true,"karasjohka.no":true,"xn--krjohka-hwab49j.no":true,"karlsoy.no":true,"galsa.no":true,"xn--gls-elac.no":true,"karmoy.no":true,"xn--karmy-yua.no":true,"kautokeino.no":true,"guovdageaidnu.no":true,"klepp.no":true,"klabu.no":true,"xn--klbu-woa.no":true,"kongsberg.no":true,"kongsvinger.no":true,"kragero.no":true,"xn--krager-gya.no":true,"kristiansand.no":true,"kristiansund.no":true,"krodsherad.no":true,"xn--krdsherad-m8a.no":true,"kvalsund.no":true,"rahkkeravju.no":true,"xn--rhkkervju-01af.no":true,"kvam.no":true,"kvinesdal.no":true,"kvinnherad.no":true,"kviteseid.no":true,"kvitsoy.no":true,"xn--kvitsy-fya.no":true,"kvafjord.no":true,"xn--kvfjord-nxa.no":true,"giehtavuoatna.no":true,"kvanangen.no":true,"xn--kvnangen-k0a.no":true,"navuotna.no":true,"xn--nvuotna-hwa.no":true,"kafjord.no":true,"xn--kfjord-iua.no":true,"gaivuotna.no":true,"xn--givuotna-8ya.no":true,"larvik.no":true,"lavangen.no":true,"lavagis.no":true,"loabat.no":true,"xn--loabt-0qa.no":true,"lebesby.no":true,"davvesiida.no":true,"leikanger.no":true,"leirfjord.no":true,"leka.no":true,"leksvik.no":true,"lenvik.no":true,"leangaviika.no":true,"xn--leagaviika-52b.no":true,"lesja.no":true,"levanger.no":true,"lier.no":true,"lierne.no":true,"lillehammer.no":true,"lillesand.no":true,"lindesnes.no":true,"lindas.no":true,"xn--linds-pra.no":true,"lom.no":true,"loppa.no":true,"lahppi.no":true,"xn--lhppi-xqa.no":true,"lund.no":true,"lunner.no":true,"luroy.no":true,"xn--lury-ira.no":true,"luster.no":true,"lyngdal.no":true,"lyngen.no":true,"ivgu.no":true,"lardal.no":true,"lerdal.no":true,"xn--lrdal-sra.no":true,"lodingen.no":true,"xn--ldingen-q1a.no":true,"lorenskog.no":true,"xn--lrenskog-54a.no":true,"loten.no":true,"xn--lten-gra.no":true,"malvik.no":true,"masoy.no":true,"xn--msy-ula0h.no":true,"muosat.no":true,"xn--muost-0qa.no":true,"mandal.no":true,"marker.no":true,"marnardal.no":true,"masfjorden.no":true,"meland.no":true,"meldal.no":true,"melhus.no":true,"meloy.no":true,"xn--mely-ira.no":true,"meraker.no":true,"xn--merker-kua.no":true,"moareke.no":true,"xn--moreke-jua.no":true,"midsund.no":true,"midtre-gauldal.no":true,"modalen.no":true,"modum.no":true,"molde.no":true,"moskenes.no":true,"moss.no":true,"mosvik.no":true,"malselv.no":true,"xn--mlselv-iua.no":true,"malatvuopmi.no":true,"xn--mlatvuopmi-s4a.no":true,"namdalseid.no":true,"aejrie.no":true,"namsos.no":true,"namsskogan.no":true,"naamesjevuemie.no":true,"xn--nmesjevuemie-tcba.no":true,"laakesvuemie.no":true,"nannestad.no":true,"narvik.no":true,"narviika.no":true,"naustdal.no":true,"nedre-eiker.no":true,"nes.akershus.no":true,"nes.buskerud.no":true,"nesna.no":true,"nesodden.no":true,"nesseby.no":true,"unjarga.no":true,"xn--unjrga-rta.no":true,"nesset.no":true,"nissedal.no":true,"nittedal.no":true,"nord-aurdal.no":true,"nord-fron.no":true,"nord-odal.no":true,"norddal.no":true,"nordkapp.no":true,"davvenjarga.no":true,"xn--davvenjrga-y4a.no":true,"nordre-land.no":true,"nordreisa.no":true,"raisa.no":true,"xn--risa-5na.no":true,"nore-og-uvdal.no":true,"notodden.no":true,"naroy.no":true,"xn--nry-yla5g.no":true,"notteroy.no":true,"xn--nttery-byae.no":true,"odda.no":true,"oksnes.no":true,"xn--ksnes-uua.no":true,"oppdal.no":true,"oppegard.no":true,"xn--oppegrd-ixa.no":true,"orkdal.no":true,"orland.no":true,"xn--rland-uua.no":true,"orskog.no":true,"xn--rskog-uua.no":true,"orsta.no":true,"xn--rsta-fra.no":true,"os.hedmark.no":true,"os.hordaland.no":true,"osen.no":true,"osteroy.no":true,"xn--ostery-fya.no":true,"ostre-toten.no":true,"xn--stre-toten-zcb.no":true,"overhalla.no":true,"ovre-eiker.no":true,"xn--vre-eiker-k8a.no":true,"oyer.no":true,"xn--yer-zna.no":true,"oygarden.no":true,"xn--ygarden-p1a.no":true,"oystre-slidre.no":true,"xn--ystre-slidre-ujb.no":true,"porsanger.no":true,"porsangu.no":true,"xn--porsgu-sta26f.no":true,"porsgrunn.no":true,"radoy.no":true,"xn--rady-ira.no":true,"rakkestad.no":true,"rana.no":true,"ruovat.no":true,"randaberg.no":true,"rauma.no":true,"rendalen.no":true,"rennebu.no":true,"rennesoy.no":true,"xn--rennesy-v1a.no":true,"rindal.no":true,"ringebu.no":true,"ringerike.no":true,"ringsaker.no":true,"rissa.no":true,"risor.no":true,"xn--risr-ira.no":true,"roan.no":true,"rollag.no":true,"rygge.no":true,"ralingen.no":true,"xn--rlingen-mxa.no":true,"rodoy.no":true,"xn--rdy-0nab.no":true,"romskog.no":true,"xn--rmskog-bya.no":true,"roros.no":true,"xn--rros-gra.no":true,"rost.no":true,"xn--rst-0na.no":true,"royken.no":true,"xn--ryken-vua.no":true,"royrvik.no":true,"xn--ryrvik-bya.no":true,"rade.no":true,"xn--rde-ula.no":true,"salangen.no":true,"siellak.no":true,"saltdal.no":true,"salat.no":true,"xn--slt-elab.no":true,"xn--slat-5na.no":true,"samnanger.no":true,"sande.more-og-romsdal.no":true,"sande.xn--mre-og-romsdal-qqb.no":true,"sande.vestfold.no":true,"sandefjord.no":true,"sandnes.no":true,"sandoy.no":true,"xn--sandy-yua.no":true,"sarpsborg.no":true,"sauda.no":true,"sauherad.no":true,"sel.no":true,"selbu.no":true,"selje.no":true,"seljord.no":true,"sigdal.no":true,"siljan.no":true,"sirdal.no":true,"skaun.no":true,"skedsmo.no":true,"ski.no":true,"skien.no":true,"skiptvet.no":true,"skjervoy.no":true,"xn--skjervy-v1a.no":true,"skierva.no":true,"xn--skierv-uta.no":true,"skjak.no":true,"xn--skjk-soa.no":true,"skodje.no":true,"skanland.no":true,"xn--sknland-fxa.no":true,"skanit.no":true,"xn--sknit-yqa.no":true,"smola.no":true,"xn--smla-hra.no":true,"snillfjord.no":true,"snasa.no":true,"xn--snsa-roa.no":true,"snoasa.no":true,"snaase.no":true,"xn--snase-nra.no":true,"sogndal.no":true,"sokndal.no":true,"sola.no":true,"solund.no":true,"songdalen.no":true,"sortland.no":true,"spydeberg.no":true,"stange.no":true,"stavanger.no":true,"steigen.no":true,"steinkjer.no":true,"stjordal.no":true,"xn--stjrdal-s1a.no":true,"stokke.no":true,"stor-elvdal.no":true,"stord.no":true,"stordal.no":true,"storfjord.no":true,"omasvuotna.no":true,"strand.no":true,"stranda.no":true,"stryn.no":true,"sula.no":true,"suldal.no":true,"sund.no":true,"sunndal.no":true,"surnadal.no":true,"sveio.no":true,"svelvik.no":true,"sykkylven.no":true,"sogne.no":true,"xn--sgne-gra.no":true,"somna.no":true,"xn--smna-gra.no":true,"sondre-land.no":true,"xn--sndre-land-0cb.no":true,"sor-aurdal.no":true,"xn--sr-aurdal-l8a.no":true,"sor-fron.no":true,"xn--sr-fron-q1a.no":true,"sor-odal.no":true,"xn--sr-odal-q1a.no":true,"sor-varanger.no":true,"xn--sr-varanger-ggb.no":true,"matta-varjjat.no":true,"xn--mtta-vrjjat-k7af.no":true,"sorfold.no":true,"xn--srfold-bya.no":true,"sorreisa.no":true,"xn--srreisa-q1a.no":true,"sorum.no":true,"xn--srum-gra.no":true,"tana.no":true,"deatnu.no":true,"time.no":true,"tingvoll.no":true,"tinn.no":true,"tjeldsund.no":true,"dielddanuorri.no":true,"tjome.no":true,"xn--tjme-hra.no":true,"tokke.no":true,"tolga.no":true,"torsken.no":true,"tranoy.no":true,"xn--trany-yua.no":true,"tromso.no":true,"xn--troms-zua.no":true,"tromsa.no":true,"romsa.no":true,"trondheim.no":true,"troandin.no":true,"trysil.no":true,"trana.no":true,"xn--trna-woa.no":true,"trogstad.no":true,"xn--trgstad-r1a.no":true,"tvedestrand.no":true,"tydal.no":true,"tynset.no":true,"tysfjord.no":true,"divtasvuodna.no":true,"divttasvuotna.no":true,"tysnes.no":true,"tysvar.no":true,"xn--tysvr-vra.no":true,"tonsberg.no":true,"xn--tnsberg-q1a.no":true,"ullensaker.no":true,"ullensvang.no":true,"ulvik.no":true,"utsira.no":true,"vadso.no":true,"xn--vads-jra.no":true,"cahcesuolo.no":true,"xn--hcesuolo-7ya35b.no":true,"vaksdal.no":true,"valle.no":true,"vang.no":true,"vanylven.no":true,"vardo.no":true,"xn--vard-jra.no":true,"varggat.no":true,"xn--vrggt-xqad.no":true,"vefsn.no":true,"vaapste.no":true,"vega.no":true,"vegarshei.no":true,"xn--vegrshei-c0a.no":true,"vennesla.no":true,"verdal.no":true,"verran.no":true,"vestby.no":true,"vestnes.no":true,"vestre-slidre.no":true,"vestre-toten.no":true,"vestvagoy.no":true,"xn--vestvgy-ixa6o.no":true,"vevelstad.no":true,"vik.no":true,"vikna.no":true,"vindafjord.no":true,"volda.no":true,"voss.no":true,"varoy.no":true,"xn--vry-yla5g.no":true,"vagan.no":true,"xn--vgan-qoa.no":true,"voagat.no":true,"vagsoy.no":true,"xn--vgsy-qoa0j.no":true,"vaga.no":true,"xn--vg-yiab.no":true,"valer.ostfold.no":true,"xn--vler-qoa.xn--stfold-9xa.no":true,"valer.hedmark.no":true,"xn--vler-qoa.hedmark.no":true,"*.np":true,"nr":true,"biz.nr":true,"info.nr":true,"gov.nr":true,"edu.nr":true,"org.nr":true,"net.nr":true,"com.nr":true,"nu":true,"nz":true,"ac.nz":true,"co.nz":true,"cri.nz":true,"geek.nz":true,"gen.nz":true,"govt.nz":true,"health.nz":true,"iwi.nz":true,"kiwi.nz":true,"maori.nz":true,"mil.nz":true,"xn--mori-qsa.nz":true,"net.nz":true,"org.nz":true,"parliament.nz":true,"school.nz":true,"om":true,"co.om":true,"com.om":true,"edu.om":true,"gov.om":true,"med.om":true,"museum.om":true,"net.om":true,"org.om":true,"pro.om":true,"onion":true,"org":true,"pa":true,"ac.pa":true,"gob.pa":true,"com.pa":true,"org.pa":true,"sld.pa":true,"edu.pa":true,"net.pa":true,"ing.pa":true,"abo.pa":true,"med.pa":true,"nom.pa":true,"pe":true,"edu.pe":true,"gob.pe":true,"nom.pe":true,"mil.pe":true,"org.pe":true,"com.pe":true,"net.pe":true,"pf":true,"com.pf":true,"org.pf":true,"edu.pf":true,"*.pg":true,"ph":true,"com.ph":true,"net.ph":true,"org.ph":true,"gov.ph":true,"edu.ph":true,"ngo.ph":true,"mil.ph":true,"i.ph":true,"pk":true,"com.pk":true,"net.pk":true,"edu.pk":true,"org.pk":true,"fam.pk":true,"biz.pk":true,"web.pk":true,"gov.pk":true,"gob.pk":true,"gok.pk":true,"gon.pk":true,"gop.pk":true,"gos.pk":true,"info.pk":true,"pl":true,"com.pl":true,"net.pl":true,"org.pl":true,"aid.pl":true,"agro.pl":true,"atm.pl":true,"auto.pl":true,"biz.pl":true,"edu.pl":true,"gmina.pl":true,"gsm.pl":true,"info.pl":true,"mail.pl":true,"miasta.pl":true,"media.pl":true,"mil.pl":true,"nieruchomosci.pl":true,"nom.pl":true,"pc.pl":true,"powiat.pl":true,"priv.pl":true,"realestate.pl":true,"rel.pl":true,"sex.pl":true,"shop.pl":true,"sklep.pl":true,"sos.pl":true,"szkola.pl":true,"targi.pl":true,"tm.pl":true,"tourism.pl":true,"travel.pl":true,"turystyka.pl":true,"gov.pl":true,"ap.gov.pl":true,"ic.gov.pl":true,"is.gov.pl":true,"us.gov.pl":true,"kmpsp.gov.pl":true,"kppsp.gov.pl":true,"kwpsp.gov.pl":true,"psp.gov.pl":true,"wskr.gov.pl":true,"kwp.gov.pl":true,"mw.gov.pl":true,"ug.gov.pl":true,"um.gov.pl":true,"umig.gov.pl":true,"ugim.gov.pl":true,"upow.gov.pl":true,"uw.gov.pl":true,"starostwo.gov.pl":true,"pa.gov.pl":true,"po.gov.pl":true,"psse.gov.pl":true,"pup.gov.pl":true,"rzgw.gov.pl":true,"sa.gov.pl":true,"so.gov.pl":true,"sr.gov.pl":true,"wsa.gov.pl":true,"sko.gov.pl":true,"uzs.gov.pl":true,"wiih.gov.pl":true,"winb.gov.pl":true,"pinb.gov.pl":true,"wios.gov.pl":true,"witd.gov.pl":true,"wzmiuw.gov.pl":true,"piw.gov.pl":true,"wiw.gov.pl":true,"griw.gov.pl":true,"wif.gov.pl":true,"oum.gov.pl":true,"sdn.gov.pl":true,"zp.gov.pl":true,"uppo.gov.pl":true,"mup.gov.pl":true,"wuoz.gov.pl":true,"konsulat.gov.pl":true,"oirm.gov.pl":true,"augustow.pl":true,"babia-gora.pl":true,"bedzin.pl":true,"beskidy.pl":true,"bialowieza.pl":true,"bialystok.pl":true,"bielawa.pl":true,"bieszczady.pl":true,"boleslawiec.pl":true,"bydgoszcz.pl":true,"bytom.pl":true,"cieszyn.pl":true,"czeladz.pl":true,"czest.pl":true,"dlugoleka.pl":true,"elblag.pl":true,"elk.pl":true,"glogow.pl":true,"gniezno.pl":true,"gorlice.pl":true,"grajewo.pl":true,"ilawa.pl":true,"jaworzno.pl":true,"jelenia-gora.pl":true,"jgora.pl":true,"kalisz.pl":true,"kazimierz-dolny.pl":true,"karpacz.pl":true,"kartuzy.pl":true,"kaszuby.pl":true,"katowice.pl":true,"kepno.pl":true,"ketrzyn.pl":true,"klodzko.pl":true,"kobierzyce.pl":true,"kolobrzeg.pl":true,"konin.pl":true,"konskowola.pl":true,"kutno.pl":true,"lapy.pl":true,"lebork.pl":true,"legnica.pl":true,"lezajsk.pl":true,"limanowa.pl":true,"lomza.pl":true,"lowicz.pl":true,"lubin.pl":true,"lukow.pl":true,"malbork.pl":true,"malopolska.pl":true,"mazowsze.pl":true,"mazury.pl":true,"mielec.pl":true,"mielno.pl":true,"mragowo.pl":true,"naklo.pl":true,"nowaruda.pl":true,"nysa.pl":true,"olawa.pl":true,"olecko.pl":true,"olkusz.pl":true,"olsztyn.pl":true,"opoczno.pl":true,"opole.pl":true,"ostroda.pl":true,"ostroleka.pl":true,"ostrowiec.pl":true,"ostrowwlkp.pl":true,"pila.pl":true,"pisz.pl":true,"podhale.pl":true,"podlasie.pl":true,"polkowice.pl":true,"pomorze.pl":true,"pomorskie.pl":true,"prochowice.pl":true,"pruszkow.pl":true,"przeworsk.pl":true,"pulawy.pl":true,"radom.pl":true,"rawa-maz.pl":true,"rybnik.pl":true,"rzeszow.pl":true,"sanok.pl":true,"sejny.pl":true,"slask.pl":true,"slupsk.pl":true,"sosnowiec.pl":true,"stalowa-wola.pl":true,"skoczow.pl":true,"starachowice.pl":true,"stargard.pl":true,"suwalki.pl":true,"swidnica.pl":true,"swiebodzin.pl":true,"swinoujscie.pl":true,"szczecin.pl":true,"szczytno.pl":true,"tarnobrzeg.pl":true,"tgory.pl":true,"turek.pl":true,"tychy.pl":true,"ustka.pl":true,"walbrzych.pl":true,"warmia.pl":true,"warszawa.pl":true,"waw.pl":true,"wegrow.pl":true,"wielun.pl":true,"wlocl.pl":true,"wloclawek.pl":true,"wodzislaw.pl":true,"wolomin.pl":true,"wroclaw.pl":true,"zachpomor.pl":true,"zagan.pl":true,"zarow.pl":true,"zgora.pl":true,"zgorzelec.pl":true,"pm":true,"pn":true,"gov.pn":true,"co.pn":true,"org.pn":true,"edu.pn":true,"net.pn":true,"post":true,"pr":true,"com.pr":true,"net.pr":true,"org.pr":true,"gov.pr":true,"edu.pr":true,"isla.pr":true,"pro.pr":true,"biz.pr":true,"info.pr":true,"name.pr":true,"est.pr":true,"prof.pr":true,"ac.pr":true,"pro":true,"aaa.pro":true,"aca.pro":true,"acct.pro":true,"avocat.pro":true,"bar.pro":true,"cpa.pro":true,"eng.pro":true,"jur.pro":true,"law.pro":true,"med.pro":true,"recht.pro":true,"ps":true,"edu.ps":true,"gov.ps":true,"sec.ps":true,"plo.ps":true,"com.ps":true,"org.ps":true,"net.ps":true,"pt":true,"net.pt":true,"gov.pt":true,"org.pt":true,"edu.pt":true,"int.pt":true,"publ.pt":true,"com.pt":true,"nome.pt":true,"pw":true,"co.pw":true,"ne.pw":true,"or.pw":true,"ed.pw":true,"go.pw":true,"belau.pw":true,"py":true,"com.py":true,"coop.py":true,"edu.py":true,"gov.py":true,"mil.py":true,"net.py":true,"org.py":true,"qa":true,"com.qa":true,"edu.qa":true,"gov.qa":true,"mil.qa":true,"name.qa":true,"net.qa":true,"org.qa":true,"sch.qa":true,"re":true,"asso.re":true,"com.re":true,"nom.re":true,"ro":true,"arts.ro":true,"com.ro":true,"firm.ro":true,"info.ro":true,"nom.ro":true,"nt.ro":true,"org.ro":true,"rec.ro":true,"store.ro":true,"tm.ro":true,"www.ro":true,"rs":true,"ac.rs":true,"co.rs":true,"edu.rs":true,"gov.rs":true,"in.rs":true,"org.rs":true,"ru":true,"ac.ru":true,"edu.ru":true,"gov.ru":true,"int.ru":true,"mil.ru":true,"test.ru":true,"rw":true,"gov.rw":true,"net.rw":true,"edu.rw":true,"ac.rw":true,"com.rw":true,"co.rw":true,"int.rw":true,"mil.rw":true,"gouv.rw":true,"sa":true,"com.sa":true,"net.sa":true,"org.sa":true,"gov.sa":true,"med.sa":true,"pub.sa":true,"edu.sa":true,"sch.sa":true,"sb":true,"com.sb":true,"edu.sb":true,"gov.sb":true,"net.sb":true,"org.sb":true,"sc":true,"com.sc":true,"gov.sc":true,"net.sc":true,"org.sc":true,"edu.sc":true,"sd":true,"com.sd":true,"net.sd":true,"org.sd":true,"edu.sd":true,"med.sd":true,"tv.sd":true,"gov.sd":true,"info.sd":true,"se":true,"a.se":true,"ac.se":true,"b.se":true,"bd.se":true,"brand.se":true,"c.se":true,"d.se":true,"e.se":true,"f.se":true,"fh.se":true,"fhsk.se":true,"fhv.se":true,"g.se":true,"h.se":true,"i.se":true,"k.se":true,"komforb.se":true,"kommunalforbund.se":true,"komvux.se":true,"l.se":true,"lanbib.se":true,"m.se":true,"n.se":true,"naturbruksgymn.se":true,"o.se":true,"org.se":true,"p.se":true,"parti.se":true,"pp.se":true,"press.se":true,"r.se":true,"s.se":true,"t.se":true,"tm.se":true,"u.se":true,"w.se":true,"x.se":true,"y.se":true,"z.se":true,"sg":true,"com.sg":true,"net.sg":true,"org.sg":true,"gov.sg":true,"edu.sg":true,"per.sg":true,"sh":true,"com.sh":true,"net.sh":true,"gov.sh":true,"org.sh":true,"mil.sh":true,"si":true,"sj":true,"sk":true,"sl":true,"com.sl":true,"net.sl":true,"edu.sl":true,"gov.sl":true,"org.sl":true,"sm":true,"sn":true,"art.sn":true,"com.sn":true,"edu.sn":true,"gouv.sn":true,"org.sn":true,"perso.sn":true,"univ.sn":true,"so":true,"com.so":true,"net.so":true,"org.so":true,"sr":true,"st":true,"co.st":true,"com.st":true,"consulado.st":true,"edu.st":true,"embaixada.st":true,"gov.st":true,"mil.st":true,"net.st":true,"org.st":true,"principe.st":true,"saotome.st":true,"store.st":true,"su":true,"sv":true,"com.sv":true,"edu.sv":true,"gob.sv":true,"org.sv":true,"red.sv":true,"sx":true,"gov.sx":true,"sy":true,"edu.sy":true,"gov.sy":true,"net.sy":true,"mil.sy":true,"com.sy":true,"org.sy":true,"sz":true,"co.sz":true,"ac.sz":true,"org.sz":true,"tc":true,"td":true,"tel":true,"tf":true,"tg":true,"th":true,"ac.th":true,"co.th":true,"go.th":true,"in.th":true,"mi.th":true,"net.th":true,"or.th":true,"tj":true,"ac.tj":true,"biz.tj":true,"co.tj":true,"com.tj":true,"edu.tj":true,"go.tj":true,"gov.tj":true,"int.tj":true,"mil.tj":true,"name.tj":true,"net.tj":true,"nic.tj":true,"org.tj":true,"test.tj":true,"web.tj":true,"tk":true,"tl":true,"gov.tl":true,"tm":true,"com.tm":true,"co.tm":true,"org.tm":true,"net.tm":true,"nom.tm":true,"gov.tm":true,"mil.tm":true,"edu.tm":true,"tn":true,"com.tn":true,"ens.tn":true,"fin.tn":true,"gov.tn":true,"ind.tn":true,"intl.tn":true,"nat.tn":true,"net.tn":true,"org.tn":true,"info.tn":true,"perso.tn":true,"tourism.tn":true,"edunet.tn":true,"rnrt.tn":true,"rns.tn":true,"rnu.tn":true,"mincom.tn":true,"agrinet.tn":true,"defense.tn":true,"turen.tn":true,"to":true,"com.to":true,"gov.to":true,"net.to":true,"org.to":true,"edu.to":true,"mil.to":true,"tr":true,"com.tr":true,"info.tr":true,"biz.tr":true,"net.tr":true,"org.tr":true,"web.tr":true,"gen.tr":true,"tv.tr":true,"av.tr":true,"dr.tr":true,"bbs.tr":true,"name.tr":true,"tel.tr":true,"gov.tr":true,"bel.tr":true,"pol.tr":true,"mil.tr":true,"k12.tr":true,"edu.tr":true,"kep.tr":true,"nc.tr":true,"gov.nc.tr":true,"travel":true,"tt":true,"co.tt":true,"com.tt":true,"org.tt":true,"net.tt":true,"biz.tt":true,"info.tt":true,"pro.tt":true,"int.tt":true,"coop.tt":true,"jobs.tt":true,"mobi.tt":true,"travel.tt":true,"museum.tt":true,"aero.tt":true,"name.tt":true,"gov.tt":true,"edu.tt":true,"tv":true,"tw":true,"edu.tw":true,"gov.tw":true,"mil.tw":true,"com.tw":true,"net.tw":true,"org.tw":true,"idv.tw":true,"game.tw":true,"ebiz.tw":true,"club.tw":true,"xn--zf0ao64a.tw":true,"xn--uc0atv.tw":true,"xn--czrw28b.tw":true,"tz":true,"ac.tz":true,"co.tz":true,"go.tz":true,"hotel.tz":true,"info.tz":true,"me.tz":true,"mil.tz":true,"mobi.tz":true,"ne.tz":true,"or.tz":true,"sc.tz":true,"tv.tz":true,"ua":true,"com.ua":true,"edu.ua":true,"gov.ua":true,"in.ua":true,"net.ua":true,"org.ua":true,"cherkassy.ua":true,"cherkasy.ua":true,"chernigov.ua":true,"chernihiv.ua":true,"chernivtsi.ua":true,"chernovtsy.ua":true,"ck.ua":true,"cn.ua":true,"cr.ua":true,"crimea.ua":true,"cv.ua":true,"dn.ua":true,"dnepropetrovsk.ua":true,"dnipropetrovsk.ua":true,"dominic.ua":true,"donetsk.ua":true,"dp.ua":true,"if.ua":true,"ivano-frankivsk.ua":true,"kh.ua":true,"kharkiv.ua":true,"kharkov.ua":true,"kherson.ua":true,"khmelnitskiy.ua":true,"khmelnytskyi.ua":true,"kiev.ua":true,"kirovograd.ua":true,"km.ua":true,"kr.ua":true,"krym.ua":true,"ks.ua":true,"kv.ua":true,"kyiv.ua":true,"lg.ua":true,"lt.ua":true,"lugansk.ua":true,"lutsk.ua":true,"lv.ua":true,"lviv.ua":true,"mk.ua":true,"mykolaiv.ua":true,"nikolaev.ua":true,"od.ua":true,"odesa.ua":true,"odessa.ua":true,"pl.ua":true,"poltava.ua":true,"rivne.ua":true,"rovno.ua":true,"rv.ua":true,"sb.ua":true,"sebastopol.ua":true,"sevastopol.ua":true,"sm.ua":true,"sumy.ua":true,"te.ua":true,"ternopil.ua":true,"uz.ua":true,"uzhgorod.ua":true,"vinnica.ua":true,"vinnytsia.ua":true,"vn.ua":true,"volyn.ua":true,"yalta.ua":true,"zaporizhzhe.ua":true,"zaporizhzhia.ua":true,"zhitomir.ua":true,"zhytomyr.ua":true,"zp.ua":true,"zt.ua":true,"ug":true,"co.ug":true,"or.ug":true,"ac.ug":true,"sc.ug":true,"go.ug":true,"ne.ug":true,"com.ug":true,"org.ug":true,"uk":true,"ac.uk":true,"co.uk":true,"gov.uk":true,"ltd.uk":true,"me.uk":true,"net.uk":true,"nhs.uk":true,"org.uk":true,"plc.uk":true,"police.uk":true,"*.sch.uk":true,"us":true,"dni.us":true,"fed.us":true,"isa.us":true,"kids.us":true,"nsn.us":true,"ak.us":true,"al.us":true,"ar.us":true,"as.us":true,"az.us":true,"ca.us":true,"co.us":true,"ct.us":true,"dc.us":true,"de.us":true,"fl.us":true,"ga.us":true,"gu.us":true,"hi.us":true,"ia.us":true,"id.us":true,"il.us":true,"in.us":true,"ks.us":true,"ky.us":true,"la.us":true,"ma.us":true,"md.us":true,"me.us":true,"mi.us":true,"mn.us":true,"mo.us":true,"ms.us":true,"mt.us":true,"nc.us":true,"nd.us":true,"ne.us":true,"nh.us":true,"nj.us":true,"nm.us":true,"nv.us":true,"ny.us":true,"oh.us":true,"ok.us":true,"or.us":true,"pa.us":true,"pr.us":true,"ri.us":true,"sc.us":true,"sd.us":true,"tn.us":true,"tx.us":true,"ut.us":true,"vi.us":true,"vt.us":true,"va.us":true,"wa.us":true,"wi.us":true,"wv.us":true,"wy.us":true,"k12.ak.us":true,"k12.al.us":true,"k12.ar.us":true,"k12.as.us":true,"k12.az.us":true,"k12.ca.us":true,"k12.co.us":true,"k12.ct.us":true,"k12.dc.us":true,"k12.de.us":true,"k12.fl.us":true,"k12.ga.us":true,"k12.gu.us":true,"k12.ia.us":true,"k12.id.us":true,"k12.il.us":true,"k12.in.us":true,"k12.ks.us":true,"k12.ky.us":true,"k12.la.us":true,"k12.ma.us":true,"k12.md.us":true,"k12.me.us":true,"k12.mi.us":true,"k12.mn.us":true,"k12.mo.us":true,"k12.ms.us":true,"k12.mt.us":true,"k12.nc.us":true,"k12.ne.us":true,"k12.nh.us":true,"k12.nj.us":true,"k12.nm.us":true,"k12.nv.us":true,"k12.ny.us":true,"k12.oh.us":true,"k12.ok.us":true,"k12.or.us":true,"k12.pa.us":true,"k12.pr.us":true,"k12.ri.us":true,"k12.sc.us":true,"k12.tn.us":true,"k12.tx.us":true,"k12.ut.us":true,"k12.vi.us":true,"k12.vt.us":true,"k12.va.us":true,"k12.wa.us":true,"k12.wi.us":true,"k12.wy.us":true,"cc.ak.us":true,"cc.al.us":true,"cc.ar.us":true,"cc.as.us":true,"cc.az.us":true,"cc.ca.us":true,"cc.co.us":true,"cc.ct.us":true,"cc.dc.us":true,"cc.de.us":true,"cc.fl.us":true,"cc.ga.us":true,"cc.gu.us":true,"cc.hi.us":true,"cc.ia.us":true,"cc.id.us":true,"cc.il.us":true,"cc.in.us":true,"cc.ks.us":true,"cc.ky.us":true,"cc.la.us":true,"cc.ma.us":true,"cc.md.us":true,"cc.me.us":true,"cc.mi.us":true,"cc.mn.us":true,"cc.mo.us":true,"cc.ms.us":true,"cc.mt.us":true,"cc.nc.us":true,"cc.nd.us":true,"cc.ne.us":true,"cc.nh.us":true,"cc.nj.us":true,"cc.nm.us":true,"cc.nv.us":true,"cc.ny.us":true,"cc.oh.us":true,"cc.ok.us":true,"cc.or.us":true,"cc.pa.us":true,"cc.pr.us":true,"cc.ri.us":true,"cc.sc.us":true,"cc.sd.us":true,"cc.tn.us":true,"cc.tx.us":true,"cc.ut.us":true,"cc.vi.us":true,"cc.vt.us":true,"cc.va.us":true,"cc.wa.us":true,"cc.wi.us":true,"cc.wv.us":true,"cc.wy.us":true,"lib.ak.us":true,"lib.al.us":true,"lib.ar.us":true,"lib.as.us":true,"lib.az.us":true,"lib.ca.us":true,"lib.co.us":true,"lib.ct.us":true,"lib.dc.us":true,"lib.fl.us":true,"lib.ga.us":true,"lib.gu.us":true,"lib.hi.us":true,"lib.ia.us":true,"lib.id.us":true,"lib.il.us":true,"lib.in.us":true,"lib.ks.us":true,"lib.ky.us":true,"lib.la.us":true,"lib.ma.us":true,"lib.md.us":true,"lib.me.us":true,"lib.mi.us":true,"lib.mn.us":true,"lib.mo.us":true,"lib.ms.us":true,"lib.mt.us":true,"lib.nc.us":true,"lib.nd.us":true,"lib.ne.us":true,"lib.nh.us":true,"lib.nj.us":true,"lib.nm.us":true,"lib.nv.us":true,"lib.ny.us":true,"lib.oh.us":true,"lib.ok.us":true,"lib.or.us":true,"lib.pa.us":true,"lib.pr.us":true,"lib.ri.us":true,"lib.sc.us":true,"lib.sd.us":true,"lib.tn.us":true,"lib.tx.us":true,"lib.ut.us":true,"lib.vi.us":true,"lib.vt.us":true,"lib.va.us":true,"lib.wa.us":true,"lib.wi.us":true,"lib.wy.us":true,"pvt.k12.ma.us":true,"chtr.k12.ma.us":true,"paroch.k12.ma.us":true,"ann-arbor.mi.us":true,"cog.mi.us":true,"dst.mi.us":true,"eaton.mi.us":true,"gen.mi.us":true,"mus.mi.us":true,"tec.mi.us":true,"washtenaw.mi.us":true,"uy":true,"com.uy":true,"edu.uy":true,"gub.uy":true,"mil.uy":true,"net.uy":true,"org.uy":true,"uz":true,"co.uz":true,"com.uz":true,"net.uz":true,"org.uz":true,"va":true,"vc":true,"com.vc":true,"net.vc":true,"org.vc":true,"gov.vc":true,"mil.vc":true,"edu.vc":true,"ve":true,"arts.ve":true,"co.ve":true,"com.ve":true,"e12.ve":true,"edu.ve":true,"firm.ve":true,"gob.ve":true,"gov.ve":true,"info.ve":true,"int.ve":true,"mil.ve":true,"net.ve":true,"org.ve":true,"rec.ve":true,"store.ve":true,"tec.ve":true,"web.ve":true,"vg":true,"vi":true,"co.vi":true,"com.vi":true,"k12.vi":true,"net.vi":true,"org.vi":true,"vn":true,"com.vn":true,"net.vn":true,"org.vn":true,"edu.vn":true,"gov.vn":true,"int.vn":true,"ac.vn":true,"biz.vn":true,"info.vn":true,"name.vn":true,"pro.vn":true,"health.vn":true,"vu":true,"com.vu":true,"edu.vu":true,"net.vu":true,"org.vu":true,"wf":true,"ws":true,"com.ws":true,"net.ws":true,"org.ws":true,"gov.ws":true,"edu.ws":true,"yt":true,"xn--mgbaam7a8h":true,"xn--y9a3aq":true,"xn--54b7fta0cc":true,"xn--90ae":true,"xn--90ais":true,"xn--fiqs8s":true,"xn--fiqz9s":true,"xn--lgbbat1ad8j":true,"xn--wgbh1c":true,"xn--e1a4c":true,"xn--node":true,"xn--qxam":true,"xn--j6w193g":true,"xn--2scrj9c":true,"xn--3hcrj9c":true,"xn--45br5cyl":true,"xn--h2breg3eve":true,"xn--h2brj9c8c":true,"xn--mgbgu82a":true,"xn--rvc1e0am3e":true,"xn--h2brj9c":true,"xn--mgbbh1a71e":true,"xn--fpcrj9c3d":true,"xn--gecrj9c":true,"xn--s9brj9c":true,"xn--45brj9c":true,"xn--xkc2dl3a5ee0h":true,"xn--mgba3a4f16a":true,"xn--mgba3a4fra":true,"xn--mgbtx2b":true,"xn--mgbayh7gpa":true,"xn--3e0b707e":true,"xn--80ao21a":true,"xn--fzc2c9e2c":true,"xn--xkc2al3hye2a":true,"xn--mgbc0a9azcg":true,"xn--d1alf":true,"xn--l1acc":true,"xn--mix891f":true,"xn--mix082f":true,"xn--mgbx4cd0ab":true,"xn--mgb9awbf":true,"xn--mgbai9azgqp6j":true,"xn--mgbai9a5eva00b":true,"xn--ygbi2ammx":true,"xn--90a3ac":true,"xn--o1ac.xn--90a3ac":true,"xn--c1avg.xn--90a3ac":true,"xn--90azh.xn--90a3ac":true,"xn--d1at.xn--90a3ac":true,"xn--o1ach.xn--90a3ac":true,"xn--80au.xn--90a3ac":true,"xn--p1ai":true,"xn--wgbl6a":true,"xn--mgberp4a5d4ar":true,"xn--mgberp4a5d4a87g":true,"xn--mgbqly7c0a67fbc":true,"xn--mgbqly7cvafr":true,"xn--mgbpl2fh":true,"xn--yfro4i67o":true,"xn--clchc0ea0b2g2a9gcd":true,"xn--ogbpf8fl":true,"xn--mgbtf8fl":true,"xn--o3cw4h":true,"xn--12c1fe0br.xn--o3cw4h":true,"xn--12co0c3b4eva.xn--o3cw4h":true,"xn--h3cuzk1di.xn--o3cw4h":true,"xn--o3cyx2a.xn--o3cw4h":true,"xn--m3ch0j3a.xn--o3cw4h":true,"xn--12cfi8ixb8l.xn--o3cw4h":true,"xn--pgbs0dh":true,"xn--kpry57d":true,"xn--kprw13d":true,"xn--nnx388a":true,"xn--j1amh":true,"xn--mgb2ddes":true,"xxx":true,"*.ye":true,"ac.za":true,"agric.za":true,"alt.za":true,"co.za":true,"edu.za":true,"gov.za":true,"grondar.za":true,"law.za":true,"mil.za":true,"net.za":true,"ngo.za":true,"nis.za":true,"nom.za":true,"org.za":true,"school.za":true,"tm.za":true,"web.za":true,"zm":true,"ac.zm":true,"biz.zm":true,"co.zm":true,"com.zm":true,"edu.zm":true,"gov.zm":true,"info.zm":true,"mil.zm":true,"net.zm":true,"org.zm":true,"sch.zm":true,"zw":true,"ac.zw":true,"co.zw":true,"gov.zw":true,"mil.zw":true,"org.zw":true,"aaa":true,"aarp":true,"abarth":true,"abb":true,"abbott":true,"abbvie":true,"abc":true,"able":true,"abogado":true,"abudhabi":true,"academy":true,"accenture":true,"accountant":true,"accountants":true,"aco":true,"active":true,"actor":true,"adac":true,"ads":true,"adult":true,"aeg":true,"aetna":true,"afamilycompany":true,"afl":true,"africa":true,"agakhan":true,"agency":true,"aig":true,"aigo":true,"airbus":true,"airforce":true,"airtel":true,"akdn":true,"alfaromeo":true,"alibaba":true,"alipay":true,"allfinanz":true,"allstate":true,"ally":true,"alsace":true,"alstom":true,"americanexpress":true,"americanfamily":true,"amex":true,"amfam":true,"amica":true,"amsterdam":true,"analytics":true,"android":true,"anquan":true,"anz":true,"aol":true,"apartments":true,"app":true,"apple":true,"aquarelle":true,"arab":true,"aramco":true,"archi":true,"army":true,"art":true,"arte":true,"asda":true,"associates":true,"athleta":true,"attorney":true,"auction":true,"audi":true,"audible":true,"audio":true,"auspost":true,"author":true,"auto":true,"autos":true,"avianca":true,"aws":true,"axa":true,"azure":true,"baby":true,"baidu":true,"banamex":true,"bananarepublic":true,"band":true,"bank":true,"bar":true,"barcelona":true,"barclaycard":true,"barclays":true,"barefoot":true,"bargains":true,"baseball":true,"basketball":true,"bauhaus":true,"bayern":true,"bbc":true,"bbt":true,"bbva":true,"bcg":true,"bcn":true,"beats":true,"beauty":true,"beer":true,"bentley":true,"berlin":true,"best":true,"bestbuy":true,"bet":true,"bharti":true,"bible":true,"bid":true,"bike":true,"bing":true,"bingo":true,"bio":true,"black":true,"blackfriday":true,"blanco":true,"blockbuster":true,"blog":true,"bloomberg":true,"blue":true,"bms":true,"bmw":true,"bnl":true,"bnpparibas":true,"boats":true,"boehringer":true,"bofa":true,"bom":true,"bond":true,"boo":true,"book":true,"booking":true,"boots":true,"bosch":true,"bostik":true,"boston":true,"bot":true,"boutique":true,"box":true,"bradesco":true,"bridgestone":true,"broadway":true,"broker":true,"brother":true,"brussels":true,"budapest":true,"bugatti":true,"build":true,"builders":true,"business":true,"buy":true,"buzz":true,"bzh":true,"cab":true,"cafe":true,"cal":true,"call":true,"calvinklein":true,"cam":true,"camera":true,"camp":true,"cancerresearch":true,"canon":true,"capetown":true,"capital":true,"capitalone":true,"car":true,"caravan":true,"cards":true,"care":true,"career":true,"careers":true,"cars":true,"cartier":true,"casa":true,"case":true,"caseih":true,"cash":true,"casino":true,"catering":true,"catholic":true,"cba":true,"cbn":true,"cbre":true,"cbs":true,"ceb":true,"center":true,"ceo":true,"cern":true,"cfa":true,"cfd":true,"chanel":true,"channel":true,"chase":true,"chat":true,"cheap":true,"chintai":true,"christmas":true,"chrome":true,"chrysler":true,"church":true,"cipriani":true,"circle":true,"cisco":true,"citadel":true,"citi":true,"citic":true,"city":true,"cityeats":true,"claims":true,"cleaning":true,"click":true,"clinic":true,"clinique":true,"clothing":true,"cloud":true,"club":true,"clubmed":true,"coach":true,"codes":true,"coffee":true,"college":true,"cologne":true,"comcast":true,"commbank":true,"community":true,"company":true,"compare":true,"computer":true,"comsec":true,"condos":true,"construction":true,"consulting":true,"contact":true,"contractors":true,"cooking":true,"cookingchannel":true,"cool":true,"corsica":true,"country":true,"coupon":true,"coupons":true,"courses":true,"credit":true,"creditcard":true,"creditunion":true,"cricket":true,"crown":true,"crs":true,"cruise":true,"cruises":true,"csc":true,"cuisinella":true,"cymru":true,"cyou":true,"dabur":true,"dad":true,"dance":true,"data":true,"date":true,"dating":true,"datsun":true,"day":true,"dclk":true,"dds":true,"deal":true,"dealer":true,"deals":true,"degree":true,"delivery":true,"dell":true,"deloitte":true,"delta":true,"democrat":true,"dental":true,"dentist":true,"desi":true,"design":true,"dev":true,"dhl":true,"diamonds":true,"diet":true,"digital":true,"direct":true,"directory":true,"discount":true,"discover":true,"dish":true,"diy":true,"dnp":true,"docs":true,"doctor":true,"dodge":true,"dog":true,"doha":true,"domains":true,"dot":true,"download":true,"drive":true,"dtv":true,"dubai":true,"duck":true,"dunlop":true,"duns":true,"dupont":true,"durban":true,"dvag":true,"dvr":true,"earth":true,"eat":true,"eco":true,"edeka":true,"education":true,"email":true,"emerck":true,"energy":true,"engineer":true,"engineering":true,"enterprises":true,"epost":true,"epson":true,"equipment":true,"ericsson":true,"erni":true,"esq":true,"estate":true,"esurance":true,"etisalat":true,"eurovision":true,"eus":true,"events":true,"everbank":true,"exchange":true,"expert":true,"exposed":true,"express":true,"extraspace":true,"fage":true,"fail":true,"fairwinds":true,"faith":true,"family":true,"fan":true,"fans":true,"farm":true,"farmers":true,"fashion":true,"fast":true,"fedex":true,"feedback":true,"ferrari":true,"ferrero":true,"fiat":true,"fidelity":true,"fido":true,"film":true,"final":true,"finance":true,"financial":true,"fire":true,"firestone":true,"firmdale":true,"fish":true,"fishing":true,"fit":true,"fitness":true,"flickr":true,"flights":true,"flir":true,"florist":true,"flowers":true,"fly":true,"foo":true,"food":true,"foodnetwork":true,"football":true,"ford":true,"forex":true,"forsale":true,"forum":true,"foundation":true,"fox":true,"free":true,"fresenius":true,"frl":true,"frogans":true,"frontdoor":true,"frontier":true,"ftr":true,"fujitsu":true,"fujixerox":true,"fun":true,"fund":true,"furniture":true,"futbol":true,"fyi":true,"gal":true,"gallery":true,"gallo":true,"gallup":true,"game":true,"games":true,"gap":true,"garden":true,"gbiz":true,"gdn":true,"gea":true,"gent":true,"genting":true,"george":true,"ggee":true,"gift":true,"gifts":true,"gives":true,"giving":true,"glade":true,"glass":true,"gle":true,"global":true,"globo":true,"gmail":true,"gmbh":true,"gmo":true,"gmx":true,"godaddy":true,"gold":true,"goldpoint":true,"golf":true,"goo":true,"goodhands":true,"goodyear":true,"goog":true,"google":true,"gop":true,"got":true,"grainger":true,"graphics":true,"gratis":true,"green":true,"gripe":true,"grocery":true,"group":true,"guardian":true,"gucci":true,"guge":true,"guide":true,"guitars":true,"guru":true,"hair":true,"hamburg":true,"hangout":true,"haus":true,"hbo":true,"hdfc":true,"hdfcbank":true,"health":true,"healthcare":true,"help":true,"helsinki":true,"here":true,"hermes":true,"hgtv":true,"hiphop":true,"hisamitsu":true,"hitachi":true,"hiv":true,"hkt":true,"hockey":true,"holdings":true,"holiday":true,"homedepot":true,"homegoods":true,"homes":true,"homesense":true,"honda":true,"honeywell":true,"horse":true,"hospital":true,"host":true,"hosting":true,"hot":true,"hoteles":true,"hotels":true,"hotmail":true,"house":true,"how":true,"hsbc":true,"hughes":true,"hyatt":true,"hyundai":true,"ibm":true,"icbc":true,"ice":true,"icu":true,"ieee":true,"ifm":true,"ikano":true,"imamat":true,"imdb":true,"immo":true,"immobilien":true,"industries":true,"infiniti":true,"ing":true,"ink":true,"institute":true,"insurance":true,"insure":true,"intel":true,"international":true,"intuit":true,"investments":true,"ipiranga":true,"irish":true,"iselect":true,"ismaili":true,"ist":true,"istanbul":true,"itau":true,"itv":true,"iveco":true,"iwc":true,"jaguar":true,"java":true,"jcb":true,"jcp":true,"jeep":true,"jetzt":true,"jewelry":true,"jio":true,"jlc":true,"jll":true,"jmp":true,"jnj":true,"joburg":true,"jot":true,"joy":true,"jpmorgan":true,"jprs":true,"juegos":true,"juniper":true,"kaufen":true,"kddi":true,"kerryhotels":true,"kerrylogistics":true,"kerryproperties":true,"kfh":true,"kia":true,"kim":true,"kinder":true,"kindle":true,"kitchen":true,"kiwi":true,"koeln":true,"komatsu":true,"kosher":true,"kpmg":true,"kpn":true,"krd":true,"kred":true,"kuokgroup":true,"kyoto":true,"lacaixa":true,"ladbrokes":true,"lamborghini":true,"lamer":true,"lancaster":true,"lancia":true,"lancome":true,"land":true,"landrover":true,"lanxess":true,"lasalle":true,"lat":true,"latino":true,"latrobe":true,"law":true,"lawyer":true,"lds":true,"lease":true,"leclerc":true,"lefrak":true,"legal":true,"lego":true,"lexus":true,"lgbt":true,"liaison":true,"lidl":true,"life":true,"lifeinsurance":true,"lifestyle":true,"lighting":true,"like":true,"lilly":true,"limited":true,"limo":true,"lincoln":true,"linde":true,"link":true,"lipsy":true,"live":true,"living":true,"lixil":true,"loan":true,"loans":true,"locker":true,"locus":true,"loft":true,"lol":true,"london":true,"lotte":true,"lotto":true,"love":true,"lpl":true,"lplfinancial":true,"ltd":true,"ltda":true,"lundbeck":true,"lupin":true,"luxe":true,"luxury":true,"macys":true,"madrid":true,"maif":true,"maison":true,"makeup":true,"man":true,"management":true,"mango":true,"map":true,"market":true,"marketing":true,"markets":true,"marriott":true,"marshalls":true,"maserati":true,"mattel":true,"mba":true,"mckinsey":true,"med":true,"media":true,"meet":true,"melbourne":true,"meme":true,"memorial":true,"men":true,"menu":true,"meo":true,"merckmsd":true,"metlife":true,"miami":true,"microsoft":true,"mini":true,"mint":true,"mit":true,"mitsubishi":true,"mlb":true,"mls":true,"mma":true,"mobile":true,"mobily":true,"moda":true,"moe":true,"moi":true,"mom":true,"monash":true,"money":true,"monster":true,"mopar":true,"mormon":true,"mortgage":true,"moscow":true,"moto":true,"motorcycles":true,"mov":true,"movie":true,"movistar":true,"msd":true,"mtn":true,"mtpc":true,"mtr":true,"mutual":true,"nab":true,"nadex":true,"nagoya":true,"nationwide":true,"natura":true,"navy":true,"nba":true,"nec":true,"netbank":true,"netflix":true,"network":true,"neustar":true,"new":true,"newholland":true,"news":true,"next":true,"nextdirect":true,"nexus":true,"nfl":true,"ngo":true,"nhk":true,"nico":true,"nike":true,"nikon":true,"ninja":true,"nissan":true,"nissay":true,"nokia":true,"northwesternmutual":true,"norton":true,"now":true,"nowruz":true,"nowtv":true,"nra":true,"nrw":true,"ntt":true,"nyc":true,"obi":true,"observer":true,"off":true,"office":true,"okinawa":true,"olayan":true,"olayangroup":true,"oldnavy":true,"ollo":true,"omega":true,"one":true,"ong":true,"onl":true,"online":true,"onyourside":true,"ooo":true,"open":true,"oracle":true,"orange":true,"organic":true,"origins":true,"osaka":true,"otsuka":true,"ott":true,"ovh":true,"page":true,"panasonic":true,"panerai":true,"paris":true,"pars":true,"partners":true,"parts":true,"party":true,"passagens":true,"pay":true,"pccw":true,"pet":true,"pfizer":true,"pharmacy":true,"phd":true,"philips":true,"phone":true,"photo":true,"photography":true,"photos":true,"physio":true,"piaget":true,"pics":true,"pictet":true,"pictures":true,"pid":true,"pin":true,"ping":true,"pink":true,"pioneer":true,"pizza":true,"place":true,"play":true,"playstation":true,"plumbing":true,"plus":true,"pnc":true,"pohl":true,"poker":true,"politie":true,"porn":true,"pramerica":true,"praxi":true,"press":true,"prime":true,"prod":true,"productions":true,"prof":true,"progressive":true,"promo":true,"properties":true,"property":true,"protection":true,"pru":true,"prudential":true,"pub":true,"pwc":true,"qpon":true,"quebec":true,"quest":true,"qvc":true,"racing":true,"radio":true,"raid":true,"read":true,"realestate":true,"realtor":true,"realty":true,"recipes":true,"red":true,"redstone":true,"redumbrella":true,"rehab":true,"reise":true,"reisen":true,"reit":true,"reliance":true,"ren":true,"rent":true,"rentals":true,"repair":true,"report":true,"republican":true,"rest":true,"restaurant":true,"review":true,"reviews":true,"rexroth":true,"rich":true,"richardli":true,"ricoh":true,"rightathome":true,"ril":true,"rio":true,"rip":true,"rmit":true,"rocher":true,"rocks":true,"rodeo":true,"rogers":true,"room":true,"rsvp":true,"rugby":true,"ruhr":true,"run":true,"rwe":true,"ryukyu":true,"saarland":true,"safe":true,"safety":true,"sakura":true,"sale":true,"salon":true,"samsclub":true,"samsung":true,"sandvik":true,"sandvikcoromant":true,"sanofi":true,"sap":true,"sapo":true,"sarl":true,"sas":true,"save":true,"saxo":true,"sbi":true,"sbs":true,"sca":true,"scb":true,"schaeffler":true,"schmidt":true,"scholarships":true,"school":true,"schule":true,"schwarz":true,"science":true,"scjohnson":true,"scor":true,"scot":true,"search":true,"seat":true,"secure":true,"security":true,"seek":true,"select":true,"sener":true,"services":true,"ses":true,"seven":true,"sew":true,"sex":true,"sexy":true,"sfr":true,"shangrila":true,"sharp":true,"shaw":true,"shell":true,"shia":true,"shiksha":true,"shoes":true,"shop":true,"shopping":true,"shouji":true,"show":true,"showtime":true,"shriram":true,"silk":true,"sina":true,"singles":true,"site":true,"ski":true,"skin":true,"sky":true,"skype":true,"sling":true,"smart":true,"smile":true,"sncf":true,"soccer":true,"social":true,"softbank":true,"software":true,"sohu":true,"solar":true,"solutions":true,"song":true,"sony":true,"soy":true,"space":true,"spiegel":true,"spot":true,"spreadbetting":true,"srl":true,"srt":true,"stada":true,"staples":true,"star":true,"starhub":true,"statebank":true,"statefarm":true,"statoil":true,"stc":true,"stcgroup":true,"stockholm":true,"storage":true,"store":true,"stream":true,"studio":true,"study":true,"style":true,"sucks":true,"supplies":true,"supply":true,"support":true,"surf":true,"surgery":true,"suzuki":true,"swatch":true,"swiftcover":true,"swiss":true,"sydney":true,"symantec":true,"systems":true,"tab":true,"taipei":true,"talk":true,"taobao":true,"target":true,"tatamotors":true,"tatar":true,"tattoo":true,"tax":true,"taxi":true,"tci":true,"tdk":true,"team":true,"tech":true,"technology":true,"telecity":true,"telefonica":true,"temasek":true,"tennis":true,"teva":true,"thd":true,"theater":true,"theatre":true,"tiaa":true,"tickets":true,"tienda":true,"tiffany":true,"tips":true,"tires":true,"tirol":true,"tjmaxx":true,"tjx":true,"tkmaxx":true,"tmall":true,"today":true,"tokyo":true,"tools":true,"top":true,"toray":true,"toshiba":true,"total":true,"tours":true,"town":true,"toyota":true,"toys":true,"trade":true,"trading":true,"training":true,"travelchannel":true,"travelers":true,"travelersinsurance":true,"trust":true,"trv":true,"tube":true,"tui":true,"tunes":true,"tushu":true,"tvs":true,"ubank":true,"ubs":true,"uconnect":true,"unicom":true,"university":true,"uno":true,"uol":true,"ups":true,"vacations":true,"vana":true,"vanguard":true,"vegas":true,"ventures":true,"verisign":true,"versicherung":true,"vet":true,"viajes":true,"video":true,"vig":true,"viking":true,"villas":true,"vin":true,"vip":true,"virgin":true,"visa":true,"vision":true,"vista":true,"vistaprint":true,"viva":true,"vivo":true,"vlaanderen":true,"vodka":true,"volkswagen":true,"volvo":true,"vote":true,"voting":true,"voto":true,"voyage":true,"vuelos":true,"wales":true,"walmart":true,"walter":true,"wang":true,"wanggou":true,"warman":true,"watch":true,"watches":true,"weather":true,"weatherchannel":true,"webcam":true,"weber":true,"website":true,"wed":true,"wedding":true,"weibo":true,"weir":true,"whoswho":true,"wien":true,"wiki":true,"williamhill":true,"win":true,"windows":true,"wine":true,"winners":true,"wme":true,"wolterskluwer":true,"woodside":true,"work":true,"works":true,"world":true,"wow":true,"wtc":true,"wtf":true,"xbox":true,"xerox":true,"xfinity":true,"xihuan":true,"xin":true,"xn--11b4c3d":true,"xn--1ck2e1b":true,"xn--1qqw23a":true,"xn--30rr7y":true,"xn--3bst00m":true,"xn--3ds443g":true,"xn--3oq18vl8pn36a":true,"xn--3pxu8k":true,"xn--42c2d9a":true,"xn--45q11c":true,"xn--4gbrim":true,"xn--55qw42g":true,"xn--55qx5d":true,"xn--5su34j936bgsg":true,"xn--5tzm5g":true,"xn--6frz82g":true,"xn--6qq986b3xl":true,"xn--80adxhks":true,"xn--80aqecdr1a":true,"xn--80asehdb":true,"xn--80aswg":true,"xn--8y0a063a":true,"xn--9dbq2a":true,"xn--9et52u":true,"xn--9krt00a":true,"xn--b4w605ferd":true,"xn--bck1b9a5dre4c":true,"xn--c1avg":true,"xn--c2br7g":true,"xn--cck2b3b":true,"xn--cg4bki":true,"xn--czr694b":true,"xn--czrs0t":true,"xn--czru2d":true,"xn--d1acj3b":true,"xn--eckvdtc9d":true,"xn--efvy88h":true,"xn--estv75g":true,"xn--fct429k":true,"xn--fhbei":true,"xn--fiq228c5hs":true,"xn--fiq64b":true,"xn--fjq720a":true,"xn--flw351e":true,"xn--fzys8d69uvgm":true,"xn--g2xx48c":true,"xn--gckr3f0f":true,"xn--gk3at1e":true,"xn--hxt814e":true,"xn--i1b6b1a6a2e":true,"xn--imr513n":true,"xn--io0a7i":true,"xn--j1aef":true,"xn--jlq61u9w7b":true,"xn--jvr189m":true,"xn--kcrx77d1x4a":true,"xn--kpu716f":true,"xn--kput3i":true,"xn--mgba3a3ejt":true,"xn--mgba7c0bbn0a":true,"xn--mgbaakc7dvf":true,"xn--mgbab2bd":true,"xn--mgbb9fbpob":true,"xn--mgbca7dzdo":true,"xn--mgbi4ecexp":true,"xn--mgbt3dhd":true,"xn--mk1bu44c":true,"xn--mxtq1m":true,"xn--ngbc5azd":true,"xn--ngbe9e0a":true,"xn--ngbrx":true,"xn--nqv7f":true,"xn--nqv7fs00ema":true,"xn--nyqy26a":true,"xn--p1acf":true,"xn--pbt977c":true,"xn--pssy2u":true,"xn--q9jyb4c":true,"xn--qcka1pmc":true,"xn--rhqv96g":true,"xn--rovu88b":true,"xn--ses554g":true,"xn--t60b56a":true,"xn--tckwe":true,"xn--tiq49xqyj":true,"xn--unup4y":true,"xn--vermgensberater-ctb":true,"xn--vermgensberatung-pwb":true,"xn--vhquv":true,"xn--vuq861b":true,"xn--w4r85el8fhu5dnra":true,"xn--w4rs40l":true,"xn--xhq521b":true,"xn--zfr164b":true,"xperia":true,"xyz":true,"yachts":true,"yahoo":true,"yamaxun":true,"yandex":true,"yodobashi":true,"yoga":true,"yokohama":true,"you":true,"youtube":true,"yun":true,"zappos":true,"zara":true,"zero":true,"zip":true,"zippo":true,"zone":true,"zuerich":true,"cc.ua":true,"inf.ua":true,"ltd.ua":true,"1password.ca":true,"1password.com":true,"1password.eu":true,"beep.pl":true,"*.compute.estate":true,"*.alces.network":true,"alwaysdata.net":true,"cloudfront.net":true,"*.compute.amazonaws.com":true,"*.compute-1.amazonaws.com":true,"*.compute.amazonaws.com.cn":true,"us-east-1.amazonaws.com":true,"cn-north-1.eb.amazonaws.com.cn":true,"elasticbeanstalk.com":true,"ap-northeast-1.elasticbeanstalk.com":true,"ap-northeast-2.elasticbeanstalk.com":true,"ap-south-1.elasticbeanstalk.com":true,"ap-southeast-1.elasticbeanstalk.com":true,"ap-southeast-2.elasticbeanstalk.com":true,"ca-central-1.elasticbeanstalk.com":true,"eu-central-1.elasticbeanstalk.com":true,"eu-west-1.elasticbeanstalk.com":true,"eu-west-2.elasticbeanstalk.com":true,"eu-west-3.elasticbeanstalk.com":true,"sa-east-1.elasticbeanstalk.com":true,"us-east-1.elasticbeanstalk.com":true,"us-east-2.elasticbeanstalk.com":true,"us-gov-west-1.elasticbeanstalk.com":true,"us-west-1.elasticbeanstalk.com":true,"us-west-2.elasticbeanstalk.com":true,"*.elb.amazonaws.com":true,"*.elb.amazonaws.com.cn":true,"s3.amazonaws.com":true,"s3-ap-northeast-1.amazonaws.com":true,"s3-ap-northeast-2.amazonaws.com":true,"s3-ap-south-1.amazonaws.com":true,"s3-ap-southeast-1.amazonaws.com":true,"s3-ap-southeast-2.amazonaws.com":true,"s3-ca-central-1.amazonaws.com":true,"s3-eu-central-1.amazonaws.com":true,"s3-eu-west-1.amazonaws.com":true,"s3-eu-west-2.amazonaws.com":true,"s3-eu-west-3.amazonaws.com":true,"s3-external-1.amazonaws.com":true,"s3-fips-us-gov-west-1.amazonaws.com":true,"s3-sa-east-1.amazonaws.com":true,"s3-us-gov-west-1.amazonaws.com":true,"s3-us-east-2.amazonaws.com":true,"s3-us-west-1.amazonaws.com":true,"s3-us-west-2.amazonaws.com":true,"s3.ap-northeast-2.amazonaws.com":true,"s3.ap-south-1.amazonaws.com":true,"s3.cn-north-1.amazonaws.com.cn":true,"s3.ca-central-1.amazonaws.com":true,"s3.eu-central-1.amazonaws.com":true,"s3.eu-west-2.amazonaws.com":true,"s3.eu-west-3.amazonaws.com":true,"s3.us-east-2.amazonaws.com":true,"s3.dualstack.ap-northeast-1.amazonaws.com":true,"s3.dualstack.ap-northeast-2.amazonaws.com":true,"s3.dualstack.ap-south-1.amazonaws.com":true,"s3.dualstack.ap-southeast-1.amazonaws.com":true,"s3.dualstack.ap-southeast-2.amazonaws.com":true,"s3.dualstack.ca-central-1.amazonaws.com":true,"s3.dualstack.eu-central-1.amazonaws.com":true,"s3.dualstack.eu-west-1.amazonaws.com":true,"s3.dualstack.eu-west-2.amazonaws.com":true,"s3.dualstack.eu-west-3.amazonaws.com":true,"s3.dualstack.sa-east-1.amazonaws.com":true,"s3.dualstack.us-east-1.amazonaws.com":true,"s3.dualstack.us-east-2.amazonaws.com":true,"s3-website-us-east-1.amazonaws.com":true,"s3-website-us-west-1.amazonaws.com":true,"s3-website-us-west-2.amazonaws.com":true,"s3-website-ap-northeast-1.amazonaws.com":true,"s3-website-ap-southeast-1.amazonaws.com":true,"s3-website-ap-southeast-2.amazonaws.com":true,"s3-website-eu-west-1.amazonaws.com":true,"s3-website-sa-east-1.amazonaws.com":true,"s3-website.ap-northeast-2.amazonaws.com":true,"s3-website.ap-south-1.amazonaws.com":true,"s3-website.ca-central-1.amazonaws.com":true,"s3-website.eu-central-1.amazonaws.com":true,"s3-website.eu-west-2.amazonaws.com":true,"s3-website.eu-west-3.amazonaws.com":true,"s3-website.us-east-2.amazonaws.com":true,"t3l3p0rt.net":true,"tele.amune.org":true,"on-aptible.com":true,"user.party.eus":true,"pimienta.org":true,"poivron.org":true,"potager.org":true,"sweetpepper.org":true,"myasustor.com":true,"myfritz.net":true,"*.awdev.ca":true,"*.advisor.ws":true,"backplaneapp.io":true,"betainabox.com":true,"bnr.la":true,"boomla.net":true,"boxfuse.io":true,"square7.ch":true,"bplaced.com":true,"bplaced.de":true,"square7.de":true,"bplaced.net":true,"square7.net":true,"browsersafetymark.io":true,"mycd.eu":true,"ae.org":true,"ar.com":true,"br.com":true,"cn.com":true,"com.de":true,"com.se":true,"de.com":true,"eu.com":true,"gb.com":true,"gb.net":true,"hu.com":true,"hu.net":true,"jp.net":true,"jpn.com":true,"kr.com":true,"mex.com":true,"no.com":true,"qc.com":true,"ru.com":true,"sa.com":true,"se.com":true,"se.net":true,"uk.com":true,"uk.net":true,"us.com":true,"uy.com":true,"za.bz":true,"za.com":true,"africa.com":true,"gr.com":true,"in.net":true,"us.org":true,"co.com":true,"c.la":true,"certmgr.org":true,"xenapponazure.com":true,"virtueeldomein.nl":true,"c66.me":true,"cloud66.ws":true,"jdevcloud.com":true,"wpdevcloud.com":true,"cloudaccess.host":true,"freesite.host":true,"cloudaccess.net":true,"cloudcontrolled.com":true,"cloudcontrolapp.com":true,"co.ca":true,"co.cz":true,"c.cdn77.org":true,"cdn77-ssl.net":true,"r.cdn77.net":true,"rsc.cdn77.org":true,"ssl.origin.cdn77-secure.org":true,"cloudns.asia":true,"cloudns.biz":true,"cloudns.club":true,"cloudns.cc":true,"cloudns.eu":true,"cloudns.in":true,"cloudns.info":true,"cloudns.org":true,"cloudns.pro":true,"cloudns.pw":true,"cloudns.us":true,"co.nl":true,"co.no":true,"webhosting.be":true,"hosting-cluster.nl":true,"dyn.cosidns.de":true,"dynamisches-dns.de":true,"dnsupdater.de":true,"internet-dns.de":true,"l-o-g-i-n.de":true,"dynamic-dns.info":true,"feste-ip.net":true,"knx-server.net":true,"static-access.net":true,"realm.cz":true,"*.cryptonomic.net":true,"cupcake.is":true,"cyon.link":true,"cyon.site":true,"daplie.me":true,"localhost.daplie.me":true,"biz.dk":true,"co.dk":true,"firm.dk":true,"reg.dk":true,"store.dk":true,"debian.net":true,"dedyn.io":true,"dnshome.de":true,"drayddns.com":true,"dreamhosters.com":true,"mydrobo.com":true,"drud.io":true,"drud.us":true,"duckdns.org":true,"dy.fi":true,"tunk.org":true,"dyndns-at-home.com":true,"dyndns-at-work.com":true,"dyndns-blog.com":true,"dyndns-free.com":true,"dyndns-home.com":true,"dyndns-ip.com":true,"dyndns-mail.com":true,"dyndns-office.com":true,"dyndns-pics.com":true,"dyndns-remote.com":true,"dyndns-server.com":true,"dyndns-web.com":true,"dyndns-wiki.com":true,"dyndns-work.com":true,"dyndns.biz":true,"dyndns.info":true,"dyndns.org":true,"dyndns.tv":true,"at-band-camp.net":true,"ath.cx":true,"barrel-of-knowledge.info":true,"barrell-of-knowledge.info":true,"better-than.tv":true,"blogdns.com":true,"blogdns.net":true,"blogdns.org":true,"blogsite.org":true,"boldlygoingnowhere.org":true,"broke-it.net":true,"buyshouses.net":true,"cechire.com":true,"dnsalias.com":true,"dnsalias.net":true,"dnsalias.org":true,"dnsdojo.com":true,"dnsdojo.net":true,"dnsdojo.org":true,"does-it.net":true,"doesntexist.com":true,"doesntexist.org":true,"dontexist.com":true,"dontexist.net":true,"dontexist.org":true,"doomdns.com":true,"doomdns.org":true,"dvrdns.org":true,"dyn-o-saur.com":true,"dynalias.com":true,"dynalias.net":true,"dynalias.org":true,"dynathome.net":true,"dyndns.ws":true,"endofinternet.net":true,"endofinternet.org":true,"endoftheinternet.org":true,"est-a-la-maison.com":true,"est-a-la-masion.com":true,"est-le-patron.com":true,"est-mon-blogueur.com":true,"for-better.biz":true,"for-more.biz":true,"for-our.info":true,"for-some.biz":true,"for-the.biz":true,"forgot.her.name":true,"forgot.his.name":true,"from-ak.com":true,"from-al.com":true,"from-ar.com":true,"from-az.net":true,"from-ca.com":true,"from-co.net":true,"from-ct.com":true,"from-dc.com":true,"from-de.com":true,"from-fl.com":true,"from-ga.com":true,"from-hi.com":true,"from-ia.com":true,"from-id.com":true,"from-il.com":true,"from-in.com":true,"from-ks.com":true,"from-ky.com":true,"from-la.net":true,"from-ma.com":true,"from-md.com":true,"from-me.org":true,"from-mi.com":true,"from-mn.com":true,"from-mo.com":true,"from-ms.com":true,"from-mt.com":true,"from-nc.com":true,"from-nd.com":true,"from-ne.com":true,"from-nh.com":true,"from-nj.com":true,"from-nm.com":true,"from-nv.com":true,"from-ny.net":true,"from-oh.com":true,"from-ok.com":true,"from-or.com":true,"from-pa.com":true,"from-pr.com":true,"from-ri.com":true,"from-sc.com":true,"from-sd.com":true,"from-tn.com":true,"from-tx.com":true,"from-ut.com":true,"from-va.com":true,"from-vt.com":true,"from-wa.com":true,"from-wi.com":true,"from-wv.com":true,"from-wy.com":true,"ftpaccess.cc":true,"fuettertdasnetz.de":true,"game-host.org":true,"game-server.cc":true,"getmyip.com":true,"gets-it.net":true,"go.dyndns.org":true,"gotdns.com":true,"gotdns.org":true,"groks-the.info":true,"groks-this.info":true,"ham-radio-op.net":true,"here-for-more.info":true,"hobby-site.com":true,"hobby-site.org":true,"home.dyndns.org":true,"homedns.org":true,"homeftp.net":true,"homeftp.org":true,"homeip.net":true,"homelinux.com":true,"homelinux.net":true,"homelinux.org":true,"homeunix.com":true,"homeunix.net":true,"homeunix.org":true,"iamallama.com":true,"in-the-band.net":true,"is-a-anarchist.com":true,"is-a-blogger.com":true,"is-a-bookkeeper.com":true,"is-a-bruinsfan.org":true,"is-a-bulls-fan.com":true,"is-a-candidate.org":true,"is-a-caterer.com":true,"is-a-celticsfan.org":true,"is-a-chef.com":true,"is-a-chef.net":true,"is-a-chef.org":true,"is-a-conservative.com":true,"is-a-cpa.com":true,"is-a-cubicle-slave.com":true,"is-a-democrat.com":true,"is-a-designer.com":true,"is-a-doctor.com":true,"is-a-financialadvisor.com":true,"is-a-geek.com":true,"is-a-geek.net":true,"is-a-geek.org":true,"is-a-green.com":true,"is-a-guru.com":true,"is-a-hard-worker.com":true,"is-a-hunter.com":true,"is-a-knight.org":true,"is-a-landscaper.com":true,"is-a-lawyer.com":true,"is-a-liberal.com":true,"is-a-libertarian.com":true,"is-a-linux-user.org":true,"is-a-llama.com":true,"is-a-musician.com":true,"is-a-nascarfan.com":true,"is-a-nurse.com":true,"is-a-painter.com":true,"is-a-patsfan.org":true,"is-a-personaltrainer.com":true,"is-a-photographer.com":true,"is-a-player.com":true,"is-a-republican.com":true,"is-a-rockstar.com":true,"is-a-socialist.com":true,"is-a-soxfan.org":true,"is-a-student.com":true,"is-a-teacher.com":true,"is-a-techie.com":true,"is-a-therapist.com":true,"is-an-accountant.com":true,"is-an-actor.com":true,"is-an-actress.com":true,"is-an-anarchist.com":true,"is-an-artist.com":true,"is-an-engineer.com":true,"is-an-entertainer.com":true,"is-by.us":true,"is-certified.com":true,"is-found.org":true,"is-gone.com":true,"is-into-anime.com":true,"is-into-cars.com":true,"is-into-cartoons.com":true,"is-into-games.com":true,"is-leet.com":true,"is-lost.org":true,"is-not-certified.com":true,"is-saved.org":true,"is-slick.com":true,"is-uberleet.com":true,"is-very-bad.org":true,"is-very-evil.org":true,"is-very-good.org":true,"is-very-nice.org":true,"is-very-sweet.org":true,"is-with-theband.com":true,"isa-geek.com":true,"isa-geek.net":true,"isa-geek.org":true,"isa-hockeynut.com":true,"issmarterthanyou.com":true,"isteingeek.de":true,"istmein.de":true,"kicks-ass.net":true,"kicks-ass.org":true,"knowsitall.info":true,"land-4-sale.us":true,"lebtimnetz.de":true,"leitungsen.de":true,"likes-pie.com":true,"likescandy.com":true,"merseine.nu":true,"mine.nu":true,"misconfused.org":true,"mypets.ws":true,"myphotos.cc":true,"neat-url.com":true,"office-on-the.net":true,"on-the-web.tv":true,"podzone.net":true,"podzone.org":true,"readmyblog.org":true,"saves-the-whales.com":true,"scrapper-site.net":true,"scrapping.cc":true,"selfip.biz":true,"selfip.com":true,"selfip.info":true,"selfip.net":true,"selfip.org":true,"sells-for-less.com":true,"sells-for-u.com":true,"sells-it.net":true,"sellsyourhome.org":true,"servebbs.com":true,"servebbs.net":true,"servebbs.org":true,"serveftp.net":true,"serveftp.org":true,"servegame.org":true,"shacknet.nu":true,"simple-url.com":true,"space-to-rent.com":true,"stuff-4-sale.org":true,"stuff-4-sale.us":true,"teaches-yoga.com":true,"thruhere.net":true,"traeumtgerade.de":true,"webhop.biz":true,"webhop.info":true,"webhop.net":true,"webhop.org":true,"worse-than.tv":true,"writesthisblog.com":true,"ddnss.de":true,"dyn.ddnss.de":true,"dyndns.ddnss.de":true,"dyndns1.de":true,"dyn-ip24.de":true,"home-webserver.de":true,"dyn.home-webserver.de":true,"myhome-server.de":true,"ddnss.org":true,"definima.net":true,"definima.io":true,"ddnsfree.com":true,"ddnsgeek.com":true,"giize.com":true,"gleeze.com":true,"kozow.com":true,"loseyourip.com":true,"ooguy.com":true,"theworkpc.com":true,"casacam.net":true,"dynu.net":true,"accesscam.org":true,"camdvr.org":true,"freeddns.org":true,"mywire.org":true,"webredirect.org":true,"myddns.rocks":true,"blogsite.xyz":true,"dynv6.net":true,"e4.cz":true,"mytuleap.com":true,"enonic.io":true,"customer.enonic.io":true,"eu.org":true,"al.eu.org":true,"asso.eu.org":true,"at.eu.org":true,"au.eu.org":true,"be.eu.org":true,"bg.eu.org":true,"ca.eu.org":true,"cd.eu.org":true,"ch.eu.org":true,"cn.eu.org":true,"cy.eu.org":true,"cz.eu.org":true,"de.eu.org":true,"dk.eu.org":true,"edu.eu.org":true,"ee.eu.org":true,"es.eu.org":true,"fi.eu.org":true,"fr.eu.org":true,"gr.eu.org":true,"hr.eu.org":true,"hu.eu.org":true,"ie.eu.org":true,"il.eu.org":true,"in.eu.org":true,"int.eu.org":true,"is.eu.org":true,"it.eu.org":true,"jp.eu.org":true,"kr.eu.org":true,"lt.eu.org":true,"lu.eu.org":true,"lv.eu.org":true,"mc.eu.org":true,"me.eu.org":true,"mk.eu.org":true,"mt.eu.org":true,"my.eu.org":true,"net.eu.org":true,"ng.eu.org":true,"nl.eu.org":true,"no.eu.org":true,"nz.eu.org":true,"paris.eu.org":true,"pl.eu.org":true,"pt.eu.org":true,"q-a.eu.org":true,"ro.eu.org":true,"ru.eu.org":true,"se.eu.org":true,"si.eu.org":true,"sk.eu.org":true,"tr.eu.org":true,"uk.eu.org":true,"us.eu.org":true,"eu-1.evennode.com":true,"eu-2.evennode.com":true,"eu-3.evennode.com":true,"eu-4.evennode.com":true,"us-1.evennode.com":true,"us-2.evennode.com":true,"us-3.evennode.com":true,"us-4.evennode.com":true,"twmail.cc":true,"twmail.net":true,"twmail.org":true,"mymailer.com.tw":true,"url.tw":true,"apps.fbsbx.com":true,"ru.net":true,"adygeya.ru":true,"bashkiria.ru":true,"bir.ru":true,"cbg.ru":true,"com.ru":true,"dagestan.ru":true,"grozny.ru":true,"kalmykia.ru":true,"kustanai.ru":true,"marine.ru":true,"mordovia.ru":true,"msk.ru":true,"mytis.ru":true,"nalchik.ru":true,"nov.ru":true,"pyatigorsk.ru":true,"spb.ru":true,"vladikavkaz.ru":true,"vladimir.ru":true,"abkhazia.su":true,"adygeya.su":true,"aktyubinsk.su":true,"arkhangelsk.su":true,"armenia.su":true,"ashgabad.su":true,"azerbaijan.su":true,"balashov.su":true,"bashkiria.su":true,"bryansk.su":true,"bukhara.su":true,"chimkent.su":true,"dagestan.su":true,"east-kazakhstan.su":true,"exnet.su":true,"georgia.su":true,"grozny.su":true,"ivanovo.su":true,"jambyl.su":true,"kalmykia.su":true,"kaluga.su":true,"karacol.su":true,"karaganda.su":true,"karelia.su":true,"khakassia.su":true,"krasnodar.su":true,"kurgan.su":true,"kustanai.su":true,"lenug.su":true,"mangyshlak.su":true,"mordovia.su":true,"msk.su":true,"murmansk.su":true,"nalchik.su":true,"navoi.su":true,"north-kazakhstan.su":true,"nov.su":true,"obninsk.su":true,"penza.su":true,"pokrovsk.su":true,"sochi.su":true,"spb.su":true,"tashkent.su":true,"termez.su":true,"togliatti.su":true,"troitsk.su":true,"tselinograd.su":true,"tula.su":true,"tuva.su":true,"vladikavkaz.su":true,"vladimir.su":true,"vologda.su":true,"channelsdvr.net":true,"fastlylb.net":true,"map.fastlylb.net":true,"freetls.fastly.net":true,"map.fastly.net":true,"a.prod.fastly.net":true,"global.prod.fastly.net":true,"a.ssl.fastly.net":true,"b.ssl.fastly.net":true,"global.ssl.fastly.net":true,"fhapp.xyz":true,"fedorainfracloud.org":true,"fedorapeople.org":true,"cloud.fedoraproject.org":true,"app.os.fedoraproject.org":true,"app.os.stg.fedoraproject.org":true,"filegear.me":true,"firebaseapp.com":true,"flynnhub.com":true,"flynnhosting.net":true,"freebox-os.com":true,"freeboxos.com":true,"fbx-os.fr":true,"fbxos.fr":true,"freebox-os.fr":true,"freeboxos.fr":true,"*.futurecms.at":true,"futurehosting.at":true,"futuremailing.at":true,"*.ex.ortsinfo.at":true,"*.kunden.ortsinfo.at":true,"*.statics.cloud":true,"service.gov.uk":true,"github.io":true,"githubusercontent.com":true,"gitlab.io":true,"homeoffice.gov.uk":true,"ro.im":true,"shop.ro":true,"goip.de":true,"*.0emm.com":true,"appspot.com":true,"blogspot.ae":true,"blogspot.al":true,"blogspot.am":true,"blogspot.ba":true,"blogspot.be":true,"blogspot.bg":true,"blogspot.bj":true,"blogspot.ca":true,"blogspot.cf":true,"blogspot.ch":true,"blogspot.cl":true,"blogspot.co.at":true,"blogspot.co.id":true,"blogspot.co.il":true,"blogspot.co.ke":true,"blogspot.co.nz":true,"blogspot.co.uk":true,"blogspot.co.za":true,"blogspot.com":true,"blogspot.com.ar":true,"blogspot.com.au":true,"blogspot.com.br":true,"blogspot.com.by":true,"blogspot.com.co":true,"blogspot.com.cy":true,"blogspot.com.ee":true,"blogspot.com.eg":true,"blogspot.com.es":true,"blogspot.com.mt":true,"blogspot.com.ng":true,"blogspot.com.tr":true,"blogspot.com.uy":true,"blogspot.cv":true,"blogspot.cz":true,"blogspot.de":true,"blogspot.dk":true,"blogspot.fi":true,"blogspot.fr":true,"blogspot.gr":true,"blogspot.hk":true,"blogspot.hr":true,"blogspot.hu":true,"blogspot.ie":true,"blogspot.in":true,"blogspot.is":true,"blogspot.it":true,"blogspot.jp":true,"blogspot.kr":true,"blogspot.li":true,"blogspot.lt":true,"blogspot.lu":true,"blogspot.md":true,"blogspot.mk":true,"blogspot.mr":true,"blogspot.mx":true,"blogspot.my":true,"blogspot.nl":true,"blogspot.no":true,"blogspot.pe":true,"blogspot.pt":true,"blogspot.qa":true,"blogspot.re":true,"blogspot.ro":true,"blogspot.rs":true,"blogspot.ru":true,"blogspot.se":true,"blogspot.sg":true,"blogspot.si":true,"blogspot.sk":true,"blogspot.sn":true,"blogspot.td":true,"blogspot.tw":true,"blogspot.ug":true,"blogspot.vn":true,"cloudfunctions.net":true,"cloud.goog":true,"codespot.com":true,"googleapis.com":true,"googlecode.com":true,"pagespeedmobilizer.com":true,"publishproxy.com":true,"withgoogle.com":true,"withyoutube.com":true,"hashbang.sh":true,"hasura-app.io":true,"hepforge.org":true,"herokuapp.com":true,"herokussl.com":true,"moonscale.net":true,"iki.fi":true,"biz.at":true,"info.at":true,"info.cx":true,"ac.leg.br":true,"al.leg.br":true,"am.leg.br":true,"ap.leg.br":true,"ba.leg.br":true,"ce.leg.br":true,"df.leg.br":true,"es.leg.br":true,"go.leg.br":true,"ma.leg.br":true,"mg.leg.br":true,"ms.leg.br":true,"mt.leg.br":true,"pa.leg.br":true,"pb.leg.br":true,"pe.leg.br":true,"pi.leg.br":true,"pr.leg.br":true,"rj.leg.br":true,"rn.leg.br":true,"ro.leg.br":true,"rr.leg.br":true,"rs.leg.br":true,"sc.leg.br":true,"se.leg.br":true,"sp.leg.br":true,"to.leg.br":true,"pixolino.com":true,"ipifony.net":true,"*.triton.zone":true,"*.cns.joyent.com":true,"js.org":true,"keymachine.de":true,"knightpoint.systems":true,"co.krd":true,"edu.krd":true,"git-repos.de":true,"lcube-server.de":true,"svn-repos.de":true,"linkyard.cloud":true,"linkyard-cloud.ch":true,"we.bs":true,"barsy.bg":true,"barsyonline.com":true,"barsy.de":true,"barsy.eu":true,"barsy.in":true,"barsy.net":true,"barsy.online":true,"barsy.support":true,"*.magentosite.cloud":true,"hb.cldmail.ru":true,"cloud.metacentrum.cz":true,"custom.metacentrum.cz":true,"meteorapp.com":true,"eu.meteorapp.com":true,"co.pl":true,"azurewebsites.net":true,"azure-mobile.net":true,"cloudapp.net":true,"mozilla-iot.org":true,"bmoattachments.org":true,"net.ru":true,"org.ru":true,"pp.ru":true,"bitballoon.com":true,"netlify.com":true,"4u.com":true,"ngrok.io":true,"nh-serv.co.uk":true,"nfshost.com":true,"nsupdate.info":true,"nerdpol.ovh":true,"blogsyte.com":true,"brasilia.me":true,"cable-modem.org":true,"ciscofreak.com":true,"collegefan.org":true,"couchpotatofries.org":true,"damnserver.com":true,"ddns.me":true,"ditchyourip.com":true,"dnsfor.me":true,"dnsiskinky.com":true,"dvrcam.info":true,"dynns.com":true,"eating-organic.net":true,"fantasyleague.cc":true,"geekgalaxy.com":true,"golffan.us":true,"health-carereform.com":true,"homesecuritymac.com":true,"homesecuritypc.com":true,"hopto.me":true,"ilovecollege.info":true,"loginto.me":true,"mlbfan.org":true,"mmafan.biz":true,"myactivedirectory.com":true,"mydissent.net":true,"myeffect.net":true,"mymediapc.net":true,"mypsx.net":true,"mysecuritycamera.com":true,"mysecuritycamera.net":true,"mysecuritycamera.org":true,"net-freaks.com":true,"nflfan.org":true,"nhlfan.net":true,"no-ip.ca":true,"no-ip.co.uk":true,"no-ip.net":true,"noip.us":true,"onthewifi.com":true,"pgafan.net":true,"point2this.com":true,"pointto.us":true,"privatizehealthinsurance.net":true,"quicksytes.com":true,"read-books.org":true,"securitytactics.com":true,"serveexchange.com":true,"servehumour.com":true,"servep2p.com":true,"servesarcasm.com":true,"stufftoread.com":true,"ufcfan.org":true,"unusualperson.com":true,"workisboring.com":true,"3utilities.com":true,"bounceme.net":true,"ddns.net":true,"ddnsking.com":true,"gotdns.ch":true,"hopto.org":true,"myftp.biz":true,"myftp.org":true,"myvnc.com":true,"no-ip.biz":true,"no-ip.info":true,"no-ip.org":true,"noip.me":true,"redirectme.net":true,"servebeer.com":true,"serveblog.net":true,"servecounterstrike.com":true,"serveftp.com":true,"servegame.com":true,"servehalflife.com":true,"servehttp.com":true,"serveirc.com":true,"serveminecraft.net":true,"servemp3.com":true,"servepics.com":true,"servequake.com":true,"sytes.net":true,"webhop.me":true,"zapto.org":true,"stage.nodeart.io":true,"nodum.co":true,"nodum.io":true,"nyc.mn":true,"nom.ae":true,"nom.ai":true,"nom.al":true,"nym.by":true,"nym.bz":true,"nom.cl":true,"nom.gd":true,"nom.gl":true,"nym.gr":true,"nom.gt":true,"nom.hn":true,"nom.im":true,"nym.kz":true,"nym.la":true,"nom.li":true,"nym.li":true,"nym.lt":true,"nym.lu":true,"nym.me":true,"nom.mk":true,"nym.mx":true,"nom.nu":true,"nym.nz":true,"nym.pe":true,"nym.pt":true,"nom.pw":true,"nom.qa":true,"nom.rs":true,"nom.si":true,"nym.sk":true,"nym.su":true,"nym.sx":true,"nym.tw":true,"nom.ug":true,"nom.uy":true,"nom.vc":true,"nom.vg":true,"cya.gg":true,"nid.io":true,"opencraft.hosting":true,"operaunite.com":true,"outsystemscloud.com":true,"ownprovider.com":true,"oy.lc":true,"pgfog.com":true,"pagefrontapp.com":true,"art.pl":true,"gliwice.pl":true,"krakow.pl":true,"poznan.pl":true,"wroc.pl":true,"zakopane.pl":true,"pantheonsite.io":true,"gotpantheon.com":true,"mypep.link":true,"on-web.fr":true,"*.platform.sh":true,"*.platformsh.site":true,"xen.prgmr.com":true,"priv.at":true,"protonet.io":true,"chirurgiens-dentistes-en-france.fr":true,"byen.site":true,"qa2.com":true,"dev-myqnapcloud.com":true,"alpha-myqnapcloud.com":true,"myqnapcloud.com":true,"*.quipelements.com":true,"vapor.cloud":true,"vaporcloud.io":true,"rackmaze.com":true,"rackmaze.net":true,"rhcloud.com":true,"resindevice.io":true,"devices.resinstaging.io":true,"hzc.io":true,"wellbeingzone.eu":true,"ptplus.fit":true,"wellbeingzone.co.uk":true,"sandcats.io":true,"logoip.de":true,"logoip.com":true,"schokokeks.net":true,"scrysec.com":true,"firewall-gateway.com":true,"firewall-gateway.de":true,"my-gateway.de":true,"my-router.de":true,"spdns.de":true,"spdns.eu":true,"firewall-gateway.net":true,"my-firewall.org":true,"myfirewall.org":true,"spdns.org":true,"*.s5y.io":true,"*.sensiosite.cloud":true,"biz.ua":true,"co.ua":true,"pp.ua":true,"shiftedit.io":true,"myshopblocks.com":true,"1kapp.com":true,"appchizi.com":true,"applinzi.com":true,"sinaapp.com":true,"vipsinaapp.com":true,"bounty-full.com":true,"alpha.bounty-full.com":true,"beta.bounty-full.com":true,"static.land":true,"dev.static.land":true,"sites.static.land":true,"apps.lair.io":true,"*.stolos.io":true,"spacekit.io":true,"stackspace.space":true,"storj.farm":true,"temp-dns.com":true,"diskstation.me":true,"dscloud.biz":true,"dscloud.me":true,"dscloud.mobi":true,"dsmynas.com":true,"dsmynas.net":true,"dsmynas.org":true,"familyds.com":true,"familyds.net":true,"familyds.org":true,"i234.me":true,"myds.me":true,"synology.me":true,"vpnplus.to":true,"taifun-dns.de":true,"gda.pl":true,"gdansk.pl":true,"gdynia.pl":true,"med.pl":true,"sopot.pl":true,"cust.dev.thingdust.io":true,"cust.disrec.thingdust.io":true,"cust.prod.thingdust.io":true,"cust.testing.thingdust.io":true,"bloxcms.com":true,"townnews-staging.com":true,"12hp.at":true,"2ix.at":true,"4lima.at":true,"lima-city.at":true,"12hp.ch":true,"2ix.ch":true,"4lima.ch":true,"lima-city.ch":true,"trafficplex.cloud":true,"de.cool":true,"12hp.de":true,"2ix.de":true,"4lima.de":true,"lima-city.de":true,"1337.pictures":true,"clan.rip":true,"lima-city.rocks":true,"webspace.rocks":true,"lima.zone":true,"*.transurl.be":true,"*.transurl.eu":true,"*.transurl.nl":true,"tuxfamily.org":true,"dd-dns.de":true,"diskstation.eu":true,"diskstation.org":true,"dray-dns.de":true,"draydns.de":true,"dyn-vpn.de":true,"dynvpn.de":true,"mein-vigor.de":true,"my-vigor.de":true,"my-wan.de":true,"syno-ds.de":true,"synology-diskstation.de":true,"synology-ds.de":true,"uber.space":true,"hk.com":true,"hk.org":true,"ltd.hk":true,"inc.hk":true,"lib.de.us":true,"2038.io":true,"router.management":true,"v-info.info":true,"wedeploy.io":true,"wedeploy.me":true,"wedeploy.sh":true,"remotewd.com":true,"wmflabs.org":true,"cistron.nl":true,"demon.nl":true,"xs4all.space":true,"official.academy":true,"yolasite.com":true,"ybo.faith":true,"yombo.me":true,"homelink.one":true,"ybo.party":true,"ybo.review":true,"ybo.science":true,"ybo.trade":true,"za.net":true,"za.org":true,"now.sh":true});

  // END of automatically generated file
  });
  var pubsuffix_1 = pubsuffix.getPublicSuffix;
  var pubsuffix_2 = pubsuffix.index;

  /*!
   * Copyright (c) 2015, Salesforce.com, Inc.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice,
   * this list of conditions and the following disclaimer.
   *
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   * this list of conditions and the following disclaimer in the documentation
   * and/or other materials provided with the distribution.
   *
   * 3. Neither the name of Salesforce.com nor the names of its contributors may
   * be used to endorse or promote products derived from this software without
   * specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
   * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   * POSSIBILITY OF SUCH DAMAGE.
   */
  /*jshint unused:false */

  function Store$1() {
  }
  var Store_1 = Store$1;

  // Stores may be synchronous, but are still required to use a
  // Continuation-Passing Style API.  The CookieJar itself will expose a "*Sync"
  // API that converts from synchronous-callbacks to imperative style.
  Store$1.prototype.synchronous = false;

  Store$1.prototype.findCookie = function(domain, path, key, cb) {
    throw new Error('findCookie is not implemented');
  };

  Store$1.prototype.findCookies = function(domain, path, cb) {
    throw new Error('findCookies is not implemented');
  };

  Store$1.prototype.putCookie = function(cookie, cb) {
    throw new Error('putCookie is not implemented');
  };

  Store$1.prototype.updateCookie = function(oldCookie, newCookie, cb) {
    // recommended default implementation:
    // return this.putCookie(newCookie, cb);
    throw new Error('updateCookie is not implemented');
  };

  Store$1.prototype.removeCookie = function(domain, path, key, cb) {
    throw new Error('removeCookie is not implemented');
  };

  Store$1.prototype.removeCookies = function(domain, path, cb) {
    throw new Error('removeCookies is not implemented');
  };

  Store$1.prototype.getAllCookies = function(cb) {
    throw new Error('getAllCookies is not implemented (therefore jar cannot be serialized)');
  };

  var store = {
  	Store: Store_1
  };

  // Gives the permutation of all possible domainMatch()es of a given domain. The
  // array is in shortest-to-longest order.  Handy for indexing.
  function permuteDomain (domain) {
    var pubSuf = pubsuffix.getPublicSuffix(domain);
    if (!pubSuf) {
      return null;
    }
    if (pubSuf == domain) {
      return [domain];
    }

    var prefix = domain.slice(0, -(pubSuf.length + 1)); // ".example.com"
    var parts = prefix.split('.').reverse();
    var cur = pubSuf;
    var permutations = [cur];
    while (parts.length) {
      cur = parts.shift() + '.' + cur;
      permutations.push(cur);
    }
    return permutations;
  }

  var permuteDomain_2 = permuteDomain;

  var permuteDomain_1 = {
  	permuteDomain: permuteDomain_2
  };

  /*!
   * Copyright (c) 2015, Salesforce.com, Inc.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice,
   * this list of conditions and the following disclaimer.
   *
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   * this list of conditions and the following disclaimer in the documentation
   * and/or other materials provided with the distribution.
   *
   * 3. Neither the name of Salesforce.com nor the names of its contributors may
   * be used to endorse or promote products derived from this software without
   * specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
   * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   * POSSIBILITY OF SUCH DAMAGE.
   */
  /*
   * "A request-path path-matches a given cookie-path if at least one of the
   * following conditions holds:"
   */
  function pathMatch (reqPath, cookiePath) {
    // "o  The cookie-path and the request-path are identical."
    if (cookiePath === reqPath) {
      return true;
    }

    var idx = reqPath.indexOf(cookiePath);
    if (idx === 0) {
      // "o  The cookie-path is a prefix of the request-path, and the last
      // character of the cookie-path is %x2F ("/")."
      if (cookiePath.substr(-1) === "/") {
        return true;
      }

      // " o  The cookie-path is a prefix of the request-path, and the first
      // character of the request-path that is not included in the cookie- path
      // is a %x2F ("/") character."
      if (reqPath.substr(cookiePath.length, 1) === "/") {
        return true;
      }
    }

    return false;
  }

  var pathMatch_2 = pathMatch;

  var pathMatch_1 = {
  	pathMatch: pathMatch_2
  };

  var util$2 = ( util$1 && util ) || util$1;

  var Store$2 = store.Store;
  var permuteDomain$1 = permuteDomain_1.permuteDomain;
  var pathMatch$1 = pathMatch_1.pathMatch;


  function MemoryCookieStore() {
    Store$2.call(this);
    this.idx = {};
  }
  util$2.inherits(MemoryCookieStore, Store$2);
  var MemoryCookieStore_1 = MemoryCookieStore;
  MemoryCookieStore.prototype.idx = null;

  // Since it's just a struct in RAM, this Store is synchronous
  MemoryCookieStore.prototype.synchronous = true;

  // force a default depth:
  MemoryCookieStore.prototype.inspect = function() {
    return "{ idx: "+util$2.inspect(this.idx, false, 2)+' }';
  };

  MemoryCookieStore.prototype.findCookie = function(domain, path, key, cb) {
    if (!this.idx[domain]) {
      return cb(null,undefined);
    }
    if (!this.idx[domain][path]) {
      return cb(null,undefined);
    }
    return cb(null,this.idx[domain][path][key]||null);
  };

  MemoryCookieStore.prototype.findCookies = function(domain, path, cb) {
    var results = [];
    if (!domain) {
      return cb(null,[]);
    }

    var pathMatcher;
    if (!path) {
      // null means "all paths"
      pathMatcher = function matchAll(domainIndex) {
        for (var curPath in domainIndex) {
          var pathIndex = domainIndex[curPath];
          for (var key in pathIndex) {
            results.push(pathIndex[key]);
          }
        }
      };

    } else {
      pathMatcher = function matchRFC(domainIndex) {
         //NOTE: we should use path-match algorithm from S5.1.4 here
         //(see : https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/canonical_cookie.cc#L299)
         Object.keys(domainIndex).forEach(function (cookiePath) {
           if (pathMatch$1(path, cookiePath)) {
             var pathIndex = domainIndex[cookiePath];

             for (var key in pathIndex) {
               results.push(pathIndex[key]);
             }
           }
         });
       };
    }

    var domains = permuteDomain$1(domain) || [domain];
    var idx = this.idx;
    domains.forEach(function(curDomain) {
      var domainIndex = idx[curDomain];
      if (!domainIndex) {
        return;
      }
      pathMatcher(domainIndex);
    });

    cb(null,results);
  };

  MemoryCookieStore.prototype.putCookie = function(cookie, cb) {
    if (!this.idx[cookie.domain]) {
      this.idx[cookie.domain] = {};
    }
    if (!this.idx[cookie.domain][cookie.path]) {
      this.idx[cookie.domain][cookie.path] = {};
    }
    this.idx[cookie.domain][cookie.path][cookie.key] = cookie;
    cb(null);
  };

  MemoryCookieStore.prototype.updateCookie = function(oldCookie, newCookie, cb) {
    // updateCookie() may avoid updating cookies that are identical.  For example,
    // lastAccessed may not be important to some stores and an equality
    // comparison could exclude that field.
    this.putCookie(newCookie,cb);
  };

  MemoryCookieStore.prototype.removeCookie = function(domain, path, key, cb) {
    if (this.idx[domain] && this.idx[domain][path] && this.idx[domain][path][key]) {
      delete this.idx[domain][path][key];
    }
    cb(null);
  };

  MemoryCookieStore.prototype.removeCookies = function(domain, path, cb) {
    if (this.idx[domain]) {
      if (path) {
        delete this.idx[domain][path];
      } else {
        delete this.idx[domain];
      }
    }
    return cb(null);
  };

  MemoryCookieStore.prototype.getAllCookies = function(cb) {
    var cookies = [];
    var idx = this.idx;

    var domains = Object.keys(idx);
    domains.forEach(function(domain) {
      var paths = Object.keys(idx[domain]);
      paths.forEach(function(path) {
        var keys = Object.keys(idx[domain][path]);
        keys.forEach(function(key) {
          if (key !== null) {
            cookies.push(idx[domain][path][key]);
          }
        });
      });
    });

    // Sort by creationIndex so deserializing retains the creation order.
    // When implementing your own store, this SHOULD retain the order too
    cookies.sort(function(a,b) {
      return (a.creationIndex||0) - (b.creationIndex||0);
    });

    cb(null, cookies);
  };

  var memstore = {
  	MemoryCookieStore: MemoryCookieStore_1
  };

  var _from = "tough-cookie@~2.3.3";
  var _id = "tough-cookie@2.3.4";
  var _inBundle = false;
  var _integrity = "sha512-TZ6TTfI5NtZnuyy/Kecv+CnoROnyXn2DN97LontgQpCwsX2XyLYCC0ENhYkehSOwAp8rTQKc/NUIF7BkQ5rKLA==";
  var _location = "/tough-cookie";
  var _phantomChildren = {};
  var _requested = {"type":"range","registry":true,"raw":"tough-cookie@~2.3.3","name":"tough-cookie","escapedName":"tough-cookie","rawSpec":"~2.3.3","saveSpec":null,"fetchSpec":"~2.3.3"};
  var _requiredBy = ["/codecov/request","/jsdom","/less/request","/node-sass/request","/request","/request-promise","/request-promise-native"];
  var _resolved = "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.3.4.tgz";
  var _shasum = "ec60cee38ac675063ffc97a5c18970578ee83655";
  var _spec = "tough-cookie@~2.3.3";
  var _where = "/Volumes/Fr-01-Work/Sites/camomile-ui/node_modules/request";
  var author = {"name":"Jeremy Stashewsky","email":"jstashewsky@salesforce.com"};
  var bugs = {"url":"https://github.com/salesforce/tough-cookie/issues"};
  var bundleDependencies = false;
  var contributors = [{"name":"Alexander Savin"},{"name":"Ian Livingstone"},{"name":"Ivan Nikulin"},{"name":"Lalit Kapoor"},{"name":"Sam Thompson"},{"name":"Sebastian Mayr"}];
  var dependencies = {"punycode":"^1.4.1"};
  var deprecated = false;
  var description = "RFC6265 Cookies and Cookie Jar for node.js";
  var devDependencies = {"async":"^1.4.2","string.prototype.repeat":"^0.2.0","vows":"^0.8.1"};
  var engines = {"node":">=0.8"};
  var files = ["lib"];
  var homepage = "https://github.com/salesforce/tough-cookie";
  var keywords = ["HTTP","cookie","cookies","set-cookie","cookiejar","jar","RFC6265","RFC2965"];
  var license = "BSD-3-Clause";
  var main = "./lib/cookie";
  var name = "tough-cookie";
  var repository = {"type":"git","url":"git://github.com/salesforce/tough-cookie.git"};
  var scripts = {"suffixup":"curl -o public_suffix_list.dat https://publicsuffix.org/list/public_suffix_list.dat && ./generate-pubsuffix.js","test":"vows test/*_test.js"};
  var version$2 = "2.3.4";
  var _package = {
  	_from: _from,
  	_id: _id,
  	_inBundle: _inBundle,
  	_integrity: _integrity,
  	_location: _location,
  	_phantomChildren: _phantomChildren,
  	_requested: _requested,
  	_requiredBy: _requiredBy,
  	_resolved: _resolved,
  	_shasum: _shasum,
  	_spec: _spec,
  	_where: _where,
  	author: author,
  	bugs: bugs,
  	bundleDependencies: bundleDependencies,
  	contributors: contributors,
  	dependencies: dependencies,
  	deprecated: deprecated,
  	description: description,
  	devDependencies: devDependencies,
  	engines: engines,
  	files: files,
  	homepage: homepage,
  	keywords: keywords,
  	license: license,
  	main: main,
  	name: name,
  	repository: repository,
  	scripts: scripts,
  	version: version$2
  };

  var _package$1 = /*#__PURE__*/Object.freeze({
    _from: _from,
    _id: _id,
    _inBundle: _inBundle,
    _integrity: _integrity,
    _location: _location,
    _phantomChildren: _phantomChildren,
    _requested: _requested,
    _requiredBy: _requiredBy,
    _resolved: _resolved,
    _shasum: _shasum,
    _spec: _spec,
    _where: _where,
    author: author,
    bugs: bugs,
    bundleDependencies: bundleDependencies,
    contributors: contributors,
    dependencies: dependencies,
    deprecated: deprecated,
    description: description,
    devDependencies: devDependencies,
    engines: engines,
    files: files,
    homepage: homepage,
    keywords: keywords,
    license: license,
    main: main,
    name: name,
    repository: repository,
    scripts: scripts,
    version: version$2,
    default: _package
  });

  var tls = ( empty$1 && empty ) || empty$1;

  var url$2 = ( url$1 && url ) || url$1;

  var require$$4 = ( _package$1 && _package ) || _package$1;

  var urlParse$1 = url$2.parse;

  var Store$3 = store.Store;
  var MemoryCookieStore$1 = memstore.MemoryCookieStore;
  var pathMatch$2 = pathMatch_1.pathMatch;
  var VERSION = require$$4.version;

  var punycode$3;
  try {
    punycode$3 = punycode$2;
  } catch(e) {
    console.warn("cookie: can't load punycode; won't use punycode for domain normalization");
  }

  // From RFC6265 S4.1.1
  // note that it excludes \x3B ";"
  var COOKIE_OCTETS = /^[\x21\x23-\x2B\x2D-\x3A\x3C-\x5B\x5D-\x7E]+$/;

  var CONTROL_CHARS = /[\x00-\x1F]/;

  // From Chromium // '\r', '\n' and '\0' should be treated as a terminator in
  // the "relaxed" mode, see:
  // https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L60
  var TERMINATORS = ['\n', '\r', '\0'];

  // RFC6265 S4.1.1 defines path value as 'any CHAR except CTLs or ";"'
  // Note ';' is \x3B
  var PATH_VALUE = /[\x20-\x3A\x3C-\x7E]+/;

  // date-time parsing constants (RFC6265 S5.1.1)

  var DATE_DELIM = /[\x09\x20-\x2F\x3B-\x40\x5B-\x60\x7B-\x7E]/;

  var MONTH_TO_NUM = {
    jan:0, feb:1, mar:2, apr:3, may:4, jun:5,
    jul:6, aug:7, sep:8, oct:9, nov:10, dec:11
  };
  var NUM_TO_MONTH = [
    'Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'
  ];
  var NUM_TO_DAY = [
    'Sun','Mon','Tue','Wed','Thu','Fri','Sat'
  ];

  var MAX_TIME = 2147483647000; // 31-bit max
  var MIN_TIME = 0; // 31-bit min

  /*
   * Parses a Natural number (i.e., non-negative integer) with either the
   *    <min>*<max>DIGIT ( non-digit *OCTET )
   * or
   *    <min>*<max>DIGIT
   * grammar (RFC6265 S5.1.1).
   *
   * The "trailingOK" boolean controls if the grammar accepts a
   * "( non-digit *OCTET )" trailer.
   */
  function parseDigits(token, minDigits, maxDigits, trailingOK) {
    var count = 0;
    while (count < token.length) {
      var c = token.charCodeAt(count);
      // "non-digit = %x00-2F / %x3A-FF"
      if (c <= 0x2F || c >= 0x3A) {
        break;
      }
      count++;
    }

    // constrain to a minimum and maximum number of digits.
    if (count < minDigits || count > maxDigits) {
      return null;
    }

    if (!trailingOK && count != token.length) {
      return null;
    }

    return parseInt(token.substr(0,count), 10);
  }

  function parseTime(token) {
    var parts = token.split(':');
    var result = [0,0,0];

    /* RF6256 S5.1.1:
     *      time            = hms-time ( non-digit *OCTET )
     *      hms-time        = time-field ":" time-field ":" time-field
     *      time-field      = 1*2DIGIT
     */

    if (parts.length !== 3) {
      return null;
    }

    for (var i = 0; i < 3; i++) {
      // "time-field" must be strictly "1*2DIGIT", HOWEVER, "hms-time" can be
      // followed by "( non-digit *OCTET )" so therefore the last time-field can
      // have a trailer
      var trailingOK = (i == 2);
      var num = parseDigits(parts[i], 1, 2, trailingOK);
      if (num === null) {
        return null;
      }
      result[i] = num;
    }

    return result;
  }

  function parseMonth(token) {
    token = String(token).substr(0,3).toLowerCase();
    var num = MONTH_TO_NUM[token];
    return num >= 0 ? num : null;
  }

  /*
   * RFC6265 S5.1.1 date parser (see RFC for full grammar)
   */
  function parseDate(str) {
    if (!str) {
      return;
    }

    /* RFC6265 S5.1.1:
     * 2. Process each date-token sequentially in the order the date-tokens
     * appear in the cookie-date
     */
    var tokens = str.split(DATE_DELIM);
    if (!tokens) {
      return;
    }

    var hour = null;
    var minute = null;
    var second = null;
    var dayOfMonth = null;
    var month = null;
    var year = null;

    for (var i=0; i<tokens.length; i++) {
      var token = tokens[i].trim();
      if (!token.length) {
        continue;
      }

      var result;

      /* 2.1. If the found-time flag is not set and the token matches the time
       * production, set the found-time flag and set the hour- value,
       * minute-value, and second-value to the numbers denoted by the digits in
       * the date-token, respectively.  Skip the remaining sub-steps and continue
       * to the next date-token.
       */
      if (second === null) {
        result = parseTime(token);
        if (result) {
          hour = result[0];
          minute = result[1];
          second = result[2];
          continue;
        }
      }

      /* 2.2. If the found-day-of-month flag is not set and the date-token matches
       * the day-of-month production, set the found-day-of- month flag and set
       * the day-of-month-value to the number denoted by the date-token.  Skip
       * the remaining sub-steps and continue to the next date-token.
       */
      if (dayOfMonth === null) {
        // "day-of-month = 1*2DIGIT ( non-digit *OCTET )"
        result = parseDigits(token, 1, 2, true);
        if (result !== null) {
          dayOfMonth = result;
          continue;
        }
      }

      /* 2.3. If the found-month flag is not set and the date-token matches the
       * month production, set the found-month flag and set the month-value to
       * the month denoted by the date-token.  Skip the remaining sub-steps and
       * continue to the next date-token.
       */
      if (month === null) {
        result = parseMonth(token);
        if (result !== null) {
          month = result;
          continue;
        }
      }

      /* 2.4. If the found-year flag is not set and the date-token matches the
       * year production, set the found-year flag and set the year-value to the
       * number denoted by the date-token.  Skip the remaining sub-steps and
       * continue to the next date-token.
       */
      if (year === null) {
        // "year = 2*4DIGIT ( non-digit *OCTET )"
        result = parseDigits(token, 2, 4, true);
        if (result !== null) {
          year = result;
          /* From S5.1.1:
           * 3.  If the year-value is greater than or equal to 70 and less
           * than or equal to 99, increment the year-value by 1900.
           * 4.  If the year-value is greater than or equal to 0 and less
           * than or equal to 69, increment the year-value by 2000.
           */
          if (year >= 70 && year <= 99) {
            year += 1900;
          } else if (year >= 0 && year <= 69) {
            year += 2000;
          }
        }
      }
    }

    /* RFC 6265 S5.1.1
     * "5. Abort these steps and fail to parse the cookie-date if:
     *     *  at least one of the found-day-of-month, found-month, found-
     *        year, or found-time flags is not set,
     *     *  the day-of-month-value is less than 1 or greater than 31,
     *     *  the year-value is less than 1601,
     *     *  the hour-value is greater than 23,
     *     *  the minute-value is greater than 59, or
     *     *  the second-value is greater than 59.
     *     (Note that leap seconds cannot be represented in this syntax.)"
     *
     * So, in order as above:
     */
    if (
      dayOfMonth === null || month === null || year === null || second === null ||
      dayOfMonth < 1 || dayOfMonth > 31 ||
      year < 1601 ||
      hour > 23 ||
      minute > 59 ||
      second > 59
    ) {
      return;
    }

    return new Date(Date.UTC(year, month, dayOfMonth, hour, minute, second));
  }

  function formatDate(date) {
    var d = date.getUTCDate(); d = d >= 10 ? d : '0'+d;
    var h = date.getUTCHours(); h = h >= 10 ? h : '0'+h;
    var m = date.getUTCMinutes(); m = m >= 10 ? m : '0'+m;
    var s = date.getUTCSeconds(); s = s >= 10 ? s : '0'+s;
    return NUM_TO_DAY[date.getUTCDay()] + ', ' +
      d+' '+ NUM_TO_MONTH[date.getUTCMonth()] +' '+ date.getUTCFullYear() +' '+
      h+':'+m+':'+s+' GMT';
  }

  // S5.1.2 Canonicalized Host Names
  function canonicalDomain(str) {
    if (str == null) {
      return null;
    }
    str = str.trim().replace(/^\./,''); // S4.1.2.3 & S5.2.3: ignore leading .

    // convert to IDN if any non-ASCII characters
    if (punycode$3 && /[^\u0001-\u007f]/.test(str)) {
      str = punycode$3.toASCII(str);
    }

    return str.toLowerCase();
  }

  // S5.1.3 Domain Matching
  function domainMatch(str, domStr, canonicalize) {
    if (str == null || domStr == null) {
      return null;
    }
    if (canonicalize !== false) {
      str = canonicalDomain(str);
      domStr = canonicalDomain(domStr);
    }

    /*
     * "The domain string and the string are identical. (Note that both the
     * domain string and the string will have been canonicalized to lower case at
     * this point)"
     */
    if (str == domStr) {
      return true;
    }

    /* "All of the following [three] conditions hold:" (order adjusted from the RFC) */

    /* "* The string is a host name (i.e., not an IP address)." */
    if (tls.isIP(str)) {
      return false;
    }

    /* "* The domain string is a suffix of the string" */
    var idx = str.indexOf(domStr);
    if (idx <= 0) {
      return false; // it's a non-match (-1) or prefix (0)
    }

    // e.g "a.b.c".indexOf("b.c") === 2
    // 5 === 3+2
    if (str.length !== domStr.length + idx) { // it's not a suffix
      return false;
    }

    /* "* The last character of the string that is not included in the domain
    * string is a %x2E (".") character." */
    if (str.substr(idx-1,1) !== '.') {
      return false;
    }

    return true;
  }


  // RFC6265 S5.1.4 Paths and Path-Match

  /*
   * "The user agent MUST use an algorithm equivalent to the following algorithm
   * to compute the default-path of a cookie:"
   *
   * Assumption: the path (and not query part or absolute uri) is passed in.
   */
  function defaultPath(path) {
    // "2. If the uri-path is empty or if the first character of the uri-path is not
    // a %x2F ("/") character, output %x2F ("/") and skip the remaining steps.
    if (!path || path.substr(0,1) !== "/") {
      return "/";
    }

    // "3. If the uri-path contains no more than one %x2F ("/") character, output
    // %x2F ("/") and skip the remaining step."
    if (path === "/") {
      return path;
    }

    var rightSlash = path.lastIndexOf("/");
    if (rightSlash === 0) {
      return "/";
    }

    // "4. Output the characters of the uri-path from the first character up to,
    // but not including, the right-most %x2F ("/")."
    return path.slice(0, rightSlash);
  }

  function trimTerminator(str) {
    for (var t = 0; t < TERMINATORS.length; t++) {
      var terminatorIdx = str.indexOf(TERMINATORS[t]);
      if (terminatorIdx !== -1) {
        str = str.substr(0,terminatorIdx);
      }
    }

    return str;
  }

  function parseCookiePair(cookiePair, looseMode) {
    cookiePair = trimTerminator(cookiePair);

    var firstEq = cookiePair.indexOf('=');
    if (looseMode) {
      if (firstEq === 0) { // '=' is immediately at start
        cookiePair = cookiePair.substr(1);
        firstEq = cookiePair.indexOf('='); // might still need to split on '='
      }
    } else { // non-loose mode
      if (firstEq <= 0) { // no '=' or is at start
        return; // needs to have non-empty "cookie-name"
      }
    }

    var cookieName, cookieValue;
    if (firstEq <= 0) {
      cookieName = "";
      cookieValue = cookiePair.trim();
    } else {
      cookieName = cookiePair.substr(0, firstEq).trim();
      cookieValue = cookiePair.substr(firstEq+1).trim();
    }

    if (CONTROL_CHARS.test(cookieName) || CONTROL_CHARS.test(cookieValue)) {
      return;
    }

    var c = new Cookie();
    c.key = cookieName;
    c.value = cookieValue;
    return c;
  }

  function parse$2(str, options) {
    if (!options || typeof options !== 'object') {
      options = {};
    }
    str = str.trim();

    // We use a regex to parse the "name-value-pair" part of S5.2
    var firstSemi = str.indexOf(';'); // S5.2 step 1
    var cookiePair = (firstSemi === -1) ? str : str.substr(0, firstSemi);
    var c = parseCookiePair(cookiePair, !!options.loose);
    if (!c) {
      return;
    }

    if (firstSemi === -1) {
      return c;
    }

    // S5.2.3 "unparsed-attributes consist of the remainder of the set-cookie-string
    // (including the %x3B (";") in question)." plus later on in the same section
    // "discard the first ";" and trim".
    var unparsed = str.slice(firstSemi + 1).trim();

    // "If the unparsed-attributes string is empty, skip the rest of these
    // steps."
    if (unparsed.length === 0) {
      return c;
    }

    /*
     * S5.2 says that when looping over the items "[p]rocess the attribute-name
     * and attribute-value according to the requirements in the following
     * subsections" for every item.  Plus, for many of the individual attributes
     * in S5.3 it says to use the "attribute-value of the last attribute in the
     * cookie-attribute-list".  Therefore, in this implementation, we overwrite
     * the previous value.
     */
    var cookie_avs = unparsed.split(';');
    while (cookie_avs.length) {
      var av = cookie_avs.shift().trim();
      if (av.length === 0) { // happens if ";;" appears
        continue;
      }
      var av_sep = av.indexOf('=');
      var av_key, av_value;

      if (av_sep === -1) {
        av_key = av;
        av_value = null;
      } else {
        av_key = av.substr(0,av_sep);
        av_value = av.substr(av_sep+1);
      }

      av_key = av_key.trim().toLowerCase();

      if (av_value) {
        av_value = av_value.trim();
      }

      switch(av_key) {
      case 'expires': // S5.2.1
        if (av_value) {
          var exp = parseDate(av_value);
          // "If the attribute-value failed to parse as a cookie date, ignore the
          // cookie-av."
          if (exp) {
            // over and underflow not realistically a concern: V8's getTime() seems to
            // store something larger than a 32-bit time_t (even with 32-bit node)
            c.expires = exp;
          }
        }
        break;

      case 'max-age': // S5.2.2
        if (av_value) {
          // "If the first character of the attribute-value is not a DIGIT or a "-"
          // character ...[or]... If the remainder of attribute-value contains a
          // non-DIGIT character, ignore the cookie-av."
          if (/^-?[0-9]+$/.test(av_value)) {
            var delta = parseInt(av_value, 10);
            // "If delta-seconds is less than or equal to zero (0), let expiry-time
            // be the earliest representable date and time."
            c.setMaxAge(delta);
          }
        }
        break;

      case 'domain': // S5.2.3
        // "If the attribute-value is empty, the behavior is undefined.  However,
        // the user agent SHOULD ignore the cookie-av entirely."
        if (av_value) {
          // S5.2.3 "Let cookie-domain be the attribute-value without the leading %x2E
          // (".") character."
          var domain = av_value.trim().replace(/^\./, '');
          if (domain) {
            // "Convert the cookie-domain to lower case."
            c.domain = domain.toLowerCase();
          }
        }
        break;

      case 'path': // S5.2.4
        /*
         * "If the attribute-value is empty or if the first character of the
         * attribute-value is not %x2F ("/"):
         *   Let cookie-path be the default-path.
         * Otherwise:
         *   Let cookie-path be the attribute-value."
         *
         * We'll represent the default-path as null since it depends on the
         * context of the parsing.
         */
        c.path = av_value && av_value[0] === "/" ? av_value : null;
        break;

      case 'secure': // S5.2.5
        /*
         * "If the attribute-name case-insensitively matches the string "Secure",
         * the user agent MUST append an attribute to the cookie-attribute-list
         * with an attribute-name of Secure and an empty attribute-value."
         */
        c.secure = true;
        break;

      case 'httponly': // S5.2.6 -- effectively the same as 'secure'
        c.httpOnly = true;
        break;

      default:
        c.extensions = c.extensions || [];
        c.extensions.push(av);
        break;
      }
    }

    return c;
  }

  // avoid the V8 deoptimization monster!
  function jsonParse(str) {
    var obj;
    try {
      obj = JSON.parse(str);
    } catch (e) {
      return e;
    }
    return obj;
  }

  function fromJSON(str) {
    if (!str) {
      return null;
    }

    var obj;
    if (typeof str === 'string') {
      obj = jsonParse(str);
      if (obj instanceof Error) {
        return null;
      }
    } else {
      // assume it's an Object
      obj = str;
    }

    var c = new Cookie();
    for (var i=0; i<Cookie.serializableProperties.length; i++) {
      var prop = Cookie.serializableProperties[i];
      if (obj[prop] === undefined ||
          obj[prop] === Cookie.prototype[prop])
      {
        continue; // leave as prototype default
      }

      if (prop === 'expires' ||
          prop === 'creation' ||
          prop === 'lastAccessed')
      {
        if (obj[prop] === null) {
          c[prop] = null;
        } else {
          c[prop] = obj[prop] == "Infinity" ?
            "Infinity" : new Date(obj[prop]);
        }
      } else {
        c[prop] = obj[prop];
      }
    }

    return c;
  }

  /* Section 5.4 part 2:
   * "*  Cookies with longer paths are listed before cookies with
   *     shorter paths.
   *
   *  *  Among cookies that have equal-length path fields, cookies with
   *     earlier creation-times are listed before cookies with later
   *     creation-times."
   */

  function cookieCompare(a,b) {
    var cmp = 0;

    // descending for length: b CMP a
    var aPathLen = a.path ? a.path.length : 0;
    var bPathLen = b.path ? b.path.length : 0;
    cmp = bPathLen - aPathLen;
    if (cmp !== 0) {
      return cmp;
    }

    // ascending for time: a CMP b
    var aTime = a.creation ? a.creation.getTime() : MAX_TIME;
    var bTime = b.creation ? b.creation.getTime() : MAX_TIME;
    cmp = aTime - bTime;
    if (cmp !== 0) {
      return cmp;
    }

    // break ties for the same millisecond (precision of JavaScript's clock)
    cmp = a.creationIndex - b.creationIndex;

    return cmp;
  }

  // Gives the permutation of all possible pathMatch()es of a given path. The
  // array is in longest-to-shortest order.  Handy for indexing.
  function permutePath(path) {
    if (path === '/') {
      return ['/'];
    }
    if (path.lastIndexOf('/') === path.length-1) {
      path = path.substr(0,path.length-1);
    }
    var permutations = [path];
    while (path.length > 1) {
      var lindex = path.lastIndexOf('/');
      if (lindex === 0) {
        break;
      }
      path = path.substr(0,lindex);
      permutations.push(path);
    }
    permutations.push('/');
    return permutations;
  }

  function getCookieContext(url) {
    if (url instanceof Object) {
      return url;
    }
    // NOTE: decodeURI will throw on malformed URIs (see GH-32).
    // Therefore, we will just skip decoding for such URIs.
    try {
      url = decodeURI(url);
    }
    catch(err) {
      // Silently swallow error
    }

    return urlParse$1(url);
  }

  function Cookie(options) {
    options = options || {};

    Object.keys(options).forEach(function(prop) {
      if (Cookie.prototype.hasOwnProperty(prop) &&
          Cookie.prototype[prop] !== options[prop] &&
          prop.substr(0,1) !== '_')
      {
        this[prop] = options[prop];
      }
    }, this);

    this.creation = this.creation || new Date();

    // used to break creation ties in cookieCompare():
    Object.defineProperty(this, 'creationIndex', {
      configurable: false,
      enumerable: false, // important for assert.deepEqual checks
      writable: true,
      value: ++Cookie.cookiesCreated
    });
  }

  Cookie.cookiesCreated = 0; // incremented each time a cookie is created

  Cookie.parse = parse$2;
  Cookie.fromJSON = fromJSON;

  Cookie.prototype.key = "";
  Cookie.prototype.value = "";

  // the order in which the RFC has them:
  Cookie.prototype.expires = "Infinity"; // coerces to literal Infinity
  Cookie.prototype.maxAge = null; // takes precedence over expires for TTL
  Cookie.prototype.domain = null;
  Cookie.prototype.path = null;
  Cookie.prototype.secure = false;
  Cookie.prototype.httpOnly = false;
  Cookie.prototype.extensions = null;

  // set by the CookieJar:
  Cookie.prototype.hostOnly = null; // boolean when set
  Cookie.prototype.pathIsDefault = null; // boolean when set
  Cookie.prototype.creation = null; // Date when set; defaulted by Cookie.parse
  Cookie.prototype.lastAccessed = null; // Date when set
  Object.defineProperty(Cookie.prototype, 'creationIndex', {
    configurable: true,
    enumerable: false,
    writable: true,
    value: 0
  });

  Cookie.serializableProperties = Object.keys(Cookie.prototype)
    .filter(function(prop) {
      return !(
        Cookie.prototype[prop] instanceof Function ||
        prop === 'creationIndex' ||
        prop.substr(0,1) === '_'
      );
    });

  Cookie.prototype.inspect = function inspect() {
    var now = Date.now();
    return 'Cookie="'+this.toString() +
      '; hostOnly='+(this.hostOnly != null ? this.hostOnly : '?') +
      '; aAge='+(this.lastAccessed ? (now-this.lastAccessed.getTime())+'ms' : '?') +
      '; cAge='+(this.creation ? (now-this.creation.getTime())+'ms' : '?') +
      '"';
  };

  Cookie.prototype.toJSON = function() {
    var this$1 = this;

    var obj = {};

    var props = Cookie.serializableProperties;
    for (var i=0; i<props.length; i++) {
      var prop = props[i];
      if (this$1[prop] === Cookie.prototype[prop]) {
        continue; // leave as prototype default
      }

      if (prop === 'expires' ||
          prop === 'creation' ||
          prop === 'lastAccessed')
      {
        if (this$1[prop] === null) {
          obj[prop] = null;
        } else {
          obj[prop] = this$1[prop] == "Infinity" ? // intentionally not ===
            "Infinity" : this$1[prop].toISOString();
        }
      } else if (prop === 'maxAge') {
        if (this$1[prop] !== null) {
          // again, intentionally not ===
          obj[prop] = (this$1[prop] == Infinity || this$1[prop] == -Infinity) ?
            this$1[prop].toString() : this$1[prop];
        }
      } else {
        if (this$1[prop] !== Cookie.prototype[prop]) {
          obj[prop] = this$1[prop];
        }
      }
    }

    return obj;
  };

  Cookie.prototype.clone = function() {
    return fromJSON(this.toJSON());
  };

  Cookie.prototype.validate = function validate() {
    if (!COOKIE_OCTETS.test(this.value)) {
      return false;
    }
    if (this.expires != Infinity && !(this.expires instanceof Date) && !parseDate(this.expires)) {
      return false;
    }
    if (this.maxAge != null && this.maxAge <= 0) {
      return false; // "Max-Age=" non-zero-digit *DIGIT
    }
    if (this.path != null && !PATH_VALUE.test(this.path)) {
      return false;
    }

    var cdomain = this.cdomain();
    if (cdomain) {
      if (cdomain.match(/\.$/)) {
        return false; // S4.1.2.3 suggests that this is bad. domainMatch() tests confirm this
      }
      var suffix = pubsuffix.getPublicSuffix(cdomain);
      if (suffix == null) { // it's a public suffix
        return false;
      }
    }
    return true;
  };

  Cookie.prototype.setExpires = function setExpires(exp) {
    if (exp instanceof Date) {
      this.expires = exp;
    } else {
      this.expires = parseDate(exp) || "Infinity";
    }
  };

  Cookie.prototype.setMaxAge = function setMaxAge(age) {
    if (age === Infinity || age === -Infinity) {
      this.maxAge = age.toString(); // so JSON.stringify() works
    } else {
      this.maxAge = age;
    }
  };

  // gives Cookie header format
  Cookie.prototype.cookieString = function cookieString() {
    var val = this.value;
    if (val == null) {
      val = '';
    }
    if (this.key === '') {
      return val;
    }
    return this.key+'='+val;
  };

  // gives Set-Cookie header format
  Cookie.prototype.toString = function toString() {
    var str = this.cookieString();

    if (this.expires != Infinity) {
      if (this.expires instanceof Date) {
        str += '; Expires='+formatDate(this.expires);
      } else {
        str += '; Expires='+this.expires;
      }
    }

    if (this.maxAge != null && this.maxAge != Infinity) {
      str += '; Max-Age='+this.maxAge;
    }

    if (this.domain && !this.hostOnly) {
      str += '; Domain='+this.domain;
    }
    if (this.path) {
      str += '; Path='+this.path;
    }

    if (this.secure) {
      str += '; Secure';
    }
    if (this.httpOnly) {
      str += '; HttpOnly';
    }
    if (this.extensions) {
      this.extensions.forEach(function(ext) {
        str += '; '+ext;
      });
    }

    return str;
  };

  // TTL() partially replaces the "expiry-time" parts of S5.3 step 3 (setCookie()
  // elsewhere)
  // S5.3 says to give the "latest representable date" for which we use Infinity
  // For "expired" we use 0
  Cookie.prototype.TTL = function TTL(now) {
    /* RFC6265 S4.1.2.2 If a cookie has both the Max-Age and the Expires
     * attribute, the Max-Age attribute has precedence and controls the
     * expiration date of the cookie.
     * (Concurs with S5.3 step 3)
     */
    if (this.maxAge != null) {
      return this.maxAge<=0 ? 0 : this.maxAge*1000;
    }

    var expires = this.expires;
    if (expires != Infinity) {
      if (!(expires instanceof Date)) {
        expires = parseDate(expires) || Infinity;
      }

      if (expires == Infinity) {
        return Infinity;
      }

      return expires.getTime() - (now || Date.now());
    }

    return Infinity;
  };

  // expiryTime() replaces the "expiry-time" parts of S5.3 step 3 (setCookie()
  // elsewhere)
  Cookie.prototype.expiryTime = function expiryTime(now) {
    if (this.maxAge != null) {
      var relativeTo = now || this.creation || new Date();
      var age = (this.maxAge <= 0) ? -Infinity : this.maxAge*1000;
      return relativeTo.getTime() + age;
    }

    if (this.expires == Infinity) {
      return Infinity;
    }
    return this.expires.getTime();
  };

  // expiryDate() replaces the "expiry-time" parts of S5.3 step 3 (setCookie()
  // elsewhere), except it returns a Date
  Cookie.prototype.expiryDate = function expiryDate(now) {
    var millisec = this.expiryTime(now);
    if (millisec == Infinity) {
      return new Date(MAX_TIME);
    } else if (millisec == -Infinity) {
      return new Date(MIN_TIME);
    } else {
      return new Date(millisec);
    }
  };

  // This replaces the "persistent-flag" parts of S5.3 step 3
  Cookie.prototype.isPersistent = function isPersistent() {
    return (this.maxAge != null || this.expires != Infinity);
  };

  // Mostly S5.1.2 and S5.2.3:
  Cookie.prototype.cdomain =
  Cookie.prototype.canonicalizedDomain = function canonicalizedDomain() {
    if (this.domain == null) {
      return null;
    }
    return canonicalDomain(this.domain);
  };

  function CookieJar(store$$1, options) {
    if (typeof options === "boolean") {
      options = {rejectPublicSuffixes: options};
    } else if (options == null) {
      options = {};
    }
    if (options.rejectPublicSuffixes != null) {
      this.rejectPublicSuffixes = options.rejectPublicSuffixes;
    }
    if (options.looseMode != null) {
      this.enableLooseMode = options.looseMode;
    }

    if (!store$$1) {
      store$$1 = new MemoryCookieStore$1();
    }
    this.store = store$$1;
  }
  CookieJar.prototype.store = null;
  CookieJar.prototype.rejectPublicSuffixes = true;
  CookieJar.prototype.enableLooseMode = false;
  var CAN_BE_SYNC = [];

  CAN_BE_SYNC.push('setCookie');
  CookieJar.prototype.setCookie = function(cookie, url, options, cb) {
    var err;
    var context = getCookieContext(url);
    if (options instanceof Function) {
      cb = options;
      options = {};
    }

    var host = canonicalDomain(context.hostname);
    var loose = this.enableLooseMode;
    if (options.loose != null) {
      loose = options.loose;
    }

    // S5.3 step 1
    if (!(cookie instanceof Cookie)) {
      cookie = Cookie.parse(cookie, { loose: loose });
    }
    if (!cookie) {
      err = new Error("Cookie failed to parse");
      return cb(options.ignoreError ? null : err);
    }

    // S5.3 step 2
    var now = options.now || new Date(); // will assign later to save effort in the face of errors

    // S5.3 step 3: NOOP; persistent-flag and expiry-time is handled by getCookie()

    // S5.3 step 4: NOOP; domain is null by default

    // S5.3 step 5: public suffixes
    if (this.rejectPublicSuffixes && cookie.domain) {
      var suffix = pubsuffix.getPublicSuffix(cookie.cdomain());
      if (suffix == null) { // e.g. "com"
        err = new Error("Cookie has domain set to a public suffix");
        return cb(options.ignoreError ? null : err);
      }
    }

    // S5.3 step 6:
    if (cookie.domain) {
      if (!domainMatch(host, cookie.cdomain(), false)) {
        err = new Error("Cookie not in this host's domain. Cookie:"+cookie.cdomain()+" Request:"+host);
        return cb(options.ignoreError ? null : err);
      }

      if (cookie.hostOnly == null) { // don't reset if already set
        cookie.hostOnly = false;
      }

    } else {
      cookie.hostOnly = true;
      cookie.domain = host;
    }

    //S5.2.4 If the attribute-value is empty or if the first character of the
    //attribute-value is not %x2F ("/"):
    //Let cookie-path be the default-path.
    if (!cookie.path || cookie.path[0] !== '/') {
      cookie.path = defaultPath(context.pathname);
      cookie.pathIsDefault = true;
    }

    // S5.3 step 8: NOOP; secure attribute
    // S5.3 step 9: NOOP; httpOnly attribute

    // S5.3 step 10
    if (options.http === false && cookie.httpOnly) {
      err = new Error("Cookie is HttpOnly and this isn't an HTTP API");
      return cb(options.ignoreError ? null : err);
    }

    var store$$1 = this.store;

    if (!store$$1.updateCookie) {
      store$$1.updateCookie = function(oldCookie, newCookie, cb) {
        this.putCookie(newCookie, cb);
      };
    }

    function withCookie(err, oldCookie) {
      if (err) {
        return cb(err);
      }

      var next = function(err) {
        if (err) {
          return cb(err);
        } else {
          cb(null, cookie);
        }
      };

      if (oldCookie) {
        // S5.3 step 11 - "If the cookie store contains a cookie with the same name,
        // domain, and path as the newly created cookie:"
        if (options.http === false && oldCookie.httpOnly) { // step 11.2
          err = new Error("old Cookie is HttpOnly and this isn't an HTTP API");
          return cb(options.ignoreError ? null : err);
        }
        cookie.creation = oldCookie.creation; // step 11.3
        cookie.creationIndex = oldCookie.creationIndex; // preserve tie-breaker
        cookie.lastAccessed = now;
        // Step 11.4 (delete cookie) is implied by just setting the new one:
        store$$1.updateCookie(oldCookie, cookie, next); // step 12

      } else {
        cookie.creation = cookie.lastAccessed = now;
        store$$1.putCookie(cookie, next); // step 12
      }
    }

    store$$1.findCookie(cookie.domain, cookie.path, cookie.key, withCookie);
  };

  // RFC6365 S5.4
  CAN_BE_SYNC.push('getCookies');
  CookieJar.prototype.getCookies = function(url, options, cb) {
    var context = getCookieContext(url);
    if (options instanceof Function) {
      cb = options;
      options = {};
    }

    var host = canonicalDomain(context.hostname);
    var path = context.pathname || '/';

    var secure = options.secure;
    if (secure == null && context.protocol &&
        (context.protocol == 'https:' || context.protocol == 'wss:'))
    {
      secure = true;
    }

    var http = options.http;
    if (http == null) {
      http = true;
    }

    var now = options.now || Date.now();
    var expireCheck = options.expire !== false;
    var allPaths = !!options.allPaths;
    var store$$1 = this.store;

    function matchingCookie(c) {
      // "Either:
      //   The cookie's host-only-flag is true and the canonicalized
      //   request-host is identical to the cookie's domain.
      // Or:
      //   The cookie's host-only-flag is false and the canonicalized
      //   request-host domain-matches the cookie's domain."
      if (c.hostOnly) {
        if (c.domain != host) {
          return false;
        }
      } else {
        if (!domainMatch(host, c.domain, false)) {
          return false;
        }
      }

      // "The request-uri's path path-matches the cookie's path."
      if (!allPaths && !pathMatch$2(path, c.path)) {
        return false;
      }

      // "If the cookie's secure-only-flag is true, then the request-uri's
      // scheme must denote a "secure" protocol"
      if (c.secure && !secure) {
        return false;
      }

      // "If the cookie's http-only-flag is true, then exclude the cookie if the
      // cookie-string is being generated for a "non-HTTP" API"
      if (c.httpOnly && !http) {
        return false;
      }

      // deferred from S5.3
      // non-RFC: allow retention of expired cookies by choice
      if (expireCheck && c.expiryTime() <= now) {
        store$$1.removeCookie(c.domain, c.path, c.key, function(){}); // result ignored
        return false;
      }

      return true;
    }

    store$$1.findCookies(host, allPaths ? null : path, function(err,cookies) {
      if (err) {
        return cb(err);
      }

      cookies = cookies.filter(matchingCookie);

      // sorting of S5.4 part 2
      if (options.sort !== false) {
        cookies = cookies.sort(cookieCompare);
      }

      // S5.4 part 3
      var now = new Date();
      cookies.forEach(function(c) {
        c.lastAccessed = now;
      });
      // TODO persist lastAccessed

      cb(null,cookies);
    });
  };

  CAN_BE_SYNC.push('getCookieString');
  CookieJar.prototype.getCookieString = function(/*..., cb*/) {
    var args = Array.prototype.slice.call(arguments,0);
    var cb = args.pop();
    var next = function(err,cookies) {
      if (err) {
        cb(err);
      } else {
        cb(null, cookies
          .sort(cookieCompare)
          .map(function(c){
            return c.cookieString();
          })
          .join('; '));
      }
    };
    args.push(next);
    this.getCookies.apply(this,args);
  };

  CAN_BE_SYNC.push('getSetCookieStrings');
  CookieJar.prototype.getSetCookieStrings = function(/*..., cb*/) {
    var args = Array.prototype.slice.call(arguments,0);
    var cb = args.pop();
    var next = function(err,cookies) {
      if (err) {
        cb(err);
      } else {
        cb(null, cookies.map(function(c){
          return c.toString();
        }));
      }
    };
    args.push(next);
    this.getCookies.apply(this,args);
  };

  CAN_BE_SYNC.push('serialize');
  CookieJar.prototype.serialize = function(cb) {
    var type = this.store.constructor.name;
    if (type === 'Object') {
      type = null;
    }

    // update README.md "Serialization Format" if you change this, please!
    var serialized = {
      // The version of tough-cookie that serialized this jar. Generally a good
      // practice since future versions can make data import decisions based on
      // known past behavior. When/if this matters, use `semver`.
      version: 'tough-cookie@'+VERSION,

      // add the store type, to make humans happy:
      storeType: type,

      // CookieJar configuration:
      rejectPublicSuffixes: !!this.rejectPublicSuffixes,

      // this gets filled from getAllCookies:
      cookies: []
    };

    if (!(this.store.getAllCookies &&
          typeof this.store.getAllCookies === 'function'))
    {
      return cb(new Error('store does not support getAllCookies and cannot be serialized'));
    }

    this.store.getAllCookies(function(err,cookies) {
      if (err) {
        return cb(err);
      }

      serialized.cookies = cookies.map(function(cookie) {
        // convert to serialized 'raw' cookies
        cookie = (cookie instanceof Cookie) ? cookie.toJSON() : cookie;

        // Remove the index so new ones get assigned during deserialization
        delete cookie.creationIndex;

        return cookie;
      });

      return cb(null, serialized);
    });
  };

  // well-known name that JSON.stringify calls
  CookieJar.prototype.toJSON = function() {
    return this.serializeSync();
  };

  // use the class method CookieJar.deserialize instead of calling this directly
  CAN_BE_SYNC.push('_importCookies');
  CookieJar.prototype._importCookies = function(serialized, cb) {
    var jar = this;
    var cookies = serialized.cookies;
    if (!cookies || !Array.isArray(cookies)) {
      return cb(new Error('serialized jar has no cookies array'));
    }
    cookies = cookies.slice(); // do not modify the original

    function putNext(err) {
      if (err) {
        return cb(err);
      }

      if (!cookies.length) {
        return cb(err, jar);
      }

      var cookie;
      try {
        cookie = fromJSON(cookies.shift());
      } catch (e) {
        return cb(e);
      }

      if (cookie === null) {
        return putNext(null); // skip this cookie
      }

      jar.store.putCookie(cookie, putNext);
    }

    putNext();
  };

  CookieJar.deserialize = function(strOrObj, store$$1, cb) {
    if (arguments.length !== 3) {
      // store is optional
      cb = store$$1;
      store$$1 = null;
    }

    var serialized;
    if (typeof strOrObj === 'string') {
      serialized = jsonParse(strOrObj);
      if (serialized instanceof Error) {
        return cb(serialized);
      }
    } else {
      serialized = strOrObj;
    }

    var jar = new CookieJar(store$$1, serialized.rejectPublicSuffixes);
    jar._importCookies(serialized, function(err) {
      if (err) {
        return cb(err);
      }
      cb(null, jar);
    });
  };

  CookieJar.deserializeSync = function(strOrObj, store$$1) {
    var serialized = typeof strOrObj === 'string' ?
      JSON.parse(strOrObj) : strOrObj;
    var jar = new CookieJar(store$$1, serialized.rejectPublicSuffixes);

    // catch this mistake early:
    if (!jar.store.synchronous) {
      throw new Error('CookieJar store is not synchronous; use async API instead.');
    }

    jar._importCookiesSync(serialized);
    return jar;
  };
  CookieJar.fromJSON = CookieJar.deserializeSync;

  CAN_BE_SYNC.push('clone');
  CookieJar.prototype.clone = function(newStore, cb) {
    if (arguments.length === 1) {
      cb = newStore;
      newStore = null;
    }

    this.serialize(function(err,serialized) {
      if (err) {
        return cb(err);
      }
      CookieJar.deserialize(newStore, serialized, cb);
    });
  };

  // Use a closure to provide a true imperative API for synchronous stores.
  function syncWrap(method) {
    return function() {
      if (!this.store.synchronous) {
        throw new Error('CookieJar store is not synchronous; use async API instead.');
      }

      var args = Array.prototype.slice.call(arguments);
      var syncErr, syncResult;
      args.push(function syncCb(err, result) {
        syncErr = err;
        syncResult = result;
      });
      this[method].apply(this, args);

      if (syncErr) {
        throw syncErr;
      }
      return syncResult;
    };
  }

  // wrap all declared CAN_BE_SYNC methods in the sync wrapper
  CAN_BE_SYNC.forEach(function(method) {
    CookieJar.prototype[method+'Sync'] = syncWrap(method);
  });

  var cookie = {
    CookieJar: CookieJar,
    Cookie: Cookie,
    Store: Store$3,
    MemoryCookieStore: MemoryCookieStore$1,
    parseDate: parseDate,
    formatDate: formatDate,
    parse: parse$2,
    fromJSON: fromJSON,
    domainMatch: domainMatch,
    defaultPath: defaultPath,
    pathMatch: pathMatch$2,
    getPublicSuffix: pubsuffix.getPublicSuffix,
    cookieCompare: cookieCompare,
    permuteDomain: permuteDomain_1.permuteDomain,
    permutePath: permutePath,
    canonicalDomain: canonicalDomain
  };

  var Cookie$1 = cookie.Cookie;
  var CookieJar$1 = cookie.CookieJar;

  var parse$3 = function (str) {
    if (str && str.uri) {
      str = str.uri;
    }
    if (typeof str !== 'string') {
      throw new Error('The cookie function only accepts STRING as param')
    }
    return Cookie$1.parse(str, {loose: true})
  };

  // Adapt the sometimes-Async api of tough.CookieJar to our requirements
  function RequestJar (store) {
    var self = this;
    self._jar = new CookieJar$1(store, {looseMode: true});
  }
  RequestJar.prototype.setCookie = function (cookieOrStr, uri, options) {
    var self = this;
    return self._jar.setCookieSync(cookieOrStr, uri, options || {})
  };
  RequestJar.prototype.getCookieString = function (uri) {
    var self = this;
    return self._jar.getCookieStringSync(uri)
  };
  RequestJar.prototype.getCookies = function (uri) {
    var self = this;
    return self._jar.getCookiesSync(uri)
  };

  var jar = function (store) {
    return new RequestJar(store)
  };

  var cookies = {
  	parse: parse$3,
  	jar: jar
  };

  var stringify_1 = createCommonjsModule(function (module, exports) {
  exports = module.exports = stringify;
  exports.getSerialize = serializer;

  function stringify(obj, replacer, spaces, cycleReplacer) {
    return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces)
  }

  function serializer(replacer, cycleReplacer) {
    var stack = [], keys = [];

    if (cycleReplacer == null) { cycleReplacer = function(key, value) {
      if (stack[0] === value) { return "[Circular ~]" }
      return "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]"
    }; }

    return function(key, value) {
      if (stack.length > 0) {
        var thisPos = stack.indexOf(this);
        ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
        ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);
        if (~stack.indexOf(value)) { value = cycleReplacer.call(this, key, value); }
      }
      else { stack.push(value); }

      return replacer == null ? value : replacer.call(this, key, value)
    }
  }
  });
  var stringify_2 = stringify_1.getSerialize;

  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var inited = false;
  function init () {
    inited = true;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;
  }

  function toByteArray (b64) {
    if (!inited) {
      init();
    }
    var i, j, l, tmp, placeHolders, arr;
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

    // base64 is 4/3 + up to two characters of the original data
    arr = new Arr(len * 3 / 4 - placeHolders);

    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? len - 4 : len;

    var L = 0;

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = (tmp >> 16) & 0xFF;
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr
  }

  function tripletToBase64 (num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
  }

  function encodeChunk (uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
      output.push(tripletToBase64(tmp));
    }
    return output.join('')
  }

  function fromByteArray (uint8) {
    if (!inited) {
      init();
    }
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var output = '';
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[(tmp << 4) & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
      output += lookup[tmp >> 10];
      output += lookup[(tmp >> 4) & 0x3F];
      output += lookup[(tmp << 2) & 0x3F];
      output += '=';
    }

    parts.push(output);

    return parts.join('')
  }

  function read (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  }

  function write (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  }

  var toString$1 = {}.toString;

  var isArray$3 = Array.isArray || function (arr) {
    return toString$1.call(arr) == '[object Array]';
  };

  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */

  var INSPECT_MAX_BYTES = 50;

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */
  Buffer$1.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
    ? global.TYPED_ARRAY_SUPPORT
    : true;

  /*
   * Export kMaxLength after typed array support is determined.
   */
  var _kMaxLength = kMaxLength();

  function kMaxLength () {
    return Buffer$1.TYPED_ARRAY_SUPPORT
      ? 0x7fffffff
      : 0x3fffffff
  }

  function createBuffer (that, length) {
    if (kMaxLength() < length) {
      throw new RangeError('Invalid typed array length')
    }
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = new Uint8Array(length);
      that.__proto__ = Buffer$1.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      if (that === null) {
        that = new Buffer$1(length);
      }
      that.length = length;
    }

    return that
  }

  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */

  function Buffer$1 (arg, encodingOrOffset, length) {
    if (!Buffer$1.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$1)) {
      return new Buffer$1(arg, encodingOrOffset, length)
    }

    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new Error(
          'If encoding is specified then the first argument must be a string'
        )
      }
      return allocUnsafe(this, arg)
    }
    return from(this, arg, encodingOrOffset, length)
  }

  Buffer$1.poolSize = 8192; // not used by this implementation

  // TODO: Legacy, not needed anymore. Remove in next major version.
  Buffer$1._augment = function (arr) {
    arr.__proto__ = Buffer$1.prototype;
    return arr
  };

  function from (that, value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number')
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length)
    }

    if (typeof value === 'string') {
      return fromString(that, value, encodingOrOffset)
    }

    return fromObject(that, value)
  }

  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer$1.from = function (value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length)
  };

  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
    Buffer$1.prototype.__proto__ = Uint8Array.prototype;
    Buffer$1.__proto__ = Uint8Array;
  }

  function assertSize (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number')
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative')
    }
  }

  function alloc (that, size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(that, size)
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string'
        ? createBuffer(that, size).fill(fill, encoding)
        : createBuffer(that, size).fill(fill)
    }
    return createBuffer(that, size)
  }

  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer$1.alloc = function (size, fill, encoding) {
    return alloc(null, size, fill, encoding)
  };

  function allocUnsafe (that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
    if (!Buffer$1.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }
    return that
  }

  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer$1.allocUnsafe = function (size) {
    return allocUnsafe(null, size)
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer$1.allocUnsafeSlow = function (size) {
    return allocUnsafe(null, size)
  };

  function fromString (that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer$1.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding')
    }

    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);

    var actual = that.write(string, encoding);

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      that = that.slice(0, actual);
    }

    return that
  }

  function fromArrayLike (that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that
  }

  function fromArrayBuffer (that, array, byteOffset, length) {
    array.byteLength; // this throws if `array` is not a valid ArrayBuffer

    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds')
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds')
    }

    if (byteOffset === undefined && length === undefined) {
      array = new Uint8Array(array);
    } else if (length === undefined) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = array;
      that.__proto__ = Buffer$1.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromArrayLike(that, array);
    }
    return that
  }

  function fromObject (that, obj) {
    if (internalIsBuffer(obj)) {
      var len = checked(obj.length) | 0;
      that = createBuffer(that, len);

      if (that.length === 0) {
        return that
      }

      obj.copy(that, 0, 0, len);
      return that
    }

    if (obj) {
      if ((typeof ArrayBuffer !== 'undefined' &&
          obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
        if (typeof obj.length !== 'number' || isnan(obj.length)) {
          return createBuffer(that, 0)
        }
        return fromArrayLike(that, obj)
      }

      if (obj.type === 'Buffer' && isArray$3(obj.data)) {
        return fromArrayLike(that, obj.data)
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
  }

  function checked (length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + kMaxLength().toString(16) + ' bytes')
    }
    return length | 0
  }

  function SlowBuffer (length) {
    if (+length != length) { // eslint-disable-line eqeqeq
      length = 0;
    }
    return Buffer$1.alloc(+length)
  }
  Buffer$1.isBuffer = isBuffer$1;
  function internalIsBuffer (b) {
    return !!(b != null && b._isBuffer)
  }

  Buffer$1.compare = function compare (a, b) {
    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
      throw new TypeError('Arguments must be Buffers')
    }

    if (a === b) { return 0 }

    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break
      }
    }

    if (x < y) { return -1 }
    if (y < x) { return 1 }
    return 0
  };

  Buffer$1.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  };

  Buffer$1.concat = function concat (list, length) {
    if (!isArray$3(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }

    if (list.length === 0) {
      return Buffer$1.alloc(0)
    }

    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer$1.allocUnsafe(length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (!internalIsBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
      buf.copy(buffer, pos);
      pos += buf.length;
    }
    return buffer
  };

  function byteLength (string, encoding) {
    if (internalIsBuffer(string)) {
      return string.length
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      string = '' + string;
    }

    var len = string.length;
    if (len === 0) { return 0 }

    // Use a for loop to avoid recursion
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len
        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) { return utf8ToBytes(string).length } // assume utf8
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer$1.byteLength = byteLength;

  function slowToString (encoding, start, end) {
    var this$1 = this;

    var loweredCase = false;

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0;
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return ''
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return ''
    }

    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return ''
    }

    if (!encoding) { encoding = 'utf8'; }

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this$1, start, end)

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this$1, start, end)

        case 'ascii':
          return asciiSlice(this$1, start, end)

        case 'latin1':
        case 'binary':
          return latin1Slice(this$1, start, end)

        case 'base64':
          return base64Slice(this$1, start, end)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this$1, start, end)

        default:
          if (loweredCase) { throw new TypeError('Unknown encoding: ' + encoding) }
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
  // Buffer instances.
  Buffer$1.prototype._isBuffer = true;

  function swap (b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer$1.prototype.swap16 = function swap16 () {
    var this$1 = this;

    var len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
      swap(this$1, i, i + 1);
    }
    return this
  };

  Buffer$1.prototype.swap32 = function swap32 () {
    var this$1 = this;

    var len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
      swap(this$1, i, i + 3);
      swap(this$1, i + 1, i + 2);
    }
    return this
  };

  Buffer$1.prototype.swap64 = function swap64 () {
    var this$1 = this;

    var len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits')
    }
    for (var i = 0; i < len; i += 8) {
      swap(this$1, i, i + 7);
      swap(this$1, i + 1, i + 6);
      swap(this$1, i + 2, i + 5);
      swap(this$1, i + 3, i + 4);
    }
    return this
  };

  Buffer$1.prototype.toString = function toString () {
    var length = this.length | 0;
    if (length === 0) { return '' }
    if (arguments.length === 0) { return utf8Slice(this, 0, length) }
    return slowToString.apply(this, arguments)
  };

  Buffer$1.prototype.equals = function equals (b) {
    if (!internalIsBuffer(b)) { throw new TypeError('Argument must be a Buffer') }
    if (this === b) { return true }
    return Buffer$1.compare(this, b) === 0
  };

  Buffer$1.prototype.inspect = function inspect () {
    var str = '';
    var max = INSPECT_MAX_BYTES;
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
      if (this.length > max) { str += ' ... '; }
    }
    return '<Buffer ' + str + '>'
  };

  Buffer$1.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (!internalIsBuffer(target)) {
      throw new TypeError('Argument must be a Buffer')
    }

    if (start === undefined) {
      start = 0;
    }
    if (end === undefined) {
      end = target ? target.length : 0;
    }
    if (thisStart === undefined) {
      thisStart = 0;
    }
    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index')
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0
    }
    if (thisStart >= thisEnd) {
      return -1
    }
    if (start >= end) {
      return 1
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;

    if (this === target) { return 0 }

    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);

    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break
      }
    }

    if (x < y) { return -1 }
    if (y < x) { return 1 }
    return 0
  };

  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) { return -1 }

    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000;
    }
    byteOffset = +byteOffset;  // Coerce to Number.
    if (isNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : (buffer.length - 1);
    }

    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) { byteOffset = buffer.length + byteOffset; }
    if (byteOffset >= buffer.length) {
      if (dir) { return -1 }
      else { byteOffset = buffer.length - 1; }
    } else if (byteOffset < 0) {
      if (dir) { byteOffset = 0; }
      else { return -1 }
    }

    // Normalize val
    if (typeof val === 'string') {
      val = Buffer$1.from(val, encoding);
    }

    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (internalIsBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]
      if (Buffer$1.TYPED_ARRAY_SUPPORT &&
          typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
        }
      }
      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
    }

    throw new TypeError('val must be string, number or Buffer')
  }

  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();
      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
          encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read$$1 (buf, i) {
      if (indexSize === 1) {
        return buf[i]
      } else {
        return buf.readUInt16BE(i * indexSize)
      }
    }

    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read$$1(arr, i) === read$$1(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) { foundIndex = i; }
          if (i - foundIndex + 1 === valLength) { return foundIndex * indexSize }
        } else {
          if (foundIndex !== -1) { i -= i - foundIndex; }
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) { byteOffset = arrLength - valLength; }
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read$$1(arr, i + j) !== read$$1(val, j)) {
            found = false;
            break
          }
        }
        if (found) { return i }
      }
    }

    return -1
  }

  Buffer$1.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
  };

  Buffer$1.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  };

  Buffer$1.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  };

  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }

    // must be an even number of digits
    var strLen = string.length;
    if (strLen % 2 !== 0) { throw new TypeError('Invalid hex string') }

    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) { return i }
      buf[offset + i] = parsed;
    }
    return i
  }

  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }

  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }

  function latin1Write (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }

  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }

  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }

  Buffer$1.prototype.write = function write$$1 (string, offset, length, encoding) {
    var this$1 = this;

    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0;
      if (isFinite(length)) {
        length = length | 0;
        if (encoding === undefined) { encoding = 'utf8'; }
      } else {
        encoding = length;
        length = undefined;
      }
    // legacy write(string, encoding, offset, length) - remove in v0.13
    } else {
      throw new Error(
        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
      )
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) { length = remaining; }

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }

    if (!encoding) { encoding = 'utf8'; }

    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this$1, string, offset, length)

        case 'utf8':
        case 'utf-8':
          return utf8Write(this$1, string, offset, length)

        case 'ascii':
          return asciiWrite(this$1, string, offset, length)

        case 'latin1':
        case 'binary':
          return latin1Write(this$1, string, offset, length)

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this$1, string, offset, length)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this$1, string, offset, length)

        default:
          if (loweredCase) { throw new TypeError('Unknown encoding: ' + encoding) }
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer$1.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  };

  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return fromByteArray(buf)
    } else {
      return fromByteArray(buf.slice(start, end))
    }
  }

  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];

    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
        : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
            break
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res)
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res
  }

  function asciiSlice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret
  }

  function latin1Slice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret
  }

  function hexSlice (buf, start, end) {
    var len = buf.length;

    if (!start || start < 0) { start = 0; }
    if (!end || end < 0 || end > len) { end = len; }

    var out = '';
    for (var i = start; i < end; ++i) {
      out += toHex(buf[i]);
    }
    return out
  }

  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res
  }

  Buffer$1.prototype.slice = function slice (start, end) {
    var this$1 = this;

    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) { start = 0; }
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) { end = 0; }
    } else if (end > len) {
      end = len;
    }

    if (end < start) { end = start; }

    var newBuf;
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end);
      newBuf.__proto__ = Buffer$1.prototype;
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer$1(sliceLen, undefined);
      for (var i = 0; i < sliceLen; ++i) {
        newBuf[i] = this$1[i + start];
      }
    }

    return newBuf
  };

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) { throw new RangeError('offset is not uint') }
    if (offset + ext > length) { throw new RangeError('Trying to access beyond buffer length') }
  }

  Buffer$1.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    var this$1 = this;

    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) { checkOffset(offset, byteLength, this.length); }

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this$1[offset + i] * mul;
    }

    return val
  };

  Buffer$1.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    var this$1 = this;

    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this$1[offset + --byteLength] * mul;
    }

    return val
  };

  Buffer$1.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    if (!noAssert) { checkOffset(offset, 1, this.length); }
    return this[offset]
  };

  Buffer$1.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    if (!noAssert) { checkOffset(offset, 2, this.length); }
    return this[offset] | (this[offset + 1] << 8)
  };

  Buffer$1.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    if (!noAssert) { checkOffset(offset, 2, this.length); }
    return (this[offset] << 8) | this[offset + 1]
  };

  Buffer$1.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    if (!noAssert) { checkOffset(offset, 4, this.length); }

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  };

  Buffer$1.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    if (!noAssert) { checkOffset(offset, 4, this.length); }

    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  };

  Buffer$1.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    var this$1 = this;

    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) { checkOffset(offset, byteLength, this.length); }

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this$1[offset + i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) { val -= Math.pow(2, 8 * byteLength); }

    return val
  };

  Buffer$1.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    var this$1 = this;

    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) { checkOffset(offset, byteLength, this.length); }

    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while (i > 0 && (mul *= 0x100)) {
      val += this$1[offset + --i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) { val -= Math.pow(2, 8 * byteLength); }

    return val
  };

  Buffer$1.prototype.readInt8 = function readInt8 (offset, noAssert) {
    if (!noAssert) { checkOffset(offset, 1, this.length); }
    if (!(this[offset] & 0x80)) { return (this[offset]) }
    return ((0xff - this[offset] + 1) * -1)
  };

  Buffer$1.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    if (!noAssert) { checkOffset(offset, 2, this.length); }
    var val = this[offset] | (this[offset + 1] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer$1.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    if (!noAssert) { checkOffset(offset, 2, this.length); }
    var val = this[offset + 1] | (this[offset] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer$1.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    if (!noAssert) { checkOffset(offset, 4, this.length); }

    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  };

  Buffer$1.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    if (!noAssert) { checkOffset(offset, 4, this.length); }

    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  };

  Buffer$1.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    if (!noAssert) { checkOffset(offset, 4, this.length); }
    return read(this, offset, true, 23, 4)
  };

  Buffer$1.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    if (!noAssert) { checkOffset(offset, 4, this.length); }
    return read(this, offset, false, 23, 4)
  };

  Buffer$1.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    if (!noAssert) { checkOffset(offset, 8, this.length); }
    return read(this, offset, true, 52, 8)
  };

  Buffer$1.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    if (!noAssert) { checkOffset(offset, 8, this.length); }
    return read(this, offset, false, 52, 8)
  };

  function checkInt (buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf)) { throw new TypeError('"buffer" argument must be a Buffer instance') }
    if (value > max || value < min) { throw new RangeError('"value" argument is out of bounds') }
    if (offset + ext > buf.length) { throw new RangeError('Index out of range') }
  }

  Buffer$1.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    var this$1 = this;

    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this$1[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$1.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    var this$1 = this;

    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this$1[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$1.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) { checkInt(this, value, offset, 1, 0xff, 0); }
    if (!Buffer$1.TYPED_ARRAY_SUPPORT) { value = Math.floor(value); }
    this[offset] = (value & 0xff);
    return offset + 1
  };

  function objectWriteUInt16 (buf, value, offset, littleEndian) {
    if (value < 0) { value = 0xffff + value + 1; }
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
        (littleEndian ? i : 1 - i) * 8;
    }
  }

  Buffer$1.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) { checkInt(this, value, offset, 2, 0xffff, 0); }
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer$1.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) { checkInt(this, value, offset, 2, 0xffff, 0); }
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  function objectWriteUInt32 (buf, value, offset, littleEndian) {
    if (value < 0) { value = 0xffffffff + value + 1; }
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
    }
  }

  Buffer$1.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) { checkInt(this, value, offset, 4, 0xffffffff, 0); }
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = (value >>> 24);
      this[offset + 2] = (value >>> 16);
      this[offset + 1] = (value >>> 8);
      this[offset] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer$1.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) { checkInt(this, value, offset, 4, 0xffffffff, 0); }
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  Buffer$1.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    var this$1 = this;

    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this$1[offset + i - 1] !== 0) {
        sub = 1;
      }
      this$1[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$1.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    var this$1 = this;

    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this$1[offset + i + 1] !== 0) {
        sub = 1;
      }
      this$1[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$1.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) { checkInt(this, value, offset, 1, 0x7f, -0x80); }
    if (!Buffer$1.TYPED_ARRAY_SUPPORT) { value = Math.floor(value); }
    if (value < 0) { value = 0xff + value + 1; }
    this[offset] = (value & 0xff);
    return offset + 1
  };

  Buffer$1.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) { checkInt(this, value, offset, 2, 0x7fff, -0x8000); }
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer$1.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) { checkInt(this, value, offset, 2, 0x7fff, -0x8000); }
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  Buffer$1.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) { checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000); }
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      this[offset + 2] = (value >>> 16);
      this[offset + 3] = (value >>> 24);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer$1.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) { checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000); }
    if (value < 0) { value = 0xffffffff + value + 1; }
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) { throw new RangeError('Index out of range') }
    if (offset < 0) { throw new RangeError('Index out of range') }
  }

  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
    }
    write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4
  }

  Buffer$1.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  };

  Buffer$1.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  };

  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
    }
    write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8
  }

  Buffer$1.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  };

  Buffer$1.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  };

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer$1.prototype.copy = function copy (target, targetStart, start, end) {
    var this$1 = this;

    if (!start) { start = 0; }
    if (!end && end !== 0) { end = this.length; }
    if (targetStart >= target.length) { targetStart = target.length; }
    if (!targetStart) { targetStart = 0; }
    if (end > 0 && end < start) { end = start; }

    // Copy 0 bytes; we're done
    if (end === start) { return 0 }
    if (target.length === 0 || this.length === 0) { return 0 }

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) { throw new RangeError('sourceStart out of bounds') }
    if (end < 0) { throw new RangeError('sourceEnd out of bounds') }

    // Are we oob?
    if (end > this.length) { end = this.length; }
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;
    var i;

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this$1[i + start];
      }
    } else if (len < 1000 || !Buffer$1.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this$1[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, start + len),
        targetStart
      );
    }

    return len
  };

  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer$1.prototype.fill = function fill (val, start, end, encoding) {
    var this$1 = this;

    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0);
        if (code < 256) {
          val = code;
        }
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }
      if (typeof encoding === 'string' && !Buffer$1.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }

    if (end <= start) {
      return this
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;

    if (!val) { val = 0; }

    var i;
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this$1[i] = val;
      }
    } else {
      var bytes = internalIsBuffer(val)
        ? val
        : utf8ToBytes(new Buffer$1(val, encoding).toString());
      var len = bytes.length;
      for (i = 0; i < end - start; ++i) {
        this$1[i + start] = bytes[i % len];
      }
    }

    return this
  };

  // HELPER FUNCTIONS
  // ================

  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

  function base64clean (str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) { return '' }
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
    return str
  }

  function stringtrim (str) {
    if (str.trim) { return str.trim() }
    return str.replace(/^\s+|\s+$/g, '')
  }

  function toHex (n) {
    if (n < 16) { return '0' + n.toString(16) }
    return n.toString(16)
  }

  function utf8ToBytes (string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) { bytes.push(0xEF, 0xBF, 0xBD); }
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) { bytes.push(0xEF, 0xBF, 0xBD); }
            continue
          }

          // valid lead
          leadSurrogate = codePoint;

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) { bytes.push(0xEF, 0xBF, 0xBD); }
          leadSurrogate = codePoint;
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) { bytes.push(0xEF, 0xBF, 0xBD); }
      }

      leadSurrogate = null;

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) { break }
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) { break }
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) { break }
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) { break }
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function asciiToBytes (str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray
  }

  function utf16leToBytes (str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) { break }

      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray
  }


  function base64ToBytes (str) {
    return toByteArray(base64clean(str))
  }

  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if ((i + offset >= dst.length) || (i >= src.length)) { break }
      dst[i + offset] = src[i];
    }
    return i
  }

  function isnan (val) {
    return val !== val // eslint-disable-line no-self-compare
  }


  // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
  // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually
  function isBuffer$1(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
  }

  function isFastBuffer (obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
  }

  // For Node v0.10 support. Remove this eventually.
  function isSlowBuffer (obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
  }

  var bufferEs6 = /*#__PURE__*/Object.freeze({
    INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
    kMaxLength: _kMaxLength,
    Buffer: Buffer$1,
    SlowBuffer: SlowBuffer,
    isBuffer: isBuffer$1
  });

  var safeBuffer = createCommonjsModule(function (module, exports) {
  /* eslint-disable node/no-deprecated-api */

  var Buffer = bufferEs6.Buffer;

  // alternative to using Object.keys for old browsers
  function copyProps (src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }
  if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = bufferEs6;
  } else {
    // Copy properties from require('buffer')
    copyProps(bufferEs6, exports);
    exports.Buffer = SafeBuffer;
  }

  function SafeBuffer (arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length)
  }

  // Copy static methods from Buffer
  copyProps(Buffer, SafeBuffer);

  SafeBuffer.from = function (arg, encodingOrOffset, length) {
    if (typeof arg === 'number') {
      throw new TypeError('Argument must not be a number')
    }
    return Buffer(arg, encodingOrOffset, length)
  };

  SafeBuffer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    var buf = Buffer(size);
    if (fill !== undefined) {
      if (typeof encoding === 'string') {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf
  };

  SafeBuffer.allocUnsafe = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return Buffer(size)
  };

  SafeBuffer.allocUnsafeSlow = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return bufferEs6.SlowBuffer(size)
  };
  });
  var safeBuffer_1 = safeBuffer.Buffer;

  var Buffer$2 = safeBuffer.Buffer;

  var defer = typeof setImmediate === 'undefined'
    ? process.nextTick
    : setImmediate;

  function paramsHaveRequestBody (params) {
    return (
      params.body ||
      params.requestBodyStream ||
      (params.json && typeof params.json !== 'boolean') ||
      params.multipart
    )
  }

  function safeStringify (obj, replacer) {
    var ret;
    try {
      ret = JSON.stringify(obj, replacer);
    } catch (e) {
      ret = stringify_1(obj, replacer);
    }
    return ret
  }

  function md5 (str) {
    return tls.createHash('md5').update(str).digest('hex')
  }

  function isReadStream (rs) {
    return rs.readable && rs.path && rs.mode
  }

  function toBase64 (str) {
    return Buffer$2.from(str || '', 'utf8').toString('base64')
  }

  function copy (obj) {
    var o = {};
    Object.keys(obj).forEach(function (i) {
      o[i] = obj[i];
    });
    return o
  }

  function version$3 () {
    var numbers = process.version.replace('v', '').split('.');
    return {
      major: parseInt(numbers[0], 10),
      minor: parseInt(numbers[1], 10),
      patch: parseInt(numbers[2], 10)
    }
  }

  var paramsHaveRequestBody_1 = paramsHaveRequestBody;
  var safeStringify_1 = safeStringify;
  var md5_1 = md5;
  var isReadStream_1 = isReadStream;
  var toBase64_1 = toBase64;
  var copy_1 = copy;
  var version_1 = version$3;
  var defer_1 = defer;

  var helpers = {
  	paramsHaveRequestBody: paramsHaveRequestBody_1,
  	safeStringify: safeStringify_1,
  	md5: md5_1,
  	isReadStream: isReadStream_1,
  	toBase64: toBase64_1,
  	copy: copy_1,
  	version: version_1,
  	defer: defer_1
  };

  var hasFetch = isFunction$1(global.fetch) && isFunction$1(global.ReadableStream);

  var _blobConstructor;
  function blobConstructor() {
    if (typeof _blobConstructor !== 'undefined') {
      return _blobConstructor;
    }
    try {
      new global.Blob([new ArrayBuffer(1)]);
      _blobConstructor = true;
    } catch (e) {
      _blobConstructor = false;
    }
    return _blobConstructor
  }
  var xhr;

  function checkTypeSupport(type) {
    if (!xhr) {
      xhr = new global.XMLHttpRequest();
      // If location.host is empty, e.g. if this page/worker was loaded
      // from a Blob, then use example.com to avoid an error
      xhr.open('GET', global.location.host ? '/' : 'https://example.com');
    }
    try {
      xhr.responseType = type;
      return xhr.responseType === type
    } catch (e) {
      return false
    }

  }

  // For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
  // Safari 7.1 appears to have fixed this bug.
  var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined';
  var haveSlice = haveArrayBuffer && isFunction$1(global.ArrayBuffer.prototype.slice);

  var arraybuffer = haveArrayBuffer && checkTypeSupport('arraybuffer');
    // These next two tests unavoidably show warnings in Chrome. Since fetch will always
    // be used if it's available, just return false for these to avoid the warnings.
  var msstream = !hasFetch && haveSlice && checkTypeSupport('ms-stream');
  var mozchunkedarraybuffer = !hasFetch && haveArrayBuffer &&
    checkTypeSupport('moz-chunked-arraybuffer');
  var overrideMimeType = isFunction$1(xhr.overrideMimeType);
  var vbArray = isFunction$1(global.VBArray);

  function isFunction$1(value) {
    return typeof value === 'function'
  }

  xhr = null; // Help gc

  var domain;

  // This constructor is used to store event handlers. Instantiating this is
  // faster than explicitly calling `Object.create(null)` to get a "clean" empty
  // object (tested with v8 v4.9).
  function EventHandlers() {}
  EventHandlers.prototype = Object.create(null);

  function EventEmitter() {
    EventEmitter.init.call(this);
  }

  // nodejs oddity
  // require('events') === require('events').EventEmitter
  EventEmitter.EventEmitter = EventEmitter;

  EventEmitter.usingDomains = false;

  EventEmitter.prototype.domain = undefined;
  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._maxListeners = undefined;

  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  EventEmitter.defaultMaxListeners = 10;

  EventEmitter.init = function() {
    this.domain = null;
    if (EventEmitter.usingDomains) {
      // if there is an active domain, then attach to it.
      if (domain.active && !(this instanceof domain.Domain)) {
        this.domain = domain.active;
      }
    }

    if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
      this._events = new EventHandlers();
      this._eventsCount = 0;
    }

    this._maxListeners = this._maxListeners || undefined;
  };

  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || isNaN(n))
      { throw new TypeError('"n" argument must be a positive number'); }
    this._maxListeners = n;
    return this;
  };

  function $getMaxListeners(that) {
    if (that._maxListeners === undefined)
      { return EventEmitter.defaultMaxListeners; }
    return that._maxListeners;
  }

  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $getMaxListeners(this);
  };

  // These standalone emit* functions are used to optimize calling of event
  // handlers for fast cases because emit() itself often has a variable number of
  // arguments and can be deoptimized because of that. These functions always have
  // the same number of arguments and thus do not get deoptimized, so the code
  // inside them can execute faster.
  function emitNone(handler, isFn, self) {
    if (isFn)
      { handler.call(self); }
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        { listeners[i].call(self); }
    }
  }
  function emitOne(handler, isFn, self, arg1) {
    if (isFn)
      { handler.call(self, arg1); }
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        { listeners[i].call(self, arg1); }
    }
  }
  function emitTwo(handler, isFn, self, arg1, arg2) {
    if (isFn)
      { handler.call(self, arg1, arg2); }
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        { listeners[i].call(self, arg1, arg2); }
    }
  }
  function emitThree(handler, isFn, self, arg1, arg2, arg3) {
    if (isFn)
      { handler.call(self, arg1, arg2, arg3); }
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        { listeners[i].call(self, arg1, arg2, arg3); }
    }
  }

  function emitMany(handler, isFn, self, args) {
    if (isFn)
      { handler.apply(self, args); }
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        { listeners[i].apply(self, args); }
    }
  }

  EventEmitter.prototype.emit = function emit(type) {
    var arguments$1 = arguments;

    var er, handler, len, args, i, events, domain;
    var needDomainExit = false;
    var doError = (type === 'error');

    events = this._events;
    if (events)
      { doError = (doError && events.error == null); }
    else if (!doError)
      { return false; }

    domain = this.domain;

    // If there is no 'error' event listener then throw.
    if (doError) {
      er = arguments[1];
      if (domain) {
        if (!er)
          { er = new Error('Uncaught, unspecified "error" event'); }
        er.domainEmitter = this;
        er.domain = domain;
        er.domainThrown = false;
        domain.emit('error', er);
      } else if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
      return false;
    }

    handler = events[type];

    if (!handler)
      { return false; }

    var isFn = typeof handler === 'function';
    len = arguments.length;
    switch (len) {
      // fast cases
      case 1:
        emitNone(handler, isFn, this);
        break;
      case 2:
        emitOne(handler, isFn, this, arguments[1]);
        break;
      case 3:
        emitTwo(handler, isFn, this, arguments[1], arguments[2]);
        break;
      case 4:
        emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
        break;
      // slower
      default:
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          { args[i - 1] = arguments$1[i]; }
        emitMany(handler, isFn, this, args);
    }

    if (needDomainExit)
      { domain.exit(); }

    return true;
  };

  function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;

    if (typeof listener !== 'function')
      { throw new TypeError('"listener" argument must be a function'); }

    events = target._events;
    if (!events) {
      events = target._events = new EventHandlers();
      target._eventsCount = 0;
    } else {
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (events.newListener) {
        target.emit('newListener', type,
                    listener.listener ? listener.listener : listener);

        // Re-assign `events` because a newListener handler could have caused the
        // this._events to be assigned to a new object
        events = target._events;
      }
      existing = events[type];
    }

    if (!existing) {
      // Optimize the case of one listener. Don't need the extra array object.
      existing = events[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === 'function') {
        // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [listener, existing] :
                                            [existing, listener];
      } else {
        // If we've already got an array, just append.
        if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
      }

      // Check for listener leak
      if (!existing.warned) {
        m = $getMaxListeners(target);
        if (m && m > 0 && existing.length > m) {
          existing.warned = true;
          var w = new Error('Possible EventEmitter memory leak detected. ' +
                              existing.length + ' ' + type + ' listeners added. ' +
                              'Use emitter.setMaxListeners() to increase limit');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          emitWarning(w);
        }
      }
    }

    return target;
  }
  function emitWarning(e) {
    typeof console.warn === 'function' ? console.warn(e) : console.log(e);
  }
  EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.prependListener =
      function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      };

  function _onceWrap(target, type, listener) {
    var fired = false;
    function g() {
      target.removeListener(type, g);
      if (!fired) {
        fired = true;
        listener.apply(target, arguments);
      }
    }
    g.listener = listener;
    return g;
  }

  EventEmitter.prototype.once = function once(type, listener) {
    if (typeof listener !== 'function')
      { throw new TypeError('"listener" argument must be a function'); }
    this.on(type, _onceWrap(this, type, listener));
    return this;
  };

  EventEmitter.prototype.prependOnceListener =
      function prependOnceListener(type, listener) {
        if (typeof listener !== 'function')
          { throw new TypeError('"listener" argument must be a function'); }
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };

  // emits a 'removeListener' event iff the listener was removed
  EventEmitter.prototype.removeListener =
      function removeListener(type, listener) {
        var list, events, position, i, originalListener;

        if (typeof listener !== 'function')
          { throw new TypeError('"listener" argument must be a function'); }

        events = this._events;
        if (!events)
          { return this; }

        list = events[type];
        if (!list)
          { return this; }

        if (list === listener || (list.listener && list.listener === listener)) {
          if (--this._eventsCount === 0)
            { this._events = new EventHandlers(); }
          else {
            delete events[type];
            if (events.removeListener)
              { this.emit('removeListener', type, list.listener || listener); }
          }
        } else if (typeof list !== 'function') {
          position = -1;

          for (i = list.length; i-- > 0;) {
            if (list[i] === listener ||
                (list[i].listener && list[i].listener === listener)) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }

          if (position < 0)
            { return this; }

          if (list.length === 1) {
            list[0] = undefined;
            if (--this._eventsCount === 0) {
              this._events = new EventHandlers();
              return this;
            } else {
              delete events[type];
            }
          } else {
            spliceOne(list, position);
          }

          if (events.removeListener)
            { this.emit('removeListener', type, originalListener || listener); }
        }

        return this;
      };

  EventEmitter.prototype.removeAllListeners =
      function removeAllListeners(type) {
        var this$1 = this;

        var listeners, events;

        events = this._events;
        if (!events)
          { return this; }

        // not listening for removeListener, no need to emit
        if (!events.removeListener) {
          if (arguments.length === 0) {
            this._events = new EventHandlers();
            this._eventsCount = 0;
          } else if (events[type]) {
            if (--this._eventsCount === 0)
              { this._events = new EventHandlers(); }
            else
              { delete events[type]; }
          }
          return this;
        }

        // emit removeListener for all listeners on all events
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          for (var i = 0, key; i < keys.length; ++i) {
            key = keys[i];
            if (key === 'removeListener') { continue; }
            this$1.removeAllListeners(key);
          }
          this.removeAllListeners('removeListener');
          this._events = new EventHandlers();
          this._eventsCount = 0;
          return this;
        }

        listeners = events[type];

        if (typeof listeners === 'function') {
          this.removeListener(type, listeners);
        } else if (listeners) {
          // LIFO order
          do {
            this$1.removeListener(type, listeners[listeners.length - 1]);
          } while (listeners[0]);
        }

        return this;
      };

  EventEmitter.prototype.listeners = function listeners(type) {
    var evlistener;
    var ret;
    var events = this._events;

    if (!events)
      { ret = []; }
    else {
      evlistener = events[type];
      if (!evlistener)
        { ret = []; }
      else if (typeof evlistener === 'function')
        { ret = [evlistener.listener || evlistener]; }
      else
        { ret = unwrapListeners(evlistener); }
    }

    return ret;
  };

  EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
      return emitter.listenerCount(type);
    } else {
      return listenerCount.call(emitter, type);
    }
  };

  EventEmitter.prototype.listenerCount = listenerCount;
  function listenerCount(type) {
    var events = this._events;

    if (events) {
      var evlistener = events[type];

      if (typeof evlistener === 'function') {
        return 1;
      } else if (evlistener) {
        return evlistener.length;
      }
    }

    return 0;
  }

  EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
  };

  // About 1.5x faster than the two-arg version of Array#splice().
  function spliceOne(list, index) {
    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
      { list[i] = list[k]; }
    list.pop();
  }

  function arrayClone(arr, i) {
    var copy = new Array(i);
    while (i--)
      { copy[i] = arr[i]; }
    return copy;
  }

  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }
    return ret;
  }

  var events$1 = /*#__PURE__*/Object.freeze({
    default: EventEmitter,
    EventEmitter: EventEmitter
  });

  function BufferList() {
    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function (v) {
    var entry = { data: v, next: null };
    if (this.length > 0) { this.tail.next = entry; }else { this.head = entry; }
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function (v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) { this.tail = entry; }
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function () {
    if (this.length === 0) { return; }
    var ret = this.head.data;
    if (this.length === 1) { this.head = this.tail = null; }else { this.head = this.head.next; }
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function () {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function (s) {
    if (this.length === 0) { return ''; }
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function (n) {
    if (this.length === 0) { return Buffer$1.alloc(0); }
    if (this.length === 1) { return this.head.data; }
    var ret = Buffer$1.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      p.data.copy(ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  // Copyright Joyent, Inc. and other Node contributors.
  var isBufferEncoding = Buffer$1.isEncoding
    || function(encoding) {
         switch (encoding && encoding.toLowerCase()) {
           case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
           default: return false;
         }
       };


  function assertEncoding(encoding) {
    if (encoding && !isBufferEncoding(encoding)) {
      throw new Error('Unknown encoding: ' + encoding);
    }
  }

  // StringDecoder provides an interface for efficiently splitting a series of
  // buffers into a series of JS strings without breaking apart multi-byte
  // characters. CESU-8 is handled as part of the UTF-8 encoding.
  //
  // @TODO Handling all encodings inside a single object makes it very difficult
  // to reason about this code, so it should be split up in the future.
  // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
  // points as used by CESU-8.
  function StringDecoder(encoding) {
    this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
    assertEncoding(encoding);
    switch (this.encoding) {
      case 'utf8':
        // CESU-8 represents each of Surrogate Pair by 3-bytes
        this.surrogateSize = 3;
        break;
      case 'ucs2':
      case 'utf16le':
        // UTF-16 represents each of Surrogate Pair by 2-bytes
        this.surrogateSize = 2;
        this.detectIncompleteChar = utf16DetectIncompleteChar;
        break;
      case 'base64':
        // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
        this.surrogateSize = 3;
        this.detectIncompleteChar = base64DetectIncompleteChar;
        break;
      default:
        this.write = passThroughWrite;
        return;
    }

    // Enough space to store all bytes of a single character. UTF-8 needs 4
    // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
    this.charBuffer = new Buffer$1(6);
    // Number of bytes received for the current incomplete multi-byte character.
    this.charReceived = 0;
    // Number of bytes expected for the current incomplete multi-byte character.
    this.charLength = 0;
  }

  // write decodes the given buffer and returns it as JS string that is
  // guaranteed to not contain any partial multi-byte characters. Any partial
  // character found at the end of the buffer is buffered up, and will be
  // returned when calling write again with the remaining bytes.
  //
  // Note: Converting a Buffer containing an orphan surrogate to a String
  // currently works, but converting a String to a Buffer (via `new Buffer`, or
  // Buffer#write) will replace incomplete surrogates with the unicode
  // replacement character. See https://codereview.chromium.org/121173009/ .
  StringDecoder.prototype.write = function(buffer) {
    var this$1 = this;

    var charStr = '';
    // if our last write ended with an incomplete multibyte character
    while (this.charLength) {
      // determine how many remaining bytes this buffer has to offer for this char
      var available = (buffer.length >= this$1.charLength - this$1.charReceived) ?
          this$1.charLength - this$1.charReceived :
          buffer.length;

      // add the new bytes to the char buffer
      buffer.copy(this$1.charBuffer, this$1.charReceived, 0, available);
      this$1.charReceived += available;

      if (this$1.charReceived < this$1.charLength) {
        // still not enough chars in this buffer? wait for more ...
        return '';
      }

      // remove bytes belonging to the current character from the buffer
      buffer = buffer.slice(available, buffer.length);

      // get the character that was split
      charStr = this$1.charBuffer.slice(0, this$1.charLength).toString(this$1.encoding);

      // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
      var charCode = charStr.charCodeAt(charStr.length - 1);
      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
        this$1.charLength += this$1.surrogateSize;
        charStr = '';
        continue;
      }
      this$1.charReceived = this$1.charLength = 0;

      // if there are no more bytes in this buffer, just emit our char
      if (buffer.length === 0) {
        return charStr;
      }
      break;
    }

    // determine and set charLength / charReceived
    this.detectIncompleteChar(buffer);

    var end = buffer.length;
    if (this.charLength) {
      // buffer the incomplete character bytes we got
      buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
      end -= this.charReceived;
    }

    charStr += buffer.toString(this.encoding, 0, end);

    var end = charStr.length - 1;
    var charCode = charStr.charCodeAt(end);
    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      var size = this.surrogateSize;
      this.charLength += size;
      this.charReceived += size;
      this.charBuffer.copy(this.charBuffer, size, 0, size);
      buffer.copy(this.charBuffer, 0, 0, size);
      return charStr.substring(0, end);
    }

    // or just emit the charStr
    return charStr;
  };

  // detectIncompleteChar determines if there is an incomplete UTF-8 character at
  // the end of the given buffer. If so, it sets this.charLength to the byte
  // length that character, and sets this.charReceived to the number of bytes
  // that are available for this character.
  StringDecoder.prototype.detectIncompleteChar = function(buffer) {
    var this$1 = this;

    // determine how many bytes we have to check at the end of this buffer
    var i = (buffer.length >= 3) ? 3 : buffer.length;

    // Figure out if one of the last i bytes of our buffer announces an
    // incomplete char.
    for (; i > 0; i--) {
      var c = buffer[buffer.length - i];

      // See http://en.wikipedia.org/wiki/UTF-8#Description

      // 110XXXXX
      if (i == 1 && c >> 5 == 0x06) {
        this$1.charLength = 2;
        break;
      }

      // 1110XXXX
      if (i <= 2 && c >> 4 == 0x0E) {
        this$1.charLength = 3;
        break;
      }

      // 11110XXX
      if (i <= 3 && c >> 3 == 0x1E) {
        this$1.charLength = 4;
        break;
      }
    }
    this.charReceived = i;
  };

  StringDecoder.prototype.end = function(buffer) {
    var res = '';
    if (buffer && buffer.length)
      { res = this.write(buffer); }

    if (this.charReceived) {
      var cr = this.charReceived;
      var buf = this.charBuffer;
      var enc = this.encoding;
      res += buf.slice(0, cr).toString(enc);
    }

    return res;
  };

  function passThroughWrite(buffer) {
    return buffer.toString(this.encoding);
  }

  function utf16DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 2;
    this.charLength = this.charReceived ? 2 : 0;
  }

  function base64DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 3;
    this.charLength = this.charReceived ? 3 : 0;
  }

  var stringDecoder = /*#__PURE__*/Object.freeze({
    StringDecoder: StringDecoder
  });

  Readable.ReadableState = ReadableState;

  var debug = debuglog('stream');
  inherits$1(Readable, EventEmitter);

  function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') {
      return emitter.prependListener(event, fn);
    } else {
      // This is a hack to make sure that our error handler is attached before any
      // userland ones.  NEVER DO THIS. This is here only because this code needs
      // to continue to work with older versions of Node.js that do not include
      // the prependListener() method. The goal is to eventually remove this hack.
      if (!emitter._events || !emitter._events[event])
        { emitter.on(event, fn); }
      else if (Array.isArray(emitter._events[event]))
        { emitter._events[event].unshift(fn); }
      else
        { emitter._events[event] = [fn, emitter._events[event]]; }
    }
  }
  function listenerCount$1 (emitter, type) {
    return emitter.listeners(type).length;
  }
  function ReadableState(options, stream) {

    options = options || {};

    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;

    if (stream instanceof Duplex) { this.objectMode = this.objectMode || !!options.readableObjectMode; }

    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

    // cast to ints.
    this.highWaterMark = ~ ~this.highWaterMark;

    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;

    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;

    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // when piping, we only care about 'readable' events that happen
    // after read()ing all the bytes and not getting any pushback.
    this.ranOut = false;

    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;

    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;

    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }
  function Readable(options) {

    if (!(this instanceof Readable)) { return new Readable(options); }

    this._readableState = new ReadableState(options, this);

    // legacy
    this.readable = true;

    if (options && typeof options.read === 'function') { this._read = options.read; }

    EventEmitter.call(this);
  }

  // Manually shove something into the read() buffer.
  // This returns true if the highWaterMark has not been hit yet,
  // similar to how Writable.write() returns true if you should
  // write() some more.
  Readable.prototype.push = function (chunk, encoding) {
    var state = this._readableState;

    if (!state.objectMode && typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
    }

    return readableAddChunk(this, state, chunk, encoding, false);
  };

  // Unshift should *always* be something directly out of read()
  Readable.prototype.unshift = function (chunk) {
    var state = this._readableState;
    return readableAddChunk(this, state, chunk, '', true);
  };

  Readable.prototype.isPaused = function () {
    return this._readableState.flowing === false;
  };

  function readableAddChunk(stream, state, chunk, encoding, addToFront) {
    var er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (chunk === null) {
      state.reading = false;
      onEofChunk(stream, state);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (state.ended && !addToFront) {
        var e = new Error('stream.push() after EOF');
        stream.emit('error', e);
      } else if (state.endEmitted && addToFront) {
        var _e = new Error('stream.unshift() after end event');
        stream.emit('error', _e);
      } else {
        var skipAdd;
        if (state.decoder && !addToFront && !encoding) {
          chunk = state.decoder.write(chunk);
          skipAdd = !state.objectMode && chunk.length === 0;
        }

        if (!addToFront) { state.reading = false; }

        // Don't add to the buffer if we've decoded to an empty string chunk and
        // we're not in object mode
        if (!skipAdd) {
          // if we want the data now, just emit it.
          if (state.flowing && state.length === 0 && !state.sync) {
            stream.emit('data', chunk);
            stream.read(0);
          } else {
            // update the buffer info.
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront) { state.buffer.unshift(chunk); }else { state.buffer.push(chunk); }

            if (state.needReadable) { emitReadable(stream); }
          }
        }

        maybeReadMore(stream, state);
      }
    } else if (!addToFront) {
      state.reading = false;
    }

    return needMoreData(state);
  }

  // if it's past the high water mark, we can push in some more.
  // Also, if we have no data yet, we can stand some
  // more bytes.  This is to work around cases where hwm=0,
  // such as the repl.  Also, if the push() triggered a
  // readable event, and the user called read(largeNumber) such that
  // needReadable was set, then we ought to push more, so that another
  // 'readable' event will be triggered.
  function needMoreData(state) {
    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
  }

  // backwards compatibility.
  Readable.prototype.setEncoding = function (enc) {
    this._readableState.decoder = new StringDecoder(enc);
    this._readableState.encoding = enc;
    return this;
  };

  // Don't raise the hwm > 8MB
  var MAX_HWM = 0x800000;
  function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) {
      n = MAX_HWM;
    } else {
      // Get the next highest power of 2 to prevent increasing hwm excessively in
      // tiny amounts
      n--;
      n |= n >>> 1;
      n |= n >>> 2;
      n |= n >>> 4;
      n |= n >>> 8;
      n |= n >>> 16;
      n++;
    }
    return n;
  }

  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) { return 0; }
    if (state.objectMode) { return 1; }
    if (n !== n) {
      // Only flow one buffer at a time
      if (state.flowing && state.length) { return state.buffer.head.data.length; }else { return state.length; }
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) { state.highWaterMark = computeNewHighWaterMark(n); }
    if (n <= state.length) { return n; }
    // Don't have enough
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    }
    return state.length;
  }

  // you can override either this method, or the async _read(n) below.
  Readable.prototype.read = function (n) {
    debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;

    if (n !== 0) { state.emittedReadable = false; }

    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
      debug('read: emitReadable', state.length, state.ended);
      if (state.length === 0 && state.ended) { endReadable(this); }else { emitReadable(this); }
      return null;
    }

    n = howMuchToRead(n, state);

    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
      if (state.length === 0) { endReadable(this); }
      return null;
    }

    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.

    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug('need readable', doRead);

    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
      doRead = true;
      debug('length less than watermark', doRead);
    }

    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
      doRead = false;
      debug('reading or ended', doRead);
    } else if (doRead) {
      debug('do read');
      state.reading = true;
      state.sync = true;
      // if the length is currently zero, then we *need* a readable event.
      if (state.length === 0) { state.needReadable = true; }
      // call internal read method
      this._read(state.highWaterMark);
      state.sync = false;
      // If _read pushed data synchronously, then `reading` will be false,
      // and we need to re-evaluate how much data we can return to the user.
      if (!state.reading) { n = howMuchToRead(nOrig, state); }
    }

    var ret;
    if (n > 0) { ret = fromList(n, state); }else { ret = null; }

    if (ret === null) {
      state.needReadable = true;
      n = 0;
    } else {
      state.length -= n;
    }

    if (state.length === 0) {
      // If we have nothing in the buffer, then we want to know
      // as soon as we *do* get something into the buffer.
      if (!state.ended) { state.needReadable = true; }

      // If we tried to read() past the EOF, then emit end on the next tick.
      if (nOrig !== n && state.ended) { endReadable(this); }
    }

    if (ret !== null) { this.emit('data', ret); }

    return ret;
  };

  function chunkInvalid(state, chunk) {
    var er = null;
    if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    return er;
  }

  function onEofChunk(stream, state) {
    if (state.ended) { return; }
    if (state.decoder) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }
    state.ended = true;

    // emit 'readable' now to make sure it gets picked up.
    emitReadable(stream);
  }

  // Don't emit readable right away in sync mode, because this can trigger
  // another read() call => stack overflow.  This way, it might trigger
  // a nextTick recursion warning, but that's not so bad.
  function emitReadable(stream) {
    var state = stream._readableState;
    state.needReadable = false;
    if (!state.emittedReadable) {
      debug('emitReadable', state.flowing);
      state.emittedReadable = true;
      if (state.sync) { nextTick$1(emitReadable_, stream); }else { emitReadable_(stream); }
    }
  }

  function emitReadable_(stream) {
    debug('emit readable');
    stream.emit('readable');
    flow(stream);
  }

  // at this point, the user has presumably seen the 'readable' event,
  // and called read() to consume some data.  that may have triggered
  // in turn another _read(n) call, in which case reading = true if
  // it's in progress.
  // However, if we're not ended, or reading, and the length < hwm,
  // then go ahead and try to read some more preemptively.
  function maybeReadMore(stream, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      nextTick$1(maybeReadMore_, stream, state);
    }
  }

  function maybeReadMore_(stream, state) {
    var len = state.length;
    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
      debug('maybeReadMore read 0');
      stream.read(0);
      if (len === state.length)
        // didn't get any data, stop spinning.
        { break; }else { len = state.length; }
    }
    state.readingMore = false;
  }

  // abstract method.  to be overridden in specific implementation classes.
  // call cb(er, data) where data is <= n in length.
  // for virtual (non-string, non-buffer) streams, "length" is somewhat
  // arbitrary, and perhaps not very meaningful.
  Readable.prototype._read = function (n) {
    this.emit('error', new Error('not implemented'));
  };

  Readable.prototype.pipe = function (dest, pipeOpts) {
    var src = this;
    var state = this._readableState;

    switch (state.pipesCount) {
      case 0:
        state.pipes = dest;
        break;
      case 1:
        state.pipes = [state.pipes, dest];
        break;
      default:
        state.pipes.push(dest);
        break;
    }
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

    var doEnd = (!pipeOpts || pipeOpts.end !== false);

    var endFn = doEnd ? onend : cleanup;
    if (state.endEmitted) { nextTick$1(endFn); }else { src.once('end', endFn); }

    dest.on('unpipe', onunpipe);
    function onunpipe(readable) {
      debug('onunpipe');
      if (readable === src) {
        cleanup();
      }
    }

    function onend() {
      debug('onend');
      dest.end();
    }

    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);

    var cleanedUp = false;
    function cleanup() {
      debug('cleanup');
      // cleanup event handlers once the pipe is broken
      dest.removeListener('close', onclose);
      dest.removeListener('finish', onfinish);
      dest.removeListener('drain', ondrain);
      dest.removeListener('error', onerror);
      dest.removeListener('unpipe', onunpipe);
      src.removeListener('end', onend);
      src.removeListener('end', cleanup);
      src.removeListener('data', ondata);

      cleanedUp = true;

      // if the reader is waiting for a drain event from this
      // specific writer, then it would cause it to never start
      // flowing again.
      // So, if this is awaiting a drain, then we just call it now.
      // If we don't know, then assume that we are waiting for one.
      if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) { ondrain(); }
    }

    // If the user pushes more data while we're writing to dest then we'll end up
    // in ondata again. However, we only want to increase awaitDrain once because
    // dest will only emit one 'drain' event for the multiple writes.
    // => Introduce a guard on increasing awaitDrain.
    var increasedAwaitDrain = false;
    src.on('data', ondata);
    function ondata(chunk) {
      debug('ondata');
      increasedAwaitDrain = false;
      var ret = dest.write(chunk);
      if (false === ret && !increasedAwaitDrain) {
        // If the user unpiped during `dest.write()`, it is possible
        // to get stuck in a permanently paused state if that write
        // also returned false.
        // => Check whether `dest` is still a piping destination.
        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
          debug('false write response, pause', src._readableState.awaitDrain);
          src._readableState.awaitDrain++;
          increasedAwaitDrain = true;
        }
        src.pause();
      }
    }

    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
      debug('onerror', er);
      unpipe();
      dest.removeListener('error', onerror);
      if (listenerCount$1(dest, 'error') === 0) { dest.emit('error', er); }
    }

    // Make sure our error handler is attached before userland ones.
    prependListener(dest, 'error', onerror);

    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
      dest.removeListener('finish', onfinish);
      unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
      debug('onfinish');
      dest.removeListener('close', onclose);
      unpipe();
    }
    dest.once('finish', onfinish);

    function unpipe() {
      debug('unpipe');
      src.unpipe(dest);
    }

    // tell the dest that it's being piped to
    dest.emit('pipe', src);

    // start the flow if it hasn't been started already.
    if (!state.flowing) {
      debug('pipe resume');
      src.resume();
    }

    return dest;
  };

  function pipeOnDrain(src) {
    return function () {
      var state = src._readableState;
      debug('pipeOnDrain', state.awaitDrain);
      if (state.awaitDrain) { state.awaitDrain--; }
      if (state.awaitDrain === 0 && src.listeners('data').length) {
        state.flowing = true;
        flow(src);
      }
    };
  }

  Readable.prototype.unpipe = function (dest) {
    var this$1 = this;

    var state = this._readableState;

    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) { return this; }

    // just one destination.  most common case.
    if (state.pipesCount === 1) {
      // passed in one, but it's not the right one.
      if (dest && dest !== state.pipes) { return this; }

      if (!dest) { dest = state.pipes; }

      // got a match.
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      if (dest) { dest.emit('unpipe', this); }
      return this;
    }

    // slow case. multiple pipe destinations.

    if (!dest) {
      // remove all.
      var dests = state.pipes;
      var len = state.pipesCount;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;

      for (var _i = 0; _i < len; _i++) {
        dests[_i].emit('unpipe', this$1);
      }return this;
    }

    // try to find the right one.
    var i = indexOf(state.pipes, dest);
    if (i === -1) { return this; }

    state.pipes.splice(i, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) { state.pipes = state.pipes[0]; }

    dest.emit('unpipe', this);

    return this;
  };

  // set up data events if they are asked for
  // Ensure readable listeners eventually get something
  Readable.prototype.on = function (ev, fn) {
    var res = EventEmitter.prototype.on.call(this, ev, fn);

    if (ev === 'data') {
      // Start flowing on next tick if stream isn't explicitly paused
      if (this._readableState.flowing !== false) { this.resume(); }
    } else if (ev === 'readable') {
      var state = this._readableState;
      if (!state.endEmitted && !state.readableListening) {
        state.readableListening = state.needReadable = true;
        state.emittedReadable = false;
        if (!state.reading) {
          nextTick$1(nReadingNextTick, this);
        } else if (state.length) {
          emitReadable(this, state);
        }
      }
    }

    return res;
  };
  Readable.prototype.addListener = Readable.prototype.on;

  function nReadingNextTick(self) {
    debug('readable nexttick read 0');
    self.read(0);
  }

  // pause() and resume() are remnants of the legacy readable stream API
  // If the user uses them, then switch into old mode.
  Readable.prototype.resume = function () {
    var state = this._readableState;
    if (!state.flowing) {
      debug('resume');
      state.flowing = true;
      resume(this, state);
    }
    return this;
  };

  function resume(stream, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      nextTick$1(resume_, stream, state);
    }
  }

  function resume_(stream, state) {
    if (!state.reading) {
      debug('resume read 0');
      stream.read(0);
    }

    state.resumeScheduled = false;
    state.awaitDrain = 0;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading) { stream.read(0); }
  }

  Readable.prototype.pause = function () {
    debug('call pause flowing=%j', this._readableState.flowing);
    if (false !== this._readableState.flowing) {
      debug('pause');
      this._readableState.flowing = false;
      this.emit('pause');
    }
    return this;
  };

  function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
    while (state.flowing && stream.read() !== null) {}
  }

  // wrap an old-style stream as the async data source.
  // This is *not* part of the readable stream interface.
  // It is an ugly unfortunate mess of history.
  Readable.prototype.wrap = function (stream) {
    var this$1 = this;

    var state = this._readableState;
    var paused = false;

    var self = this;
    stream.on('end', function () {
      debug('wrapped end');
      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) { self.push(chunk); }
      }

      self.push(null);
    });

    stream.on('data', function (chunk) {
      debug('wrapped data');
      if (state.decoder) { chunk = state.decoder.write(chunk); }

      // don't skip over falsy values in objectMode
      if (state.objectMode && (chunk === null || chunk === undefined)) { return; }else if (!state.objectMode && (!chunk || !chunk.length)) { return; }

      var ret = self.push(chunk);
      if (!ret) {
        paused = true;
        stream.pause();
      }
    });

    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for (var i in stream) {
      if (this$1[i] === undefined && typeof stream[i] === 'function') {
        this$1[i] = function (method) {
          return function () {
            return stream[method].apply(stream, arguments);
          };
        }(i);
      }
    }

    // proxy certain important events.
    var events = ['error', 'close', 'destroy', 'pause', 'resume'];
    forEach(events, function (ev) {
      stream.on(ev, self.emit.bind(self, ev));
    });

    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    self._read = function (n) {
      debug('wrapped _read', n);
      if (paused) {
        paused = false;
        stream.resume();
      }
    };

    return self;
  };

  // exposed for testing purposes only.
  Readable._fromList = fromList;

  // Pluck off n bytes from an array of buffers.
  // Length is the combined lengths of all the buffers in the list.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) { return null; }

    var ret;
    if (state.objectMode) { ret = state.buffer.shift(); }else if (!n || n >= state.length) {
      // read it all, truncate the list
      if (state.decoder) { ret = state.buffer.join(''); }else if (state.buffer.length === 1) { ret = state.buffer.head.data; }else { ret = state.buffer.concat(state.length); }
      state.buffer.clear();
    } else {
      // read part of list
      ret = fromListPartial(n, state.buffer, state.decoder);
    }

    return ret;
  }

  // Extracts only enough buffered data to satisfy the amount requested.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function fromListPartial(n, list, hasStrings) {
    var ret;
    if (n < list.head.data.length) {
      // slice is the same for buffers and strings
      ret = list.head.data.slice(0, n);
      list.head.data = list.head.data.slice(n);
    } else if (n === list.head.data.length) {
      // first chunk is a perfect match
      ret = list.shift();
    } else {
      // result spans more than one buffer
      ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
    }
    return ret;
  }

  // Copies a specified amount of characters from the list of buffered data
  // chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function copyFromBufferString(n, list) {
    var p = list.head;
    var c = 1;
    var ret = p.data;
    n -= ret.length;
    while (p = p.next) {
      var str = p.data;
      var nb = n > str.length ? str.length : n;
      if (nb === str.length) { ret += str; }else { ret += str.slice(0, n); }
      n -= nb;
      if (n === 0) {
        if (nb === str.length) {
          ++c;
          if (p.next) { list.head = p.next; }else { list.head = list.tail = null; }
        } else {
          list.head = p;
          p.data = str.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }

  // Copies a specified amount of bytes from the list of buffered data chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function copyFromBuffer(n, list) {
    var ret = Buffer.allocUnsafe(n);
    var p = list.head;
    var c = 1;
    p.data.copy(ret);
    n -= p.data.length;
    while (p = p.next) {
      var buf = p.data;
      var nb = n > buf.length ? buf.length : n;
      buf.copy(ret, ret.length - n, 0, nb);
      n -= nb;
      if (n === 0) {
        if (nb === buf.length) {
          ++c;
          if (p.next) { list.head = p.next; }else { list.head = list.tail = null; }
        } else {
          list.head = p;
          p.data = buf.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }

  function endReadable(stream) {
    var state = stream._readableState;

    // If we get here before consuming all the bytes, then that is a
    // bug in node.  Should never happen.
    if (state.length > 0) { throw new Error('"endReadable()" called on non-empty stream'); }

    if (!state.endEmitted) {
      state.ended = true;
      nextTick$1(endReadableNT, state, stream);
    }
  }

  function endReadableNT(state, stream) {
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
      state.endEmitted = true;
      stream.readable = false;
      stream.emit('end');
    }
  }

  function forEach(xs, f) {
    for (var i = 0, l = xs.length; i < l; i++) {
      f(xs[i], i);
    }
  }

  function indexOf(xs, x) {
    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x) { return i; }
    }
    return -1;
  }

  // A bit simpler than readable streams.
  Writable.WritableState = WritableState;
  inherits$1(Writable, EventEmitter);

  function nop() {}

  function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
  }

  function WritableState(options, stream) {
    Object.defineProperty(this, 'buffer', {
      get: deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
    options = options || {};

    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;

    if (stream instanceof Duplex) { this.objectMode = this.objectMode || !!options.writableObjectMode; }

    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

    // cast to ints.
    this.highWaterMark = ~ ~this.highWaterMark;

    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;

    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;

    // a flag to see when we're in the middle of a write.
    this.writing = false;

    // when true all writes will be buffered until .uncork() call
    this.corked = 0;

    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;

    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;

    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function (er) {
      onwrite(stream, er);
    };

    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;

    // the amount that is being written when _write is called.
    this.writelen = 0;

    this.bufferedRequest = null;
    this.lastBufferedRequest = null;

    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;

    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;

    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;

    // count buffered requests
    this.bufferedRequestCount = 0;

    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
  }

  WritableState.prototype.getBuffer = function writableStateGetBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while (current) {
      out.push(current);
      current = current.next;
    }
    return out;
  };
  function Writable(options) {

    // Writable ctor is applied to Duplexes, though they're not
    // instanceof Writable, they're instanceof Readable.
    if (!(this instanceof Writable) && !(this instanceof Duplex)) { return new Writable(options); }

    this._writableState = new WritableState(options, this);

    // legacy.
    this.writable = true;

    if (options) {
      if (typeof options.write === 'function') { this._write = options.write; }

      if (typeof options.writev === 'function') { this._writev = options.writev; }
    }

    EventEmitter.call(this);
  }

  // Otherwise people can pipe Writable streams, which is just wrong.
  Writable.prototype.pipe = function () {
    this.emit('error', new Error('Cannot pipe, not readable'));
  };

  function writeAfterEnd(stream, cb) {
    var er = new Error('write after end');
    // TODO: defer error events consistently everywhere, not just the cb
    stream.emit('error', er);
    nextTick$1(cb, er);
  }

  // If we get something that is not a buffer, string, null, or undefined,
  // and we're not in objectMode, then that's an error.
  // Otherwise stream chunks are all considered to be of length=1, and the
  // watermarks determine how many objects to keep in the buffer, rather than
  // how many bytes or characters.
  function validChunk(stream, state, chunk, cb) {
    var valid = true;
    var er = false;
    // Always throw error if a null is written
    // if we are not in object mode then throw
    // if it is not a buffer, string, or undefined.
    if (chunk === null) {
      er = new TypeError('May not write null values to stream');
    } else if (!Buffer$1.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    if (er) {
      stream.emit('error', er);
      nextTick$1(cb, er);
      valid = false;
    }
    return valid;
  }

  Writable.prototype.write = function (chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;

    if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (Buffer$1.isBuffer(chunk)) { encoding = 'buffer'; }else if (!encoding) { encoding = state.defaultEncoding; }

    if (typeof cb !== 'function') { cb = nop; }

    if (state.ended) { writeAfterEnd(this, cb); }else if (validChunk(this, state, chunk, cb)) {
      state.pendingcb++;
      ret = writeOrBuffer(this, state, chunk, encoding, cb);
    }

    return ret;
  };

  Writable.prototype.cork = function () {
    var state = this._writableState;

    state.corked++;
  };

  Writable.prototype.uncork = function () {
    var state = this._writableState;

    if (state.corked) {
      state.corked--;

      if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) { clearBuffer(this, state); }
    }
  };

  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') { encoding = encoding.toLowerCase(); }
    if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) { throw new TypeError('Unknown encoding: ' + encoding); }
    this._writableState.defaultEncoding = encoding;
    return this;
  };

  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
      chunk = Buffer$1.from(chunk, encoding);
    }
    return chunk;
  }

  // if we're already writing something, then just put this
  // in the queue, and wait our turn.  Otherwise, call _write
  // If we return false, then we need a drain event, so set that flag.
  function writeOrBuffer(stream, state, chunk, encoding, cb) {
    chunk = decodeChunk(state, chunk, encoding);

    if (Buffer$1.isBuffer(chunk)) { encoding = 'buffer'; }
    var len = state.objectMode ? 1 : chunk.length;

    state.length += len;

    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) { state.needDrain = true; }

    if (state.writing || state.corked) {
      var last = state.lastBufferedRequest;
      state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
      if (last) {
        last.next = state.lastBufferedRequest;
      } else {
        state.bufferedRequest = state.lastBufferedRequest;
      }
      state.bufferedRequestCount += 1;
    } else {
      doWrite(stream, state, false, len, chunk, encoding, cb);
    }

    return ret;
  }

  function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (writev) { stream._writev(chunk, state.onwrite); }else { stream._write(chunk, encoding, state.onwrite); }
    state.sync = false;
  }

  function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) { nextTick$1(cb, er); }else { cb(er); }

    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  }

  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }

  function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;

    onwriteStateUpdate(state);

    if (er) { onwriteError(stream, state, sync, er, cb); }else {
      // Check if we're actually ready to finish, but don't emit yet
      var finished = needFinish(state);

      if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
        clearBuffer(stream, state);
      }

      if (sync) {
        /*<replacement>*/
          nextTick$1(afterWrite, stream, state, finished, cb);
        /*</replacement>*/
      } else {
          afterWrite(stream, state, finished, cb);
        }
    }
  }

  function afterWrite(stream, state, finished, cb) {
    if (!finished) { onwriteDrain(stream, state); }
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
  }

  // Must force callback to be called on nextTick, so that we don't
  // emit 'drain' before the write() consumer gets the 'false' return
  // value, and has a chance to attach a 'drain' listener.
  function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream.emit('drain');
    }
  }

  // if there's something in the buffer waiting, then process it
  function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;

    if (stream._writev && entry && entry.next) {
      // Fast case, write everything using _writev()
      var l = state.bufferedRequestCount;
      var buffer = new Array(l);
      var holder = state.corkedRequestsFree;
      holder.entry = entry;

      var count = 0;
      while (entry) {
        buffer[count] = entry;
        entry = entry.next;
        count += 1;
      }

      doWrite(stream, state, true, state.length, buffer, '', holder.finish);

      // doWrite is almost always async, defer these to save a bit of time
      // as the hot path ends with doWrite
      state.pendingcb++;
      state.lastBufferedRequest = null;
      if (holder.next) {
        state.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state.corkedRequestsFree = new CorkedRequest(state);
      }
    } else {
      // Slow case, write chunks one-by-one
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;

        doWrite(stream, state, false, len, chunk, encoding, cb);
        entry = entry.next;
        // if we didn't call the onwrite immediately, then
        // it means that we need to wait until it does.
        // also, that means that the chunk and cb are currently
        // being processed, so move the buffer counter past them.
        if (state.writing) {
          break;
        }
      }

      if (entry === null) { state.lastBufferedRequest = null; }
    }

    state.bufferedRequestCount = 0;
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
  }

  Writable.prototype._write = function (chunk, encoding, cb) {
    cb(new Error('not implemented'));
  };

  Writable.prototype._writev = null;

  Writable.prototype.end = function (chunk, encoding, cb) {
    var state = this._writableState;

    if (typeof chunk === 'function') {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (chunk !== null && chunk !== undefined) { this.write(chunk, encoding); }

    // .end() fully uncorks
    if (state.corked) {
      state.corked = 1;
      this.uncork();
    }

    // ignore unnecessary end() calls.
    if (!state.ending && !state.finished) { endWritable(this, state, cb); }
  };

  function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
  }

  function prefinish(stream, state) {
    if (!state.prefinished) {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }

  function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
      if (state.pendingcb === 0) {
        prefinish(stream, state);
        state.finished = true;
        stream.emit('finish');
      } else {
        prefinish(stream, state);
      }
    }
    return need;
  }

  function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
      if (state.finished) { nextTick$1(cb); }else { stream.once('finish', cb); }
    }
    state.ended = true;
    stream.writable = false;
  }

  // It seems a linked list but it is not
  // there will be only 2 of these for each stream
  function CorkedRequest(state) {
    var _this = this;

    this.next = null;
    this.entry = null;

    this.finish = function (err) {
      var entry = _this.entry;
      _this.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      if (state.corkedRequestsFree) {
        state.corkedRequestsFree.next = _this;
      } else {
        state.corkedRequestsFree = _this;
      }
    };
  }

  inherits$1(Duplex, Readable);

  var keys = Object.keys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) { Duplex.prototype[method] = Writable.prototype[method]; }
  }
  function Duplex(options) {
    if (!(this instanceof Duplex)) { return new Duplex(options); }

    Readable.call(this, options);
    Writable.call(this, options);

    if (options && options.readable === false) { this.readable = false; }

    if (options && options.writable === false) { this.writable = false; }

    this.allowHalfOpen = true;
    if (options && options.allowHalfOpen === false) { this.allowHalfOpen = false; }

    this.once('end', onend);
  }

  // the no-half-open enforcer
  function onend() {
    // if we allow half-open state, or if the writable side ended,
    // then we're ok.
    if (this.allowHalfOpen || this._writableState.ended) { return; }

    // no more data can be written.
    // But allow more writes to happen in this tick.
    nextTick$1(onEndNT, this);
  }

  function onEndNT(self) {
    self.end();
  }

  // a transform stream is a readable/writable stream where you do
  inherits$1(Transform, Duplex);

  function TransformState(stream) {
    this.afterTransform = function (er, data) {
      return afterTransform(stream, er, data);
    };

    this.needTransform = false;
    this.transforming = false;
    this.writecb = null;
    this.writechunk = null;
    this.writeencoding = null;
  }

  function afterTransform(stream, er, data) {
    var ts = stream._transformState;
    ts.transforming = false;

    var cb = ts.writecb;

    if (!cb) { return stream.emit('error', new Error('no writecb in Transform class')); }

    ts.writechunk = null;
    ts.writecb = null;

    if (data !== null && data !== undefined) { stream.push(data); }

    cb(er);

    var rs = stream._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      stream._read(rs.highWaterMark);
    }
  }
  function Transform(options) {
    if (!(this instanceof Transform)) { return new Transform(options); }

    Duplex.call(this, options);

    this._transformState = new TransformState(this);

    // when the writable side finishes, then flush out anything remaining.
    var stream = this;

    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;

    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;

    if (options) {
      if (typeof options.transform === 'function') { this._transform = options.transform; }

      if (typeof options.flush === 'function') { this._flush = options.flush; }
    }

    this.once('prefinish', function () {
      if (typeof this._flush === 'function') { this._flush(function (er) {
        done(stream, er);
      }); }else { done(stream); }
    });
  }

  Transform.prototype.push = function (chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
  };

  // This is the part where you do stuff!
  // override this function in implementation classes.
  // 'chunk' is an input chunk.
  //
  // Call `push(newChunk)` to pass along transformed output
  // to the readable side.  You may call 'push' zero or more times.
  //
  // Call `cb(err)` when you are done with this chunk.  If you pass
  // an error, then that'll put the hurt on the whole operation.  If you
  // never call cb(), then you'll never get another chunk.
  Transform.prototype._transform = function (chunk, encoding, cb) {
    throw new Error('Not implemented');
  };

  Transform.prototype._write = function (chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) { this._read(rs.highWaterMark); }
    }
  };

  // Doesn't matter what the args are here.
  // _transform does all the work.
  // That we got here means that the readable side wants more data.
  Transform.prototype._read = function (n) {
    var ts = this._transformState;

    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
      ts.transforming = true;
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      // mark that we need a transform, so that any data that comes in
      // will get processed, now that we've asked for it.
      ts.needTransform = true;
    }
  };

  function done(stream, er) {
    if (er) { return stream.emit('error', er); }

    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    var ws = stream._writableState;
    var ts = stream._transformState;

    if (ws.length) { throw new Error('Calling transform done when ws.length != 0'); }

    if (ts.transforming) { throw new Error('Calling transform done when still transforming'); }

    return stream.push(null);
  }

  inherits$1(PassThrough, Transform);
  function PassThrough(options) {
    if (!(this instanceof PassThrough)) { return new PassThrough(options); }

    Transform.call(this, options);
  }

  PassThrough.prototype._transform = function (chunk, encoding, cb) {
    cb(null, chunk);
  };

  inherits$1(Stream, EventEmitter);
  Stream.Readable = Readable;
  Stream.Writable = Writable;
  Stream.Duplex = Duplex;
  Stream.Transform = Transform;
  Stream.PassThrough = PassThrough;

  // Backwards-compat with node 0.4.x
  Stream.Stream = Stream;

  // old-style streams.  Note that the pipe method (the only relevant
  // part of this class) is overridden in the Readable class.

  function Stream() {
    EventEmitter.call(this);
  }

  Stream.prototype.pipe = function(dest, options) {
    var source = this;

    function ondata(chunk) {
      if (dest.writable) {
        if (false === dest.write(chunk) && source.pause) {
          source.pause();
        }
      }
    }

    source.on('data', ondata);

    function ondrain() {
      if (source.readable && source.resume) {
        source.resume();
      }
    }

    dest.on('drain', ondrain);

    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
      source.on('end', onend);
      source.on('close', onclose);
    }

    var didOnEnd = false;
    function onend() {
      if (didOnEnd) { return; }
      didOnEnd = true;

      dest.end();
    }


    function onclose() {
      if (didOnEnd) { return; }
      didOnEnd = true;

      if (typeof dest.destroy === 'function') { dest.destroy(); }
    }

    // don't leave dangling pipes when there are errors.
    function onerror(er) {
      cleanup();
      if (EventEmitter.listenerCount(this, 'error') === 0) {
        throw er; // Unhandled stream error in pipe.
      }
    }

    source.on('error', onerror);
    dest.on('error', onerror);

    // remove all the event listeners that were added.
    function cleanup() {
      source.removeListener('data', ondata);
      dest.removeListener('drain', ondrain);

      source.removeListener('end', onend);
      source.removeListener('close', onclose);

      source.removeListener('error', onerror);
      dest.removeListener('error', onerror);

      source.removeListener('end', cleanup);
      source.removeListener('close', cleanup);

      dest.removeListener('close', cleanup);
    }

    source.on('end', cleanup);
    source.on('close', cleanup);

    dest.on('close', cleanup);

    dest.emit('pipe', source);

    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
  };

  var stream = /*#__PURE__*/Object.freeze({
    default: Stream,
    Readable: Readable,
    Writable: Writable,
    Duplex: Duplex,
    Transform: Transform,
    PassThrough: PassThrough,
    Stream: Stream
  });

  var rStates = {
    UNSENT: 0,
    OPENED: 1,
    HEADERS_RECEIVED: 2,
    LOADING: 3,
    DONE: 4
  };
  function IncomingMessage(xhr, response, mode) {
    var self = this;
    Readable.call(self);

    self._mode = mode;
    self.headers = {};
    self.rawHeaders = [];
    self.trailers = {};
    self.rawTrailers = [];

    // Fake the 'close' event, but only once 'end' fires
    self.on('end', function() {
      // The nextTick is necessary to prevent the 'request' module from causing an infinite loop
      process.nextTick(function() {
        self.emit('close');
      });
    });
    var read;
    if (mode === 'fetch') {
      self._fetchResponse = response;

      self.url = response.url;
      self.statusCode = response.status;
      self.statusMessage = response.statusText;
        // backwards compatible version of for (<item> of <iterable>):
        // for (var <item>,_i,_it = <iterable>[Symbol.iterator](); <item> = (_i = _it.next()).value,!_i.done;)
      for (var header, _i, _it = response.headers[Symbol.iterator](); header = (_i = _it.next()).value, !_i.done;) {
        self.headers[header[0].toLowerCase()] = header[1];
        self.rawHeaders.push(header[0], header[1]);
      }

      // TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
      var reader = response.body.getReader();

      read = function () {
        reader.read().then(function(result) {
          if (self._destroyed)
            { return }
          if (result.done) {
            self.push(null);
            return
          }
          self.push(new Buffer(result.value));
          read();
        });
      };
      read();

    } else {
      self._xhr = xhr;
      self._pos = 0;

      self.url = xhr.responseURL;
      self.statusCode = xhr.status;
      self.statusMessage = xhr.statusText;
      var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
      headers.forEach(function(header) {
        var matches = header.match(/^([^:]+):\s*(.*)/);
        if (matches) {
          var key = matches[1].toLowerCase();
          if (key === 'set-cookie') {
            if (self.headers[key] === undefined) {
              self.headers[key] = [];
            }
            self.headers[key].push(matches[2]);
          } else if (self.headers[key] !== undefined) {
            self.headers[key] += ', ' + matches[2];
          } else {
            self.headers[key] = matches[2];
          }
          self.rawHeaders.push(matches[1], matches[2]);
        }
      });

      self._charset = 'x-user-defined';
      if (!overrideMimeType) {
        var mimeType = self.rawHeaders['mime-type'];
        if (mimeType) {
          var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
          if (charsetMatch) {
            self._charset = charsetMatch[1].toLowerCase();
          }
        }
        if (!self._charset)
          { self._charset = 'utf-8'; } // best guess
      }
    }
  }

  inherits$1(IncomingMessage, Readable);

  IncomingMessage.prototype._read = function() {};

  IncomingMessage.prototype._onXHRProgress = function() {
    var self = this;

    var xhr = self._xhr;

    var response = null;
    switch (self._mode) {
    case 'text:vbarray': // For IE9
      if (xhr.readyState !== rStates.DONE)
        { break }
      try {
        // This fails in IE8
        response = new global.VBArray(xhr.responseBody).toArray();
      } catch (e) {
        // pass
      }
      if (response !== null) {
        self.push(new Buffer(response));
        break
      }
      // Falls through in IE8
    case 'text':
      try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
        response = xhr.responseText;
      } catch (e) {
        self._mode = 'text:vbarray';
        break
      }
      if (response.length > self._pos) {
        var newData = response.substr(self._pos);
        if (self._charset === 'x-user-defined') {
          var buffer = new Buffer(newData.length);
          for (var i = 0; i < newData.length; i++)
            { buffer[i] = newData.charCodeAt(i) & 0xff; }

          self.push(buffer);
        } else {
          self.push(newData, self._charset);
        }
        self._pos = response.length;
      }
      break
    case 'arraybuffer':
      if (xhr.readyState !== rStates.DONE || !xhr.response)
        { break }
      response = xhr.response;
      self.push(new Buffer(new Uint8Array(response)));
      break
    case 'moz-chunked-arraybuffer': // take whole
      response = xhr.response;
      if (xhr.readyState !== rStates.LOADING || !response)
        { break }
      self.push(new Buffer(new Uint8Array(response)));
      break
    case 'ms-stream':
      response = xhr.response;
      if (xhr.readyState !== rStates.LOADING)
        { break }
      var reader = new global.MSStreamReader();
      reader.onprogress = function() {
        if (reader.result.byteLength > self._pos) {
          self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))));
          self._pos = reader.result.byteLength;
        }
      };
      reader.onload = function() {
        self.push(null);
      };
        // reader.onerror = ??? // TODO: this
      reader.readAsArrayBuffer(response);
      break
    }

    // The ms-stream case handles end separately in reader.onload()
    if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
      self.push(null);
    }
  };

  // from https://github.com/jhiesey/to-arraybuffer/blob/6502d9850e70ba7935a7df4ad86b358fc216f9f0/index.js
  function toArrayBuffer (buf) {
    // If the buffer is backed by a Uint8Array, a faster version will work
    if (buf instanceof Uint8Array) {
      // If the buffer isn't a subarray, return the underlying ArrayBuffer
      if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
        return buf.buffer
      } else if (typeof buf.buffer.slice === 'function') {
        // Otherwise we need to get a proper copy
        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
      }
    }

    if (isBuffer$1(buf)) {
      // This is the slow version that will work with any Buffer
      // implementation (even in old browsers)
      var arrayCopy = new Uint8Array(buf.length);
      var len = buf.length;
      for (var i = 0; i < len; i++) {
        arrayCopy[i] = buf[i];
      }
      return arrayCopy.buffer
    } else {
      throw new Error('Argument must be a Buffer')
    }
  }

  function decideMode(preferBinary, useFetch) {
    if (hasFetch && useFetch) {
      return 'fetch'
    } else if (mozchunkedarraybuffer) {
      return 'moz-chunked-arraybuffer'
    } else if (msstream) {
      return 'ms-stream'
    } else if (arraybuffer && preferBinary) {
      return 'arraybuffer'
    } else if (vbArray && preferBinary) {
      return 'text:vbarray'
    } else {
      return 'text'
    }
  }

  function ClientRequest(opts) {
    var self = this;
    Writable.call(self);

    self._opts = opts;
    self._body = [];
    self._headers = {};
    if (opts.auth)
      { self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64')); }
    Object.keys(opts.headers).forEach(function(name) {
      self.setHeader(name, opts.headers[name]);
    });

    var preferBinary;
    var useFetch = true;
    if (opts.mode === 'disable-fetch') {
      // If the use of XHR should be preferred and includes preserving the 'content-type' header
      useFetch = false;
      preferBinary = true;
    } else if (opts.mode === 'prefer-streaming') {
      // If streaming is a high priority but binary compatibility and
      // the accuracy of the 'content-type' header aren't
      preferBinary = false;
    } else if (opts.mode === 'allow-wrong-content-type') {
      // If streaming is more important than preserving the 'content-type' header
      preferBinary = !overrideMimeType;
    } else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
      // Use binary if text streaming may corrupt data or the content-type header, or for speed
      preferBinary = true;
    } else {
      throw new Error('Invalid value for opts.mode')
    }
    self._mode = decideMode(preferBinary, useFetch);

    self.on('finish', function() {
      self._onFinish();
    });
  }

  inherits$1(ClientRequest, Writable);
  // Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
  var unsafeHeaders = [
    'accept-charset',
    'accept-encoding',
    'access-control-request-headers',
    'access-control-request-method',
    'connection',
    'content-length',
    'cookie',
    'cookie2',
    'date',
    'dnt',
    'expect',
    'host',
    'keep-alive',
    'origin',
    'referer',
    'te',
    'trailer',
    'transfer-encoding',
    'upgrade',
    'user-agent',
    'via'
  ];
  ClientRequest.prototype.setHeader = function(name, value) {
    var self = this;
    var lowerName = name.toLowerCase();
      // This check is not necessary, but it prevents warnings from browsers about setting unsafe
      // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
      // http-browserify did it, so I will too.
    if (unsafeHeaders.indexOf(lowerName) !== -1)
      { return }

    self._headers[lowerName] = {
      name: name,
      value: value
    };
  };

  ClientRequest.prototype.getHeader = function(name) {
    var self = this;
    return self._headers[name.toLowerCase()].value
  };

  ClientRequest.prototype.removeHeader = function(name) {
    var self = this;
    delete self._headers[name.toLowerCase()];
  };

  ClientRequest.prototype._onFinish = function() {
    var self = this;

    if (self._destroyed)
      { return }
    var opts = self._opts;

    var headersObj = self._headers;
    var body;
    if (opts.method === 'POST' || opts.method === 'PUT' || opts.method === 'PATCH') {
      if (blobConstructor()) {
        body = new global.Blob(self._body.map(function(buffer) {
          return toArrayBuffer(buffer)
        }), {
          type: (headersObj['content-type'] || {}).value || ''
        });
      } else {
        // get utf8 string
        body = Buffer.concat(self._body).toString();
      }
    }

    if (self._mode === 'fetch') {
      var headers = Object.keys(headersObj).map(function(name) {
        return [headersObj[name].name, headersObj[name].value]
      });

      global.fetch(self._opts.url, {
        method: self._opts.method,
        headers: headers,
        body: body,
        mode: 'cors',
        credentials: opts.withCredentials ? 'include' : 'same-origin'
      }).then(function(response) {
        self._fetchResponse = response;
        self._connect();
      }, function(reason) {
        self.emit('error', reason);
      });
    } else {
      var xhr = self._xhr = new global.XMLHttpRequest();
      try {
        xhr.open(self._opts.method, self._opts.url, true);
      } catch (err) {
        process.nextTick(function() {
          self.emit('error', err);
        });
        return
      }

      // Can't set responseType on really old browsers
      if ('responseType' in xhr)
        { xhr.responseType = self._mode.split(':')[0]; }

      if ('withCredentials' in xhr)
        { xhr.withCredentials = !!opts.withCredentials; }

      if (self._mode === 'text' && 'overrideMimeType' in xhr)
        { xhr.overrideMimeType('text/plain; charset=x-user-defined'); }

      Object.keys(headersObj).forEach(function(name) {
        xhr.setRequestHeader(headersObj[name].name, headersObj[name].value);
      });

      self._response = null;
      xhr.onreadystatechange = function() {
        switch (xhr.readyState) {
        case rStates.LOADING:
        case rStates.DONE:
          self._onXHRProgress();
          break
        }
      };
        // Necessary for streaming in Firefox, since xhr.response is ONLY defined
        // in onprogress, not in onreadystatechange with xhr.readyState = 3
      if (self._mode === 'moz-chunked-arraybuffer') {
        xhr.onprogress = function() {
          self._onXHRProgress();
        };
      }

      xhr.onerror = function() {
        if (self._destroyed)
          { return }
        self.emit('error', new Error('XHR error'));
      };

      try {
        xhr.send(body);
      } catch (err) {
        process.nextTick(function() {
          self.emit('error', err);
        });
        return
      }
    }
  };

  /**
   * Checks if xhr.status is readable and non-zero, indicating no error.
   * Even though the spec says it should be available in readyState 3,
   * accessing it throws an exception in IE8
   */
  function statusValid(xhr) {
    try {
      var status = xhr.status;
      return (status !== null && status !== 0)
    } catch (e) {
      return false
    }
  }

  ClientRequest.prototype._onXHRProgress = function() {
    var self = this;

    if (!statusValid(self._xhr) || self._destroyed)
      { return }

    if (!self._response)
      { self._connect(); }

    self._response._onXHRProgress();
  };

  ClientRequest.prototype._connect = function() {
    var self = this;

    if (self._destroyed)
      { return }

    self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode);
    self.emit('response', self._response);
  };

  ClientRequest.prototype._write = function(chunk, encoding, cb) {
    var self = this;

    self._body.push(chunk);
    cb();
  };

  ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function() {
    var self = this;
    self._destroyed = true;
    if (self._response)
      { self._response._destroyed = true; }
    if (self._xhr)
      { self._xhr.abort(); }
      // Currently, there isn't a way to truly abort a fetch.
      // If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
  };

  ClientRequest.prototype.end = function(data, encoding, cb) {
    var self = this;
    if (typeof data === 'function') {
      cb = data;
      data = undefined;
    }

    Writable.prototype.end.call(self, data, encoding, cb);
  };

  ClientRequest.prototype.flushHeaders = function() {};
  ClientRequest.prototype.setTimeout = function() {};
  ClientRequest.prototype.setNoDelay = function() {};
  ClientRequest.prototype.setSocketKeepAlive = function() {};

  /*
  this and http-lib folder

  The MIT License

  Copyright (c) 2015 John Hiesey

  Permission is hereby granted, free of charge,
  to any person obtaining a copy of this software and
  associated documentation files (the "Software"), to
  deal in the Software without restriction, including
  without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom
  the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice
  shall be included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
  ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  */

  function request(opts, cb) {
    if (typeof opts === 'string')
      { opts = urlParse(opts); }


    // Normally, the page is loaded from http or https, so not specifying a protocol
    // will result in a (valid) protocol-relative url. However, this won't work if
    // the protocol is something else, like 'file:'
    var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';

    var protocol = opts.protocol || defaultProtocol;
    var host = opts.hostname || opts.host;
    var port = opts.port;
    var path = opts.path || '/';

    // Necessary for IPv6 addresses
    if (host && host.indexOf(':') !== -1)
      { host = '[' + host + ']'; }

    // This may be a relative url. The browser should always be able to interpret it correctly.
    opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path;
    opts.method = (opts.method || 'GET').toUpperCase();
    opts.headers = opts.headers || {};

    // Also valid opts.auth, opts.mode

    var req = new ClientRequest(opts);
    if (cb)
      { req.on('response', cb); }
    return req
  }

  function get(opts, cb) {
    var req = request(opts, cb);
    req.end();
    return req
  }

  function Agent() {}
  Agent.defaultMaxSockets = 4;

  var METHODS = [
    'CHECKOUT',
    'CONNECT',
    'COPY',
    'DELETE',
    'GET',
    'HEAD',
    'LOCK',
    'M-SEARCH',
    'MERGE',
    'MKACTIVITY',
    'MKCOL',
    'MOVE',
    'NOTIFY',
    'OPTIONS',
    'PATCH',
    'POST',
    'PROPFIND',
    'PROPPATCH',
    'PURGE',
    'PUT',
    'REPORT',
    'SEARCH',
    'SUBSCRIBE',
    'TRACE',
    'UNLOCK',
    'UNSUBSCRIBE'
  ];
  var STATUS_CODES = {
    100: 'Continue',
    101: 'Switching Protocols',
    102: 'Processing', // RFC 2518, obsoleted by RFC 4918
    200: 'OK',
    201: 'Created',
    202: 'Accepted',
    203: 'Non-Authoritative Information',
    204: 'No Content',
    205: 'Reset Content',
    206: 'Partial Content',
    207: 'Multi-Status', // RFC 4918
    300: 'Multiple Choices',
    301: 'Moved Permanently',
    302: 'Moved Temporarily',
    303: 'See Other',
    304: 'Not Modified',
    305: 'Use Proxy',
    307: 'Temporary Redirect',
    400: 'Bad Request',
    401: 'Unauthorized',
    402: 'Payment Required',
    403: 'Forbidden',
    404: 'Not Found',
    405: 'Method Not Allowed',
    406: 'Not Acceptable',
    407: 'Proxy Authentication Required',
    408: 'Request Time-out',
    409: 'Conflict',
    410: 'Gone',
    411: 'Length Required',
    412: 'Precondition Failed',
    413: 'Request Entity Too Large',
    414: 'Request-URI Too Large',
    415: 'Unsupported Media Type',
    416: 'Requested Range Not Satisfiable',
    417: 'Expectation Failed',
    418: 'I\'m a teapot', // RFC 2324
    422: 'Unprocessable Entity', // RFC 4918
    423: 'Locked', // RFC 4918
    424: 'Failed Dependency', // RFC 4918
    425: 'Unordered Collection', // RFC 4918
    426: 'Upgrade Required', // RFC 2817
    428: 'Precondition Required', // RFC 6585
    429: 'Too Many Requests', // RFC 6585
    431: 'Request Header Fields Too Large', // RFC 6585
    500: 'Internal Server Error',
    501: 'Not Implemented',
    502: 'Bad Gateway',
    503: 'Service Unavailable',
    504: 'Gateway Time-out',
    505: 'HTTP Version Not Supported',
    506: 'Variant Also Negotiates', // RFC 2295
    507: 'Insufficient Storage', // RFC 4918
    509: 'Bandwidth Limit Exceeded',
    510: 'Not Extended', // RFC 2774
    511: 'Network Authentication Required' // RFC 6585
  };

  var http = {
    request: request,
    get: get,
    Agent: Agent,
    METHODS: METHODS,
    STATUS_CODES: STATUS_CODES
  }

  var http$1 = /*#__PURE__*/Object.freeze({
    request: request,
    get: get,
    Agent: Agent,
    METHODS: METHODS,
    STATUS_CODES: STATUS_CODES,
    default: http
  });

  var msg = {
    2:      'need dictionary',     /* Z_NEED_DICT       2  */
    1:      'stream end',          /* Z_STREAM_END      1  */
    0:      '',                    /* Z_OK              0  */
    '-1':   'file error',          /* Z_ERRNO         (-1) */
    '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
    '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
    '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
    '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
    '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
  };

  function ZStream() {
    /* next input byte */
    this.input = null; // JS specific, because we have no pointers
    this.next_in = 0;
    /* number of bytes available at input */
    this.avail_in = 0;
    /* total number of input bytes read so far */
    this.total_in = 0;
    /* next output byte should be put there */
    this.output = null; // JS specific, because we have no pointers
    this.next_out = 0;
    /* remaining free space at output */
    this.avail_out = 0;
    /* total number of bytes output so far */
    this.total_out = 0;
    /* last error message, NULL if no error */
    this.msg = ''/*Z_NULL*/;
    /* not visible by applications */
    this.state = null;
    /* best guess about the data type: binary or text */
    this.data_type = 2/*Z_UNKNOWN*/;
    /* adler32 value of the uncompressed data */
    this.adler = 0;
  }

  function arraySet(dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  }


  var Buf8 = Uint8Array;
  var Buf16 = Uint16Array;
  var Buf32 = Int32Array;
  // Enable/Disable typed arrays use, for testing
  //

  /* Public constants ==========================================================*/
  /* ===========================================================================*/


  //var Z_FILTERED          = 1;
  //var Z_HUFFMAN_ONLY      = 2;
  //var Z_RLE               = 3;
  var Z_FIXED = 4;
  //var Z_DEFAULT_STRATEGY  = 0;

  /* Possible values of the data_type field (though see inflate()) */
  var Z_BINARY = 0;
  var Z_TEXT = 1;
  //var Z_ASCII             = 1; // = Z_TEXT
  var Z_UNKNOWN = 2;

  /*============================================================================*/


  function zero(buf) {
    var len = buf.length;
    while (--len >= 0) {
      buf[len] = 0;
    }
  }

  // From zutil.h

  var STORED_BLOCK = 0;
  var STATIC_TREES = 1;
  var DYN_TREES = 2;
  /* The three kinds of block type */

  var MIN_MATCH = 3;
  var MAX_MATCH = 258;
  /* The minimum and maximum match lengths */

  // From deflate.h
  /* ===========================================================================
   * Internal compression state.
   */

  var LENGTH_CODES = 29;
  /* number of length codes, not counting the special END_BLOCK code */

  var LITERALS = 256;
  /* number of literal bytes 0..255 */

  var L_CODES = LITERALS + 1 + LENGTH_CODES;
  /* number of Literal or Length codes, including the END_BLOCK code */

  var D_CODES = 30;
  /* number of distance codes */

  var BL_CODES = 19;
  /* number of codes used to transfer the bit lengths */

  var HEAP_SIZE = 2 * L_CODES + 1;
  /* maximum heap size */

  var MAX_BITS = 15;
  /* All codes must not exceed MAX_BITS bits */

  var Buf_size = 16;
  /* size of bit buffer in bi_buf */


  /* ===========================================================================
   * Constants
   */

  var MAX_BL_BITS = 7;
  /* Bit length codes must not exceed MAX_BL_BITS bits */

  var END_BLOCK = 256;
  /* end of block literal code */

  var REP_3_6 = 16;
  /* repeat previous bit length 3-6 times (2 bits of repeat count) */

  var REPZ_3_10 = 17;
  /* repeat a zero length 3-10 times  (3 bits of repeat count) */

  var REPZ_11_138 = 18;
  /* repeat a zero length 11-138 times  (7 bits of repeat count) */

  /* eslint-disable comma-spacing,array-bracket-spacing */
  var extra_lbits = /* extra bits for each length code */ [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];

  var extra_dbits = /* extra bits for each distance code */ [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];

  var extra_blbits = /* extra bits for each bit length code */ [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];

  var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
  /* eslint-enable comma-spacing,array-bracket-spacing */

  /* The lengths of the bit length codes are sent in order of decreasing
   * probability, to avoid transmitting the lengths for unused bit length codes.
   */

  /* ===========================================================================
   * Local data. These are initialized only once.
   */

  // We pre-fill arrays with 0 to avoid uninitialized gaps

  var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

  // !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
  var static_ltree = new Array((L_CODES + 2) * 2);
  zero(static_ltree);
  /* The static literal tree. Since the bit lengths are imposed, there is no
   * need for the L_CODES extra codes used during heap construction. However
   * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
   * below).
   */

  var static_dtree = new Array(D_CODES * 2);
  zero(static_dtree);
  /* The static distance tree. (Actually a trivial tree since all codes use
   * 5 bits.)
   */

  var _dist_code = new Array(DIST_CODE_LEN);
  zero(_dist_code);
  /* Distance codes. The first 256 values correspond to the distances
   * 3 .. 258, the last 256 values correspond to the top 8 bits of
   * the 15 bit distances.
   */

  var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
  zero(_length_code);
  /* length code for each normalized match length (0 == MIN_MATCH) */

  var base_length = new Array(LENGTH_CODES);
  zero(base_length);
  /* First normalized length for each code (0 = MIN_MATCH) */

  var base_dist = new Array(D_CODES);
  zero(base_dist);
  /* First normalized distance for each code (0 = distance of 1) */


  function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

    this.static_tree = static_tree; /* static tree or NULL */
    this.extra_bits = extra_bits; /* extra bits for each code or NULL */
    this.extra_base = extra_base; /* base index for extra_bits */
    this.elems = elems; /* max number of elements in the tree */
    this.max_length = max_length; /* max bit length for the codes */

    // show if `static_tree` has data or dummy - needed for monomorphic objects
    this.has_stree = static_tree && static_tree.length;
  }


  var static_l_desc;
  var static_d_desc;
  var static_bl_desc;


  function TreeDesc(dyn_tree, stat_desc) {
    this.dyn_tree = dyn_tree; /* the dynamic tree */
    this.max_code = 0; /* largest code with non zero frequency */
    this.stat_desc = stat_desc; /* the corresponding static tree */
  }



  function d_code(dist) {
    return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
  }


  /* ===========================================================================
   * Output a short LSB first on the stream.
   * IN assertion: there is enough room in pendingBuf.
   */
  function put_short(s, w) {
    //    put_byte(s, (uch)((w) & 0xff));
    //    put_byte(s, (uch)((ush)(w) >> 8));
    s.pending_buf[s.pending++] = (w) & 0xff;
    s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
  }


  /* ===========================================================================
   * Send a value on a given number of bits.
   * IN assertion: length <= 16 and value fits in length bits.
   */
  function send_bits(s, value, length) {
    if (s.bi_valid > (Buf_size - length)) {
      s.bi_buf |= (value << s.bi_valid) & 0xffff;
      put_short(s, s.bi_buf);
      s.bi_buf = value >> (Buf_size - s.bi_valid);
      s.bi_valid += length - Buf_size;
    } else {
      s.bi_buf |= (value << s.bi_valid) & 0xffff;
      s.bi_valid += length;
    }
  }


  function send_code(s, c, tree) {
    send_bits(s, tree[c * 2] /*.Code*/ , tree[c * 2 + 1] /*.Len*/ );
  }


  /* ===========================================================================
   * Reverse the first len bits of a code, using straightforward code (a faster
   * method would use a table)
   * IN assertion: 1 <= len <= 15
   */
  function bi_reverse(code, len) {
    var res = 0;
    do {
      res |= code & 1;
      code >>>= 1;
      res <<= 1;
    } while (--len > 0);
    return res >>> 1;
  }


  /* ===========================================================================
   * Flush the bit buffer, keeping at most 7 bits in it.
   */
  function bi_flush(s) {
    if (s.bi_valid === 16) {
      put_short(s, s.bi_buf);
      s.bi_buf = 0;
      s.bi_valid = 0;

    } else if (s.bi_valid >= 8) {
      s.pending_buf[s.pending++] = s.bi_buf & 0xff;
      s.bi_buf >>= 8;
      s.bi_valid -= 8;
    }
  }


  /* ===========================================================================
   * Compute the optimal bit lengths for a tree and update the total bit length
   * for the current block.
   * IN assertion: the fields freq and dad are set, heap[heap_max] and
   *    above are the tree nodes sorted by increasing frequency.
   * OUT assertions: the field len is set to the optimal bit length, the
   *     array bl_count contains the frequencies for each bit length.
   *     The length opt_len is updated; static_len is also updated if stree is
   *     not null.
   */
  function gen_bitlen(s, desc) {
  //    deflate_state *s;
  //    tree_desc *desc;    /* the tree descriptor */
    var tree = desc.dyn_tree;
    var max_code = desc.max_code;
    var stree = desc.stat_desc.static_tree;
    var has_stree = desc.stat_desc.has_stree;
    var extra = desc.stat_desc.extra_bits;
    var base = desc.stat_desc.extra_base;
    var max_length = desc.stat_desc.max_length;
    var h; /* heap index */
    var n, m; /* iterate over the tree elements */
    var bits; /* bit length */
    var xbits; /* extra bits */
    var f; /* frequency */
    var overflow = 0; /* number of elements with bit length too large */

    for (bits = 0; bits <= MAX_BITS; bits++) {
      s.bl_count[bits] = 0;
    }

    /* In a first pass, compute the optimal bit lengths (which may
     * overflow in the case of the bit length tree).
     */
    tree[s.heap[s.heap_max] * 2 + 1] /*.Len*/ = 0; /* root of the heap */

    for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
      n = s.heap[h];
      bits = tree[tree[n * 2 + 1] /*.Dad*/ * 2 + 1] /*.Len*/ + 1;
      if (bits > max_length) {
        bits = max_length;
        overflow++;
      }
      tree[n * 2 + 1] /*.Len*/ = bits;
      /* We overwrite tree[n].Dad which is no longer needed */

      if (n > max_code) {
        continue;
      } /* not a leaf node */

      s.bl_count[bits]++;
      xbits = 0;
      if (n >= base) {
        xbits = extra[n - base];
      }
      f = tree[n * 2] /*.Freq*/ ;
      s.opt_len += f * (bits + xbits);
      if (has_stree) {
        s.static_len += f * (stree[n * 2 + 1] /*.Len*/ + xbits);
      }
    }
    if (overflow === 0) {
      return;
    }

    // Trace((stderr,"\nbit length overflow\n"));
    /* This happens for example on obj2 and pic of the Calgary corpus */

    /* Find the first bit length which could increase: */
    do {
      bits = max_length - 1;
      while (s.bl_count[bits] === 0) {
        bits--;
      }
      s.bl_count[bits]--; /* move one leaf down the tree */
      s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
      s.bl_count[max_length]--;
      /* The brother of the overflow item also moves one step up,
       * but this does not affect bl_count[max_length]
       */
      overflow -= 2;
    } while (overflow > 0);

    /* Now recompute all bit lengths, scanning in increasing frequency.
     * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
     * lengths instead of fixing only the wrong ones. This idea is taken
     * from 'ar' written by Haruhiko Okumura.)
     */
    for (bits = max_length; bits !== 0; bits--) {
      n = s.bl_count[bits];
      while (n !== 0) {
        m = s.heap[--h];
        if (m > max_code) {
          continue;
        }
        if (tree[m * 2 + 1] /*.Len*/ !== bits) {
          // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
          s.opt_len += (bits - tree[m * 2 + 1] /*.Len*/ ) * tree[m * 2] /*.Freq*/ ;
          tree[m * 2 + 1] /*.Len*/ = bits;
        }
        n--;
      }
    }
  }


  /* ===========================================================================
   * Generate the codes for a given tree and bit counts (which need not be
   * optimal).
   * IN assertion: the array bl_count contains the bit length statistics for
   * the given tree and the field len is set for all tree elements.
   * OUT assertion: the field code is set for all tree elements of non
   *     zero code length.
   */
  function gen_codes(tree, max_code, bl_count) {
  //    ct_data *tree;             /* the tree to decorate */
  //    int max_code;              /* largest code with non zero frequency */
  //    ushf *bl_count;            /* number of codes at each bit length */

    var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
    var code = 0; /* running code value */
    var bits; /* bit index */
    var n; /* code index */

    /* The distribution counts are first used to generate the code values
     * without bit reversal.
     */
    for (bits = 1; bits <= MAX_BITS; bits++) {
      next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
    }
    /* Check that the bit counts in bl_count are consistent. The last code
     * must be all ones.
     */
    //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
    //        "inconsistent bit counts");
    //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

    for (n = 0; n <= max_code; n++) {
      var len = tree[n * 2 + 1] /*.Len*/ ;
      if (len === 0) {
        continue;
      }
      /* Now reverse the bits */
      tree[n * 2] /*.Code*/ = bi_reverse(next_code[len]++, len);

      //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
      //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
    }
  }


  /* ===========================================================================
   * Initialize the various 'constant' tables.
   */
  function tr_static_init() {
    var n; /* iterates over tree elements */
    var bits; /* bit counter */
    var length; /* length value */
    var code; /* code value */
    var dist; /* distance index */
    var bl_count = new Array(MAX_BITS + 1);
    /* number of codes at each bit length for an optimal tree */

    // do check in _tr_init()
    //if (static_init_done) return;

    /* For some embedded targets, global variables are not initialized: */
    /*#ifdef NO_INIT_GLOBAL_POINTERS
      static_l_desc.static_tree = static_ltree;
      static_l_desc.extra_bits = extra_lbits;
      static_d_desc.static_tree = static_dtree;
      static_d_desc.extra_bits = extra_dbits;
      static_bl_desc.extra_bits = extra_blbits;
    #endif*/

    /* Initialize the mapping length (0..255) -> length code (0..28) */
    length = 0;
    for (code = 0; code < LENGTH_CODES - 1; code++) {
      base_length[code] = length;
      for (n = 0; n < (1 << extra_lbits[code]); n++) {
        _length_code[length++] = code;
      }
    }
    //Assert (length == 256, "tr_static_init: length != 256");
    /* Note that the length 255 (match length 258) can be represented
     * in two different ways: code 284 + 5 bits or code 285, so we
     * overwrite length_code[255] to use the best encoding:
     */
    _length_code[length - 1] = code;

    /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
    dist = 0;
    for (code = 0; code < 16; code++) {
      base_dist[code] = dist;
      for (n = 0; n < (1 << extra_dbits[code]); n++) {
        _dist_code[dist++] = code;
      }
    }
    //Assert (dist == 256, "tr_static_init: dist != 256");
    dist >>= 7; /* from now on, all distances are divided by 128 */
    for (; code < D_CODES; code++) {
      base_dist[code] = dist << 7;
      for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
        _dist_code[256 + dist++] = code;
      }
    }
    //Assert (dist == 256, "tr_static_init: 256+dist != 512");

    /* Construct the codes of the static literal tree */
    for (bits = 0; bits <= MAX_BITS; bits++) {
      bl_count[bits] = 0;
    }

    n = 0;
    while (n <= 143) {
      static_ltree[n * 2 + 1] /*.Len*/ = 8;
      n++;
      bl_count[8]++;
    }
    while (n <= 255) {
      static_ltree[n * 2 + 1] /*.Len*/ = 9;
      n++;
      bl_count[9]++;
    }
    while (n <= 279) {
      static_ltree[n * 2 + 1] /*.Len*/ = 7;
      n++;
      bl_count[7]++;
    }
    while (n <= 287) {
      static_ltree[n * 2 + 1] /*.Len*/ = 8;
      n++;
      bl_count[8]++;
    }
    /* Codes 286 and 287 do not exist, but we must include them in the
     * tree construction to get a canonical Huffman tree (longest code
     * all ones)
     */
    gen_codes(static_ltree, L_CODES + 1, bl_count);

    /* The static distance tree is trivial: */
    for (n = 0; n < D_CODES; n++) {
      static_dtree[n * 2 + 1] /*.Len*/ = 5;
      static_dtree[n * 2] /*.Code*/ = bi_reverse(n, 5);
    }

    // Now data ready and we can init static trees
    static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
    static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
    static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);

    //static_init_done = true;
  }


  /* ===========================================================================
   * Initialize a new block.
   */
  function init_block(s) {
    var n; /* iterates over tree elements */

    /* Initialize the trees. */
    for (n = 0; n < L_CODES; n++) {
      s.dyn_ltree[n * 2] /*.Freq*/ = 0;
    }
    for (n = 0; n < D_CODES; n++) {
      s.dyn_dtree[n * 2] /*.Freq*/ = 0;
    }
    for (n = 0; n < BL_CODES; n++) {
      s.bl_tree[n * 2] /*.Freq*/ = 0;
    }

    s.dyn_ltree[END_BLOCK * 2] /*.Freq*/ = 1;
    s.opt_len = s.static_len = 0;
    s.last_lit = s.matches = 0;
  }


  /* ===========================================================================
   * Flush the bit buffer and align the output on a byte boundary
   */
  function bi_windup(s) {
    if (s.bi_valid > 8) {
      put_short(s, s.bi_buf);
    } else if (s.bi_valid > 0) {
      //put_byte(s, (Byte)s->bi_buf);
      s.pending_buf[s.pending++] = s.bi_buf;
    }
    s.bi_buf = 0;
    s.bi_valid = 0;
  }

  /* ===========================================================================
   * Copy a stored block, storing first the length and its
   * one's complement if requested.
   */
  function copy_block(s, buf, len, header) {
  //DeflateState *s;
  //charf    *buf;    /* the input data */
  //unsigned len;     /* its length */
  //int      header;  /* true if block header must be written */

    bi_windup(s); /* align on byte boundary */

    if (header) {
      put_short(s, len);
      put_short(s, ~len);
    }
    //  while (len--) {
    //    put_byte(s, *buf++);
    //  }
    arraySet(s.pending_buf, s.window, buf, len, s.pending);
    s.pending += len;
  }

  /* ===========================================================================
   * Compares to subtrees, using the tree depth as tie breaker when
   * the subtrees have equal frequency. This minimizes the worst case length.
   */
  function smaller(tree, n, m, depth) {
    var _n2 = n * 2;
    var _m2 = m * 2;
    return (tree[_n2] /*.Freq*/ < tree[_m2] /*.Freq*/ ||
      (tree[_n2] /*.Freq*/ === tree[_m2] /*.Freq*/ && depth[n] <= depth[m]));
  }

  /* ===========================================================================
   * Restore the heap property by moving down the tree starting at node k,
   * exchanging a node with the smallest of its two sons if necessary, stopping
   * when the heap property is re-established (each father smaller than its
   * two sons).
   */
  function pqdownheap(s, tree, k)
  //    deflate_state *s;
  //    ct_data *tree;  /* the tree to restore */
  //    int k;               /* node to move down */
  {
    var v = s.heap[k];
    var j = k << 1; /* left son of k */
    while (j <= s.heap_len) {
      /* Set j to the smallest of the two sons: */
      if (j < s.heap_len &&
        smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
        j++;
      }
      /* Exit if v is smaller than both sons */
      if (smaller(tree, v, s.heap[j], s.depth)) {
        break;
      }

      /* Exchange v with the smallest son */
      s.heap[k] = s.heap[j];
      k = j;

      /* And continue down the tree, setting j to the left son of k */
      j <<= 1;
    }
    s.heap[k] = v;
  }


  // inlined manually
  // var SMALLEST = 1;

  /* ===========================================================================
   * Send the block data compressed using the given Huffman trees
   */
  function compress_block(s, ltree, dtree)
  //    deflate_state *s;
  //    const ct_data *ltree; /* literal tree */
  //    const ct_data *dtree; /* distance tree */
  {
    var dist; /* distance of matched string */
    var lc; /* match length or unmatched char (if dist == 0) */
    var lx = 0; /* running index in l_buf */
    var code; /* the code to send */
    var extra; /* number of extra bits to send */

    if (s.last_lit !== 0) {
      do {
        dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
        lc = s.pending_buf[s.l_buf + lx];
        lx++;

        if (dist === 0) {
          send_code(s, lc, ltree); /* send a literal byte */
          //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
        } else {
          /* Here, lc is the match length - MIN_MATCH */
          code = _length_code[lc];
          send_code(s, code + LITERALS + 1, ltree); /* send the length code */
          extra = extra_lbits[code];
          if (extra !== 0) {
            lc -= base_length[code];
            send_bits(s, lc, extra); /* send the extra length bits */
          }
          dist--; /* dist is now the match distance - 1 */
          code = d_code(dist);
          //Assert (code < D_CODES, "bad d_code");

          send_code(s, code, dtree); /* send the distance code */
          extra = extra_dbits[code];
          if (extra !== 0) {
            dist -= base_dist[code];
            send_bits(s, dist, extra); /* send the extra distance bits */
          }
        } /* literal or match pair ? */

        /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
        //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
        //       "pendingBuf overflow");

      } while (lx < s.last_lit);
    }

    send_code(s, END_BLOCK, ltree);
  }


  /* ===========================================================================
   * Construct one Huffman tree and assigns the code bit strings and lengths.
   * Update the total bit length for the current block.
   * IN assertion: the field freq is set for all tree elements.
   * OUT assertions: the fields len and code are set to the optimal bit length
   *     and corresponding code. The length opt_len is updated; static_len is
   *     also updated if stree is not null. The field max_code is set.
   */
  function build_tree(s, desc)
  //    deflate_state *s;
  //    tree_desc *desc; /* the tree descriptor */
  {
    var tree = desc.dyn_tree;
    var stree = desc.stat_desc.static_tree;
    var has_stree = desc.stat_desc.has_stree;
    var elems = desc.stat_desc.elems;
    var n, m; /* iterate over heap elements */
    var max_code = -1; /* largest code with non zero frequency */
    var node; /* new node being created */

    /* Construct the initial heap, with least frequent element in
     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
     * heap[0] is not used.
     */
    s.heap_len = 0;
    s.heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
      if (tree[n * 2] /*.Freq*/ !== 0) {
        s.heap[++s.heap_len] = max_code = n;
        s.depth[n] = 0;

      } else {
        tree[n * 2 + 1] /*.Len*/ = 0;
      }
    }

    /* The pkzip format requires that at least one distance code exists,
     * and that at least one bit should be sent even if there is only one
     * possible code. So to avoid special checks later on we force at least
     * two codes of non zero frequency.
     */
    while (s.heap_len < 2) {
      node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
      tree[node * 2] /*.Freq*/ = 1;
      s.depth[node] = 0;
      s.opt_len--;

      if (has_stree) {
        s.static_len -= stree[node * 2 + 1] /*.Len*/ ;
      }
      /* node is 0 or 1 so it does not have extra bits */
    }
    desc.max_code = max_code;

    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
     * establish sub-heaps of increasing lengths:
     */
    for (n = (s.heap_len >> 1 /*int /2*/ ); n >= 1; n--) {
      pqdownheap(s, tree, n);
    }

    /* Construct the Huffman tree by repeatedly combining the least two
     * frequent nodes.
     */
    node = elems; /* next internal node of the tree */
    do {
      //pqremove(s, tree, n);  /* n = node of least frequency */
      /*** pqremove ***/
      n = s.heap[1 /*SMALLEST*/ ];
      s.heap[1 /*SMALLEST*/ ] = s.heap[s.heap_len--];
      pqdownheap(s, tree, 1 /*SMALLEST*/ );
      /***/

      m = s.heap[1 /*SMALLEST*/ ]; /* m = node of next least frequency */

      s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
      s.heap[--s.heap_max] = m;

      /* Create a new node father of n and m */
      tree[node * 2] /*.Freq*/ = tree[n * 2] /*.Freq*/ + tree[m * 2] /*.Freq*/ ;
      s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
      tree[n * 2 + 1] /*.Dad*/ = tree[m * 2 + 1] /*.Dad*/ = node;

      /* and insert the new node in the heap */
      s.heap[1 /*SMALLEST*/ ] = node++;
      pqdownheap(s, tree, 1 /*SMALLEST*/ );

    } while (s.heap_len >= 2);

    s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/ ];

    /* At this point, the fields freq and dad are set. We can now
     * generate the bit lengths.
     */
    gen_bitlen(s, desc);

    /* The field len is now set, we can generate the bit codes */
    gen_codes(tree, max_code, s.bl_count);
  }


  /* ===========================================================================
   * Scan a literal or distance tree to determine the frequencies of the codes
   * in the bit length tree.
   */
  function scan_tree(s, tree, max_code)
  //    deflate_state *s;
  //    ct_data *tree;   /* the tree to be scanned */
  //    int max_code;    /* and its largest code of non zero frequency */
  {
    var n; /* iterates over all tree elements */
    var prevlen = -1; /* last emitted length */
    var curlen; /* length of current code */

    var nextlen = tree[0 * 2 + 1] /*.Len*/ ; /* length of next code */

    var count = 0; /* repeat count of the current code */
    var max_count = 7; /* max repeat count */
    var min_count = 4; /* min repeat count */

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    }
    tree[(max_code + 1) * 2 + 1] /*.Len*/ = 0xffff; /* guard */

    for (n = 0; n <= max_code; n++) {
      curlen = nextlen;
      nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;

      if (++count < max_count && curlen === nextlen) {
        continue;

      } else if (count < min_count) {
        s.bl_tree[curlen * 2] /*.Freq*/ += count;

      } else if (curlen !== 0) {

        if (curlen !== prevlen) {
          s.bl_tree[curlen * 2] /*.Freq*/ ++;
        }
        s.bl_tree[REP_3_6 * 2] /*.Freq*/ ++;

      } else if (count <= 10) {
        s.bl_tree[REPZ_3_10 * 2] /*.Freq*/ ++;

      } else {
        s.bl_tree[REPZ_11_138 * 2] /*.Freq*/ ++;
      }

      count = 0;
      prevlen = curlen;

      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;

      } else if (curlen === nextlen) {
        max_count = 6;
        min_count = 3;

      } else {
        max_count = 7;
        min_count = 4;
      }
    }
  }


  /* ===========================================================================
   * Send a literal or distance tree in compressed form, using the codes in
   * bl_tree.
   */
  function send_tree(s, tree, max_code)
  //    deflate_state *s;
  //    ct_data *tree; /* the tree to be scanned */
  //    int max_code;       /* and its largest code of non zero frequency */
  {
    var n; /* iterates over all tree elements */
    var prevlen = -1; /* last emitted length */
    var curlen; /* length of current code */

    var nextlen = tree[0 * 2 + 1] /*.Len*/ ; /* length of next code */

    var count = 0; /* repeat count of the current code */
    var max_count = 7; /* max repeat count */
    var min_count = 4; /* min repeat count */

    /* tree[max_code+1].Len = -1; */
    /* guard already set */
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    }

    for (n = 0; n <= max_code; n++) {
      curlen = nextlen;
      nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;

      if (++count < max_count && curlen === nextlen) {
        continue;

      } else if (count < min_count) {
        do {
          send_code(s, curlen, s.bl_tree);
        } while (--count !== 0);

      } else if (curlen !== 0) {
        if (curlen !== prevlen) {
          send_code(s, curlen, s.bl_tree);
          count--;
        }
        //Assert(count >= 3 && count <= 6, " 3_6?");
        send_code(s, REP_3_6, s.bl_tree);
        send_bits(s, count - 3, 2);

      } else if (count <= 10) {
        send_code(s, REPZ_3_10, s.bl_tree);
        send_bits(s, count - 3, 3);

      } else {
        send_code(s, REPZ_11_138, s.bl_tree);
        send_bits(s, count - 11, 7);
      }

      count = 0;
      prevlen = curlen;
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;

      } else if (curlen === nextlen) {
        max_count = 6;
        min_count = 3;

      } else {
        max_count = 7;
        min_count = 4;
      }
    }
  }


  /* ===========================================================================
   * Construct the Huffman tree for the bit lengths and return the index in
   * bl_order of the last bit length code to send.
   */
  function build_bl_tree(s) {
    var max_blindex; /* index of last bit length code of non zero freq */

    /* Determine the bit length frequencies for literal and distance trees */
    scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
    scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

    /* Build the bit length tree: */
    build_tree(s, s.bl_desc);
    /* opt_len now includes the length of the tree representations, except
     * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
     */

    /* Determine the number of bit length codes to send. The pkzip format
     * requires that at least 4 bit length codes be sent. (appnote.txt says
     * 3 but the actual value used is 4.)
     */
    for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
      if (s.bl_tree[bl_order[max_blindex] * 2 + 1] /*.Len*/ !== 0) {
        break;
      }
    }
    /* Update opt_len to include the bit length tree and counts */
    s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
    //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
    //        s->opt_len, s->static_len));

    return max_blindex;
  }


  /* ===========================================================================
   * Send the header for a block using dynamic Huffman trees: the counts, the
   * lengths of the bit length codes, the literal tree and the distance tree.
   * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
   */
  function send_all_trees(s, lcodes, dcodes, blcodes)
  //    deflate_state *s;
  //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
  {
    var rank; /* index in bl_order */

    //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
    //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
    //        "too many codes");
    //Tracev((stderr, "\nbl counts: "));
    send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
    send_bits(s, dcodes - 1, 5);
    send_bits(s, blcodes - 4, 4); /* not -3 as stated in appnote.txt */
    for (rank = 0; rank < blcodes; rank++) {
      //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
      send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1] /*.Len*/ , 3);
    }
    //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

    send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
    //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

    send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
    //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
  }


  /* ===========================================================================
   * Check if the data type is TEXT or BINARY, using the following algorithm:
   * - TEXT if the two conditions below are satisfied:
   *    a) There are no non-portable control characters belonging to the
   *       "black list" (0..6, 14..25, 28..31).
   *    b) There is at least one printable character belonging to the
   *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
   * - BINARY otherwise.
   * - The following partially-portable control characters form a
   *   "gray list" that is ignored in this detection algorithm:
   *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
   * IN assertion: the fields Freq of dyn_ltree are set.
   */
  function detect_data_type(s) {
    /* black_mask is the bit mask of black-listed bytes
     * set bits 0..6, 14..25, and 28..31
     * 0xf3ffc07f = binary 11110011111111111100000001111111
     */
    var black_mask = 0xf3ffc07f;
    var n;

    /* Check for non-textual ("black-listed") bytes. */
    for (n = 0; n <= 31; n++, black_mask >>>= 1) {
      if ((black_mask & 1) && (s.dyn_ltree[n * 2] /*.Freq*/ !== 0)) {
        return Z_BINARY;
      }
    }

    /* Check for textual ("white-listed") bytes. */
    if (s.dyn_ltree[9 * 2] /*.Freq*/ !== 0 || s.dyn_ltree[10 * 2] /*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2] /*.Freq*/ !== 0) {
      return Z_TEXT;
    }
    for (n = 32; n < LITERALS; n++) {
      if (s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {
        return Z_TEXT;
      }
    }

    /* There are no "black-listed" or "white-listed" bytes:
     * this stream either is empty or has tolerated ("gray-listed") bytes only.
     */
    return Z_BINARY;
  }


  var static_init_done = false;

  /* ===========================================================================
   * Initialize the tree data structures for a new zlib stream.
   */
  function _tr_init(s) {

    if (!static_init_done) {
      tr_static_init();
      static_init_done = true;
    }

    s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
    s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
    s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

    s.bi_buf = 0;
    s.bi_valid = 0;

    /* Initialize the first block of the first file: */
    init_block(s);
  }


  /* ===========================================================================
   * Send a stored block
   */
  function _tr_stored_block(s, buf, stored_len, last)
  //DeflateState *s;
  //charf *buf;       /* input block */
  //ulg stored_len;   /* length of input block */
  //int last;         /* one if this is the last block for a file */
  {
    send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3); /* send block type */
    copy_block(s, buf, stored_len, true); /* with header */
  }


  /* ===========================================================================
   * Send one empty static block to give enough lookahead for inflate.
   * This takes 10 bits, of which 7 may remain in the bit buffer.
   */
  function _tr_align(s) {
    send_bits(s, STATIC_TREES << 1, 3);
    send_code(s, END_BLOCK, static_ltree);
    bi_flush(s);
  }


  /* ===========================================================================
   * Determine the best encoding for the current block: dynamic trees, static
   * trees or store, and output the encoded block to the zip file.
   */
  function _tr_flush_block(s, buf, stored_len, last)
  //DeflateState *s;
  //charf *buf;       /* input block, or NULL if too old */
  //ulg stored_len;   /* length of input block */
  //int last;         /* one if this is the last block for a file */
  {
    var opt_lenb, static_lenb; /* opt_len and static_len in bytes */
    var max_blindex = 0; /* index of last bit length code of non zero freq */

    /* Build the Huffman trees unless a stored block is forced */
    if (s.level > 0) {

      /* Check if the file is binary or text */
      if (s.strm.data_type === Z_UNKNOWN) {
        s.strm.data_type = detect_data_type(s);
      }

      /* Construct the literal and distance trees */
      build_tree(s, s.l_desc);
      // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
      //        s->static_len));

      build_tree(s, s.d_desc);
      // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
      //        s->static_len));
      /* At this point, opt_len and static_len are the total bit lengths of
       * the compressed block data, excluding the tree representations.
       */

      /* Build the bit length tree for the above two trees, and get the index
       * in bl_order of the last bit length code to send.
       */
      max_blindex = build_bl_tree(s);

      /* Determine the best encoding. Compute the block lengths in bytes. */
      opt_lenb = (s.opt_len + 3 + 7) >>> 3;
      static_lenb = (s.static_len + 3 + 7) >>> 3;

      // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
      //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
      //        s->last_lit));

      if (static_lenb <= opt_lenb) {
        opt_lenb = static_lenb;
      }

    } else {
      // Assert(buf != (char*)0, "lost buf");
      opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
    }

    if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
      /* 4: two words for the lengths */

      /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
       * Otherwise we can't have processed more than WSIZE input bytes since
       * the last block flush, because compression would have been
       * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
       * transform a block into a stored block.
       */
      _tr_stored_block(s, buf, stored_len, last);

    } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

      send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
      compress_block(s, static_ltree, static_dtree);

    } else {
      send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
      send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
      compress_block(s, s.dyn_ltree, s.dyn_dtree);
    }
    // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
    /* The above check is made mod 2^32, for files larger than 512 MB
     * and uLong implemented on 32 bits.
     */
    init_block(s);

    if (last) {
      bi_windup(s);
    }
    // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
    //       s->compressed_len-7*last));
  }

  /* ===========================================================================
   * Save the match info and tally the frequency counts. Return true if
   * the current block must be flushed.
   */
  function _tr_tally(s, dist, lc)
  //    deflate_state *s;
  //    unsigned dist;  /* distance of matched string */
  //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
  {
    //var out_length, in_length, dcode;

    s.pending_buf[s.d_buf + s.last_lit * 2] = (dist >>> 8) & 0xff;
    s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

    s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
    s.last_lit++;

    if (dist === 0) {
      /* lc is the unmatched char */
      s.dyn_ltree[lc * 2] /*.Freq*/ ++;
    } else {
      s.matches++;
      /* Here, lc is the match length - MIN_MATCH */
      dist--; /* dist = match distance - 1 */
      //Assert((ush)dist < (ush)MAX_DIST(s) &&
      //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
      //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

      s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2] /*.Freq*/ ++;
      s.dyn_dtree[d_code(dist) * 2] /*.Freq*/ ++;
    }

    // (!) This block is disabled in zlib defailts,
    // don't enable it for binary compatibility

    //#ifdef TRUNCATE_BLOCK
    //  /* Try to guess if it is profitable to stop the current block here */
    //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
    //    /* Compute an upper bound for the compressed length */
    //    out_length = s.last_lit*8;
    //    in_length = s.strstart - s.block_start;
    //
    //    for (dcode = 0; dcode < D_CODES; dcode++) {
    //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
    //    }
    //    out_length >>>= 3;
    //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
    //    //       s->last_lit, in_length, out_length,
    //    //       100L - out_length*100L/in_length));
    //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
    //      return true;
    //    }
    //  }
    //#endif

    return (s.last_lit === s.lit_bufsize - 1);
    /* We avoid equality with lit_bufsize because of wraparound at 64K
     * on 16 bit machines and because stored blocks are restricted to
     * 64K-1 bytes.
     */
  }

  // Note: adler32 takes 12% for level 0 and 2% for level 6.
  // It doesn't worth to make additional optimizationa as in original.
  // Small size is preferable.

  function adler32(adler, buf, len, pos) {
    var s1 = (adler & 0xffff) |0,
        s2 = ((adler >>> 16) & 0xffff) |0,
        n = 0;

    while (len !== 0) {
      // Set limit ~ twice less than 5552, to keep
      // s2 in 31-bits, because we force signed ints.
      // in other case %= will fail.
      n = len > 2000 ? 2000 : len;
      len -= n;

      do {
        s1 = (s1 + buf[pos++]) |0;
        s2 = (s2 + s1) |0;
      } while (--n);

      s1 %= 65521;
      s2 %= 65521;
    }

    return (s1 | (s2 << 16)) |0;
  }

  // Note: we can't get significant speed boost here.
  // So write code to minimize size - no pregenerated tables
  // and array tools dependencies.


  // Use ordinary array, since untyped makes no boost here
  function makeTable() {
    var c, table = [];

    for (var n = 0; n < 256; n++) {
      c = n;
      for (var k = 0; k < 8; k++) {
        c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
      }
      table[n] = c;
    }

    return table;
  }

  // Create table on load. Just 255 signed longs. Not a problem.
  var crcTable = makeTable();


  function crc32(crc, buf, len, pos) {
    var t = crcTable,
        end = pos + len;

    crc ^= -1;

    for (var i = pos; i < end; i++) {
      crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
    }

    return (crc ^ (-1)); // >>> 0;
  }

  /* Public constants ==========================================================*/
  /* ===========================================================================*/


  /* Allowed flush values; see deflate() and inflate() below for details */
  var Z_NO_FLUSH = 0;
  var Z_PARTIAL_FLUSH = 1;
  //var Z_SYNC_FLUSH    = 2;
  var Z_FULL_FLUSH = 3;
  var Z_FINISH = 4;
  var Z_BLOCK = 5;
  //var Z_TREES         = 6;


  /* Return codes for the compression/decompression functions. Negative values
   * are errors, positive values are used for special but normal events.
   */
  var Z_OK = 0;
  var Z_STREAM_END = 1;
  //var Z_NEED_DICT     = 2;
  //var Z_ERRNO         = -1;
  var Z_STREAM_ERROR = -2;
  var Z_DATA_ERROR = -3;
  //var Z_MEM_ERROR     = -4;
  var Z_BUF_ERROR = -5;
  //var Z_VERSION_ERROR = -6;


  /* compression levels */
  //var Z_NO_COMPRESSION      = 0;
  //var Z_BEST_SPEED          = 1;
  //var Z_BEST_COMPRESSION    = 9;
  var Z_DEFAULT_COMPRESSION = -1;


  var Z_FILTERED = 1;
  var Z_HUFFMAN_ONLY = 2;
  var Z_RLE = 3;
  var Z_FIXED$1 = 4;

  /* Possible values of the data_type field (though see inflate()) */
  //var Z_BINARY              = 0;
  //var Z_TEXT                = 1;
  //var Z_ASCII               = 1; // = Z_TEXT
  var Z_UNKNOWN$1 = 2;


  /* The deflate compression method */
  var Z_DEFLATED = 8;

  /*============================================================================*/


  var MAX_MEM_LEVEL = 9;


  var LENGTH_CODES$1 = 29;
  /* number of length codes, not counting the special END_BLOCK code */
  var LITERALS$1 = 256;
  /* number of literal bytes 0..255 */
  var L_CODES$1 = LITERALS$1 + 1 + LENGTH_CODES$1;
  /* number of Literal or Length codes, including the END_BLOCK code */
  var D_CODES$1 = 30;
  /* number of distance codes */
  var BL_CODES$1 = 19;
  /* number of codes used to transfer the bit lengths */
  var HEAP_SIZE$1 = 2 * L_CODES$1 + 1;
  /* maximum heap size */
  var MAX_BITS$1 = 15;
  /* All codes must not exceed MAX_BITS bits */

  var MIN_MATCH$1 = 3;
  var MAX_MATCH$1 = 258;
  var MIN_LOOKAHEAD = (MAX_MATCH$1 + MIN_MATCH$1 + 1);

  var PRESET_DICT = 0x20;

  var INIT_STATE = 42;
  var EXTRA_STATE = 69;
  var NAME_STATE = 73;
  var COMMENT_STATE = 91;
  var HCRC_STATE = 103;
  var BUSY_STATE = 113;
  var FINISH_STATE = 666;

  var BS_NEED_MORE = 1; /* block not completed, need more input or more output */
  var BS_BLOCK_DONE = 2; /* block flush performed */
  var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
  var BS_FINISH_DONE = 4; /* finish done, accept no more input or output */

  var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

  function err(strm, errorCode) {
    strm.msg = msg[errorCode];
    return errorCode;
  }

  function rank(f) {
    return ((f) << 1) - ((f) > 4 ? 9 : 0);
  }

  function zero$1(buf) {
    var len = buf.length;
    while (--len >= 0) {
      buf[len] = 0;
    }
  }


  /* =========================================================================
   * Flush as much pending output as possible. All deflate() output goes
   * through this function so some applications may wish to modify it
   * to avoid allocating a large strm->output buffer and copying into it.
   * (See also read_buf()).
   */
  function flush_pending(strm) {
    var s = strm.state;

    //_tr_flush_bits(s);
    var len = s.pending;
    if (len > strm.avail_out) {
      len = strm.avail_out;
    }
    if (len === 0) {
      return;
    }

    arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
    strm.next_out += len;
    s.pending_out += len;
    strm.total_out += len;
    strm.avail_out -= len;
    s.pending -= len;
    if (s.pending === 0) {
      s.pending_out = 0;
    }
  }


  function flush_block_only(s, last) {
    _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
    s.block_start = s.strstart;
    flush_pending(s.strm);
  }


  function put_byte(s, b) {
    s.pending_buf[s.pending++] = b;
  }


  /* =========================================================================
   * Put a short in the pending buffer. The 16-bit value is put in MSB order.
   * IN assertion: the stream state is correct and there is enough room in
   * pending_buf.
   */
  function putShortMSB(s, b) {
    //  put_byte(s, (Byte)(b >> 8));
    //  put_byte(s, (Byte)(b & 0xff));
    s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
    s.pending_buf[s.pending++] = b & 0xff;
  }


  /* ===========================================================================
   * Read a new buffer from the current input stream, update the adler32
   * and total number of bytes read.  All deflate() input goes through
   * this function so some applications may wish to modify it to avoid
   * allocating a large strm->input buffer and copying from it.
   * (See also flush_pending()).
   */
  function read_buf(strm, buf, start, size) {
    var len = strm.avail_in;

    if (len > size) {
      len = size;
    }
    if (len === 0) {
      return 0;
    }

    strm.avail_in -= len;

    // zmemcpy(buf, strm->next_in, len);
    arraySet(buf, strm.input, strm.next_in, len, start);
    if (strm.state.wrap === 1) {
      strm.adler = adler32(strm.adler, buf, len, start);
    } else if (strm.state.wrap === 2) {
      strm.adler = crc32(strm.adler, buf, len, start);
    }

    strm.next_in += len;
    strm.total_in += len;

    return len;
  }


  /* ===========================================================================
   * Set match_start to the longest match starting at the given string and
   * return its length. Matches shorter or equal to prev_length are discarded,
   * in which case the result is equal to prev_length and match_start is
   * garbage.
   * IN assertions: cur_match is the head of the hash chain for the current
   *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
   * OUT assertion: the match length is not greater than s->lookahead.
   */
  function longest_match(s, cur_match) {
    var chain_length = s.max_chain_length; /* max hash chain length */
    var scan = s.strstart; /* current string */
    var match; /* matched string */
    var len; /* length of current match */
    var best_len = s.prev_length; /* best match length so far */
    var nice_match = s.nice_match; /* stop if match long enough */
    var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0 /*NIL*/ ;

    var _win = s.window; // shortcut

    var wmask = s.w_mask;
    var prev = s.prev;

    /* Stop when cur_match becomes <= limit. To simplify the code,
     * we prevent matches with the string of window index 0.
     */

    var strend = s.strstart + MAX_MATCH$1;
    var scan_end1 = _win[scan + best_len - 1];
    var scan_end = _win[scan + best_len];

    /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
     * It is easy to get rid of this optimization if necessary.
     */
    // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

    /* Do not waste too much time if we already have a good match: */
    if (s.prev_length >= s.good_match) {
      chain_length >>= 2;
    }
    /* Do not look for matches beyond the end of the input. This is necessary
     * to make deflate deterministic.
     */
    if (nice_match > s.lookahead) {
      nice_match = s.lookahead;
    }

    // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

    do {
      // Assert(cur_match < s->strstart, "no future");
      match = cur_match;

      /* Skip to next match if the match length cannot increase
       * or if the match length is less than 2.  Note that the checks below
       * for insufficient lookahead only occur occasionally for performance
       * reasons.  Therefore uninitialized memory will be accessed, and
       * conditional jumps will be made that depend on those values.
       * However the length of the match is limited to the lookahead, so
       * the output of deflate is not affected by the uninitialized values.
       */

      if (_win[match + best_len] !== scan_end ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match] !== _win[scan] ||
        _win[++match] !== _win[scan + 1]) {
        continue;
      }

      /* The check at best_len-1 can be removed because it will be made
       * again later. (This heuristic is not always a win.)
       * It is not necessary to compare scan[2] and match[2] since they
       * are always equal when the other bytes match, given that
       * the hash keys are equal and that HASH_BITS >= 8.
       */
      scan += 2;
      match++;
      // Assert(*scan == *match, "match[2]?");

      /* We check for insufficient lookahead only every 8th comparison;
       * the 256th check will be made at strstart+258.
       */
      do {
        /*jshint noempty:false*/
      } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
        _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
        _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
        _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
        scan < strend);

      // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

      len = MAX_MATCH$1 - (strend - scan);
      scan = strend - MAX_MATCH$1;

      if (len > best_len) {
        s.match_start = cur_match;
        best_len = len;
        if (len >= nice_match) {
          break;
        }
        scan_end1 = _win[scan + best_len - 1];
        scan_end = _win[scan + best_len];
      }
    } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

    if (best_len <= s.lookahead) {
      return best_len;
    }
    return s.lookahead;
  }


  /* ===========================================================================
   * Fill the window when the lookahead becomes insufficient.
   * Updates strstart and lookahead.
   *
   * IN assertion: lookahead < MIN_LOOKAHEAD
   * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
   *    At least one byte has been read, or avail_in == 0; reads are
   *    performed for at least two bytes (required for the zip translate_eol
   *    option -- not supported here).
   */
  function fill_window(s) {
    var _w_size = s.w_size;
    var p, n, m, more, str;

    //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

    do {
      more = s.window_size - s.lookahead - s.strstart;

      // JS ints have 32 bit, block below not needed
      /* Deal with !@#$% 64K limit: */
      //if (sizeof(int) <= 2) {
      //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
      //        more = wsize;
      //
      //  } else if (more == (unsigned)(-1)) {
      //        /* Very unlikely, but possible on 16 bit machine if
      //         * strstart == 0 && lookahead == 1 (input done a byte at time)
      //         */
      //        more--;
      //    }
      //}


      /* If the window is almost full and there is insufficient lookahead,
       * move the upper half to the lower one to make room in the upper half.
       */
      if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

        arraySet(s.window, s.window, _w_size, _w_size, 0);
        s.match_start -= _w_size;
        s.strstart -= _w_size;
        /* we now have strstart >= MAX_DIST */
        s.block_start -= _w_size;

        /* Slide the hash table (could be avoided with 32 bit values
         at the expense of memory usage). We slide even when level == 0
         to keep the hash table consistent if we switch back to level > 0
         later. (Using level 0 permanently is not an optimal usage of
         zlib, so we don't care about this pathological case.)
         */

        n = s.hash_size;
        p = n;
        do {
          m = s.head[--p];
          s.head[p] = (m >= _w_size ? m - _w_size : 0);
        } while (--n);

        n = _w_size;
        p = n;
        do {
          m = s.prev[--p];
          s.prev[p] = (m >= _w_size ? m - _w_size : 0);
          /* If n is not on any hash chain, prev[n] is garbage but
           * its value will never be used.
           */
        } while (--n);

        more += _w_size;
      }
      if (s.strm.avail_in === 0) {
        break;
      }

      /* If there was no sliding:
       *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
       *    more == window_size - lookahead - strstart
       * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
       * => more >= window_size - 2*WSIZE + 2
       * In the BIG_MEM or MMAP case (not yet supported),
       *   window_size == input_size + MIN_LOOKAHEAD  &&
       *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
       * Otherwise, window_size == 2*WSIZE so more >= 2.
       * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
       */
      //Assert(more >= 2, "more < 2");
      n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
      s.lookahead += n;

      /* Initialize the hash value now that we have some input: */
      if (s.lookahead + s.insert >= MIN_MATCH$1) {
        str = s.strstart - s.insert;
        s.ins_h = s.window[str];

        /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
        //#if MIN_MATCH != 3
        //        Call update_hash() MIN_MATCH-3 more times
        //#endif
        while (s.insert) {
          /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH$1 - 1]) & s.hash_mask;

          s.prev[str & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = str;
          str++;
          s.insert--;
          if (s.lookahead + s.insert < MIN_MATCH$1) {
            break;
          }
        }
      }
      /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
       * but this is not important since only literal bytes will be emitted.
       */

    } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

    /* If the WIN_INIT bytes after the end of the current data have never been
     * written, then zero those bytes in order to avoid memory check reports of
     * the use of uninitialized (or uninitialised as Julian writes) bytes by
     * the longest match routines.  Update the high water mark for the next
     * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
     * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
     */
    //  if (s.high_water < s.window_size) {
    //    var curr = s.strstart + s.lookahead;
    //    var init = 0;
    //
    //    if (s.high_water < curr) {
    //      /* Previous high water mark below current data -- zero WIN_INIT
    //       * bytes or up to end of window, whichever is less.
    //       */
    //      init = s.window_size - curr;
    //      if (init > WIN_INIT)
    //        init = WIN_INIT;
    //      zmemzero(s->window + curr, (unsigned)init);
    //      s->high_water = curr + init;
    //    }
    //    else if (s->high_water < (ulg)curr + WIN_INIT) {
    //      /* High water mark at or above current data, but below current data
    //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
    //       * to end of window, whichever is less.
    //       */
    //      init = (ulg)curr + WIN_INIT - s->high_water;
    //      if (init > s->window_size - s->high_water)
    //        init = s->window_size - s->high_water;
    //      zmemzero(s->window + s->high_water, (unsigned)init);
    //      s->high_water += init;
    //    }
    //  }
    //
    //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
    //    "not enough room for search");
  }

  /* ===========================================================================
   * Copy without compression as much as possible from the input stream, return
   * the current block state.
   * This function does not insert new strings in the dictionary since
   * uncompressible data is probably not useful. This function is used
   * only for the level=0 compression option.
   * NOTE: this function should be optimized to avoid extra copying from
   * window to pending_buf.
   */
  function deflate_stored(s, flush) {
    /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
     * to pending_buf_size, and each stored block has a 5 byte header:
     */
    var max_block_size = 0xffff;

    if (max_block_size > s.pending_buf_size - 5) {
      max_block_size = s.pending_buf_size - 5;
    }

    /* Copy as much as possible from input to output: */
    for (;;) {
      /* Fill the window as much as possible: */
      if (s.lookahead <= 1) {

        //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
        //  s->block_start >= (long)s->w_size, "slide too late");
        //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
        //        s.block_start >= s.w_size)) {
        //        throw  new Error("slide too late");
        //      }

        fill_window(s);
        if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }

        if (s.lookahead === 0) {
          break;
        }
        /* flush the current block */
      }
      //Assert(s->block_start >= 0L, "block gone");
      //    if (s.block_start < 0) throw new Error("block gone");

      s.strstart += s.lookahead;
      s.lookahead = 0;

      /* Emit a stored block if pending_buf will be full: */
      var max_start = s.block_start + max_block_size;

      if (s.strstart === 0 || s.strstart >= max_start) {
        /* strstart == 0 is possible when wraparound on 16-bit machine */
        s.lookahead = s.strstart - max_start;
        s.strstart = max_start;
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/


      }
      /* Flush if we may have to slide, otherwise block_start may become
       * negative and the data will be gone:
       */
      if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    }

    s.insert = 0;

    if (flush === Z_FINISH) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }

    if (s.strstart > s.block_start) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }

    return BS_NEED_MORE;
  }

  /* ===========================================================================
   * Compress as much as possible from the input stream, return the current
   * block state.
   * This function does not perform lazy evaluation of matches and inserts
   * new strings in the dictionary only for unmatched strings or for short
   * matches. It is used only for the fast compression options.
   */
  function deflate_fast(s, flush) {
    var hash_head; /* head of the hash chain */
    var bflush; /* set if current block must be flushed */

    for (;;) {
      /* Make sure that we always have enough lookahead, except
       * at the end of the input file. We need MAX_MATCH bytes
       * for the next match, plus MIN_MATCH bytes to insert the
       * string following the next match.
       */
      if (s.lookahead < MIN_LOOKAHEAD) {
        fill_window(s);
        if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) {
          break; /* flush the current block */
        }
      }

      /* Insert the string window[strstart .. strstart+2] in the
       * dictionary, and set hash_head to the head of the hash chain:
       */
      hash_head = 0 /*NIL*/ ;
      if (s.lookahead >= MIN_MATCH$1) {
        /*** INSERT_STRING(s, s.strstart, hash_head); ***/
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH$1 - 1]) & s.hash_mask;
        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = s.strstart;
        /***/
      }

      /* Find the longest match, discarding those <= prev_length.
       * At this point we have always match_length < MIN_MATCH
       */
      if (hash_head !== 0 /*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
        /* To simplify the code, we prevent matches with the string
         * of window index 0 (in particular we have to avoid a match
         * of the string with itself at the start of the input file).
         */
        s.match_length = longest_match(s, hash_head);
        /* longest_match() sets match_start */
      }
      if (s.match_length >= MIN_MATCH$1) {
        // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

        /*** _tr_tally_dist(s, s.strstart - s.match_start,
                       s.match_length - MIN_MATCH, bflush); ***/
        bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH$1);

        s.lookahead -= s.match_length;

        /* Insert new strings in the hash table only if the match length
         * is not too large. This saves time but degrades compression.
         */
        if (s.match_length <= s.max_lazy_match /*max_insert_length*/ && s.lookahead >= MIN_MATCH$1) {
          s.match_length--; /* string at strstart already in table */
          do {
            s.strstart++;
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/
            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH$1 - 1]) & s.hash_mask;
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
            /***/
            /* strstart never exceeds WSIZE-MAX_MATCH, so there are
             * always MIN_MATCH bytes ahead.
             */
          } while (--s.match_length !== 0);
          s.strstart++;
        } else {
          s.strstart += s.match_length;
          s.match_length = 0;
          s.ins_h = s.window[s.strstart];
          /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

          //#if MIN_MATCH != 3
          //                Call UPDATE_HASH() MIN_MATCH-3 more times
          //#endif
          /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
           * matter since it will be recomputed at next deflate call.
           */
        }
      } else {
        /* No match, output a literal byte */
        //Tracevv((stderr,"%c", s.window[s.strstart]));
        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart]);

        s.lookahead--;
        s.strstart++;
      }
      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    }
    s.insert = ((s.strstart < (MIN_MATCH$1 - 1)) ? s.strstart : MIN_MATCH$1 - 1);
    if (flush === Z_FINISH) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
    return BS_BLOCK_DONE;
  }

  /* ===========================================================================
   * Same as above, but achieves better compression. We use a lazy
   * evaluation for matches: a match is finally adopted only if there is
   * no better match at the next window position.
   */
  function deflate_slow(s, flush) {
    var hash_head; /* head of hash chain */
    var bflush; /* set if current block must be flushed */

    var max_insert;

    /* Process the input block. */
    for (;;) {
      /* Make sure that we always have enough lookahead, except
       * at the end of the input file. We need MAX_MATCH bytes
       * for the next match, plus MIN_MATCH bytes to insert the
       * string following the next match.
       */
      if (s.lookahead < MIN_LOOKAHEAD) {
        fill_window(s);
        if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) {
          break;
        } /* flush the current block */
      }

      /* Insert the string window[strstart .. strstart+2] in the
       * dictionary, and set hash_head to the head of the hash chain:
       */
      hash_head = 0 /*NIL*/ ;
      if (s.lookahead >= MIN_MATCH$1) {
        /*** INSERT_STRING(s, s.strstart, hash_head); ***/
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH$1 - 1]) & s.hash_mask;
        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = s.strstart;
        /***/
      }

      /* Find the longest match, discarding those <= prev_length.
       */
      s.prev_length = s.match_length;
      s.prev_match = s.match_start;
      s.match_length = MIN_MATCH$1 - 1;

      if (hash_head !== 0 /*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD) /*MAX_DIST(s)*/ ) {
        /* To simplify the code, we prevent matches with the string
         * of window index 0 (in particular we have to avoid a match
         * of the string with itself at the start of the input file).
         */
        s.match_length = longest_match(s, hash_head);
        /* longest_match() sets match_start */

        if (s.match_length <= 5 &&
          (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH$1 && s.strstart - s.match_start > 4096 /*TOO_FAR*/ ))) {

          /* If prev_match is also MIN_MATCH, match_start is garbage
           * but we will ignore the current match anyway.
           */
          s.match_length = MIN_MATCH$1 - 1;
        }
      }
      /* If there was a match at the previous step and the current
       * match is not better, output the previous match:
       */
      if (s.prev_length >= MIN_MATCH$1 && s.match_length <= s.prev_length) {
        max_insert = s.strstart + s.lookahead - MIN_MATCH$1;
        /* Do not insert strings in hash table beyond this. */

        //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

        /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                       s.prev_length - MIN_MATCH, bflush);***/
        bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH$1);
        /* Insert in hash table all strings up to the end of the match.
         * strstart-1 and strstart are already inserted. If there is not
         * enough lookahead, the last two strings are not inserted in
         * the hash table.
         */
        s.lookahead -= s.prev_length - 1;
        s.prev_length -= 2;
        do {
          if (++s.strstart <= max_insert) {
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/
            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH$1 - 1]) & s.hash_mask;
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
            /***/
          }
        } while (--s.prev_length !== 0);
        s.match_available = 0;
        s.match_length = MIN_MATCH$1 - 1;
        s.strstart++;

        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }

      } else if (s.match_available) {
        /* If there was no match at the previous position, output a
         * single literal. If there was a match but the current match
         * is longer, truncate the previous match to a single literal.
         */
        //Tracevv((stderr,"%c", s->window[s->strstart-1]));
        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

        if (bflush) {
          /*** FLUSH_BLOCK_ONLY(s, 0) ***/
          flush_block_only(s, false);
          /***/
        }
        s.strstart++;
        s.lookahead--;
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      } else {
        /* There is no previous match to compare with, wait for
         * the next step to decide.
         */
        s.match_available = 1;
        s.strstart++;
        s.lookahead--;
      }
    }
    //Assert (flush != Z_NO_FLUSH, "no flush?");
    if (s.match_available) {
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

      s.match_available = 0;
    }
    s.insert = s.strstart < MIN_MATCH$1 - 1 ? s.strstart : MIN_MATCH$1 - 1;
    if (flush === Z_FINISH) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }

    return BS_BLOCK_DONE;
  }


  /* ===========================================================================
   * For Z_RLE, simply look for runs of bytes, generate matches only of distance
   * one.  Do not maintain a hash table.  (It will be regenerated if this run of
   * deflate switches away from Z_RLE.)
   */
  function deflate_rle(s, flush) {
    var bflush; /* set if current block must be flushed */
    var prev; /* byte at distance one to match */
    var scan, strend; /* scan goes up to strend for length of run */

    var _win = s.window;

    for (;;) {
      /* Make sure that we always have enough lookahead, except
       * at the end of the input file. We need MAX_MATCH bytes
       * for the longest run, plus one for the unrolled loop.
       */
      if (s.lookahead <= MAX_MATCH$1) {
        fill_window(s);
        if (s.lookahead <= MAX_MATCH$1 && flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) {
          break;
        } /* flush the current block */
      }

      /* See how many times the previous byte repeats */
      s.match_length = 0;
      if (s.lookahead >= MIN_MATCH$1 && s.strstart > 0) {
        scan = s.strstart - 1;
        prev = _win[scan];
        if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
          strend = s.strstart + MAX_MATCH$1;
          do {
            /*jshint noempty:false*/
          } while (prev === _win[++scan] && prev === _win[++scan] &&
            prev === _win[++scan] && prev === _win[++scan] &&
            prev === _win[++scan] && prev === _win[++scan] &&
            prev === _win[++scan] && prev === _win[++scan] &&
            scan < strend);
          s.match_length = MAX_MATCH$1 - (strend - scan);
          if (s.match_length > s.lookahead) {
            s.match_length = s.lookahead;
          }
        }
        //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
      }

      /* Emit match if have run of MIN_MATCH or longer, else emit literal */
      if (s.match_length >= MIN_MATCH$1) {
        //check_match(s, s.strstart, s.strstart - 1, s.match_length);

        /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
        bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH$1);

        s.lookahead -= s.match_length;
        s.strstart += s.match_length;
        s.match_length = 0;
      } else {
        /* No match, output a literal byte */
        //Tracevv((stderr,"%c", s->window[s->strstart]));
        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart]);

        s.lookahead--;
        s.strstart++;
      }
      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    }
    s.insert = 0;
    if (flush === Z_FINISH) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
    return BS_BLOCK_DONE;
  }

  /* ===========================================================================
   * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
   * (It will be regenerated if this run of deflate switches away from Huffman.)
   */
  function deflate_huff(s, flush) {
    var bflush; /* set if current block must be flushed */

    for (;;) {
      /* Make sure that we have a literal to write. */
      if (s.lookahead === 0) {
        fill_window(s);
        if (s.lookahead === 0) {
          if (flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          break; /* flush the current block */
        }
      }

      /* Output a literal byte */
      s.match_length = 0;
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    }
    s.insert = 0;
    if (flush === Z_FINISH) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
    return BS_BLOCK_DONE;
  }

  /* Values for max_lazy_match, good_match and max_chain_length, depending on
   * the desired pack level (0..9). The values given below have been tuned to
   * exclude worst case performance for pathological files. Better values may be
   * found for specific files.
   */
  function Config(good_length, max_lazy, nice_length, max_chain, func) {
    this.good_length = good_length;
    this.max_lazy = max_lazy;
    this.nice_length = nice_length;
    this.max_chain = max_chain;
    this.func = func;
  }

  var configuration_table;

  configuration_table = [
    /*      good lazy nice chain */
    new Config(0, 0, 0, 0, deflate_stored), /* 0 store only */
    new Config(4, 4, 8, 4, deflate_fast), /* 1 max speed, no lazy matches */
    new Config(4, 5, 16, 8, deflate_fast), /* 2 */
    new Config(4, 6, 32, 32, deflate_fast), /* 3 */

    new Config(4, 4, 16, 16, deflate_slow), /* 4 lazy matches */
    new Config(8, 16, 32, 32, deflate_slow), /* 5 */
    new Config(8, 16, 128, 128, deflate_slow), /* 6 */
    new Config(8, 32, 128, 256, deflate_slow), /* 7 */
    new Config(32, 128, 258, 1024, deflate_slow), /* 8 */
    new Config(32, 258, 258, 4096, deflate_slow) /* 9 max compression */
  ];


  /* ===========================================================================
   * Initialize the "longest match" routines for a new zlib stream
   */
  function lm_init(s) {
    s.window_size = 2 * s.w_size;

    /*** CLEAR_HASH(s); ***/
    zero$1(s.head); // Fill with NIL (= 0);

    /* Set the default configuration parameters:
     */
    s.max_lazy_match = configuration_table[s.level].max_lazy;
    s.good_match = configuration_table[s.level].good_length;
    s.nice_match = configuration_table[s.level].nice_length;
    s.max_chain_length = configuration_table[s.level].max_chain;

    s.strstart = 0;
    s.block_start = 0;
    s.lookahead = 0;
    s.insert = 0;
    s.match_length = s.prev_length = MIN_MATCH$1 - 1;
    s.match_available = 0;
    s.ins_h = 0;
  }


  function DeflateState() {
    this.strm = null; /* pointer back to this zlib stream */
    this.status = 0; /* as the name implies */
    this.pending_buf = null; /* output still pending */
    this.pending_buf_size = 0; /* size of pending_buf */
    this.pending_out = 0; /* next pending byte to output to the stream */
    this.pending = 0; /* nb of bytes in the pending buffer */
    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
    this.gzhead = null; /* gzip header information to write */
    this.gzindex = 0; /* where in extra, name, or comment */
    this.method = Z_DEFLATED; /* can only be DEFLATED */
    this.last_flush = -1; /* value of flush param for previous deflate call */

    this.w_size = 0; /* LZ77 window size (32K by default) */
    this.w_bits = 0; /* log2(w_size)  (8..16) */
    this.w_mask = 0; /* w_size - 1 */

    this.window = null;
    /* Sliding window. Input bytes are read into the second half of the window,
     * and move to the first half later to keep a dictionary of at least wSize
     * bytes. With this organization, matches are limited to a distance of
     * wSize-MAX_MATCH bytes, but this ensures that IO is always
     * performed with a length multiple of the block size.
     */

    this.window_size = 0;
    /* Actual size of window: 2*wSize, except when the user input buffer
     * is directly used as sliding window.
     */

    this.prev = null;
    /* Link to older string with same hash index. To limit the size of this
     * array to 64K, this link is maintained only for the last 32K strings.
     * An index in this array is thus a window index modulo 32K.
     */

    this.head = null; /* Heads of the hash chains or NIL. */

    this.ins_h = 0; /* hash index of string to be inserted */
    this.hash_size = 0; /* number of elements in hash table */
    this.hash_bits = 0; /* log2(hash_size) */
    this.hash_mask = 0; /* hash_size-1 */

    this.hash_shift = 0;
    /* Number of bits by which ins_h must be shifted at each input
     * step. It must be such that after MIN_MATCH steps, the oldest
     * byte no longer takes part in the hash key, that is:
     *   hash_shift * MIN_MATCH >= hash_bits
     */

    this.block_start = 0;
    /* Window position at the beginning of the current output block. Gets
     * negative when the window is moved backwards.
     */

    this.match_length = 0; /* length of best match */
    this.prev_match = 0; /* previous match */
    this.match_available = 0; /* set if previous match exists */
    this.strstart = 0; /* start of string to insert */
    this.match_start = 0; /* start of matching string */
    this.lookahead = 0; /* number of valid bytes ahead in window */

    this.prev_length = 0;
    /* Length of the best match at previous step. Matches not greater than this
     * are discarded. This is used in the lazy match evaluation.
     */

    this.max_chain_length = 0;
    /* To speed up deflation, hash chains are never searched beyond this
     * length.  A higher limit improves compression ratio but degrades the
     * speed.
     */

    this.max_lazy_match = 0;
    /* Attempt to find a better match only when the current match is strictly
     * smaller than this value. This mechanism is used only for compression
     * levels >= 4.
     */
    // That's alias to max_lazy_match, don't use directly
    //this.max_insert_length = 0;
    /* Insert new strings in the hash table only if the match length is not
     * greater than this length. This saves time but degrades compression.
     * max_insert_length is used only for compression levels <= 3.
     */

    this.level = 0; /* compression level (1..9) */
    this.strategy = 0; /* favor or force Huffman coding*/

    this.good_match = 0;
    /* Use a faster search when the previous match is longer than this */

    this.nice_match = 0; /* Stop searching when current match exceeds this */

    /* used by c: */

    /* Didn't use ct_data typedef below to suppress compiler warning */

    // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
    // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
    // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

    // Use flat array of DOUBLE size, with interleaved fata,
    // because JS does not support effective
    this.dyn_ltree = new Buf16(HEAP_SIZE$1 * 2);
    this.dyn_dtree = new Buf16((2 * D_CODES$1 + 1) * 2);
    this.bl_tree = new Buf16((2 * BL_CODES$1 + 1) * 2);
    zero$1(this.dyn_ltree);
    zero$1(this.dyn_dtree);
    zero$1(this.bl_tree);

    this.l_desc = null; /* desc. for literal tree */
    this.d_desc = null; /* desc. for distance tree */
    this.bl_desc = null; /* desc. for bit length tree */

    //ush bl_count[MAX_BITS+1];
    this.bl_count = new Buf16(MAX_BITS$1 + 1);
    /* number of codes at each bit length for an optimal tree */

    //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
    this.heap = new Buf16(2 * L_CODES$1 + 1); /* heap used to build the Huffman trees */
    zero$1(this.heap);

    this.heap_len = 0; /* number of elements in the heap */
    this.heap_max = 0; /* element of largest frequency */
    /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
     * The same heap array is used to build all
     */

    this.depth = new Buf16(2 * L_CODES$1 + 1); //uch depth[2*L_CODES+1];
    zero$1(this.depth);
    /* Depth of each subtree used as tie breaker for trees of equal frequency
     */

    this.l_buf = 0; /* buffer index for literals or lengths */

    this.lit_bufsize = 0;
    /* Size of match buffer for literals/lengths.  There are 4 reasons for
     * limiting lit_bufsize to 64K:
     *   - frequencies can be kept in 16 bit counters
     *   - if compression is not successful for the first block, all input
     *     data is still in the window so we can still emit a stored block even
     *     when input comes from standard input.  (This can also be done for
     *     all blocks if lit_bufsize is not greater than 32K.)
     *   - if compression is not successful for a file smaller than 64K, we can
     *     even emit a stored file instead of a stored block (saving 5 bytes).
     *     This is applicable only for zip (not gzip or zlib).
     *   - creating new Huffman trees less frequently may not provide fast
     *     adaptation to changes in the input data statistics. (Take for
     *     example a binary file with poorly compressible code followed by
     *     a highly compressible string table.) Smaller buffer sizes give
     *     fast adaptation but have of course the overhead of transmitting
     *     trees more frequently.
     *   - I can't count above 4
     */

    this.last_lit = 0; /* running index in l_buf */

    this.d_buf = 0;
    /* Buffer index for distances. To simplify the code, d_buf and l_buf have
     * the same number of elements. To use different lengths, an extra flag
     * array would be necessary.
     */

    this.opt_len = 0; /* bit length of current block with optimal trees */
    this.static_len = 0; /* bit length of current block with static trees */
    this.matches = 0; /* number of string matches in current block */
    this.insert = 0; /* bytes at end of window left to insert */


    this.bi_buf = 0;
    /* Output buffer. bits are inserted starting at the bottom (least
     * significant bits).
     */
    this.bi_valid = 0;
    /* Number of valid bits in bi_buf.  All bits above the last valid bit
     * are always zero.
     */

    // Used for window memory init. We safely ignore it for JS. That makes
    // sense only for pointers and memory check tools.
    //this.high_water = 0;
    /* High water mark offset in window for initialized bytes -- bytes above
     * this are set to zero in order to avoid memory check warnings when
     * longest match routines access bytes past the input.  This is then
     * updated to the new high water mark.
     */
  }


  function deflateResetKeep(strm) {
    var s;

    if (!strm || !strm.state) {
      return err(strm, Z_STREAM_ERROR);
    }

    strm.total_in = strm.total_out = 0;
    strm.data_type = Z_UNKNOWN$1;

    s = strm.state;
    s.pending = 0;
    s.pending_out = 0;

    if (s.wrap < 0) {
      s.wrap = -s.wrap;
      /* was made negative by deflate(..., Z_FINISH); */
    }
    s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
    strm.adler = (s.wrap === 2) ?
      0 // crc32(0, Z_NULL, 0)
      :
      1; // adler32(0, Z_NULL, 0)
    s.last_flush = Z_NO_FLUSH;
    _tr_init(s);
    return Z_OK;
  }


  function deflateReset(strm) {
    var ret = deflateResetKeep(strm);
    if (ret === Z_OK) {
      lm_init(strm.state);
    }
    return ret;
  }


  function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
    if (!strm) { // === Z_NULL
      return Z_STREAM_ERROR;
    }
    var wrap = 1;

    if (level === Z_DEFAULT_COMPRESSION) {
      level = 6;
    }

    if (windowBits < 0) { /* suppress zlib wrapper */
      wrap = 0;
      windowBits = -windowBits;
    } else if (windowBits > 15) {
      wrap = 2; /* write gzip wrapper instead */
      windowBits -= 16;
    }


    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
      windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
      strategy < 0 || strategy > Z_FIXED$1) {
      return err(strm, Z_STREAM_ERROR);
    }


    if (windowBits === 8) {
      windowBits = 9;
    }
    /* until 256-byte window bug fixed */

    var s = new DeflateState();

    strm.state = s;
    s.strm = strm;

    s.wrap = wrap;
    s.gzhead = null;
    s.w_bits = windowBits;
    s.w_size = 1 << s.w_bits;
    s.w_mask = s.w_size - 1;

    s.hash_bits = memLevel + 7;
    s.hash_size = 1 << s.hash_bits;
    s.hash_mask = s.hash_size - 1;
    s.hash_shift = ~~((s.hash_bits + MIN_MATCH$1 - 1) / MIN_MATCH$1);

    s.window = new Buf8(s.w_size * 2);
    s.head = new Buf16(s.hash_size);
    s.prev = new Buf16(s.w_size);

    // Don't need mem init magic for JS.
    //s.high_water = 0;  /* nothing written to s->window yet */

    s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

    s.pending_buf_size = s.lit_bufsize * 4;

    //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
    //s->pending_buf = (uchf *) overlay;
    s.pending_buf = new Buf8(s.pending_buf_size);

    // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
    //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
    s.d_buf = 1 * s.lit_bufsize;

    //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
    s.l_buf = (1 + 2) * s.lit_bufsize;

    s.level = level;
    s.strategy = strategy;
    s.method = method;

    return deflateReset(strm);
  }


  function deflate(strm, flush) {
    var old_flush, s;
    var beg, val; // for gzip header write only

    if (!strm || !strm.state ||
      flush > Z_BLOCK || flush < 0) {
      return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
    }

    s = strm.state;

    if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
      return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
    }

    s.strm = strm; /* just in case */
    old_flush = s.last_flush;
    s.last_flush = flush;

    /* Write the header */
    if (s.status === INIT_STATE) {
      if (s.wrap === 2) {
        // GZIP header
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        put_byte(s, 31);
        put_byte(s, 139);
        put_byte(s, 8);
        if (!s.gzhead) { // s->gzhead == Z_NULL
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, s.level === 9 ? 2 :
            (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
              4 : 0));
          put_byte(s, OS_CODE);
          s.status = BUSY_STATE;
        } else {
          put_byte(s, (s.gzhead.text ? 1 : 0) +
            (s.gzhead.hcrc ? 2 : 0) +
            (!s.gzhead.extra ? 0 : 4) +
            (!s.gzhead.name ? 0 : 8) +
            (!s.gzhead.comment ? 0 : 16)
          );
          put_byte(s, s.gzhead.time & 0xff);
          put_byte(s, (s.gzhead.time >> 8) & 0xff);
          put_byte(s, (s.gzhead.time >> 16) & 0xff);
          put_byte(s, (s.gzhead.time >> 24) & 0xff);
          put_byte(s, s.level === 9 ? 2 :
            (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
              4 : 0));
          put_byte(s, s.gzhead.os & 0xff);
          if (s.gzhead.extra && s.gzhead.extra.length) {
            put_byte(s, s.gzhead.extra.length & 0xff);
            put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
          }
          if (s.gzhead.hcrc) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
          }
          s.gzindex = 0;
          s.status = EXTRA_STATE;
        }
      } else // DEFLATE header
      {
        var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
        var level_flags = -1;

        if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
          level_flags = 0;
        } else if (s.level < 6) {
          level_flags = 1;
        } else if (s.level === 6) {
          level_flags = 2;
        } else {
          level_flags = 3;
        }
        header |= (level_flags << 6);
        if (s.strstart !== 0) {
          header |= PRESET_DICT;
        }
        header += 31 - (header % 31);

        s.status = BUSY_STATE;
        putShortMSB(s, header);

        /* Save the adler32 of the preset dictionary: */
        if (s.strstart !== 0) {
          putShortMSB(s, strm.adler >>> 16);
          putShortMSB(s, strm.adler & 0xffff);
        }
        strm.adler = 1; // adler32(0L, Z_NULL, 0);
      }
    }

    //#ifdef GZIP
    if (s.status === EXTRA_STATE) {
      if (s.gzhead.extra /* != Z_NULL*/ ) {
        beg = s.pending; /* start of bytes to update crc */

        while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              break;
            }
          }
          put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
          s.gzindex++;
        }
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (s.gzindex === s.gzhead.extra.length) {
          s.gzindex = 0;
          s.status = NAME_STATE;
        }
      } else {
        s.status = NAME_STATE;
      }
    }
    if (s.status === NAME_STATE) {
      if (s.gzhead.name /* != Z_NULL*/ ) {
        beg = s.pending; /* start of bytes to update crc */
        //int val;

        do {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              val = 1;
              break;
            }
          }
          // JS specific: little magic to add zero terminator to end of string
          if (s.gzindex < s.gzhead.name.length) {
            val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
          } else {
            val = 0;
          }
          put_byte(s, val);
        } while (val !== 0);

        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (val === 0) {
          s.gzindex = 0;
          s.status = COMMENT_STATE;
        }
      } else {
        s.status = COMMENT_STATE;
      }
    }
    if (s.status === COMMENT_STATE) {
      if (s.gzhead.comment /* != Z_NULL*/ ) {
        beg = s.pending; /* start of bytes to update crc */
        //int val;

        do {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              val = 1;
              break;
            }
          }
          // JS specific: little magic to add zero terminator to end of string
          if (s.gzindex < s.gzhead.comment.length) {
            val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
          } else {
            val = 0;
          }
          put_byte(s, val);
        } while (val !== 0);

        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (val === 0) {
          s.status = HCRC_STATE;
        }
      } else {
        s.status = HCRC_STATE;
      }
    }
    if (s.status === HCRC_STATE) {
      if (s.gzhead.hcrc) {
        if (s.pending + 2 > s.pending_buf_size) {
          flush_pending(strm);
        }
        if (s.pending + 2 <= s.pending_buf_size) {
          put_byte(s, strm.adler & 0xff);
          put_byte(s, (strm.adler >> 8) & 0xff);
          strm.adler = 0; //crc32(0L, Z_NULL, 0);
          s.status = BUSY_STATE;
        }
      } else {
        s.status = BUSY_STATE;
      }
    }
    //#endif

    /* Flush as much pending output as possible */
    if (s.pending !== 0) {
      flush_pending(strm);
      if (strm.avail_out === 0) {
        /* Since avail_out is 0, deflate will be called again with
         * more output space, but possibly with both pending and
         * avail_in equal to zero. There won't be anything to do,
         * but this is not an error situation so make sure we
         * return OK instead of BUF_ERROR at next call of deflate:
         */
        s.last_flush = -1;
        return Z_OK;
      }

      /* Make sure there is something to do and avoid duplicate consecutive
       * flushes. For repeated and useless calls with Z_FINISH, we keep
       * returning Z_STREAM_END instead of Z_BUF_ERROR.
       */
    } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
      flush !== Z_FINISH) {
      return err(strm, Z_BUF_ERROR);
    }

    /* User must not provide more input after the first FINISH: */
    if (s.status === FINISH_STATE && strm.avail_in !== 0) {
      return err(strm, Z_BUF_ERROR);
    }

    /* Start a new block or continue the current one.
     */
    if (strm.avail_in !== 0 || s.lookahead !== 0 ||
      (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
      var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
        (s.strategy === Z_RLE ? deflate_rle(s, flush) :
          configuration_table[s.level].func(s, flush));

      if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
        s.status = FINISH_STATE;
      }
      if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
        if (strm.avail_out === 0) {
          s.last_flush = -1;
          /* avoid BUF_ERROR next call, see above */
        }
        return Z_OK;
        /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
         * of deflate should use the same flush parameter to make sure
         * that the flush is complete. So we don't have to output an
         * empty block here, this will be done at next call. This also
         * ensures that for a very small output buffer, we emit at most
         * one empty block.
         */
      }
      if (bstate === BS_BLOCK_DONE) {
        if (flush === Z_PARTIAL_FLUSH) {
          _tr_align(s);
        } else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

          _tr_stored_block(s, 0, 0, false);
          /* For a full flush, this empty block will be recognized
           * as a special marker by inflate_sync().
           */
          if (flush === Z_FULL_FLUSH) {
            /*** CLEAR_HASH(s); ***/
            /* forget history */
            zero$1(s.head); // Fill with NIL (= 0);

            if (s.lookahead === 0) {
              s.strstart = 0;
              s.block_start = 0;
              s.insert = 0;
            }
          }
        }
        flush_pending(strm);
        if (strm.avail_out === 0) {
          s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
          return Z_OK;
        }
      }
    }
    //Assert(strm->avail_out > 0, "bug2");
    //if (strm.avail_out <= 0) { throw new Error("bug2");}

    if (flush !== Z_FINISH) {
      return Z_OK;
    }
    if (s.wrap <= 0) {
      return Z_STREAM_END;
    }

    /* Write the trailer */
    if (s.wrap === 2) {
      put_byte(s, strm.adler & 0xff);
      put_byte(s, (strm.adler >> 8) & 0xff);
      put_byte(s, (strm.adler >> 16) & 0xff);
      put_byte(s, (strm.adler >> 24) & 0xff);
      put_byte(s, strm.total_in & 0xff);
      put_byte(s, (strm.total_in >> 8) & 0xff);
      put_byte(s, (strm.total_in >> 16) & 0xff);
      put_byte(s, (strm.total_in >> 24) & 0xff);
    } else {
      putShortMSB(s, strm.adler >>> 16);
      putShortMSB(s, strm.adler & 0xffff);
    }

    flush_pending(strm);
    /* If avail_out is zero, the application will call deflate again
     * to flush the rest.
     */
    if (s.wrap > 0) {
      s.wrap = -s.wrap;
    }
    /* write the trailer only once! */
    return s.pending !== 0 ? Z_OK : Z_STREAM_END;
  }

  function deflateEnd(strm) {
    var status;

    if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/ ) {
      return Z_STREAM_ERROR;
    }

    status = strm.state.status;
    if (status !== INIT_STATE &&
      status !== EXTRA_STATE &&
      status !== NAME_STATE &&
      status !== COMMENT_STATE &&
      status !== HCRC_STATE &&
      status !== BUSY_STATE &&
      status !== FINISH_STATE
    ) {
      return err(strm, Z_STREAM_ERROR);
    }

    strm.state = null;

    return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
  }

  /* Not implemented
  exports.deflateBound = deflateBound;
  exports.deflateCopy = deflateCopy;
  exports.deflateParams = deflateParams;
  exports.deflatePending = deflatePending;
  exports.deflatePrime = deflatePrime;
  exports.deflateTune = deflateTune;
  */

  // See state defs from inflate.js
  var BAD = 30;       /* got a data error -- remain here until reset */
  var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

  /*
     Decode literal, length, and distance codes and write out the resulting
     literal and match bytes until either not enough input or output is
     available, an end-of-block is encountered, or a data error is encountered.
     When large enough input and output buffers are supplied to inflate(), for
     example, a 16K input buffer and a 64K output buffer, more than 95% of the
     inflate execution time is spent in this routine.

     Entry assumptions:

          state.mode === LEN
          strm.avail_in >= 6
          strm.avail_out >= 258
          start >= strm.avail_out
          state.bits < 8

     On return, state.mode is one of:

          LEN -- ran out of enough output space or enough available input
          TYPE -- reached end of block code, inflate() to interpret next block
          BAD -- error in block data

     Notes:

      - The maximum input bits used by a length/distance pair is 15 bits for the
        length code, 5 bits for the length extra, 15 bits for the distance code,
        and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
        Therefore if strm.avail_in >= 6, then there is enough input to avoid
        checking for available input while decoding.

      - The maximum bytes that a single length/distance pair can output is 258
        bytes, which is the maximum length that can be coded.  inflate_fast()
        requires strm.avail_out >= 258 for each loop to avoid checking for
        output space.
   */
  function inflate_fast(strm, start) {
    var state;
    var _in;                    /* local strm.input */
    var last;                   /* have enough input while in < last */
    var _out;                   /* local strm.output */
    var beg;                    /* inflate()'s initial strm.output */
    var end;                    /* while out < end, enough space available */
  //#ifdef INFLATE_STRICT
    var dmax;                   /* maximum distance from zlib header */
  //#endif
    var wsize;                  /* window size or zero if not using window */
    var whave;                  /* valid bytes in the window */
    var wnext;                  /* window write index */
    // Use `s_window` instead `window`, avoid conflict with instrumentation tools
    var s_window;               /* allocated sliding window, if wsize != 0 */
    var hold;                   /* local strm.hold */
    var bits;                   /* local strm.bits */
    var lcode;                  /* local strm.lencode */
    var dcode;                  /* local strm.distcode */
    var lmask;                  /* mask for first level of length codes */
    var dmask;                  /* mask for first level of distance codes */
    var here;                   /* retrieved table entry */
    var op;                     /* code bits, operation, extra bits, or */
                                /*  window position, window bytes to copy */
    var len;                    /* match length, unused bytes */
    var dist;                   /* match distance */
    var from;                   /* where to copy match from */
    var from_source;


    var input, output; // JS specific, because we have no pointers

    /* copy state to local variables */
    state = strm.state;
    //here = state.here;
    _in = strm.next_in;
    input = strm.input;
    last = _in + (strm.avail_in - 5);
    _out = strm.next_out;
    output = strm.output;
    beg = _out - (start - strm.avail_out);
    end = _out + (strm.avail_out - 257);
  //#ifdef INFLATE_STRICT
    dmax = state.dmax;
  //#endif
    wsize = state.wsize;
    whave = state.whave;
    wnext = state.wnext;
    s_window = state.window;
    hold = state.hold;
    bits = state.bits;
    lcode = state.lencode;
    dcode = state.distcode;
    lmask = (1 << state.lenbits) - 1;
    dmask = (1 << state.distbits) - 1;


    /* decode literals and length/distances until end-of-block or not enough
       input data or output space */

    top:
    do {
      if (bits < 15) {
        hold += input[_in++] << bits;
        bits += 8;
        hold += input[_in++] << bits;
        bits += 8;
      }

      here = lcode[hold & lmask];

      dolen:
      for (;;) { // Goto emulation
        op = here >>> 24/*here.bits*/;
        hold >>>= op;
        bits -= op;
        op = (here >>> 16) & 0xff/*here.op*/;
        if (op === 0) {                          /* literal */
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          output[_out++] = here & 0xffff/*here.val*/;
        }
        else if (op & 16) {                     /* length base */
          len = here & 0xffff/*here.val*/;
          op &= 15;                           /* number of extra bits */
          if (op) {
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
            }
            len += hold & ((1 << op) - 1);
            hold >>>= op;
            bits -= op;
          }
          //Tracevv((stderr, "inflate:         length %u\n", len));
          if (bits < 15) {
            hold += input[_in++] << bits;
            bits += 8;
            hold += input[_in++] << bits;
            bits += 8;
          }
          here = dcode[hold & dmask];

          dodist:
          for (;;) { // goto emulation
            op = here >>> 24/*here.bits*/;
            hold >>>= op;
            bits -= op;
            op = (here >>> 16) & 0xff/*here.op*/;

            if (op & 16) {                      /* distance base */
              dist = here & 0xffff/*here.val*/;
              op &= 15;                       /* number of extra bits */
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                }
              }
              dist += hold & ((1 << op) - 1);
  //#ifdef INFLATE_STRICT
              if (dist > dmax) {
                strm.msg = 'invalid distance too far back';
                state.mode = BAD;
                break top;
              }
  //#endif
              hold >>>= op;
              bits -= op;
              //Tracevv((stderr, "inflate:         distance %u\n", dist));
              op = _out - beg;                /* max distance in output */
              if (dist > op) {                /* see if copy from window */
                op = dist - op;               /* distance back in window */
                if (op > whave) {
                  if (state.sane) {
                    strm.msg = 'invalid distance too far back';
                    state.mode = BAD;
                    break top;
                  }

  // (!) This block is disabled in zlib defailts,
  // don't enable it for binary compatibility
  //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
  //                if (len <= op - whave) {
  //                  do {
  //                    output[_out++] = 0;
  //                  } while (--len);
  //                  continue top;
  //                }
  //                len -= op - whave;
  //                do {
  //                  output[_out++] = 0;
  //                } while (--op > whave);
  //                if (op === 0) {
  //                  from = _out - dist;
  //                  do {
  //                    output[_out++] = output[from++];
  //                  } while (--len);
  //                  continue top;
  //                }
  //#endif
                }
                from = 0; // window index
                from_source = s_window;
                if (wnext === 0) {           /* very common case */
                  from += wsize - op;
                  if (op < len) {         /* some from window */
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;  /* rest from output */
                    from_source = output;
                  }
                }
                else if (wnext < op) {      /* wrap around window */
                  from += wsize + wnext - op;
                  op -= wnext;
                  if (op < len) {         /* some from end of window */
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = 0;
                    if (wnext < len) {  /* some from start of window */
                      op = wnext;
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = _out - dist;      /* rest from output */
                      from_source = output;
                    }
                  }
                }
                else {                      /* contiguous in window */
                  from += wnext - op;
                  if (op < len) {         /* some from window */
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;  /* rest from output */
                    from_source = output;
                  }
                }
                while (len > 2) {
                  output[_out++] = from_source[from++];
                  output[_out++] = from_source[from++];
                  output[_out++] = from_source[from++];
                  len -= 3;
                }
                if (len) {
                  output[_out++] = from_source[from++];
                  if (len > 1) {
                    output[_out++] = from_source[from++];
                  }
                }
              }
              else {
                from = _out - dist;          /* copy direct from output */
                do {                        /* minimum length is three */
                  output[_out++] = output[from++];
                  output[_out++] = output[from++];
                  output[_out++] = output[from++];
                  len -= 3;
                } while (len > 2);
                if (len) {
                  output[_out++] = output[from++];
                  if (len > 1) {
                    output[_out++] = output[from++];
                  }
                }
              }
            }
            else if ((op & 64) === 0) {          /* 2nd level distance code */
              here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
              continue dodist;
            }
            else {
              strm.msg = 'invalid distance code';
              state.mode = BAD;
              break top;
            }

            break; // need to emulate goto via "continue"
          }
        }
        else if ((op & 64) === 0) {              /* 2nd level length code */
          here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
          continue dolen;
        }
        else if (op & 32) {                     /* end-of-block */
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.mode = TYPE;
          break top;
        }
        else {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break top;
        }

        break; // need to emulate goto via "continue"
      }
    } while (_in < last && _out < end);

    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
    len = bits >> 3;
    _in -= len;
    bits -= len << 3;
    hold &= (1 << bits) - 1;

    /* update state and return */
    strm.next_in = _in;
    strm.next_out = _out;
    strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
    strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
    state.hold = hold;
    state.bits = bits;
    return;
  }

  var MAXBITS = 15;
  var ENOUGH_LENS = 852;
  var ENOUGH_DISTS = 592;
  //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

  var CODES = 0;
  var LENS = 1;
  var DISTS = 2;

  var lbase = [ /* Length codes 257..285 base */
    3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
    35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
  ];

  var lext = [ /* Length codes 257..285 extra */
    16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
    19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
  ];

  var dbase = [ /* Distance codes 0..29 base */
    1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
    257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
    8193, 12289, 16385, 24577, 0, 0
  ];

  var dext = [ /* Distance codes 0..29 extra */
    16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
    28, 28, 29, 29, 64, 64
  ];

  function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
    var bits = opts.bits;
    //here = opts.here; /* table entry for duplication */

    var len = 0; /* a code's length in bits */
    var sym = 0; /* index of code symbols */
    var min = 0,
      max = 0; /* minimum and maximum code lengths */
    var root = 0; /* number of index bits for root table */
    var curr = 0; /* number of index bits for current table */
    var drop = 0; /* code bits to drop for sub-table */
    var left = 0; /* number of prefix codes available */
    var used = 0; /* code entries in table used */
    var huff = 0; /* Huffman code */
    var incr; /* for incrementing code, index */
    var fill; /* index for replicating entries */
    var low; /* low bits for current root entry */
    var mask; /* mask for low root bits */
    var next; /* next available space in table */
    var base = null; /* base value table to use */
    var base_index = 0;
    //  var shoextra;    /* extra bits table to use */
    var end; /* use base and extra for symbol > end */
    var count = new Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
    var offs = new Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
    var extra = null;
    var extra_index = 0;

    var here_bits, here_op, here_val;

    /*
     Process a set of code lengths to create a canonical Huffman code.  The
     code lengths are lens[0..codes-1].  Each length corresponds to the
     symbols 0..codes-1.  The Huffman code is generated by first sorting the
     symbols by length from short to long, and retaining the symbol order
     for codes with equal lengths.  Then the code starts with all zero bits
     for the first code of the shortest length, and the codes are integer
     increments for the same length, and zeros are appended as the length
     increases.  For the deflate format, these bits are stored backwards
     from their more natural integer increment ordering, and so when the
     decoding tables are built in the large loop below, the integer codes
     are incremented backwards.

     This routine assumes, but does not check, that all of the entries in
     lens[] are in the range 0..MAXBITS.  The caller must assure this.
     1..MAXBITS is interpreted as that code length.  zero means that that
     symbol does not occur in this code.

     The codes are sorted by computing a count of codes for each length,
     creating from that a table of starting indices for each length in the
     sorted table, and then entering the symbols in order in the sorted
     table.  The sorted table is work[], with that space being provided by
     the caller.

     The length counts are used for other purposes as well, i.e. finding
     the minimum and maximum length codes, determining if there are any
     codes at all, checking for a valid set of lengths, and looking ahead
     at length counts to determine sub-table sizes when building the
     decoding tables.
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
    for (len = 0; len <= MAXBITS; len++) {
      count[len] = 0;
    }
    for (sym = 0; sym < codes; sym++) {
      count[lens[lens_index + sym]]++;
    }

    /* bound code lengths, force root to be within code lengths */
    root = bits;
    for (max = MAXBITS; max >= 1; max--) {
      if (count[max] !== 0) {
        break;
      }
    }
    if (root > max) {
      root = max;
    }
    if (max === 0) { /* no symbols to code at all */
      //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
      //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
      //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
      table[table_index++] = (1 << 24) | (64 << 16) | 0;


      //table.op[opts.table_index] = 64;
      //table.bits[opts.table_index] = 1;
      //table.val[opts.table_index++] = 0;
      table[table_index++] = (1 << 24) | (64 << 16) | 0;

      opts.bits = 1;
      return 0; /* no symbols, but wait for decoding to report error */
    }
    for (min = 1; min < max; min++) {
      if (count[min] !== 0) {
        break;
      }
    }
    if (root < min) {
      root = min;
    }

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
      left <<= 1;
      left -= count[len];
      if (left < 0) {
        return -1;
      } /* over-subscribed */
    }
    if (left > 0 && (type === CODES || max !== 1)) {
      return -1; /* incomplete set */
    }

    /* generate offsets into symbol table for each length for sorting */
    offs[1] = 0;
    for (len = 1; len < MAXBITS; len++) {
      offs[len + 1] = offs[len] + count[len];
    }

    /* sort symbols by length, by symbol order within each length */
    for (sym = 0; sym < codes; sym++) {
      if (lens[lens_index + sym] !== 0) {
        work[offs[lens[lens_index + sym]]++] = sym;
      }
    }

    /*
     Create and fill in decoding tables.  In this loop, the table being
     filled is at next and has curr index bits.  The code being used is huff
     with length len.  That code is converted to an index by dropping drop
     bits off of the bottom.  For codes where len is less than drop + curr,
     those top drop + curr - len bits are incremented through all values to
     fill the table with replicated entries.

     root is the number of index bits for the root table.  When len exceeds
     root, sub-tables are created pointed to by the root entry with an index
     of the low root bits of huff.  This is saved in low to check for when a
     new sub-table should be started.  drop is zero when the root table is
     being filled, and drop is root when sub-tables are being filled.

     When a new sub-table is needed, it is necessary to look ahead in the
     code lengths to determine what size sub-table is needed.  The length
     counts are used for this, and so count[] is decremented as codes are
     entered in the tables.

     used keeps track of how many table entries have been allocated from the
     provided *table space.  It is checked for LENS and DIST tables against
     the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
     the initial root table size constants.  See the comments in inftrees.h
     for more information.

     sym increments through all symbols, and the loop terminates when
     all codes of length max, i.e. all codes, have been processed.  This
     routine permits incomplete codes, so another loop after this one fills
     in the rest of the decoding tables with invalid code markers.
     */

    /* set up for code type */
    // poor man optimization - use if-else instead of switch,
    // to avoid deopts in old v8
    if (type === CODES) {
      base = extra = work; /* dummy value--not used */
      end = 19;

    } else if (type === LENS) {
      base = lbase;
      base_index -= 257;
      extra = lext;
      extra_index -= 257;
      end = 256;

    } else { /* DISTS */
      base = dbase;
      extra = dext;
      end = -1;
    }

    /* initialize opts for loop */
    huff = 0; /* starting code */
    sym = 0; /* starting code symbol */
    len = min; /* starting code length */
    next = table_index; /* current table to fill in */
    curr = root; /* current table index bits */
    drop = 0; /* current bits to drop from code for index */
    low = -1; /* trigger new sub-table when len > root */
    used = 1 << root; /* use root table entries */
    mask = used - 1; /* mask for comparing low */

    /* check available table space */
    if ((type === LENS && used > ENOUGH_LENS) ||
      (type === DISTS && used > ENOUGH_DISTS)) {
      return 1;
    }
    /* process all codes and make table entries */
    for (;;) {
      /* create table entry */
      here_bits = len - drop;
      if (work[sym] < end) {
        here_op = 0;
        here_val = work[sym];
      } else if (work[sym] > end) {
        here_op = extra[extra_index + work[sym]];
        here_val = base[base_index + work[sym]];
      } else {
        here_op = 32 + 64; /* end of block */
        here_val = 0;
      }

      /* replicate for those indices with low len bits equal to huff */
      incr = 1 << (len - drop);
      fill = 1 << curr;
      min = fill; /* save offset to next table */
      do {
        fill -= incr;
        table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val | 0;
      } while (fill !== 0);

      /* backwards increment the len-bit code huff */
      incr = 1 << (len - 1);
      while (huff & incr) {
        incr >>= 1;
      }
      if (incr !== 0) {
        huff &= incr - 1;
        huff += incr;
      } else {
        huff = 0;
      }

      /* go to next symbol, update count, len */
      sym++;
      if (--count[len] === 0) {
        if (len === max) {
          break;
        }
        len = lens[lens_index + work[sym]];
      }

      /* create new sub-table if needed */
      if (len > root && (huff & mask) !== low) {
        /* if first time, transition to sub-tables */
        if (drop === 0) {
          drop = root;
        }

        /* increment past last table */
        next += min; /* here min is 1 << curr */

        /* determine length of next table */
        curr = len - drop;
        left = 1 << curr;
        while (curr + drop < max) {
          left -= count[curr + drop];
          if (left <= 0) {
            break;
          }
          curr++;
          left <<= 1;
        }

        /* check for enough space */
        used += 1 << curr;
        if ((type === LENS && used > ENOUGH_LENS) ||
          (type === DISTS && used > ENOUGH_DISTS)) {
          return 1;
        }

        /* point entry in root table to sub-table */
        low = huff & mask;
        /*table.op[low] = curr;
        table.bits[low] = root;
        table.val[low] = next - opts.table_index;*/
        table[low] = (root << 24) | (curr << 16) | (next - table_index) | 0;
      }
    }

    /* fill in remaining table entry if code is incomplete (guaranteed to have
     at most one remaining entry, since if the code is incomplete, the
     maximum code length that was allowed to get this far is one bit) */
    if (huff !== 0) {
      //table.op[next + huff] = 64;            /* invalid code marker */
      //table.bits[next + huff] = len - drop;
      //table.val[next + huff] = 0;
      table[next + huff] = ((len - drop) << 24) | (64 << 16) | 0;
    }

    /* set return parameters */
    //opts.table_index += used;
    opts.bits = root;
    return 0;
  }

  var CODES$1 = 0;
  var LENS$1 = 1;
  var DISTS$1 = 2;

  /* Public constants ==========================================================*/
  /* ===========================================================================*/


  /* Allowed flush values; see deflate() and inflate() below for details */
  //var Z_NO_FLUSH      = 0;
  //var Z_PARTIAL_FLUSH = 1;
  //var Z_SYNC_FLUSH    = 2;
  //var Z_FULL_FLUSH    = 3;
  var Z_FINISH$1 = 4;
  var Z_BLOCK$1 = 5;
  var Z_TREES = 6;


  /* Return codes for the compression/decompression functions. Negative values
   * are errors, positive values are used for special but normal events.
   */
  var Z_OK$1 = 0;
  var Z_STREAM_END$1 = 1;
  var Z_NEED_DICT = 2;
  //var Z_ERRNO         = -1;
  var Z_STREAM_ERROR$1 = -2;
  var Z_DATA_ERROR$1 = -3;
  var Z_MEM_ERROR = -4;
  var Z_BUF_ERROR$1 = -5;
  //var Z_VERSION_ERROR = -6;

  /* The deflate compression method */
  var Z_DEFLATED$1 = 8;


  /* STATES ====================================================================*/
  /* ===========================================================================*/


  var HEAD = 1; /* i: waiting for magic header */
  var FLAGS = 2; /* i: waiting for method and flags (gzip) */
  var TIME = 3; /* i: waiting for modification time (gzip) */
  var OS = 4; /* i: waiting for extra flags and operating system (gzip) */
  var EXLEN = 5; /* i: waiting for extra length (gzip) */
  var EXTRA = 6; /* i: waiting for extra bytes (gzip) */
  var NAME = 7; /* i: waiting for end of file name (gzip) */
  var COMMENT = 8; /* i: waiting for end of comment (gzip) */
  var HCRC = 9; /* i: waiting for header crc (gzip) */
  var DICTID = 10; /* i: waiting for dictionary check value */
  var DICT = 11; /* waiting for inflateSetDictionary() call */
  var TYPE$1 = 12; /* i: waiting for type bits, including last-flag bit */
  var TYPEDO = 13; /* i: same, but skip check to exit inflate on new block */
  var STORED = 14; /* i: waiting for stored size (length and complement) */
  var COPY_ = 15; /* i/o: same as COPY below, but only first time in */
  var COPY = 16; /* i/o: waiting for input or output to copy stored block */
  var TABLE = 17; /* i: waiting for dynamic block table lengths */
  var LENLENS = 18; /* i: waiting for code length code lengths */
  var CODELENS = 19; /* i: waiting for length/lit and distance code lengths */
  var LEN_ = 20; /* i: same as LEN below, but only first time in */
  var LEN = 21; /* i: waiting for length/lit/eob code */
  var LENEXT = 22; /* i: waiting for length extra bits */
  var DIST = 23; /* i: waiting for distance code */
  var DISTEXT = 24; /* i: waiting for distance extra bits */
  var MATCH = 25; /* o: waiting for output space to copy string */
  var LIT = 26; /* o: waiting for output space to write literal */
  var CHECK = 27; /* i: waiting for 32-bit check value */
  var LENGTH = 28; /* i: waiting for 32-bit length (gzip) */
  var DONE = 29; /* finished check, done -- remain here until reset */
  var BAD$1 = 30; /* got a data error -- remain here until reset */
  var MEM = 31; /* got an inflate() memory error -- remain here until reset */
  var SYNC = 32; /* looking for synchronization bytes to restart inflate() */

  /* ===========================================================================*/



  var ENOUGH_LENS$1 = 852;
  var ENOUGH_DISTS$1 = 592;


  function zswap32(q) {
    return (((q >>> 24) & 0xff) +
      ((q >>> 8) & 0xff00) +
      ((q & 0xff00) << 8) +
      ((q & 0xff) << 24));
  }


  function InflateState() {
    this.mode = 0; /* current inflate mode */
    this.last = false; /* true if processing last block */
    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
    this.havedict = false; /* true if dictionary provided */
    this.flags = 0; /* gzip header method and flags (0 if zlib) */
    this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */
    this.check = 0; /* protected copy of check value */
    this.total = 0; /* protected copy of output count */
    // TODO: may be {}
    this.head = null; /* where to save gzip header information */

    /* sliding window */
    this.wbits = 0; /* log base 2 of requested window size */
    this.wsize = 0; /* window size or zero if not using window */
    this.whave = 0; /* valid bytes in the window */
    this.wnext = 0; /* window write index */
    this.window = null; /* allocated sliding window, if needed */

    /* bit accumulator */
    this.hold = 0; /* input bit accumulator */
    this.bits = 0; /* number of bits in "in" */

    /* for string and stored block copying */
    this.length = 0; /* literal or length of data to copy */
    this.offset = 0; /* distance back to copy string from */

    /* for table and code decoding */
    this.extra = 0; /* extra bits needed */

    /* fixed and dynamic code tables */
    this.lencode = null; /* starting table for length/literal codes */
    this.distcode = null; /* starting table for distance codes */
    this.lenbits = 0; /* index bits for lencode */
    this.distbits = 0; /* index bits for distcode */

    /* dynamic table building */
    this.ncode = 0; /* number of code length code lengths */
    this.nlen = 0; /* number of length code lengths */
    this.ndist = 0; /* number of distance code lengths */
    this.have = 0; /* number of code lengths in lens[] */
    this.next = null; /* next available space in codes[] */

    this.lens = new Buf16(320); /* temporary storage for code lengths */
    this.work = new Buf16(288); /* work area for code table building */

    /*
     because we don't have pointers in js, we use lencode and distcode directly
     as buffers so we don't need codes
    */
    //this.codes = new Buf32(ENOUGH);       /* space for code tables */
    this.lendyn = null; /* dynamic table for length/literal codes (JS specific) */
    this.distdyn = null; /* dynamic table for distance codes (JS specific) */
    this.sane = 0; /* if false, allow invalid distance too far */
    this.back = 0; /* bits back of last unprocessed length/lit */
    this.was = 0; /* initial length of match */
  }

  function inflateResetKeep(strm) {
    var state;

    if (!strm || !strm.state) {
      return Z_STREAM_ERROR$1;
    }
    state = strm.state;
    strm.total_in = strm.total_out = state.total = 0;
    strm.msg = ''; /*Z_NULL*/
    if (state.wrap) { /* to support ill-conceived Java test suite */
      strm.adler = state.wrap & 1;
    }
    state.mode = HEAD;
    state.last = 0;
    state.havedict = 0;
    state.dmax = 32768;
    state.head = null /*Z_NULL*/ ;
    state.hold = 0;
    state.bits = 0;
    //state.lencode = state.distcode = state.next = state.codes;
    state.lencode = state.lendyn = new Buf32(ENOUGH_LENS$1);
    state.distcode = state.distdyn = new Buf32(ENOUGH_DISTS$1);

    state.sane = 1;
    state.back = -1;
    //Tracev((stderr, "inflate: reset\n"));
    return Z_OK$1;
  }

  function inflateReset(strm) {
    var state;

    if (!strm || !strm.state) {
      return Z_STREAM_ERROR$1;
    }
    state = strm.state;
    state.wsize = 0;
    state.whave = 0;
    state.wnext = 0;
    return inflateResetKeep(strm);

  }

  function inflateReset2(strm, windowBits) {
    var wrap;
    var state;

    /* get the state */
    if (!strm || !strm.state) {
      return Z_STREAM_ERROR$1;
    }
    state = strm.state;

    /* extract wrap request from windowBits parameter */
    if (windowBits < 0) {
      wrap = 0;
      windowBits = -windowBits;
    } else {
      wrap = (windowBits >> 4) + 1;
      if (windowBits < 48) {
        windowBits &= 15;
      }
    }

    /* set number of window bits, free window if different */
    if (windowBits && (windowBits < 8 || windowBits > 15)) {
      return Z_STREAM_ERROR$1;
    }
    if (state.window !== null && state.wbits !== windowBits) {
      state.window = null;
    }

    /* update state and reset the rest of it */
    state.wrap = wrap;
    state.wbits = windowBits;
    return inflateReset(strm);
  }

  function inflateInit2(strm, windowBits) {
    var ret;
    var state;

    if (!strm) {
      return Z_STREAM_ERROR$1;
    }
    //strm.msg = Z_NULL;                 /* in case we return an error */

    state = new InflateState();

    //if (state === Z_NULL) return Z_MEM_ERROR;
    //Tracev((stderr, "inflate: allocated\n"));
    strm.state = state;
    state.window = null /*Z_NULL*/ ;
    ret = inflateReset2(strm, windowBits);
    if (ret !== Z_OK$1) {
      strm.state = null /*Z_NULL*/ ;
    }
    return ret;
  }


  /*
   Return state with length and distance decoding tables and index sizes set to
   fixed code decoding.  Normally this returns fixed tables from inffixed.h.
   If BUILDFIXED is defined, then instead this routine builds the tables the
   first time it's called, and returns those tables the first time and
   thereafter.  This reduces the size of the code by about 2K bytes, in
   exchange for a little execution time.  However, BUILDFIXED should not be
   used for threaded applications, since the rewriting of the tables and virgin
   may not be thread-safe.
   */
  var virgin = true;

  var lenfix, distfix; // We have no pointers in JS, so keep tables separate

  function fixedtables(state) {
    /* build fixed huffman tables if first call (may not be thread safe) */
    if (virgin) {
      var sym;

      lenfix = new Buf32(512);
      distfix = new Buf32(32);

      /* literal/length table */
      sym = 0;
      while (sym < 144) {
        state.lens[sym++] = 8;
      }
      while (sym < 256) {
        state.lens[sym++] = 9;
      }
      while (sym < 280) {
        state.lens[sym++] = 7;
      }
      while (sym < 288) {
        state.lens[sym++] = 8;
      }

      inflate_table(LENS$1, state.lens, 0, 288, lenfix, 0, state.work, {
        bits: 9
      });

      /* distance table */
      sym = 0;
      while (sym < 32) {
        state.lens[sym++] = 5;
      }

      inflate_table(DISTS$1, state.lens, 0, 32, distfix, 0, state.work, {
        bits: 5
      });

      /* do this just once */
      virgin = false;
    }

    state.lencode = lenfix;
    state.lenbits = 9;
    state.distcode = distfix;
    state.distbits = 5;
  }


  /*
   Update the window with the last wsize (normally 32K) bytes written before
   returning.  If window does not exist yet, create it.  This is only called
   when a window is already in use, or when output has been written during this
   inflate call, but the end of the deflate stream has not been reached yet.
   It is also called to create a window for dictionary data when a dictionary
   is loaded.

   Providing output buffers larger than 32K to inflate() should provide a speed
   advantage, since only the last 32K of output is copied to the sliding window
   upon return from inflate(), and since all distances after the first 32K of
   output will fall in the output data, making match copies simpler and faster.
   The advantage may be dependent on the size of the processor's data caches.
   */
  function updatewindow(strm, src, end, copy) {
    var dist;
    var state = strm.state;

    /* if it hasn't been done already, allocate space for the window */
    if (state.window === null) {
      state.wsize = 1 << state.wbits;
      state.wnext = 0;
      state.whave = 0;

      state.window = new Buf8(state.wsize);
    }

    /* copy state->wsize or less output bytes into the circular window */
    if (copy >= state.wsize) {
      arraySet(state.window, src, end - state.wsize, state.wsize, 0);
      state.wnext = 0;
      state.whave = state.wsize;
    } else {
      dist = state.wsize - state.wnext;
      if (dist > copy) {
        dist = copy;
      }
      //zmemcpy(state->window + state->wnext, end - copy, dist);
      arraySet(state.window, src, end - copy, dist, state.wnext);
      copy -= dist;
      if (copy) {
        //zmemcpy(state->window, end - copy, copy);
        arraySet(state.window, src, end - copy, copy, 0);
        state.wnext = copy;
        state.whave = state.wsize;
      } else {
        state.wnext += dist;
        if (state.wnext === state.wsize) {
          state.wnext = 0;
        }
        if (state.whave < state.wsize) {
          state.whave += dist;
        }
      }
    }
    return 0;
  }

  function inflate(strm, flush) {
    var state;
    var input, output; // input/output buffers
    var next; /* next input INDEX */
    var put; /* next output INDEX */
    var have, left; /* available input and output */
    var hold; /* bit buffer */
    var bits; /* bits in bit buffer */
    var _in, _out; /* save starting available input and output */
    var copy; /* number of stored or match bytes to copy */
    var from; /* where to copy match bytes from */
    var from_source;
    var here = 0; /* current decoding table entry */
    var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
    //var last;                   /* parent table entry */
    var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
    var len; /* length to copy for repeats, bits to drop */
    var ret; /* return code */
    var hbuf = new Buf8(4); /* buffer for gzip header crc calculation */
    var opts;

    var n; // temporary var for NEED_BITS

    var order = /* permutation of code lengths */ [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];


    if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
      return Z_STREAM_ERROR$1;
    }

    state = strm.state;
    if (state.mode === TYPE$1) {
      state.mode = TYPEDO;
    } /* skip check */


    //--- LOAD() ---
    put = strm.next_out;
    output = strm.output;
    left = strm.avail_out;
    next = strm.next_in;
    input = strm.input;
    have = strm.avail_in;
    hold = state.hold;
    bits = state.bits;
    //---

    _in = have;
    _out = left;
    ret = Z_OK$1;

    inf_leave: // goto emulation
      for (;;) {
        switch (state.mode) {
        case HEAD:
          if (state.wrap === 0) {
            state.mode = TYPEDO;
            break;
          }
          //=== NEEDBITS(16);
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if ((state.wrap & 2) && hold === 0x8b1f) { /* gzip header */
            state.check = 0 /*crc32(0L, Z_NULL, 0)*/ ;
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//

            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = FLAGS;
            break;
          }
          state.flags = 0; /* expect zlib header */
          if (state.head) {
            state.head.done = false;
          }
          if (!(state.wrap & 1) || /* check if zlib header allowed */
            (((hold & 0xff) /*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
            strm.msg = 'incorrect header check';
            state.mode = BAD$1;
            break;
          }
          if ((hold & 0x0f) /*BITS(4)*/ !== Z_DEFLATED$1) {
            strm.msg = 'unknown compression method';
            state.mode = BAD$1;
            break;
          }
          //--- DROPBITS(4) ---//
          hold >>>= 4;
          bits -= 4;
          //---//
          len = (hold & 0x0f) /*BITS(4)*/ + 8;
          if (state.wbits === 0) {
            state.wbits = len;
          } else if (len > state.wbits) {
            strm.msg = 'invalid window size';
            state.mode = BAD$1;
            break;
          }
          state.dmax = 1 << len;
          //Tracev((stderr, "inflate:   zlib header ok\n"));
          strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;
          state.mode = hold & 0x200 ? DICTID : TYPE$1;
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          break;
        case FLAGS:
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.flags = hold;
          if ((state.flags & 0xff) !== Z_DEFLATED$1) {
            strm.msg = 'unknown compression method';
            state.mode = BAD$1;
            break;
          }
          if (state.flags & 0xe000) {
            strm.msg = 'unknown header flags set';
            state.mode = BAD$1;
            break;
          }
          if (state.head) {
            state.head.text = ((hold >> 8) & 1);
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = TIME;
          /* falls through */
        case TIME:
          //=== NEEDBITS(32); */
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (state.head) {
            state.head.time = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC4(state.check, hold)
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            hbuf[2] = (hold >>> 16) & 0xff;
            hbuf[3] = (hold >>> 24) & 0xff;
            state.check = crc32(state.check, hbuf, 4, 0);
            //===
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = OS;
          /* falls through */
        case OS:
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (state.head) {
            state.head.xflags = (hold & 0xff);
            state.head.os = (hold >> 8);
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = EXLEN;
          /* falls through */
        case EXLEN:
          if (state.flags & 0x0400) {
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.length = hold;
            if (state.head) {
              state.head.extra_len = hold;
            }
            if (state.flags & 0x0200) {
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              state.check = crc32(state.check, hbuf, 2, 0);
              //===//
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
          } else if (state.head) {
            state.head.extra = null /*Z_NULL*/ ;
          }
          state.mode = EXTRA;
          /* falls through */
        case EXTRA:
          if (state.flags & 0x0400) {
            copy = state.length;
            if (copy > have) {
              copy = have;
            }
            if (copy) {
              if (state.head) {
                len = state.head.extra_len - state.length;
                if (!state.head.extra) {
                  // Use untyped array for more conveniend processing later
                  state.head.extra = new Array(state.head.extra_len);
                }
                arraySet(
                  state.head.extra,
                  input,
                  next,
                  // extra field is limited to 65536 bytes
                  // - no need for additional size check
                  copy,
                  /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                  len
                );
                //zmemcpy(state.head.extra + len, next,
                //        len + copy > state.head.extra_max ?
                //        state.head.extra_max - len : copy);
              }
              if (state.flags & 0x0200) {
                state.check = crc32(state.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              state.length -= copy;
            }
            if (state.length) {
              break inf_leave;
            }
          }
          state.length = 0;
          state.mode = NAME;
          /* falls through */
        case NAME:
          if (state.flags & 0x0800) {
            if (have === 0) {
              break inf_leave;
            }
            copy = 0;
            do {
              // TODO: 2 or 1 bytes?
              len = input[next + copy++];
              /* use constant limit because in js we should not preallocate memory */
              if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/ )) {
                state.head.name += String.fromCharCode(len);
              }
            } while (len && copy < have);

            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            if (len) {
              break inf_leave;
            }
          } else if (state.head) {
            state.head.name = null;
          }
          state.length = 0;
          state.mode = COMMENT;
          /* falls through */
        case COMMENT:
          if (state.flags & 0x1000) {
            if (have === 0) {
              break inf_leave;
            }
            copy = 0;
            do {
              len = input[next + copy++];
              /* use constant limit because in js we should not preallocate memory */
              if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/ )) {
                state.head.comment += String.fromCharCode(len);
              }
            } while (len && copy < have);
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            if (len) {
              break inf_leave;
            }
          } else if (state.head) {
            state.head.comment = null;
          }
          state.mode = HCRC;
          /* falls through */
        case HCRC:
          if (state.flags & 0x0200) {
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if (hold !== (state.check & 0xffff)) {
              strm.msg = 'header crc mismatch';
              state.mode = BAD$1;
              break;
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
          }
          if (state.head) {
            state.head.hcrc = ((state.flags >> 9) & 1);
            state.head.done = true;
          }
          strm.adler = state.check = 0;
          state.mode = TYPE$1;
          break;
        case DICTID:
          //=== NEEDBITS(32); */
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          strm.adler = state.check = zswap32(hold);
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = DICT;
          /* falls through */
        case DICT:
          if (state.havedict === 0) {
            //--- RESTORE() ---
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            //---
            return Z_NEED_DICT;
          }
          strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;
          state.mode = TYPE$1;
          /* falls through */
        case TYPE$1:
          if (flush === Z_BLOCK$1 || flush === Z_TREES) {
            break inf_leave;
          }
          /* falls through */
        case TYPEDO:
          if (state.last) {
            //--- BYTEBITS() ---//
            hold >>>= bits & 7;
            bits -= bits & 7;
            //---//
            state.mode = CHECK;
            break;
          }
          //=== NEEDBITS(3); */
          while (bits < 3) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.last = (hold & 0x01) /*BITS(1)*/ ;
          //--- DROPBITS(1) ---//
          hold >>>= 1;
          bits -= 1;
          //---//

          switch ((hold & 0x03) /*BITS(2)*/ ) {
          case 0:
            /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:
            /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_; /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:
            /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD$1;
          }
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break;
        case STORED:
          //--- BYTEBITS() ---// /* go to byte boundary */
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          //=== NEEDBITS(32); */
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
            strm.msg = 'invalid stored block lengths';
            state.mode = BAD$1;
            break;
          }
          state.length = hold & 0xffff;
          //Tracev((stderr, "inflate:       stored length %u\n",
          //        state.length));
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = COPY_;
          if (flush === Z_TREES) {
            break inf_leave;
          }
          /* falls through */
        case COPY_:
          state.mode = COPY;
          /* falls through */
        case COPY:
          copy = state.length;
          if (copy) {
            if (copy > have) {
              copy = have;
            }
            if (copy > left) {
              copy = left;
            }
            if (copy === 0) {
              break inf_leave;
            }
            //--- zmemcpy(put, next, copy); ---
            arraySet(output, input, next, copy, put);
            //---//
            have -= copy;
            next += copy;
            left -= copy;
            put += copy;
            state.length -= copy;
            break;
          }
          //Tracev((stderr, "inflate:       stored end\n"));
          state.mode = TYPE$1;
          break;
        case TABLE:
          //=== NEEDBITS(14); */
          while (bits < 14) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.nlen = (hold & 0x1f) /*BITS(5)*/ + 257;
          //--- DROPBITS(5) ---//
          hold >>>= 5;
          bits -= 5;
          //---//
          state.ndist = (hold & 0x1f) /*BITS(5)*/ + 1;
          //--- DROPBITS(5) ---//
          hold >>>= 5;
          bits -= 5;
          //---//
          state.ncode = (hold & 0x0f) /*BITS(4)*/ + 4;
          //--- DROPBITS(4) ---//
          hold >>>= 4;
          bits -= 4;
          //---//
          //#ifndef PKZIP_BUG_WORKAROUND
          if (state.nlen > 286 || state.ndist > 30) {
            strm.msg = 'too many length or distance symbols';
            state.mode = BAD$1;
            break;
          }
          //#endif
          //Tracev((stderr, "inflate:       table sizes ok\n"));
          state.have = 0;
          state.mode = LENLENS;
          /* falls through */
        case LENLENS:
          while (state.have < state.ncode) {
            //=== NEEDBITS(3);
            while (bits < 3) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.lens[order[state.have++]] = (hold & 0x07); //BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          while (state.have < 19) {
            state.lens[order[state.have++]] = 0;
          }
          // We have separate tables & no pointers. 2 commented lines below not needed.
          //state.next = state.codes;
          //state.lencode = state.next;
          // Switch to use dynamic table
          state.lencode = state.lendyn;
          state.lenbits = 7;

          opts = {
            bits: state.lenbits
          };
          ret = inflate_table(CODES$1, state.lens, 0, 19, state.lencode, 0, state.work, opts);
          state.lenbits = opts.bits;

          if (ret) {
            strm.msg = 'invalid code lengths set';
            state.mode = BAD$1;
            break;
          }
          //Tracev((stderr, "inflate:       code lengths ok\n"));
          state.have = 0;
          state.mode = CODELENS;
          /* falls through */
        case CODELENS:
          while (state.have < state.nlen + state.ndist) {
            for (;;) {
              here = state.lencode[hold & ((1 << state.lenbits) - 1)]; /*BITS(state.lenbits)*/
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if ((here_bits) <= bits) {
                break;
              }
              //--- PULLBYTE() ---//
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            if (here_val < 16) {
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              state.lens[state.have++] = here_val;
            } else {
              if (here_val === 16) {
                //=== NEEDBITS(here.bits + 2);
                n = here_bits + 2;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                //===//
                //--- DROPBITS(here.bits) ---//
                hold >>>= here_bits;
                bits -= here_bits;
                //---//
                if (state.have === 0) {
                  strm.msg = 'invalid bit length repeat';
                  state.mode = BAD$1;
                  break;
                }
                len = state.lens[state.have - 1];
                copy = 3 + (hold & 0x03); //BITS(2);
                //--- DROPBITS(2) ---//
                hold >>>= 2;
                bits -= 2;
                //---//
              } else if (here_val === 17) {
                //=== NEEDBITS(here.bits + 3);
                n = here_bits + 3;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                //===//
                //--- DROPBITS(here.bits) ---//
                hold >>>= here_bits;
                bits -= here_bits;
                //---//
                len = 0;
                copy = 3 + (hold & 0x07); //BITS(3);
                //--- DROPBITS(3) ---//
                hold >>>= 3;
                bits -= 3;
                //---//
              } else {
                //=== NEEDBITS(here.bits + 7);
                n = here_bits + 7;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                //===//
                //--- DROPBITS(here.bits) ---//
                hold >>>= here_bits;
                bits -= here_bits;
                //---//
                len = 0;
                copy = 11 + (hold & 0x7f); //BITS(7);
                //--- DROPBITS(7) ---//
                hold >>>= 7;
                bits -= 7;
                //---//
              }
              if (state.have + copy > state.nlen + state.ndist) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD$1;
                break;
              }
              while (copy--) {
                state.lens[state.have++] = len;
              }
            }
          }

          /* handle error breaks in while */
          if (state.mode === BAD$1) {
            break;
          }

          /* check for end-of-block code (better have one) */
          if (state.lens[256] === 0) {
            strm.msg = 'invalid code -- missing end-of-block';
            state.mode = BAD$1;
            break;
          }

          /* build code tables -- note: do not change the lenbits or distbits
             values here (9 and 6) without reading the comments in inftrees.h
             concerning the ENOUGH constants, which depend on those values */
          state.lenbits = 9;

          opts = {
            bits: state.lenbits
          };
          ret = inflate_table(LENS$1, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
          // We have separate tables & no pointers. 2 commented lines below not needed.
          // state.next_index = opts.table_index;
          state.lenbits = opts.bits;
          // state.lencode = state.next;

          if (ret) {
            strm.msg = 'invalid literal/lengths set';
            state.mode = BAD$1;
            break;
          }

          state.distbits = 6;
          //state.distcode.copy(state.codes);
          // Switch to use dynamic table
          state.distcode = state.distdyn;
          opts = {
            bits: state.distbits
          };
          ret = inflate_table(DISTS$1, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
          // We have separate tables & no pointers. 2 commented lines below not needed.
          // state.next_index = opts.table_index;
          state.distbits = opts.bits;
          // state.distcode = state.next;

          if (ret) {
            strm.msg = 'invalid distances set';
            state.mode = BAD$1;
            break;
          }
          //Tracev((stderr, 'inflate:       codes ok\n'));
          state.mode = LEN_;
          if (flush === Z_TREES) {
            break inf_leave;
          }
          /* falls through */
        case LEN_:
          state.mode = LEN;
          /* falls through */
        case LEN:
          if (have >= 6 && left >= 258) {
            //--- RESTORE() ---
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            //---
            inflate_fast(strm, _out);
            //--- LOAD() ---
            put = strm.next_out;
            output = strm.output;
            left = strm.avail_out;
            next = strm.next_in;
            input = strm.input;
            have = strm.avail_in;
            hold = state.hold;
            bits = state.bits;
            //---

            if (state.mode === TYPE$1) {
              state.back = -1;
            }
            break;
          }
          state.back = 0;
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)]; /*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if (here_bits <= bits) {
              break;
            }
            //--- PULLBYTE() ---//
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_op && (here_op & 0xf0) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (;;) {
              here = state.lencode[last_val +
                ((hold & ((1 << (last_bits + last_op)) - 1)) /*BITS(last.bits + last.op)*/ >> last_bits)];
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if ((last_bits + here_bits) <= bits) {
                break;
              }
              //--- PULLBYTE() ---//
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            //--- DROPBITS(last.bits) ---//
            hold >>>= last_bits;
            bits -= last_bits;
            //---//
            state.back += last_bits;
          }
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.back += here_bits;
          state.length = here_val;
          if (here_op === 0) {
            //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
            //        "inflate:         literal '%c'\n" :
            //        "inflate:         literal 0x%02x\n", here.val));
            state.mode = LIT;
            break;
          }
          if (here_op & 32) {
            //Tracevv((stderr, "inflate:         end of block\n"));
            state.back = -1;
            state.mode = TYPE$1;
            break;
          }
          if (here_op & 64) {
            strm.msg = 'invalid literal/length code';
            state.mode = BAD$1;
            break;
          }
          state.extra = here_op & 15;
          state.mode = LENEXT;
          /* falls through */
        case LENEXT:
          if (state.extra) {
            //=== NEEDBITS(state.extra);
            n = state.extra;
            while (bits < n) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.length += hold & ((1 << state.extra) - 1) /*BITS(state.extra)*/ ;
            //--- DROPBITS(state.extra) ---//
            hold >>>= state.extra;
            bits -= state.extra;
            //---//
            state.back += state.extra;
          }
          //Tracevv((stderr, "inflate:         length %u\n", state.length));
          state.was = state.length;
          state.mode = DIST;
          /* falls through */
        case DIST:
          for (;;) {
            here = state.distcode[hold & ((1 << state.distbits) - 1)]; /*BITS(state.distbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) {
              break;
            }
            //--- PULLBYTE() ---//
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if ((here_op & 0xf0) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (;;) {
              here = state.distcode[last_val +
                ((hold & ((1 << (last_bits + last_op)) - 1)) /*BITS(last.bits + last.op)*/ >> last_bits)];
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if ((last_bits + here_bits) <= bits) {
                break;
              }
              //--- PULLBYTE() ---//
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            //--- DROPBITS(last.bits) ---//
            hold >>>= last_bits;
            bits -= last_bits;
            //---//
            state.back += last_bits;
          }
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.back += here_bits;
          if (here_op & 64) {
            strm.msg = 'invalid distance code';
            state.mode = BAD$1;
            break;
          }
          state.offset = here_val;
          state.extra = (here_op) & 15;
          state.mode = DISTEXT;
          /* falls through */
        case DISTEXT:
          if (state.extra) {
            //=== NEEDBITS(state.extra);
            n = state.extra;
            while (bits < n) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.offset += hold & ((1 << state.extra) - 1) /*BITS(state.extra)*/ ;
            //--- DROPBITS(state.extra) ---//
            hold >>>= state.extra;
            bits -= state.extra;
            //---//
            state.back += state.extra;
          }
          //#ifdef INFLATE_STRICT
          if (state.offset > state.dmax) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD$1;
            break;
          }
          //#endif
          //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
          state.mode = MATCH;
          /* falls through */
        case MATCH:
          if (left === 0) {
            break inf_leave;
          }
          copy = _out - left;
          if (state.offset > copy) { /* copy from window */
            copy = state.offset - copy;
            if (copy > state.whave) {
              if (state.sane) {
                strm.msg = 'invalid distance too far back';
                state.mode = BAD$1;
                break;
              }
              // (!) This block is disabled in zlib defailts,
              // don't enable it for binary compatibility
              //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
              //          Trace((stderr, "inflate.c too far\n"));
              //          copy -= state.whave;
              //          if (copy > state.length) { copy = state.length; }
              //          if (copy > left) { copy = left; }
              //          left -= copy;
              //          state.length -= copy;
              //          do {
              //            output[put++] = 0;
              //          } while (--copy);
              //          if (state.length === 0) { state.mode = LEN; }
              //          break;
              //#endif
            }
            if (copy > state.wnext) {
              copy -= state.wnext;
              from = state.wsize - copy;
            } else {
              from = state.wnext - copy;
            }
            if (copy > state.length) {
              copy = state.length;
            }
            from_source = state.window;
          } else { /* copy from output */
            from_source = output;
            from = put - state.offset;
            copy = state.length;
          }
          if (copy > left) {
            copy = left;
          }
          left -= copy;
          state.length -= copy;
          do {
            output[put++] = from_source[from++];
          } while (--copy);
          if (state.length === 0) {
            state.mode = LEN;
          }
          break;
        case LIT:
          if (left === 0) {
            break inf_leave;
          }
          output[put++] = state.length;
          left--;
          state.mode = LEN;
          break;
        case CHECK:
          if (state.wrap) {
            //=== NEEDBITS(32);
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              // Use '|' insdead of '+' to make sure that result is signed
              hold |= input[next++] << bits;
              bits += 8;
            }
            //===//
            _out -= left;
            strm.total_out += _out;
            state.total += _out;
            if (_out) {
              strm.adler = state.check =
                /*UPDATE(state.check, put - _out, _out);*/
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

            }
            _out = left;
            // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
            if ((state.flags ? hold : zswap32(hold)) !== state.check) {
              strm.msg = 'incorrect data check';
              state.mode = BAD$1;
              break;
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            //Tracev((stderr, "inflate:   check matches trailer\n"));
          }
          state.mode = LENGTH;
          /* falls through */
        case LENGTH:
          if (state.wrap && state.flags) {
            //=== NEEDBITS(32);
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if (hold !== (state.total & 0xffffffff)) {
              strm.msg = 'incorrect length check';
              state.mode = BAD$1;
              break;
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            //Tracev((stderr, "inflate:   length matches trailer\n"));
          }
          state.mode = DONE;
          /* falls through */
        case DONE:
          ret = Z_STREAM_END$1;
          break inf_leave;
        case BAD$1:
          ret = Z_DATA_ERROR$1;
          break inf_leave;
        case MEM:
          return Z_MEM_ERROR;
        case SYNC:
          /* falls through */
        default:
          return Z_STREAM_ERROR$1;
        }
      }

    // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

    /*
       Return from inflate(), updating the total counts and the check value.
       If there was no progress during the inflate() call, return a buffer
       error.  Call updatewindow() to create and/or update the window state.
       Note: a memory error from inflate() is non-recoverable.
     */

    //--- RESTORE() ---
    strm.next_out = put;
    strm.avail_out = left;
    strm.next_in = next;
    strm.avail_in = have;
    state.hold = hold;
    state.bits = bits;
    //---

    if (state.wsize || (_out !== strm.avail_out && state.mode < BAD$1 &&
        (state.mode < CHECK || flush !== Z_FINISH$1))) {
      if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
        state.mode = MEM;
        return Z_MEM_ERROR;
      }
    }
    _in -= strm.avail_in;
    _out -= strm.avail_out;
    strm.total_in += _in;
    strm.total_out += _out;
    state.total += _out;
    if (state.wrap && _out) {
      strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
        (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
    }
    strm.data_type = state.bits + (state.last ? 64 : 0) +
      (state.mode === TYPE$1 ? 128 : 0) +
      (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
    if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {
      ret = Z_BUF_ERROR$1;
    }
    return ret;
  }

  function inflateEnd(strm) {

    if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/ ) {
      return Z_STREAM_ERROR$1;
    }

    var state = strm.state;
    if (state.window) {
      state.window = null;
    }
    strm.state = null;
    return Z_OK$1;
  }

  /* Not implemented
  exports.inflateCopy = inflateCopy;
  exports.inflateGetDictionary = inflateGetDictionary;
  exports.inflateMark = inflateMark;
  exports.inflatePrime = inflatePrime;
  exports.inflateSync = inflateSync;
  exports.inflateSyncPoint = inflateSyncPoint;
  exports.inflateUndermine = inflateUndermine;
  */

  // import constants from './constants';


  // zlib modes
  var NONE = 0;
  var DEFLATE = 1;
  var INFLATE = 2;
  var GZIP = 3;
  var GUNZIP = 4;
  var DEFLATERAW = 5;
  var INFLATERAW = 6;
  var UNZIP = 7;
  var Z_NO_FLUSH$1=         0,
    Z_PARTIAL_FLUSH$1=    1,
    Z_SYNC_FLUSH=    2,
    Z_FULL_FLUSH$1=       3,
    Z_FINISH$2=       4,
    Z_BLOCK$2=           5,
    Z_TREES$1=            6,

    /* Return codes for the compression/decompression functions. Negative values
    * are errors, positive values are used for special but normal events.
    */
    Z_OK$2=               0,
    Z_STREAM_END$2=       1,
    Z_NEED_DICT$1=      2,
    Z_ERRNO=       -1,
    Z_STREAM_ERROR$2=   -2,
    Z_DATA_ERROR$2=    -3,
    //Z_MEM_ERROR:     -4,
    Z_BUF_ERROR$2=    -5,
    //Z_VERSION_ERROR: -6,

    /* compression levels */
    Z_NO_COMPRESSION=         0,
    Z_BEST_SPEED=             1,
    Z_BEST_COMPRESSION=       9,
    Z_DEFAULT_COMPRESSION$1=   -1,


    Z_FILTERED$1=               1,
    Z_HUFFMAN_ONLY$1=           2,
    Z_RLE$1=                    3,
    Z_FIXED$2=                  4,
    Z_DEFAULT_STRATEGY$1=       0,

    /* Possible values of the data_type field (though see inflate()) */
    Z_BINARY$1=                 0,
    Z_TEXT$1=                   1,
    //Z_ASCII:                1, // = Z_TEXT (deprecated)
    Z_UNKNOWN$2=                2,

    /* The deflate compression method */
    Z_DEFLATED$2=               8;
  function Zlib(mode) {
    if (mode < DEFLATE || mode > UNZIP)
      { throw new TypeError('Bad argument'); }

    this.mode = mode;
    this.init_done = false;
    this.write_in_progress = false;
    this.pending_close = false;
    this.windowBits = 0;
    this.level = 0;
    this.memLevel = 0;
    this.strategy = 0;
    this.dictionary = null;
  }

  Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
    this.windowBits = windowBits;
    this.level = level;
    this.memLevel = memLevel;
    this.strategy = strategy;
    // dictionary not supported.

    if (this.mode === GZIP || this.mode === GUNZIP)
      { this.windowBits += 16; }

    if (this.mode === UNZIP)
      { this.windowBits += 32; }

    if (this.mode === DEFLATERAW || this.mode === INFLATERAW)
      { this.windowBits = -this.windowBits; }

    this.strm = new ZStream();
    var status;
    switch (this.mode) {
    case DEFLATE:
    case GZIP:
    case DEFLATERAW:
      status = deflateInit2(
        this.strm,
        this.level,
        Z_DEFLATED$2,
        this.windowBits,
        this.memLevel,
        this.strategy
      );
      break;
    case INFLATE:
    case GUNZIP:
    case INFLATERAW:
    case UNZIP:
      status  = inflateInit2(
        this.strm,
        this.windowBits
      );
      break;
    default:
      throw new Error('Unknown mode ' + this.mode);
    }

    if (status !== Z_OK$2) {
      this._error(status);
      return;
    }

    this.write_in_progress = false;
    this.init_done = true;
  };

  Zlib.prototype.params = function() {
    throw new Error('deflateParams Not supported');
  };

  Zlib.prototype._writeCheck = function() {
    if (!this.init_done)
      { throw new Error('write before init'); }

    if (this.mode === NONE)
      { throw new Error('already finalized'); }

    if (this.write_in_progress)
      { throw new Error('write already in progress'); }

    if (this.pending_close)
      { throw new Error('close is pending'); }
  };

  Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {
    this._writeCheck();
    this.write_in_progress = true;

    var self = this;
    process.nextTick(function() {
      self.write_in_progress = false;
      var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);
      self.callback(res[0], res[1]);

      if (self.pending_close)
        { self.close(); }
    });

    return this;
  };

  // set method for Node buffers, used by pako
  function bufferSet(data, offset) {
    var this$1 = this;

    for (var i = 0; i < data.length; i++) {
      this$1[offset + i] = data[i];
    }
  }

  Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
    this._writeCheck();
    return this._write(flush, input, in_off, in_len, out, out_off, out_len);
  };

  Zlib.prototype._write = function(flush, input, in_off, in_len, out, out_off, out_len) {
    this.write_in_progress = true;

    if (flush !== Z_NO_FLUSH$1 &&
        flush !== Z_PARTIAL_FLUSH$1 &&
        flush !== Z_SYNC_FLUSH &&
        flush !== Z_FULL_FLUSH$1 &&
        flush !== Z_FINISH$2 &&
        flush !== Z_BLOCK$2) {
      throw new Error('Invalid flush value');
    }

    if (input == null) {
      input = new Buffer(0);
      in_len = 0;
      in_off = 0;
    }

    if (out._set)
      { out.set = out._set; }
    else
      { out.set = bufferSet; }

    var strm = this.strm;
    strm.avail_in = in_len;
    strm.input = input;
    strm.next_in = in_off;
    strm.avail_out = out_len;
    strm.output = out;
    strm.next_out = out_off;
    var status;
    switch (this.mode) {
    case DEFLATE:
    case GZIP:
    case DEFLATERAW:
      status = deflate(strm, flush);
      break;
    case UNZIP:
    case INFLATE:
    case GUNZIP:
    case INFLATERAW:
      status = inflate(strm, flush);
      break;
    default:
      throw new Error('Unknown mode ' + this.mode);
    }

    if (status !== Z_STREAM_END$2 && status !== Z_OK$2) {
      this._error(status);
    }

    this.write_in_progress = false;
    return [strm.avail_in, strm.avail_out];
  };

  Zlib.prototype.close = function() {
    if (this.write_in_progress) {
      this.pending_close = true;
      return;
    }

    this.pending_close = false;

    if (this.mode === DEFLATE || this.mode === GZIP || this.mode === DEFLATERAW) {
      deflateEnd(this.strm);
    } else {
      inflateEnd(this.strm);
    }

    this.mode = NONE;
  };
  var status;
  Zlib.prototype.reset = function() {
    switch (this.mode) {
    case DEFLATE:
    case DEFLATERAW:
      status = deflateReset(this.strm);
      break;
    case INFLATE:
    case INFLATERAW:
      status = inflateReset(this.strm);
      break;
    }

    if (status !== Z_OK$2) {
      this._error(status);
    }
  };

  Zlib.prototype._error = function(status) {
    this.onerror(msg[status] + ': ' + this.strm.msg, status);

    this.write_in_progress = false;
    if (this.pending_close)
      { this.close(); }
  };

  var _binding = /*#__PURE__*/Object.freeze({
    NONE: NONE,
    DEFLATE: DEFLATE,
    INFLATE: INFLATE,
    GZIP: GZIP,
    GUNZIP: GUNZIP,
    DEFLATERAW: DEFLATERAW,
    INFLATERAW: INFLATERAW,
    UNZIP: UNZIP,
    Z_NO_FLUSH: Z_NO_FLUSH$1,
    Z_PARTIAL_FLUSH: Z_PARTIAL_FLUSH$1,
    Z_SYNC_FLUSH: Z_SYNC_FLUSH,
    Z_FULL_FLUSH: Z_FULL_FLUSH$1,
    Z_FINISH: Z_FINISH$2,
    Z_BLOCK: Z_BLOCK$2,
    Z_TREES: Z_TREES$1,
    Z_OK: Z_OK$2,
    Z_STREAM_END: Z_STREAM_END$2,
    Z_NEED_DICT: Z_NEED_DICT$1,
    Z_ERRNO: Z_ERRNO,
    Z_STREAM_ERROR: Z_STREAM_ERROR$2,
    Z_DATA_ERROR: Z_DATA_ERROR$2,
    Z_BUF_ERROR: Z_BUF_ERROR$2,
    Z_NO_COMPRESSION: Z_NO_COMPRESSION,
    Z_BEST_SPEED: Z_BEST_SPEED,
    Z_BEST_COMPRESSION: Z_BEST_COMPRESSION,
    Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,
    Z_FILTERED: Z_FILTERED$1,
    Z_HUFFMAN_ONLY: Z_HUFFMAN_ONLY$1,
    Z_RLE: Z_RLE$1,
    Z_FIXED: Z_FIXED$2,
    Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,
    Z_BINARY: Z_BINARY$1,
    Z_TEXT: Z_TEXT$1,
    Z_UNKNOWN: Z_UNKNOWN$2,
    Z_DEFLATED: Z_DEFLATED$2,
    Zlib: Zlib
  });

  // Copyright Joyent, Inc. and other Node contributors.
  function assert$1 (a, msg) {
    if (!a) {
      throw new Error(msg);
    }
  }
  var binding$1 = {};
  Object.keys(_binding).forEach(function (key) {
    binding$1[key] = _binding[key];
  });
  // zlib doesn't provide these, so kludge them in following the same
  // const naming scheme zlib uses.
  binding$1.Z_MIN_WINDOWBITS = 8;
  binding$1.Z_MAX_WINDOWBITS = 15;
  binding$1.Z_DEFAULT_WINDOWBITS = 15;

  // fewer than 64 bytes per chunk is stupid.
  // technically it could work with as few as 8, but even 64 bytes
  // is absurdly low.  Usually a MB or more is best.
  binding$1.Z_MIN_CHUNK = 64;
  binding$1.Z_MAX_CHUNK = Infinity;
  binding$1.Z_DEFAULT_CHUNK = (16 * 1024);

  binding$1.Z_MIN_MEMLEVEL = 1;
  binding$1.Z_MAX_MEMLEVEL = 9;
  binding$1.Z_DEFAULT_MEMLEVEL = 8;

  binding$1.Z_MIN_LEVEL = -1;
  binding$1.Z_MAX_LEVEL = 9;
  binding$1.Z_DEFAULT_LEVEL = binding$1.Z_DEFAULT_COMPRESSION;


  // translation table for return codes.
  var codes = {
    Z_OK: binding$1.Z_OK,
    Z_STREAM_END: binding$1.Z_STREAM_END,
    Z_NEED_DICT: binding$1.Z_NEED_DICT,
    Z_ERRNO: binding$1.Z_ERRNO,
    Z_STREAM_ERROR: binding$1.Z_STREAM_ERROR,
    Z_DATA_ERROR: binding$1.Z_DATA_ERROR,
    Z_MEM_ERROR: binding$1.Z_MEM_ERROR,
    Z_BUF_ERROR: binding$1.Z_BUF_ERROR,
    Z_VERSION_ERROR: binding$1.Z_VERSION_ERROR
  };

  Object.keys(codes).forEach(function(k) {
    codes[codes[k]] = k;
  });

  function createDeflate(o) {
    return new Deflate(o);
  }

  function createInflate(o) {
    return new Inflate(o);
  }

  function createDeflateRaw(o) {
    return new DeflateRaw(o);
  }

  function createInflateRaw(o) {
    return new InflateRaw(o);
  }

  function createGzip(o) {
    return new Gzip(o);
  }

  function createGunzip(o) {
    return new Gunzip(o);
  }

  function createUnzip(o) {
    return new Unzip(o);
  }


  // Convenience methods.
  // compress/decompress a string or buffer in one step.
  function deflate$1(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Deflate(opts), buffer, callback);
  }

  function deflateSync(buffer, opts) {
    return zlibBufferSync(new Deflate(opts), buffer);
  }

  function gzip(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Gzip(opts), buffer, callback);
  }

  function gzipSync(buffer, opts) {
    return zlibBufferSync(new Gzip(opts), buffer);
  }

  function deflateRaw(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new DeflateRaw(opts), buffer, callback);
  }

  function deflateRawSync(buffer, opts) {
    return zlibBufferSync(new DeflateRaw(opts), buffer);
  }

  function unzip(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Unzip(opts), buffer, callback);
  }

  function unzipSync(buffer, opts) {
    return zlibBufferSync(new Unzip(opts), buffer);
  }

  function inflate$1(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Inflate(opts), buffer, callback);
  }

  function inflateSync(buffer, opts) {
    return zlibBufferSync(new Inflate(opts), buffer);
  }

  function gunzip(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Gunzip(opts), buffer, callback);
  }

  function gunzipSync(buffer, opts) {
    return zlibBufferSync(new Gunzip(opts), buffer);
  }

  function inflateRaw(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new InflateRaw(opts), buffer, callback);
  }

  function inflateRawSync(buffer, opts) {
    return zlibBufferSync(new InflateRaw(opts), buffer);
  }

  function zlibBuffer(engine, buffer, callback) {
    var buffers = [];
    var nread = 0;

    engine.on('error', onError);
    engine.on('end', onEnd);

    engine.end(buffer);
    flow();

    function flow() {
      var chunk;
      while (null !== (chunk = engine.read())) {
        buffers.push(chunk);
        nread += chunk.length;
      }
      engine.once('readable', flow);
    }

    function onError(err) {
      engine.removeListener('end', onEnd);
      engine.removeListener('readable', flow);
      callback(err);
    }

    function onEnd() {
      var buf = Buffer.concat(buffers, nread);
      buffers = [];
      callback(null, buf);
      engine.close();
    }
  }

  function zlibBufferSync(engine, buffer) {
    if (typeof buffer === 'string')
      { buffer = new Buffer(buffer); }
    if (!Buffer.isBuffer(buffer))
      { throw new TypeError('Not a string or buffer'); }

    var flushFlag = binding$1.Z_FINISH;

    return engine._processChunk(buffer, flushFlag);
  }

  // generic zlib
  // minimal 2-byte header
  function Deflate(opts) {
    if (!(this instanceof Deflate)) { return new Deflate(opts); }
    Zlib$1.call(this, opts, binding$1.DEFLATE);
  }

  function Inflate(opts) {
    if (!(this instanceof Inflate)) { return new Inflate(opts); }
    Zlib$1.call(this, opts, binding$1.INFLATE);
  }



  // gzip - bigger header, same deflate compression
  function Gzip(opts) {
    if (!(this instanceof Gzip)) { return new Gzip(opts); }
    Zlib$1.call(this, opts, binding$1.GZIP);
  }

  function Gunzip(opts) {
    if (!(this instanceof Gunzip)) { return new Gunzip(opts); }
    Zlib$1.call(this, opts, binding$1.GUNZIP);
  }



  // raw - no header
  function DeflateRaw(opts) {
    if (!(this instanceof DeflateRaw)) { return new DeflateRaw(opts); }
    Zlib$1.call(this, opts, binding$1.DEFLATERAW);
  }

  function InflateRaw(opts) {
    if (!(this instanceof InflateRaw)) { return new InflateRaw(opts); }
    Zlib$1.call(this, opts, binding$1.INFLATERAW);
  }


  // auto-detect header.
  function Unzip(opts) {
    if (!(this instanceof Unzip)) { return new Unzip(opts); }
    Zlib$1.call(this, opts, binding$1.UNZIP);
  }


  // the Zlib class they all inherit from
  // This thing manages the queue of requests, and returns
  // true or false if there is anything in the queue when
  // you call the .write() method.

  function Zlib$1(opts, mode) {
    this._opts = opts = opts || {};
    this._chunkSize = opts.chunkSize || binding$1.Z_DEFAULT_CHUNK;

    Transform.call(this, opts);

    if (opts.flush) {
      if (opts.flush !== binding$1.Z_NO_FLUSH &&
          opts.flush !== binding$1.Z_PARTIAL_FLUSH &&
          opts.flush !== binding$1.Z_SYNC_FLUSH &&
          opts.flush !== binding$1.Z_FULL_FLUSH &&
          opts.flush !== binding$1.Z_FINISH &&
          opts.flush !== binding$1.Z_BLOCK) {
        throw new Error('Invalid flush flag: ' + opts.flush);
      }
    }
    this._flushFlag = opts.flush || binding$1.Z_NO_FLUSH;

    if (opts.chunkSize) {
      if (opts.chunkSize < binding$1.Z_MIN_CHUNK ||
          opts.chunkSize > binding$1.Z_MAX_CHUNK) {
        throw new Error('Invalid chunk size: ' + opts.chunkSize);
      }
    }

    if (opts.windowBits) {
      if (opts.windowBits < binding$1.Z_MIN_WINDOWBITS ||
          opts.windowBits > binding$1.Z_MAX_WINDOWBITS) {
        throw new Error('Invalid windowBits: ' + opts.windowBits);
      }
    }

    if (opts.level) {
      if (opts.level < binding$1.Z_MIN_LEVEL ||
          opts.level > binding$1.Z_MAX_LEVEL) {
        throw new Error('Invalid compression level: ' + opts.level);
      }
    }

    if (opts.memLevel) {
      if (opts.memLevel < binding$1.Z_MIN_MEMLEVEL ||
          opts.memLevel > binding$1.Z_MAX_MEMLEVEL) {
        throw new Error('Invalid memLevel: ' + opts.memLevel);
      }
    }

    if (opts.strategy) {
      if (opts.strategy != binding$1.Z_FILTERED &&
          opts.strategy != binding$1.Z_HUFFMAN_ONLY &&
          opts.strategy != binding$1.Z_RLE &&
          opts.strategy != binding$1.Z_FIXED &&
          opts.strategy != binding$1.Z_DEFAULT_STRATEGY) {
        throw new Error('Invalid strategy: ' + opts.strategy);
      }
    }

    if (opts.dictionary) {
      if (!Buffer.isBuffer(opts.dictionary)) {
        throw new Error('Invalid dictionary: it should be a Buffer instance');
      }
    }

    this._binding = new binding$1.Zlib(mode);

    var self = this;
    this._hadError = false;
    this._binding.onerror = function(message, errno) {
      // there is no way to cleanly recover.
      // continuing only obscures problems.
      self._binding = null;
      self._hadError = true;

      var error = new Error(message);
      error.errno = errno;
      error.code = binding$1.codes[errno];
      self.emit('error', error);
    };

    var level = binding$1.Z_DEFAULT_COMPRESSION;
    if (typeof opts.level === 'number') { level = opts.level; }

    var strategy = binding$1.Z_DEFAULT_STRATEGY;
    if (typeof opts.strategy === 'number') { strategy = opts.strategy; }

    this._binding.init(opts.windowBits || binding$1.Z_DEFAULT_WINDOWBITS,
                       level,
                       opts.memLevel || binding$1.Z_DEFAULT_MEMLEVEL,
                       strategy,
                       opts.dictionary);

    this._buffer = new Buffer(this._chunkSize);
    this._offset = 0;
    this._closed = false;
    this._level = level;
    this._strategy = strategy;

    this.once('end', this.close);
  }

  inherits$1(Zlib$1, Transform);

  Zlib$1.prototype.params = function(level, strategy, callback) {
    if (level < binding$1.Z_MIN_LEVEL ||
        level > binding$1.Z_MAX_LEVEL) {
      throw new RangeError('Invalid compression level: ' + level);
    }
    if (strategy != binding$1.Z_FILTERED &&
        strategy != binding$1.Z_HUFFMAN_ONLY &&
        strategy != binding$1.Z_RLE &&
        strategy != binding$1.Z_FIXED &&
        strategy != binding$1.Z_DEFAULT_STRATEGY) {
      throw new TypeError('Invalid strategy: ' + strategy);
    }

    if (this._level !== level || this._strategy !== strategy) {
      var self = this;
      this.flush(binding$1.Z_SYNC_FLUSH, function() {
        self._binding.params(level, strategy);
        if (!self._hadError) {
          self._level = level;
          self._strategy = strategy;
          if (callback) { callback(); }
        }
      });
    } else {
      process.nextTick(callback);
    }
  };

  Zlib$1.prototype.reset = function() {
    return this._binding.reset();
  };

  // This is the _flush function called by the transform class,
  // internally, when the last chunk has been written.
  Zlib$1.prototype._flush = function(callback) {
    this._transform(new Buffer(0), '', callback);
  };

  Zlib$1.prototype.flush = function(kind, callback) {
    var ws = this._writableState;

    if (typeof kind === 'function' || (kind === void 0 && !callback)) {
      callback = kind;
      kind = binding$1.Z_FULL_FLUSH;
    }

    if (ws.ended) {
      if (callback)
        { process.nextTick(callback); }
    } else if (ws.ending) {
      if (callback)
        { this.once('end', callback); }
    } else if (ws.needDrain) {
      var self = this;
      this.once('drain', function() {
        self.flush(callback);
      });
    } else {
      this._flushFlag = kind;
      this.write(new Buffer(0), '', callback);
    }
  };

  Zlib$1.prototype.close = function(callback) {
    if (callback)
      { process.nextTick(callback); }

    if (this._closed)
      { return; }

    this._closed = true;

    this._binding.close();

    var self = this;
    process.nextTick(function() {
      self.emit('close');
    });
  };

  Zlib$1.prototype._transform = function(chunk, encoding, cb) {
    var flushFlag;
    var ws = this._writableState;
    var ending = ws.ending || ws.ended;
    var last = ending && (!chunk || ws.length === chunk.length);

    if (!chunk === null && !Buffer.isBuffer(chunk))
      { return cb(new Error('invalid input')); }

    // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
    // If it's explicitly flushing at some other time, then we use
    // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
    // goodness.
    if (last)
      { flushFlag = binding$1.Z_FINISH; }
    else {
      flushFlag = this._flushFlag;
      // once we've flushed the last of the queue, stop flushing and
      // go back to the normal behavior.
      if (chunk.length >= ws.length) {
        this._flushFlag = this._opts.flush || binding$1.Z_NO_FLUSH;
      }
    }

    this._processChunk(chunk, flushFlag, cb);
  };

  Zlib$1.prototype._processChunk = function(chunk, flushFlag, cb) {
    var this$1 = this;

    var availInBefore = chunk && chunk.length;
    var availOutBefore = this._chunkSize - this._offset;
    var inOff = 0;

    var self = this;

    var async = typeof cb === 'function';

    if (!async) {
      var buffers = [];
      var nread = 0;

      var error;
      this.on('error', function(er) {
        error = er;
      });

      do {
        var res = this$1._binding.writeSync(flushFlag,
                                          chunk, // in
                                          inOff, // in_off
                                          availInBefore, // in_len
                                          this$1._buffer, // out
                                          this$1._offset, //out_off
                                          availOutBefore); // out_len
      } while (!this._hadError && callback(res[0], res[1]));

      if (this._hadError) {
        throw error;
      }

      var buf = Buffer.concat(buffers, nread);
      this.close();

      return buf;
    }

    var req = this._binding.write(flushFlag,
                                  chunk, // in
                                  inOff, // in_off
                                  availInBefore, // in_len
                                  this._buffer, // out
                                  this._offset, //out_off
                                  availOutBefore); // out_len

    req.buffer = chunk;
    req.callback = callback;

    function callback(availInAfter, availOutAfter) {
      if (self._hadError)
        { return; }

      var have = availOutBefore - availOutAfter;
      assert$1(have >= 0, 'have should not go down');

      if (have > 0) {
        var out = self._buffer.slice(self._offset, self._offset + have);
        self._offset += have;
        // serve some output to the consumer.
        if (async) {
          self.push(out);
        } else {
          buffers.push(out);
          nread += out.length;
        }
      }

      // exhausted the output buffer, or used all the input create a new one.
      if (availOutAfter === 0 || self._offset >= self._chunkSize) {
        availOutBefore = self._chunkSize;
        self._offset = 0;
        self._buffer = new Buffer(self._chunkSize);
      }

      if (availOutAfter === 0) {
        // Not actually done.  Need to reprocess.
        // Also, update the availInBefore to the availInAfter value,
        // so that if we have to hit it a third (fourth, etc.) time,
        // it'll have the correct byte counts.
        inOff += (availInBefore - availInAfter);
        availInBefore = availInAfter;

        if (!async)
          { return true; }

        var newReq = self._binding.write(flushFlag,
                                         chunk,
                                         inOff,
                                         availInBefore,
                                         self._buffer,
                                         self._offset,
                                         self._chunkSize);
        newReq.callback = callback; // this same function
        newReq.buffer = chunk;
        return;
      }

      if (!async)
        { return false; }

      // finished with the chunk.
      cb();
    }
  };

  inherits$1(Deflate, Zlib$1);
  inherits$1(Inflate, Zlib$1);
  inherits$1(Gzip, Zlib$1);
  inherits$1(Gunzip, Zlib$1);
  inherits$1(DeflateRaw, Zlib$1);
  inherits$1(InflateRaw, Zlib$1);
  inherits$1(Unzip, Zlib$1);
  var zlib = {
    codes: codes,
    createDeflate: createDeflate,
    createInflate: createInflate,
    createDeflateRaw: createDeflateRaw,
    createInflateRaw: createInflateRaw,
    createGzip: createGzip,
    createGunzip: createGunzip,
    createUnzip: createUnzip,
    deflate: deflate$1,
    deflateSync: deflateSync,
    gzip: gzip,
    gzipSync: gzipSync,
    deflateRaw: deflateRaw,
    deflateRawSync: deflateRawSync,
    unzip: unzip,
    unzipSync: unzipSync,
    inflate: inflate$1,
    inflateSync: inflateSync,
    gunzip: gunzip,
    gunzipSync: gunzipSync,
    inflateRaw: inflateRaw,
    inflateRawSync: inflateRawSync,
    Deflate: Deflate,
    Inflate: Inflate,
    Gzip: Gzip,
    Gunzip: Gunzip,
    DeflateRaw: DeflateRaw,
    InflateRaw: InflateRaw,
    Unzip: Unzip,
    Zlib: Zlib$1
  };

  var zlib$1 = /*#__PURE__*/Object.freeze({
    codes: codes,
    createDeflate: createDeflate,
    createInflate: createInflate,
    createDeflateRaw: createDeflateRaw,
    createInflateRaw: createInflateRaw,
    createGzip: createGzip,
    createGunzip: createGunzip,
    createUnzip: createUnzip,
    deflate: deflate$1,
    deflateSync: deflateSync,
    gzip: gzip,
    gzipSync: gzipSync,
    deflateRaw: deflateRaw,
    deflateRawSync: deflateRawSync,
    unzip: unzip,
    unzipSync: unzipSync,
    inflate: inflate$1,
    inflateSync: inflateSync,
    gunzip: gunzip,
    gunzipSync: gunzipSync,
    inflateRaw: inflateRaw,
    inflateRawSync: inflateRawSync,
    Deflate: Deflate,
    Inflate: Inflate,
    Gzip: Gzip,
    Gunzip: Gunzip,
    DeflateRaw: DeflateRaw,
    InflateRaw: InflateRaw,
    Unzip: Unzip,
    Zlib: Zlib$1,
    default: zlib
  });

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  // resolves . and .. elements in a path array with directory names there
  // must be no slashes, empty elements, or device names (c:\) in the array
  // (so also no leading and trailing slashes - it does not distinguish
  // relative and absolute paths)
  function normalizeArray(parts, allowAboveRoot) {
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for (var i = parts.length - 1; i >= 0; i--) {
      var last = parts[i];
      if (last === '.') {
        parts.splice(i, 1);
      } else if (last === '..') {
        parts.splice(i, 1);
        up++;
      } else if (up) {
        parts.splice(i, 1);
        up--;
      }
    }

    // if the path is allowed to go above the root, restore leading ..s
    if (allowAboveRoot) {
      for (; up--; up) {
        parts.unshift('..');
      }
    }

    return parts;
  }

  // Split a filename into [root, dir, basename, ext], unix version
  // 'root' is just a slash, or nothing.
  var splitPathRe =
      /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
  var splitPath = function(filename) {
    return splitPathRe.exec(filename).slice(1);
  };

  // path.resolve([from ...], to)
  // posix version
  function resolve() {
    var arguments$1 = arguments;

    var resolvedPath = '',
        resolvedAbsolute = false;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path = (i >= 0) ? arguments$1[i] : '/';

      // Skip empty and invalid entries
      if (typeof path !== 'string') {
        throw new TypeError('Arguments to path.resolve must be strings');
      } else if (!path) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charAt(0) === '/';
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
      return !!p;
    }), !resolvedAbsolute).join('/');

    return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
  }
  // path.normalize(path)
  // posix version
  function normalize$1(path) {
    var isPathAbsolute = isAbsolute(path),
        trailingSlash = substr(path, -1) === '/';

    // Normalize the path
    path = normalizeArray(filter(path.split('/'), function(p) {
      return !!p;
    }), !isPathAbsolute).join('/');

    if (!path && !isPathAbsolute) {
      path = '.';
    }
    if (path && trailingSlash) {
      path += '/';
    }

    return (isPathAbsolute ? '/' : '') + path;
  }
  // posix version
  function isAbsolute(path) {
    return path.charAt(0) === '/';
  }

  // posix version
  function join() {
    var paths = Array.prototype.slice.call(arguments, 0);
    return normalize$1(filter(paths, function(p, index) {
      if (typeof p !== 'string') {
        throw new TypeError('Arguments to path.join must be strings');
      }
      return p;
    }).join('/'));
  }


  // path.relative(from, to)
  // posix version
  function relative(from, to) {
    from = resolve(from).substr(1);
    to = resolve(to).substr(1);

    function trim(arr) {
      var start = 0;
      for (; start < arr.length; start++) {
        if (arr[start] !== '') { break; }
      }

      var end = arr.length - 1;
      for (; end >= 0; end--) {
        if (arr[end] !== '') { break; }
      }

      if (start > end) { return []; }
      return arr.slice(start, end - start + 1);
    }

    var fromParts = trim(from.split('/'));
    var toParts = trim(to.split('/'));

    var length = Math.min(fromParts.length, toParts.length);
    var samePartsLength = length;
    for (var i = 0; i < length; i++) {
      if (fromParts[i] !== toParts[i]) {
        samePartsLength = i;
        break;
      }
    }

    var outputParts = [];
    for (var i = samePartsLength; i < fromParts.length; i++) {
      outputParts.push('..');
    }

    outputParts = outputParts.concat(toParts.slice(samePartsLength));

    return outputParts.join('/');
  }

  var sep = '/';
  var delimiter$1 = ':';

  function dirname(path) {
    var result = splitPath(path),
        root = result[0],
        dir = result[1];

    if (!root && !dir) {
      // No dirname whatsoever
      return '.';
    }

    if (dir) {
      // It has a dirname, strip trailing slash
      dir = dir.substr(0, dir.length - 1);
    }

    return root + dir;
  }

  function basename(path, ext) {
    var f = splitPath(path)[2];
    // TODO: make this comparison case-insensitive on windows?
    if (ext && f.substr(-1 * ext.length) === ext) {
      f = f.substr(0, f.length - ext.length);
    }
    return f;
  }


  function extname(path) {
    return splitPath(path)[3];
  }
  var path = {
    extname: extname,
    basename: basename,
    dirname: dirname,
    sep: sep,
    delimiter: delimiter$1,
    relative: relative,
    join: join,
    isAbsolute: isAbsolute,
    normalize: normalize$1,
    resolve: resolve
  };
  function filter (xs, f) {
      if (xs.filter) { return xs.filter(f); }
      var res = [];
      for (var i = 0; i < xs.length; i++) {
          if (f(xs[i], i, xs)) { res.push(xs[i]); }
      }
      return res;
  }

  // String.prototype.substr - negative index don't work in IE8
  var substr = 'ab'.substr(-1) === 'b' ?
      function (str, start, len) { return str.substr(start, len) } :
      function (str, start, len) {
          if (start < 0) { start = str.length + start; }
          return str.substr(start, len);
      }
  ;

  var path$1 = /*#__PURE__*/Object.freeze({
    resolve: resolve,
    normalize: normalize$1,
    isAbsolute: isAbsolute,
    join: join,
    relative: relative,
    sep: sep,
    delimiter: delimiter$1,
    dirname: dirname,
    basename: basename,
    extname: extname,
    default: path
  });

  // Declare internals

  var internals = {};


  var escapeJavaScript = function (input) {

      if (!input) {
          return '';
      }

      var escaped = '';

      for (var i = 0; i < input.length; ++i) {

          var charCode = input.charCodeAt(i);

          if (internals.isSafe(charCode)) {
              escaped += input[i];
          }
          else {
              escaped += internals.escapeJavaScriptChar(charCode);
          }
      }

      return escaped;
  };


  var escapeHtml = function (input) {

      if (!input) {
          return '';
      }

      var escaped = '';

      for (var i = 0; i < input.length; ++i) {

          var charCode = input.charCodeAt(i);

          if (internals.isSafe(charCode)) {
              escaped += input[i];
          }
          else {
              escaped += internals.escapeHtmlChar(charCode);
          }
      }

      return escaped;
  };


  var escapeJson = function (input) {

      if (!input) {
          return '';
      }

      var lessThan = 0x3C;
      var greaterThan = 0x3E;
      var andSymbol = 0x26;
      var lineSeperator = 0x2028;

      // replace method
      var charCode;
      return input.replace(/[<>&\u2028\u2029]/g, function (match) {

          charCode = match.charCodeAt(0);

          if (charCode === lessThan) {
              return '\\u003c';
          }
          else if (charCode === greaterThan) {
              return '\\u003e';
          }
          else if (charCode === andSymbol) {
              return '\\u0026';
          }
          else if (charCode === lineSeperator) {
              return '\\u2028';
          }
          return '\\u2029';
      });
  };


  internals.escapeJavaScriptChar = function (charCode) {

      if (charCode >= 256) {
          return '\\u' + internals.padLeft('' + charCode, 4);
      }

      var hexValue = new Buffer(String.fromCharCode(charCode), 'ascii').toString('hex');
      return '\\x' + internals.padLeft(hexValue, 2);
  };


  internals.escapeHtmlChar = function (charCode) {

      var namedEscape = internals.namedHtml[charCode];
      if (typeof namedEscape !== 'undefined') {
          return namedEscape;
      }

      if (charCode >= 256) {
          return '&#' + charCode + ';';
      }

      var hexValue = new Buffer(String.fromCharCode(charCode), 'ascii').toString('hex');
      return '&#x' + internals.padLeft(hexValue, 2) + ';';
  };


  internals.padLeft = function (str, len) {

      while (str.length < len) {
          str = '0' + str;
      }

      return str;
  };


  internals.isSafe = function (charCode) {

      return (typeof internals.safeCharCodes[charCode] !== 'undefined');
  };


  internals.namedHtml = {
      '38': '&amp;',
      '60': '&lt;',
      '62': '&gt;',
      '34': '&quot;',
      '160': '&nbsp;',
      '162': '&cent;',
      '163': '&pound;',
      '164': '&curren;',
      '169': '&copy;',
      '174': '&reg;'
  };


  internals.safeCharCodes = (function () {

      var safe = {};

      for (var i = 32; i < 123; ++i) {

          if ((i >= 97) ||                    // a-z
              (i >= 65 && i <= 90) ||         // A-Z
              (i >= 48 && i <= 57) ||         // 0-9
              i === 32 ||                     // space
              i === 46 ||                     // .
              i === 44 ||                     // ,
              i === 45 ||                     // -
              i === 58 ||                     // :
              i === 95) {                     // _

              safe[i] = null;
          }
      }

      return safe;
  }());

  var _escape = {
  	escapeJavaScript: escapeJavaScript,
  	escapeHtml: escapeHtml,
  	escapeJson: escapeJson
  };

  var path$2 = ( path$1 && path ) || path$1;

  var lib = createCommonjsModule(function (module, exports) {

  // Load modules







  // Declare internals

  var internals = {};


  // Clone object or array

  exports.clone = function (obj, seen) {

      if (typeof obj !== 'object' ||
          obj === null) {

          return obj;
      }

      seen = seen || new Map();

      var lookup = seen.get(obj);
      if (lookup) {
          return lookup;
      }

      var newObj;
      var cloneDeep = false;

      if (!Array.isArray(obj)) {
          if (Buffer.isBuffer(obj)) {
              newObj = new Buffer(obj);
          }
          else if (obj instanceof Date) {
              newObj = new Date(obj.getTime());
          }
          else if (obj instanceof RegExp) {
              newObj = new RegExp(obj);
          }
          else {
              var proto = Object.getPrototypeOf(obj);
              if (proto &&
                  proto.isImmutable) {

                  newObj = obj;
              }
              else {
                  newObj = Object.create(proto);
                  cloneDeep = true;
              }
          }
      }
      else {
          newObj = [];
          cloneDeep = true;
      }

      seen.set(obj, newObj);

      if (cloneDeep) {
          var keys = Object.getOwnPropertyNames(obj);
          for (var i = 0; i < keys.length; ++i) {
              var key = keys[i];
              var descriptor = Object.getOwnPropertyDescriptor(obj, key);
              if (descriptor &&
                  (descriptor.get ||
                   descriptor.set)) {

                  Object.defineProperty(newObj, key, descriptor);
              }
              else {
                  newObj[key] = exports.clone(obj[key], seen);
              }
          }
      }

      return newObj;
  };


  // Merge all the properties of source into target, source wins in conflict, and by default null and undefined from source are applied

  /*eslint-disable */
  exports.merge = function (target, source, isNullOverride /* = true */, isMergeArrays /* = true */) {
  /*eslint-enable */

      exports.assert(target && typeof target === 'object', 'Invalid target value: must be an object');
      exports.assert(source === null || source === undefined || typeof source === 'object', 'Invalid source value: must be null, undefined, or an object');

      if (!source) {
          return target;
      }

      if (Array.isArray(source)) {
          exports.assert(Array.isArray(target), 'Cannot merge array onto an object');
          if (isMergeArrays === false) {                                                  // isMergeArrays defaults to true
              target.length = 0;                                                          // Must not change target assignment
          }

          for (var i = 0; i < source.length; ++i) {
              target.push(exports.clone(source[i]));
          }

          return target;
      }

      var keys = Object.keys(source);
      for (var i$1 = 0; i$1 < keys.length; ++i$1) {
          var key = keys[i$1];
          if (key === '__proto__') {
              continue;
          }

          var value = source[key];
          if (value &&
              typeof value === 'object') {

              if (!target[key] ||
                  typeof target[key] !== 'object' ||
                  (Array.isArray(target[key]) !== Array.isArray(value)) ||
                  value instanceof Date ||
                  Buffer.isBuffer(value) ||
                  value instanceof RegExp) {

                  target[key] = exports.clone(value);
              }
              else {
                  exports.merge(target[key], value, isNullOverride, isMergeArrays);
              }
          }
          else {
              if (value !== null &&
                  value !== undefined) {                              // Explicit to preserve empty strings

                  target[key] = value;
              }
              else if (isNullOverride !== false) {                    // Defaults to true
                  target[key] = value;
              }
          }
      }

      return target;
  };


  // Apply options to a copy of the defaults

  exports.applyToDefaults = function (defaults, options, isNullOverride) {

      exports.assert(defaults && typeof defaults === 'object', 'Invalid defaults value: must be an object');
      exports.assert(!options || options === true || typeof options === 'object', 'Invalid options value: must be true, falsy or an object');

      if (!options) {                                                 // If no options, return null
          return null;
      }

      var copy = exports.clone(defaults);

      if (options === true) {                                         // If options is set to true, use defaults
          return copy;
      }

      return exports.merge(copy, options, isNullOverride === true, false);
  };


  // Clone an object except for the listed keys which are shallow copied

  exports.cloneWithShallow = function (source, keys) {

      if (!source ||
          typeof source !== 'object') {

          return source;
      }

      var storage = internals.store(source, keys);    // Move shallow copy items to storage
      var copy = exports.clone(source);               // Deep copy the rest
      internals.restore(copy, source, storage);       // Shallow copy the stored items and restore
      return copy;
  };


  internals.store = function (source, keys) {

      var storage = {};
      for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          var value = exports.reach(source, key);
          if (value !== undefined) {
              storage[key] = value;
              internals.reachSet(source, key, undefined);
          }
      }

      return storage;
  };


  internals.restore = function (copy, source, storage) {

      var keys = Object.keys(storage);
      for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          internals.reachSet(copy, key, storage[key]);
          internals.reachSet(source, key, storage[key]);
      }
  };


  internals.reachSet = function (obj, key, value) {

      var path = key.split('.');
      var ref = obj;
      for (var i = 0; i < path.length; ++i) {
          var segment = path[i];
          if (i + 1 === path.length) {
              ref[segment] = value;
          }

          ref = ref[segment];
      }
  };


  // Apply options to defaults except for the listed keys which are shallow copied from option without merging

  exports.applyToDefaultsWithShallow = function (defaults, options, keys) {

      exports.assert(defaults && typeof defaults === 'object', 'Invalid defaults value: must be an object');
      exports.assert(!options || options === true || typeof options === 'object', 'Invalid options value: must be true, falsy or an object');
      exports.assert(keys && Array.isArray(keys), 'Invalid keys');

      if (!options) {                                                 // If no options, return null
          return null;
      }

      var copy = exports.cloneWithShallow(defaults, keys);

      if (options === true) {                                         // If options is set to true, use defaults
          return copy;
      }

      var storage = internals.store(options, keys);   // Move shallow copy items to storage
      exports.merge(copy, options, false, false);     // Deep copy the rest
      internals.restore(copy, options, storage);      // Shallow copy the stored items and restore
      return copy;
  };


  // Deep object or array comparison

  exports.deepEqual = function (obj, ref, options, seen) {

      options = options || { prototype: true };

      var type = typeof obj;

      if (type !== typeof ref) {
          return false;
      }

      if (type !== 'object' ||
          obj === null ||
          ref === null) {

          if (obj === ref) {                                                      // Copied from Deep-eql, copyright(c) 2013 Jake Luer, jake@alogicalparadox.com, MIT Licensed, https://github.com/chaijs/deep-eql
              return obj !== 0 || 1 / obj === 1 / ref;        // -0 / +0
          }

          return obj !== obj && ref !== ref;                  // NaN
      }

      seen = seen || [];
      if (seen.indexOf(obj) !== -1) {
          return true;                            // If previous comparison failed, it would have stopped execution
      }

      seen.push(obj);

      if (Array.isArray(obj)) {
          if (!Array.isArray(ref)) {
              return false;
          }

          if (!options.part && obj.length !== ref.length) {
              return false;
          }

          for (var i = 0; i < obj.length; ++i) {
              if (options.part) {
                  var found = false;
                  for (var j = 0; j < ref.length; ++j) {
                      if (exports.deepEqual(obj[i], ref[j], options)) {
                          found = true;
                          break;
                      }
                  }

                  return found;
              }

              if (!exports.deepEqual(obj[i], ref[i], options)) {
                  return false;
              }
          }

          return true;
      }

      if (Buffer.isBuffer(obj)) {
          if (!Buffer.isBuffer(ref)) {
              return false;
          }

          if (obj.length !== ref.length) {
              return false;
          }

          for (var i$1 = 0; i$1 < obj.length; ++i$1) {
              if (obj[i$1] !== ref[i$1]) {
                  return false;
              }
          }

          return true;
      }

      if (obj instanceof Date) {
          return (ref instanceof Date && obj.getTime() === ref.getTime());
      }

      if (obj instanceof RegExp) {
          return (ref instanceof RegExp && obj.toString() === ref.toString());
      }

      if (options.prototype) {
          if (Object.getPrototypeOf(obj) !== Object.getPrototypeOf(ref)) {
              return false;
          }
      }

      var keys = Object.getOwnPropertyNames(obj);

      if (!options.part && keys.length !== Object.getOwnPropertyNames(ref).length) {
          return false;
      }

      for (var i$2 = 0; i$2 < keys.length; ++i$2) {
          var key = keys[i$2];
          var descriptor = Object.getOwnPropertyDescriptor(obj, key);
          if (descriptor.get) {
              if (!exports.deepEqual(descriptor, Object.getOwnPropertyDescriptor(ref, key), options, seen)) {
                  return false;
              }
          }
          else if (!exports.deepEqual(obj[key], ref[key], options, seen)) {
              return false;
          }
      }

      return true;
  };


  // Remove duplicate items from array

  exports.unique = function (array, key) {

      var result;
      if (key) {
          result = [];
          var index = new Set();
          array.forEach(function (item) {

              var identifier = item[key];
              if (!index.has(identifier)) {
                  index.add(identifier);
                  result.push(item);
              }
          });
      }
      else {
          result = Array.from(new Set(array));
      }

      return result;
  };


  // Convert array into object

  exports.mapToObject = function (array, key) {

      if (!array) {
          return null;
      }

      var obj = {};
      for (var i = 0; i < array.length; ++i) {
          if (key) {
              if (array[i][key]) {
                  obj[array[i][key]] = true;
              }
          }
          else {
              obj[array[i]] = true;
          }
      }

      return obj;
  };


  // Find the common unique items in two arrays

  exports.intersect = function (array1, array2, justFirst) {

      if (!array1 || !array2) {
          return [];
      }

      var common = [];
      var hash = (Array.isArray(array1) ? exports.mapToObject(array1) : array1);
      var found = {};
      for (var i = 0; i < array2.length; ++i) {
          if (hash[array2[i]] && !found[array2[i]]) {
              if (justFirst) {
                  return array2[i];
              }

              common.push(array2[i]);
              found[array2[i]] = true;
          }
      }

      return (justFirst ? null : common);
  };


  // Test if the reference contains the values

  exports.contain = function (ref, values, options) {

      /*
          string -> string(s)
          array -> item(s)
          object -> key(s)
          object -> object (key:value)
      */

      var valuePairs = null;
      if (typeof ref === 'object' &&
          typeof values === 'object' &&
          !Array.isArray(ref) &&
          !Array.isArray(values)) {

          valuePairs = values;
          values = Object.keys(values);
      }
      else {
          values = [].concat(values);
      }

      options = options || {};            // deep, once, only, part

      exports.assert(arguments.length >= 2, 'Insufficient arguments');
      exports.assert(typeof ref === 'string' || typeof ref === 'object', 'Reference must be string or an object');
      exports.assert(values.length, 'Values array cannot be empty');

      var compare;
      var compareFlags;
      if (options.deep) {
          compare = exports.deepEqual;

          var hasOnly = options.hasOwnProperty('only');
          var hasPart = options.hasOwnProperty('part');

          compareFlags = {
              prototype: hasOnly ? options.only : hasPart ? !options.part : false,
              part: hasOnly ? !options.only : hasPart ? options.part : true
          };
      }
      else {
          compare = function (a, b) { return a === b; };
      }

      var misses = false;
      var matches = new Array(values.length);
      for (var i = 0; i < matches.length; ++i) {
          matches[i] = 0;
      }

      if (typeof ref === 'string') {
          var pattern = '(';
          for (var i$1 = 0; i$1 < values.length; ++i$1) {
              var value = values[i$1];
              exports.assert(typeof value === 'string', 'Cannot compare string reference to non-string value');
              pattern += (i$1 ? '|' : '') + exports.escapeRegex(value);
          }

          var regex = new RegExp(pattern + ')', 'g');
          var leftovers = ref.replace(regex, function ($0, $1) {

              var index = values.indexOf($1);
              ++matches[index];
              return '';          // Remove from string
          });

          misses = !!leftovers;
      }
      else if (Array.isArray(ref)) {
          for (var i$2 = 0; i$2 < ref.length; ++i$2) {
              var matched = false;
              for (var j = 0; j < values.length && matched === false; ++j) {
                  matched = compare(values[j], ref[i$2], compareFlags) && j;
              }

              if (matched !== false) {
                  ++matches[matched];
              }
              else {
                  misses = true;
              }
          }
      }
      else {
          var keys = Object.getOwnPropertyNames(ref);
          for (var i$3 = 0; i$3 < keys.length; ++i$3) {
              var key = keys[i$3];
              var pos = values.indexOf(key);
              if (pos !== -1) {
                  if (valuePairs &&
                      !compare(valuePairs[key], ref[key], compareFlags)) {

                      return false;
                  }

                  ++matches[pos];
              }
              else {
                  misses = true;
              }
          }
      }

      var result = false;
      for (var i$4 = 0; i$4 < matches.length; ++i$4) {
          result = result || !!matches[i$4];
          if ((options.once && matches[i$4] > 1) ||
              (!options.part && !matches[i$4])) {

              return false;
          }
      }

      if (options.only &&
          misses) {

          return false;
      }

      return result;
  };


  // Flatten array

  exports.flatten = function (array, target) {

      var result = target || [];

      for (var i = 0; i < array.length; ++i) {
          if (Array.isArray(array[i])) {
              exports.flatten(array[i], result);
          }
          else {
              result.push(array[i]);
          }
      }

      return result;
  };


  // Convert an object key chain string ('a.b.c') to reference (object[a][b][c])

  exports.reach = function (obj, chain, options) {

      if (chain === false ||
          chain === null ||
          typeof chain === 'undefined') {

          return obj;
      }

      options = options || {};
      if (typeof options === 'string') {
          options = { separator: options };
      }

      var path = chain.split(options.separator || '.');
      var ref = obj;
      for (var i = 0; i < path.length; ++i) {
          var key = path[i];
          if (key[0] === '-' && Array.isArray(ref)) {
              key = key.slice(1, key.length);
              key = ref.length - key;
          }

          if (!ref ||
              !((typeof ref === 'object' || typeof ref === 'function') && key in ref) ||
              (typeof ref !== 'object' && options.functions === false)) {         // Only object and function can have properties

              exports.assert(!options.strict || i + 1 === path.length, 'Missing segment', key, 'in reach path ', chain);
              exports.assert(typeof ref === 'object' || options.functions === true || typeof ref !== 'function', 'Invalid segment', key, 'in reach path ', chain);
              ref = options.default;
              break;
          }

          ref = ref[key];
      }

      return ref;
  };


  exports.reachTemplate = function (obj, template, options) {

      return template.replace(/{([^}]+)}/g, function ($0, chain) {

          var value = exports.reach(obj, chain, options);
          return (value === undefined || value === null ? '' : value);
      });
  };


  exports.formatStack = function (stack) {

      var trace = [];
      for (var i = 0; i < stack.length; ++i) {
          var item = stack[i];
          trace.push([item.getFileName(), item.getLineNumber(), item.getColumnNumber(), item.getFunctionName(), item.isConstructor()]);
      }

      return trace;
  };


  exports.formatTrace = function (trace) {

      var display = [];

      for (var i = 0; i < trace.length; ++i) {
          var row = trace[i];
          display.push((row[4] ? 'new ' : '') + row[3] + ' (' + row[0] + ':' + row[1] + ':' + row[2] + ')');
      }

      return display;
  };


  exports.callStack = function (slice) {

      // http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi

      var v8 = Error.prepareStackTrace;
      Error.prepareStackTrace = function (_, stack) {

          return stack;
      };

      var capture = {};
      Error.captureStackTrace(capture, this);     // arguments.callee is not supported in strict mode so we use this and slice the trace of this off the result
      var stack = capture.stack;

      Error.prepareStackTrace = v8;

      var trace = exports.formatStack(stack);

      return trace.slice(1 + slice);
  };


  exports.displayStack = function (slice) {

      var trace = exports.callStack(slice === undefined ? 1 : slice + 1);

      return exports.formatTrace(trace);
  };


  exports.abortThrow = false;


  exports.abort = function (message, hideStack) {

      if (process.env.NODE_ENV === 'test' || exports.abortThrow === true) {
          throw new Error(message || 'Unknown error');
      }

      var stack = '';
      if (!hideStack) {
          stack = exports.displayStack(1).join('\n\t');
      }
      console.log('ABORT: ' + message + '\n\t' + stack);
      process.exit(1);
  };


  exports.assert = function (condition /*, msg1, msg2, msg3 */) {
      var arguments$1 = arguments;


      if (condition) {
          return;
      }

      if (arguments.length === 2 && arguments[1] instanceof Error) {
          throw arguments[1];
      }

      var msgs = [];
      for (var i = 1; i < arguments.length; ++i) {
          if (arguments$1[i] !== '') {
              msgs.push(arguments$1[i]);            // Avoids Array.slice arguments leak, allowing for V8 optimizations
          }
      }

      msgs = msgs.map(function (msg) {

          return typeof msg === 'string' ? msg : msg instanceof Error ? msg.message : exports.stringify(msg);
      });

      throw new Error(msgs.join(' ') || 'Unknown error');
  };


  exports.Timer = function () {

      this.ts = 0;
      this.reset();
  };


  exports.Timer.prototype.reset = function () {

      this.ts = Date.now();
  };


  exports.Timer.prototype.elapsed = function () {

      return Date.now() - this.ts;
  };


  exports.Bench = function () {

      this.ts = 0;
      this.reset();
  };


  exports.Bench.prototype.reset = function () {

      this.ts = exports.Bench.now();
  };


  exports.Bench.prototype.elapsed = function () {

      return exports.Bench.now() - this.ts;
  };


  exports.Bench.now = function () {

      var ts = process.hrtime();
      return (ts[0] * 1e3) + (ts[1] / 1e6);
  };


  // Escape string for Regex construction

  exports.escapeRegex = function (string) {

      // Escape ^$.*+-?=!:|\/()[]{},
      return string.replace(/[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g, '\\$&');
  };


  // Base64url (RFC 4648) encode

  exports.base64urlEncode = function (value, encoding) {

      exports.assert(typeof value === 'string' || Buffer.isBuffer(value), 'value must be string or buffer');
      var buf = (Buffer.isBuffer(value) ? value : new Buffer(value, encoding || 'binary'));
      return buf.toString('base64').replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, '');
  };


  // Base64url (RFC 4648) decode

  exports.base64urlDecode = function (value, encoding) {

      if (typeof value !== 'string') {

          return new Error('Value not a string');
      }

      if (!/^[\w\-]*$/.test(value)) {

          return new Error('Invalid character');
      }

      var buf = new Buffer(value, 'base64');
      return (encoding === 'buffer' ? buf : buf.toString(encoding || 'binary'));
  };


  // Escape attribute value for use in HTTP header

  exports.escapeHeaderAttribute = function (attribute) {

      // Allowed value characters: !#$%&'()*+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9, \, "

      exports.assert(/^[ \w\!#\$%&'\(\)\*\+,\-\.\/\:;<\=>\?@\[\]\^`\{\|\}~\"\\]*$/.test(attribute), 'Bad attribute value (' + attribute + ')');

      return attribute.replace(/\\/g, '\\\\').replace(/\"/g, '\\"');                             // Escape quotes and slash
  };


  exports.escapeHtml = function (string) {

      return _escape.escapeHtml(string);
  };


  exports.escapeJavaScript = function (string) {

      return _escape.escapeJavaScript(string);
  };

  exports.escapeJson = function (string) {

      return _escape.escapeJson(string);
  };

  exports.nextTick = function (callback) {

      return function () {

          var args = arguments;
          process.nextTick(function () {

              callback.apply(null, args);
          });
      };
  };


  exports.once = function (method) {

      if (method._hoekOnce) {
          return method;
      }

      var once = false;
      var wrapped = function () {

          if (!once) {
              once = true;
              method.apply(null, arguments);
          }
      };

      wrapped._hoekOnce = true;

      return wrapped;
  };


  exports.isInteger = Number.isSafeInteger;


  exports.ignore = function () { };


  exports.inherits = util$2.inherits;


  exports.format = util$2.format;


  exports.transform = function (source, transform, options) {

      exports.assert(source === null || source === undefined || typeof source === 'object' || Array.isArray(source), 'Invalid source object: must be null, undefined, an object, or an array');
      var separator = (typeof options === 'object' && options !== null) ? (options.separator || '.') : '.';

      if (Array.isArray(source)) {
          var results = [];
          for (var i = 0; i < source.length; ++i) {
              results.push(exports.transform(source[i], transform, options));
          }
          return results;
      }

      var result = {};
      var keys = Object.keys(transform);

      for (var i$1 = 0; i$1 < keys.length; ++i$1) {
          var key = keys[i$1];
          var path = key.split(separator);
          var sourcePath = transform[key];

          exports.assert(typeof sourcePath === 'string', 'All mappings must be "." delineated strings');

          var segment = (void 0);
          var res = result;

          while (path.length > 1) {
              segment = path.shift();
              if (!res[segment]) {
                  res[segment] = {};
              }
              res = res[segment];
          }
          segment = path.shift();
          res[segment] = exports.reach(source, sourcePath, options);
      }

      return result;
  };


  exports.uniqueFilename = function (path, extension) {

      if (extension) {
          extension = extension[0] !== '.' ? '.' + extension : extension;
      }
      else {
          extension = '';
      }

      path = path$2.resolve(path);
      var name = [Date.now(), process.pid, tls.randomBytes(8).toString('hex')].join('-') + extension;
      return path$2.join(path, name);
  };


  exports.stringify = function () {

      try {
          return JSON.stringify.apply(null, arguments);
      }
      catch (err) {
          return '[Cannot display object: ' + err.message + ']';
      }
  };


  exports.shallow = function (source) {

      var target = {};
      var keys = Object.keys(source);
      for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          target[key] = source[key];
      }

      return target;
  };
  });
  var lib_1 = lib.clone;
  var lib_2 = lib.merge;
  var lib_3 = lib.applyToDefaults;
  var lib_4 = lib.cloneWithShallow;
  var lib_5 = lib.applyToDefaultsWithShallow;
  var lib_6 = lib.deepEqual;
  var lib_7 = lib.unique;
  var lib_8 = lib.mapToObject;
  var lib_9 = lib.intersect;
  var lib_10 = lib.contain;
  var lib_11 = lib.flatten;
  var lib_12 = lib.reach;
  var lib_13 = lib.reachTemplate;
  var lib_14 = lib.formatStack;
  var lib_15 = lib.formatTrace;
  var lib_16 = lib.callStack;
  var lib_17 = lib.displayStack;
  var lib_18 = lib.abortThrow;
  var lib_19 = lib.abort;
  var lib_20 = lib.assert;
  var lib_21 = lib.Timer;
  var lib_22 = lib.Bench;
  var lib_23 = lib.escapeRegex;
  var lib_24 = lib.base64urlEncode;
  var lib_25 = lib.base64urlDecode;
  var lib_26 = lib.escapeHeaderAttribute;
  var lib_27 = lib.escapeHtml;
  var lib_28 = lib.escapeJavaScript;
  var lib_29 = lib.escapeJson;
  var lib_30 = lib.nextTick;
  var lib_31 = lib.once;
  var lib_32 = lib.isInteger;
  var lib_33 = lib.ignore;
  var lib_34 = lib.inherits;
  var lib_35 = lib.format;
  var lib_36 = lib.transform;
  var lib_37 = lib.uniqueFilename;
  var lib_38 = lib.stringify;
  var lib_39 = lib.shallow;

  var lib$1 = createCommonjsModule(function (module, exports) {

  // Load modules




  // Declare internals

  var internals = {
      STATUS_CODES: Object.setPrototypeOf({
          '100': 'Continue',
          '101': 'Switching Protocols',
          '102': 'Processing',
          '200': 'OK',
          '201': 'Created',
          '202': 'Accepted',
          '203': 'Non-Authoritative Information',
          '204': 'No Content',
          '205': 'Reset Content',
          '206': 'Partial Content',
          '207': 'Multi-Status',
          '300': 'Multiple Choices',
          '301': 'Moved Permanently',
          '302': 'Moved Temporarily',
          '303': 'See Other',
          '304': 'Not Modified',
          '305': 'Use Proxy',
          '307': 'Temporary Redirect',
          '400': 'Bad Request',
          '401': 'Unauthorized',
          '402': 'Payment Required',
          '403': 'Forbidden',
          '404': 'Not Found',
          '405': 'Method Not Allowed',
          '406': 'Not Acceptable',
          '407': 'Proxy Authentication Required',
          '408': 'Request Time-out',
          '409': 'Conflict',
          '410': 'Gone',
          '411': 'Length Required',
          '412': 'Precondition Failed',
          '413': 'Request Entity Too Large',
          '414': 'Request-URI Too Large',
          '415': 'Unsupported Media Type',
          '416': 'Requested Range Not Satisfiable',
          '417': 'Expectation Failed',
          '418': 'I\'m a teapot',
          '422': 'Unprocessable Entity',
          '423': 'Locked',
          '424': 'Failed Dependency',
          '425': 'Unordered Collection',
          '426': 'Upgrade Required',
          '428': 'Precondition Required',
          '429': 'Too Many Requests',
          '431': 'Request Header Fields Too Large',
          '451': 'Unavailable For Legal Reasons',
          '500': 'Internal Server Error',
          '501': 'Not Implemented',
          '502': 'Bad Gateway',
          '503': 'Service Unavailable',
          '504': 'Gateway Time-out',
          '505': 'HTTP Version Not Supported',
          '506': 'Variant Also Negotiates',
          '507': 'Insufficient Storage',
          '509': 'Bandwidth Limit Exceeded',
          '510': 'Not Extended',
          '511': 'Network Authentication Required'
      }, null)
  };


  exports.wrap = function (error, statusCode, message) {

      lib.assert(error instanceof Error, 'Cannot wrap non-Error object');
      lib.assert(!error.isBoom || (!statusCode && !message), 'Cannot provide statusCode or message with boom error');

      return (error.isBoom ? error : internals.initialize(error, statusCode || 500, message));
  };


  exports.create = function (statusCode, message, data) {

      return internals.create(statusCode, message, data, exports.create);
  };


  internals.create = function (statusCode, message, data, ctor) {

      if (message instanceof Error) {
          if (data) {
              message.data = data;
          }
          return exports.wrap(message, statusCode);
      }

      var error = new Error(message ? message : undefined);       // Avoids settings null message
      Error.captureStackTrace(error, ctor);                       // Filter the stack to our external API
      error.data = data || null;
      internals.initialize(error, statusCode);
      return error;
  };


  internals.initialize = function (error, statusCode, message) {

      var numberCode = parseInt(statusCode, 10);
      lib.assert(!isNaN(numberCode) && numberCode >= 400, 'First argument must be a number (400+):', statusCode);

      error.isBoom = true;
      error.isServer = numberCode >= 500;

      if (!error.hasOwnProperty('data')) {
          error.data = null;
      }

      error.output = {
          statusCode: numberCode,
          payload: {},
          headers: {}
      };

      error.reformat = internals.reformat;
      error.reformat();

      if (!message &&
          !error.message) {

          message = error.output.payload.error;
      }

      if (message) {
          error.message = (message + (error.message ? ': ' + error.message : ''));
      }

      return error;
  };


  internals.reformat = function () {

      this.output.payload.statusCode = this.output.statusCode;
      this.output.payload.error = internals.STATUS_CODES[this.output.statusCode] || 'Unknown';

      if (this.output.statusCode === 500) {
          this.output.payload.message = 'An internal server error occurred';              // Hide actual error from user
      }
      else if (this.message) {
          this.output.payload.message = this.message;
      }
  };


  // 4xx Client Errors

  exports.badRequest = function (message, data) {

      return internals.create(400, message, data, exports.badRequest);
  };


  exports.unauthorized = function (message, scheme, attributes) {          // Or function (message, wwwAuthenticate[])

      var err = internals.create(401, message, undefined, exports.unauthorized);

      if (!scheme) {
          return err;
      }

      var wwwAuthenticate = '';

      if (typeof scheme === 'string') {

          // function (message, scheme, attributes)

          wwwAuthenticate = scheme;

          if (attributes || message) {
              err.output.payload.attributes = {};
          }

          if (attributes) {
              if (typeof attributes === 'string') {
                  wwwAuthenticate = wwwAuthenticate + ' ' + lib.escapeHeaderAttribute(attributes);
                  err.output.payload.attributes = attributes;
              }
              else {
                  var names = Object.keys(attributes);
                  for (var i = 0; i < names.length; ++i) {
                      var name = names[i];
                      if (i) {
                          wwwAuthenticate = wwwAuthenticate + ',';
                      }

                      var value = attributes[name];
                      if (value === null ||
                          value === undefined) {              // Value can be zero

                          value = '';
                      }
                      wwwAuthenticate = wwwAuthenticate + ' ' + name + '="' + lib.escapeHeaderAttribute(value.toString()) + '"';
                      err.output.payload.attributes[name] = value;
                  }
              }
          }


          if (message) {
              if (attributes) {
                  wwwAuthenticate = wwwAuthenticate + ',';
              }
              wwwAuthenticate = wwwAuthenticate + ' error="' + lib.escapeHeaderAttribute(message) + '"';
              err.output.payload.attributes.error = message;
          }
          else {
              err.isMissing = true;
          }
      }
      else {

          // function (message, wwwAuthenticate[])

          var wwwArray = scheme;
          for (var i$1 = 0; i$1 < wwwArray.length; ++i$1) {
              if (i$1) {
                  wwwAuthenticate = wwwAuthenticate + ', ';
              }

              wwwAuthenticate = wwwAuthenticate + wwwArray[i$1];
          }
      }

      err.output.headers['WWW-Authenticate'] = wwwAuthenticate;

      return err;
  };


  exports.paymentRequired = function (message, data) {

      return internals.create(402, message, data, exports.paymentRequired);
  };


  exports.forbidden = function (message, data) {

      return internals.create(403, message, data, exports.forbidden);
  };


  exports.notFound = function (message, data) {

      return internals.create(404, message, data, exports.notFound);
  };


  exports.methodNotAllowed = function (message, data, allow) {

      var err = internals.create(405, message, data, exports.methodNotAllowed);

      if (typeof allow === 'string') {
          allow = [allow];
      }

      if (Array.isArray(allow)) {
          err.output.headers.Allow = allow.join(', ');
      }

      return err;
  };


  exports.notAcceptable = function (message, data) {

      return internals.create(406, message, data, exports.notAcceptable);
  };


  exports.proxyAuthRequired = function (message, data) {

      return internals.create(407, message, data, exports.proxyAuthRequired);
  };


  exports.clientTimeout = function (message, data) {

      return internals.create(408, message, data, exports.clientTimeout);
  };


  exports.conflict = function (message, data) {

      return internals.create(409, message, data, exports.conflict);
  };


  exports.resourceGone = function (message, data) {

      return internals.create(410, message, data, exports.resourceGone);
  };


  exports.lengthRequired = function (message, data) {

      return internals.create(411, message, data, exports.lengthRequired);
  };


  exports.preconditionFailed = function (message, data) {

      return internals.create(412, message, data, exports.preconditionFailed);
  };


  exports.entityTooLarge = function (message, data) {

      return internals.create(413, message, data, exports.entityTooLarge);
  };


  exports.uriTooLong = function (message, data) {

      return internals.create(414, message, data, exports.uriTooLong);
  };


  exports.unsupportedMediaType = function (message, data) {

      return internals.create(415, message, data, exports.unsupportedMediaType);
  };


  exports.rangeNotSatisfiable = function (message, data) {

      return internals.create(416, message, data, exports.rangeNotSatisfiable);
  };


  exports.expectationFailed = function (message, data) {

      return internals.create(417, message, data, exports.expectationFailed);
  };


  exports.teapot = function (message, data) {

      return internals.create(418, message, data, exports.teapot);
  };


  exports.badData = function (message, data) {

      return internals.create(422, message, data, exports.badData);
  };


  exports.locked = function (message, data) {

      return internals.create(423, message, data, exports.locked);
  };


  exports.preconditionRequired = function (message, data) {

      return internals.create(428, message, data, exports.preconditionRequired);
  };


  exports.tooManyRequests = function (message, data) {

      return internals.create(429, message, data, exports.tooManyRequests);
  };


  exports.illegal = function (message, data) {

      return internals.create(451, message, data, exports.illegal);
  };


  // 5xx Server Errors

  exports.internal = function (message, data, statusCode) {

      return internals.serverError(message, data, statusCode, exports.internal);
  };


  internals.serverError = function (message, data, statusCode, ctor) {

      var error;
      if (data instanceof Error) {
          error = exports.wrap(data, statusCode, message);
      }
      else {
          error = internals.create(statusCode || 500, message, undefined, ctor);
          error.data = data;
      }

      return error;
  };


  exports.notImplemented = function (message, data) {

      return internals.serverError(message, data, 501, exports.notImplemented);
  };


  exports.badGateway = function (message, data) {

      return internals.serverError(message, data, 502, exports.badGateway);
  };


  exports.serverUnavailable = function (message, data) {

      return internals.serverError(message, data, 503, exports.serverUnavailable);
  };


  exports.gatewayTimeout = function (message, data) {

      return internals.serverError(message, data, 504, exports.gatewayTimeout);
  };


  exports.badImplementation = function (message, data) {

      var err = internals.serverError(message, data, 500, exports.badImplementation);
      err.isDeveloperError = true;
      return err;
  };
  });
  var lib_1$1 = lib$1.wrap;
  var lib_2$1 = lib$1.create;
  var lib_3$1 = lib$1.badRequest;
  var lib_4$1 = lib$1.unauthorized;
  var lib_5$1 = lib$1.paymentRequired;
  var lib_6$1 = lib$1.forbidden;
  var lib_7$1 = lib$1.notFound;
  var lib_8$1 = lib$1.methodNotAllowed;
  var lib_9$1 = lib$1.notAcceptable;
  var lib_10$1 = lib$1.proxyAuthRequired;
  var lib_11$1 = lib$1.clientTimeout;
  var lib_12$1 = lib$1.conflict;
  var lib_13$1 = lib$1.resourceGone;
  var lib_14$1 = lib$1.lengthRequired;
  var lib_15$1 = lib$1.preconditionFailed;
  var lib_16$1 = lib$1.entityTooLarge;
  var lib_17$1 = lib$1.uriTooLong;
  var lib_18$1 = lib$1.unsupportedMediaType;
  var lib_19$1 = lib$1.rangeNotSatisfiable;
  var lib_20$1 = lib$1.expectationFailed;
  var lib_21$1 = lib$1.teapot;
  var lib_22$1 = lib$1.badData;
  var lib_23$1 = lib$1.locked;
  var lib_24$1 = lib$1.preconditionRequired;
  var lib_25$1 = lib$1.tooManyRequests;
  var lib_26$1 = lib$1.illegal;
  var lib_27$1 = lib$1.internal;
  var lib_28$1 = lib$1.notImplemented;
  var lib_29$1 = lib$1.badGateway;
  var lib_30$1 = lib$1.serverUnavailable;
  var lib_31$1 = lib$1.gatewayTimeout;
  var lib_32$1 = lib$1.badImplementation;

  var lib$2 = createCommonjsModule(function (module, exports) {

  // Load modules







  // Declare internals

  var internals = {};


  exports.time = function (options, callback) {

      if (arguments.length !== 2) {
          callback = arguments[0];
          options = {};
      }

      var settings = lib.clone(options);
      settings.host = settings.host || 'time.google.com';
      settings.port = settings.port || 123;
      settings.resolveReference = settings.resolveReference || false;

      // Declare variables used by callback

      var timeoutId = null;
      var sent = 0;

      // Ensure callback is only called once

      var finish = lib.once(function (err, result) {

          clearTimeout(timeoutId);

          socket.removeAllListeners();
          socket.once('error', lib.ignore);

          try {
              socket.close();
          }
          catch (ignoreErr) { }       // Ignore errors if the socket is already closed

          return callback(err, result);
      });

      // Set timeout

      if (settings.timeout) {
          timeoutId = setTimeout(function () {

              return finish(new Error('Timeout'));
          }, settings.timeout);
      }

      // Create UDP socket

      var socket = tls.createSocket('udp4');

      socket.once('error', function (err) { return finish(err); });

      // Listen to incoming messages

      socket.on('message', function (buffer, rinfo) {

          var received = Date.now();

          var message = new internals.NtpMessage(buffer);
          if (!message.isValid) {
              return finish(new Error('Invalid server response'), message);
          }

          if (message.originateTimestamp !== sent) {
              return finish(new Error('Wrong originate timestamp'), message);
          }

          // Timestamp Name          ID   When Generated
          // ------------------------------------------------------------
          // Originate Timestamp     T1   time request sent by client
          // Receive Timestamp       T2   time request received by server
          // Transmit Timestamp      T3   time reply sent by server
          // Destination Timestamp   T4   time reply received by client
          //
          // The roundtrip delay d and system clock offset t are defined as:
          //
          // d = (T4 - T1) - (T3 - T2)     t = ((T2 - T1) + (T3 - T4)) / 2

          var T1 = message.originateTimestamp;
          var T2 = message.receiveTimestamp;
          var T3 = message.transmitTimestamp;
          var T4 = received;

          message.d = (T4 - T1) - (T3 - T2);
          message.t = ((T2 - T1) + (T3 - T4)) / 2;
          message.receivedLocally = received;

          if (!settings.resolveReference ||
              message.stratum !== 'secondary') {

              return finish(null, message);
          }

          // Resolve reference IP address

          tls.reverse(message.referenceId, function (err, domains) {

              if (/* $lab:coverage:off$ */ !err /* $lab:coverage:on$ */) {
                  message.referenceHost = domains[0];
              }

              return finish(null, message);
          });
      });

      // Construct NTP message

      var message = new Buffer(48);
      for (var i = 0; i < 48; ++i) {                      // Zero message
          message[i] = 0;
      }

      message[0] = (0 << 6) + (4 << 3) + (3 << 0);        // Set version number to 4 and Mode to 3 (client)
      sent = Date.now();
      internals.fromMsecs(sent, message, 40);             // Set transmit timestamp (returns as originate)

      // Send NTP request

      socket.send(message, 0, message.length, settings.port, settings.host, function (err, bytes) {

          if (err ||
              bytes !== 48) {

              return finish(err || new Error('Could not send entire message'));
          }
      });
  };


  internals.NtpMessage = function (buffer) {

      this.isValid = false;

      // Validate

      if (buffer.length !== 48) {
          return;
      }

      // Leap indicator

      var li = (buffer[0] >> 6);
      switch (li) {
          case 0: this.leapIndicator = 'no-warning'; break;
          case 1: this.leapIndicator = 'last-minute-61'; break;
          case 2: this.leapIndicator = 'last-minute-59'; break;
          case 3: this.leapIndicator = 'alarm'; break;
      }

      // Version

      var vn = ((buffer[0] & 0x38) >> 3);
      this.version = vn;

      // Mode

      var mode = (buffer[0] & 0x7);
      switch (mode) {
          case 1: this.mode = 'symmetric-active'; break;
          case 2: this.mode = 'symmetric-passive'; break;
          case 3: this.mode = 'client'; break;
          case 4: this.mode = 'server'; break;
          case 5: this.mode = 'broadcast'; break;
          case 0:
          case 6:
          case 7: this.mode = 'reserved'; break;
      }

      // Stratum

      var stratum = buffer[1];
      if (stratum === 0) {
          this.stratum = 'death';
      }
      else if (stratum === 1) {
          this.stratum = 'primary';
      }
      else if (stratum <= 15) {
          this.stratum = 'secondary';
      }
      else {
          this.stratum = 'reserved';
      }

      // Poll interval (msec)

      this.pollInterval = Math.round(Math.pow(2, buffer[2])) * 1000;

      // Precision (msecs)

      this.precision = Math.pow(2, buffer[3]) * 1000;

      // Root delay (msecs)

      var rootDelay = 256 * (256 * (256 * buffer[4] + buffer[5]) + buffer[6]) + buffer[7];
      this.rootDelay = 1000 * (rootDelay / 0x10000);

      // Root dispersion (msecs)

      this.rootDispersion = ((buffer[8] << 8) + buffer[9] + ((buffer[10] << 8) + buffer[11]) / Math.pow(2, 16)) * 1000;

      // Reference identifier

      this.referenceId = '';
      switch (this.stratum) {
          case 'death':
          case 'primary':
              this.referenceId = String.fromCharCode(buffer[12]) + String.fromCharCode(buffer[13]) + String.fromCharCode(buffer[14]) + String.fromCharCode(buffer[15]);
              break;
          case 'secondary':
              this.referenceId = '' + buffer[12] + '.' + buffer[13] + '.' + buffer[14] + '.' + buffer[15];
              break;
      }

      // Reference timestamp

      this.referenceTimestamp = internals.toMsecs(buffer, 16);

      // Originate timestamp

      this.originateTimestamp = internals.toMsecs(buffer, 24);

      // Receive timestamp

      this.receiveTimestamp = internals.toMsecs(buffer, 32);

      // Transmit timestamp

      this.transmitTimestamp = internals.toMsecs(buffer, 40);

      // Validate

      if (this.version === 4 &&
          this.stratum !== 'reserved' &&
          this.mode === 'server' &&
          this.originateTimestamp &&
          this.receiveTimestamp &&
          this.transmitTimestamp) {

          this.isValid = true;
      }

      return this;
  };


  internals.toMsecs = function (buffer, offset) {

      var seconds = 0;
      var fraction = 0;

      for (var i = 0; i < 4; ++i) {
          seconds = (seconds * 256) + buffer[offset + i];
      }

      for (var i$1 = 4; i$1 < 8; ++i$1) {
          fraction = (fraction * 256) + buffer[offset + i$1];
      }

      return ((seconds - 2208988800 + (fraction / Math.pow(2, 32))) * 1000);
  };


  internals.fromMsecs = function (ts, buffer, offset) {

      var seconds = Math.floor(ts / 1000) + 2208988800;
      var fraction = Math.round((ts % 1000) / 1000 * Math.pow(2, 32));

      buffer[offset + 0] = (seconds & 0xFF000000) >> 24;
      buffer[offset + 1] = (seconds & 0x00FF0000) >> 16;
      buffer[offset + 2] = (seconds & 0x0000FF00) >> 8;
      buffer[offset + 3] = (seconds & 0x000000FF);

      buffer[offset + 4] = (fraction & 0xFF000000) >> 24;
      buffer[offset + 5] = (fraction & 0x00FF0000) >> 16;
      buffer[offset + 6] = (fraction & 0x0000FF00) >> 8;
      buffer[offset + 7] = (fraction & 0x000000FF);
  };


  // Offset singleton

  internals.last = {
      offset: 0,
      expires: 0,
      host: '',
      port: 0
  };


  exports.offset = function (options, callback) {

      if (arguments.length !== 2) {
          callback = arguments[0];
          options = {};
      }

      var now = Date.now();
      var clockSyncRefresh = options.clockSyncRefresh || 24 * 60 * 60 * 1000;                    // Daily

      if (internals.last.offset &&
          internals.last.host === options.host &&
          internals.last.port === options.port &&
          now < internals.last.expires) {

          process.nextTick(function () { return callback(null, internals.last.offset); });
          return;
      }

      exports.time(options, function (err, time) {

          if (err) {
              return callback(err, 0);
          }

          internals.last = {
              offset: Math.round(time.t),
              expires: now + clockSyncRefresh,
              host: options.host,
              port: options.port
          };

          return callback(null, internals.last.offset);
      });
  };


  // Now singleton

  internals.now = {
      started: false,
      intervalId: null
  };


  exports.start = function (options, callback) {

      if (arguments.length !== 2) {
          callback = arguments[0];
          options = {};
      }

      if (internals.now.started) {
          process.nextTick(function () { return callback(); });
          return;
      }

      var report = function (err) {

          if (err &&
              options.onError) {

              options.onError(err);
          }
      };

      internals.now.started = true;
      exports.offset(options, function (err, offset) {

          report(err);

          internals.now.intervalId = setInterval(function () {

              exports.offset(options, report);
          }, options.clockSyncRefresh || 24 * 60 * 60 * 1000);                                // Daily

          return callback();
      });
  };


  exports.stop = function () {

      if (!internals.now.started) {
          return;
      }

      clearInterval(internals.now.intervalId);
      internals.now.started = false;
      internals.now.intervalId = null;
  };


  exports.isLive = function () {

      return internals.now.started;
  };


  exports.now = function () {

      var now = Date.now();
      if (!exports.isLive() ||
          now >= internals.last.expires) {

          return now;
      }

      return now + internals.last.offset;
  };
  });
  var lib_1$2 = lib$2.time;
  var lib_2$2 = lib$2.offset;
  var lib_3$2 = lib$2.start;
  var lib_4$2 = lib$2.stop;
  var lib_5$2 = lib$2.isLive;
  var lib_6$2 = lib$2.now;

  var lib$3 = createCommonjsModule(function (module, exports) {

  // Load modules




  // Declare internals

  var internals = {
      STATUS_CODES: Object.setPrototypeOf({
          '100': 'Continue',
          '101': 'Switching Protocols',
          '102': 'Processing',
          '200': 'OK',
          '201': 'Created',
          '202': 'Accepted',
          '203': 'Non-Authoritative Information',
          '204': 'No Content',
          '205': 'Reset Content',
          '206': 'Partial Content',
          '207': 'Multi-Status',
          '300': 'Multiple Choices',
          '301': 'Moved Permanently',
          '302': 'Moved Temporarily',
          '303': 'See Other',
          '304': 'Not Modified',
          '305': 'Use Proxy',
          '307': 'Temporary Redirect',
          '400': 'Bad Request',
          '401': 'Unauthorized',
          '402': 'Payment Required',
          '403': 'Forbidden',
          '404': 'Not Found',
          '405': 'Method Not Allowed',
          '406': 'Not Acceptable',
          '407': 'Proxy Authentication Required',
          '408': 'Request Time-out',
          '409': 'Conflict',
          '410': 'Gone',
          '411': 'Length Required',
          '412': 'Precondition Failed',
          '413': 'Request Entity Too Large',
          '414': 'Request-URI Too Large',
          '415': 'Unsupported Media Type',
          '416': 'Requested Range Not Satisfiable',
          '417': 'Expectation Failed',
          '418': 'I\'m a teapot',
          '422': 'Unprocessable Entity',
          '423': 'Locked',
          '424': 'Failed Dependency',
          '425': 'Unordered Collection',
          '426': 'Upgrade Required',
          '428': 'Precondition Required',
          '429': 'Too Many Requests',
          '431': 'Request Header Fields Too Large',
          '451': 'Unavailable For Legal Reasons',
          '500': 'Internal Server Error',
          '501': 'Not Implemented',
          '502': 'Bad Gateway',
          '503': 'Service Unavailable',
          '504': 'Gateway Time-out',
          '505': 'HTTP Version Not Supported',
          '506': 'Variant Also Negotiates',
          '507': 'Insufficient Storage',
          '509': 'Bandwidth Limit Exceeded',
          '510': 'Not Extended',
          '511': 'Network Authentication Required'
      }, null)
  };


  exports.boomify = function (error, options) {

      lib.assert(error instanceof Error, 'Cannot wrap non-Error object');

      options = options || {};

      if (!error.isBoom) {
          return internals.initialize(error, options.statusCode || 500, options.message);
      }

      if (options.override === false ||                           // Defaults to true
          (!options.statusCode && !options.message)) {

          return error;
      }

      return internals.initialize(error, options.statusCode || error.output.statusCode, options.message);
  };


  exports.wrap = function (error, statusCode, message) {

      lib.assert(error instanceof Error, 'Cannot wrap non-Error object');
      lib.assert(!error.isBoom || (!statusCode && !message), 'Cannot provide statusCode or message with boom error');

      return (error.isBoom ? error : internals.initialize(error, statusCode || 500, message));
  };


  exports.create = function (statusCode, message, data) {

      return internals.create(statusCode, message, data, exports.create);
  };


  internals.create = function (statusCode, message, data, ctor) {

      if (message instanceof Error) {
          if (data) {
              message.data = data;
          }

          return exports.wrap(message, statusCode);
      }

      var error = new Error(message ? message : undefined);         // Avoids settings null message
      Error.captureStackTrace(error, ctor);                           // Filter the stack to our external API
      error.data = data || null;
      internals.initialize(error, statusCode);
      error.typeof = ctor;

      return error;
  };


  internals.initialize = function (error, statusCode, message) {

      var numberCode = parseInt(statusCode, 10);
      lib.assert(!isNaN(numberCode) && numberCode >= 400, 'First argument must be a number (400+):', statusCode);

      error.isBoom = true;
      error.isServer = numberCode >= 500;

      if (!error.hasOwnProperty('data')) {
          error.data = null;
      }

      error.output = {
          statusCode: numberCode,
          payload: {},
          headers: {}
      };

      error.reformat = internals.reformat;

      if (!message &&
          !error.message) {

          error.reformat();
          message = error.output.payload.error;
      }

      if (message) {
          error.message = (message + (error.message ? ': ' + error.message : ''));
          error.output.payload.message = error.message;
      }

      error.reformat();
      return error;
  };


  internals.reformat = function () {

      this.output.payload.statusCode = this.output.statusCode;
      this.output.payload.error = internals.STATUS_CODES[this.output.statusCode] || 'Unknown';

      if (this.output.statusCode === 500) {
          this.output.payload.message = 'An internal server error occurred';              // Hide actual error from user
      }
      else if (this.message) {
          this.output.payload.message = this.message;
      }
  };


  // 4xx Client Errors

  exports.badRequest = function (message, data) {

      return internals.create(400, message, data, exports.badRequest);
  };


  exports.unauthorized = function (message, scheme, attributes) {          // Or function (message, wwwAuthenticate[])

      var err = internals.create(401, message, undefined, exports.unauthorized);

      if (!scheme) {
          return err;
      }

      var wwwAuthenticate = '';

      if (typeof scheme === 'string') {

          // function (message, scheme, attributes)

          wwwAuthenticate = scheme;

          if (attributes || message) {
              err.output.payload.attributes = {};
          }

          if (attributes) {
              if (typeof attributes === 'string') {
                  wwwAuthenticate = wwwAuthenticate + ' ' + lib.escapeHeaderAttribute(attributes);
                  err.output.payload.attributes = attributes;
              }
              else {
                  var names = Object.keys(attributes);
                  for (var i = 0; i < names.length; ++i) {
                      var name = names[i];
                      if (i) {
                          wwwAuthenticate = wwwAuthenticate + ',';
                      }

                      var value = attributes[name];
                      if (value === null ||
                          value === undefined) {              // Value can be zero

                          value = '';
                      }
                      wwwAuthenticate = wwwAuthenticate + ' ' + name + '="' + lib.escapeHeaderAttribute(value.toString()) + '"';
                      err.output.payload.attributes[name] = value;
                  }
              }
          }


          if (message) {
              if (attributes) {
                  wwwAuthenticate = wwwAuthenticate + ',';
              }
              wwwAuthenticate = wwwAuthenticate + ' error="' + lib.escapeHeaderAttribute(message) + '"';
              err.output.payload.attributes.error = message;
          }
          else {
              err.isMissing = true;
          }
      }
      else {

          // function (message, wwwAuthenticate[])

          var wwwArray = scheme;
          for (var i$1 = 0; i$1 < wwwArray.length; ++i$1) {
              if (i$1) {
                  wwwAuthenticate = wwwAuthenticate + ', ';
              }

              wwwAuthenticate = wwwAuthenticate + wwwArray[i$1];
          }
      }

      err.output.headers['WWW-Authenticate'] = wwwAuthenticate;

      return err;
  };


  exports.paymentRequired = function (message, data) {

      return internals.create(402, message, data, exports.paymentRequired);
  };


  exports.forbidden = function (message, data) {

      return internals.create(403, message, data, exports.forbidden);
  };


  exports.notFound = function (message, data) {

      return internals.create(404, message, data, exports.notFound);
  };


  exports.methodNotAllowed = function (message, data, allow) {

      var err = internals.create(405, message, data, exports.methodNotAllowed);

      if (typeof allow === 'string') {
          allow = [allow];
      }

      if (Array.isArray(allow)) {
          err.output.headers.Allow = allow.join(', ');
      }

      return err;
  };


  exports.notAcceptable = function (message, data) {

      return internals.create(406, message, data, exports.notAcceptable);
  };


  exports.proxyAuthRequired = function (message, data) {

      return internals.create(407, message, data, exports.proxyAuthRequired);
  };


  exports.clientTimeout = function (message, data) {

      return internals.create(408, message, data, exports.clientTimeout);
  };


  exports.conflict = function (message, data) {

      return internals.create(409, message, data, exports.conflict);
  };


  exports.resourceGone = function (message, data) {

      return internals.create(410, message, data, exports.resourceGone);
  };


  exports.lengthRequired = function (message, data) {

      return internals.create(411, message, data, exports.lengthRequired);
  };


  exports.preconditionFailed = function (message, data) {

      return internals.create(412, message, data, exports.preconditionFailed);
  };


  exports.entityTooLarge = function (message, data) {

      return internals.create(413, message, data, exports.entityTooLarge);
  };


  exports.uriTooLong = function (message, data) {

      return internals.create(414, message, data, exports.uriTooLong);
  };


  exports.unsupportedMediaType = function (message, data) {

      return internals.create(415, message, data, exports.unsupportedMediaType);
  };


  exports.rangeNotSatisfiable = function (message, data) {

      return internals.create(416, message, data, exports.rangeNotSatisfiable);
  };


  exports.expectationFailed = function (message, data) {

      return internals.create(417, message, data, exports.expectationFailed);
  };


  exports.teapot = function (message, data) {

      return internals.create(418, message, data, exports.teapot);
  };


  exports.badData = function (message, data) {

      return internals.create(422, message, data, exports.badData);
  };


  exports.locked = function (message, data) {

      return internals.create(423, message, data, exports.locked);
  };


  exports.preconditionRequired = function (message, data) {

      return internals.create(428, message, data, exports.preconditionRequired);
  };


  exports.tooManyRequests = function (message, data) {

      return internals.create(429, message, data, exports.tooManyRequests);
  };


  exports.illegal = function (message, data) {

      return internals.create(451, message, data, exports.illegal);
  };


  // 5xx Server Errors

  exports.internal = function (message, data, statusCode) {

      return internals.serverError(message, data, statusCode, exports.internal);
  };


  internals.serverError = function (message, data, statusCode, ctor) {

      if (data instanceof Error &&
          !data.isBoom) {

          return exports.wrap(data, statusCode, message);
      }

      var error = internals.create(statusCode || 500, message, undefined, ctor);
      error.data = data;
      return error;
  };


  exports.notImplemented = function (message, data) {

      return internals.serverError(message, data, 501, exports.notImplemented);
  };


  exports.badGateway = function (message, data) {

      return internals.serverError(message, data, 502, exports.badGateway);
  };


  exports.serverUnavailable = function (message, data) {

      return internals.serverError(message, data, 503, exports.serverUnavailable);
  };


  exports.gatewayTimeout = function (message, data) {

      return internals.serverError(message, data, 504, exports.gatewayTimeout);
  };


  exports.badImplementation = function (message, data) {

      var err = internals.serverError(message, data, 500, exports.badImplementation);
      err.isDeveloperError = true;
      return err;
  };
  });
  var lib_1$3 = lib$3.boomify;
  var lib_2$3 = lib$3.wrap;
  var lib_3$3 = lib$3.create;
  var lib_4$3 = lib$3.badRequest;
  var lib_5$3 = lib$3.unauthorized;
  var lib_6$3 = lib$3.paymentRequired;
  var lib_7$2 = lib$3.forbidden;
  var lib_8$2 = lib$3.notFound;
  var lib_9$2 = lib$3.methodNotAllowed;
  var lib_10$2 = lib$3.notAcceptable;
  var lib_11$2 = lib$3.proxyAuthRequired;
  var lib_12$2 = lib$3.clientTimeout;
  var lib_13$2 = lib$3.conflict;
  var lib_14$2 = lib$3.resourceGone;
  var lib_15$2 = lib$3.lengthRequired;
  var lib_16$2 = lib$3.preconditionFailed;
  var lib_17$2 = lib$3.entityTooLarge;
  var lib_18$2 = lib$3.uriTooLong;
  var lib_19$2 = lib$3.unsupportedMediaType;
  var lib_20$2 = lib$3.rangeNotSatisfiable;
  var lib_21$2 = lib$3.expectationFailed;
  var lib_22$2 = lib$3.teapot;
  var lib_23$2 = lib$3.badData;
  var lib_24$2 = lib$3.locked;
  var lib_25$2 = lib$3.preconditionRequired;
  var lib_26$2 = lib$3.tooManyRequests;
  var lib_27$2 = lib$3.illegal;
  var lib_28$2 = lib$3.internal;
  var lib_29$2 = lib$3.notImplemented;
  var lib_30$2 = lib$3.badGateway;
  var lib_31$2 = lib$3.serverUnavailable;
  var lib_32$2 = lib$3.gatewayTimeout;
  var lib_33$1 = lib$3.badImplementation;

  var lib$4 = createCommonjsModule(function (module, exports) {


  // Generate a cryptographically strong pseudo-random data

  exports.randomString = function (size) {

      var buffer = exports.randomBits((size + 1) * 6);
      if (buffer instanceof Error) {
          return buffer;
      }

      var string = buffer.toString('base64').replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, '');
      return string.slice(0, size);
  };


  // Return a random string of digits

  exports.randomDigits = function (size) {

      var buffer = exports.randomBits(size * 8);
      if (buffer instanceof Error) {
          return buffer;
      }

      var digits = [];
      for (var i = 0; i < buffer.length; ++i) {
          digits.push(Math.floor(buffer[i] / 25.6));
      }

      return digits.join('');
  };


  // Generate a buffer of random bits

  exports.randomBits = function (bits) {

      if (!bits ||
          bits < 0) {

          return lib$3.internal('Invalid random bits count');
      }

      var bytes = Math.ceil(bits / 8);
      try {
          return tls.randomBytes(bytes);
      }
      catch (err) {
          return lib$3.internal('Failed generating random bits: ' + err.message);
      }
  };


  // Compare two strings using fixed time algorithm (to prevent time-based analysis of MAC digest match)

  exports.fixedTimeComparison = function (a, b) {

      if (typeof a !== 'string' ||
          typeof b !== 'string') {

          return false;
      }

      var mismatch = (a.length === b.length ? 0 : 1);
      if (mismatch) {
          b = a;
      }

      for (var i = 0; i < a.length; ++i) {
          var ac = a.charCodeAt(i);
          var bc = b.charCodeAt(i);
          mismatch |= (ac ^ bc);
      }

      return (mismatch === 0);
  };
  });
  var lib_1$4 = lib$4.randomString;
  var lib_2$4 = lib$4.randomDigits;
  var lib_3$4 = lib$4.randomBits;
  var lib_4$4 = lib$4.fixedTimeComparison;

  var _from$1 = "hawk@~6.0.2";
  var _id$1 = "hawk@6.0.2";
  var _inBundle$1 = false;
  var _integrity$1 = "sha512-miowhl2+U7Qle4vdLqDdPt9m09K6yZhkLDTWGoUiUzrQCn+mHHSmfJgAyGaLRZbPmTqfFFjRV1QWCW0VWUJBbQ==";
  var _location$1 = "/hawk";
  var _phantomChildren$1 = {};
  var _requested$1 = {"type":"range","registry":true,"raw":"hawk@~6.0.2","name":"hawk","escapedName":"hawk","rawSpec":"~6.0.2","saveSpec":null,"fetchSpec":"~6.0.2"};
  var _requiredBy$1 = ["/request"];
  var _resolved$1 = "https://registry.npmjs.org/hawk/-/hawk-6.0.2.tgz";
  var _shasum$1 = "af4d914eb065f9b5ce4d9d11c1cb2126eecc3038";
  var _spec$1 = "hawk@~6.0.2";
  var _where$1 = "/Volumes/Fr-01-Work/Sites/camomile-ui/node_modules/request";
  var author$1 = {"name":"Eran Hammer","email":"eran@hammer.io","url":"http://hueniverse.com"};
  var babel = {"presets":["es2015"]};
  var browser$1 = "dist/browser.js";
  var bugs$1 = {"url":"https://github.com/hueniverse/hawk/issues"};
  var bundleDependencies$1 = false;
  var dependencies$1 = {"boom":"4.x.x","cryptiles":"3.x.x","hoek":"4.x.x","sntp":"2.x.x"};
  var deprecated$1 = false;
  var description$1 = "HTTP Hawk Authentication Scheme";
  var devDependencies$1 = {"babel-cli":"^6.1.2","babel-preset-es2015":"^6.1.2","code":"4.x.x","lab":"14.x.x"};
  var engines$1 = {"node":">=4.5.0"};
  var homepage$1 = "https://github.com/hueniverse/hawk#readme";
  var keywords$1 = ["http","authentication","scheme","hawk"];
  var license$1 = "BSD-3-Clause";
  var main$1 = "lib/index.js";
  var name$1 = "hawk";
  var repository$1 = {"type":"git","url":"git://github.com/hueniverse/hawk.git"};
  var scripts$1 = {"build-client":"mkdir -p dist; babel lib/browser.js --out-file dist/browser.js","prepublish":"npm run-script build-client","test":"lab -a code -t 100 -L","test-cov-html":"lab -a code -r html -o coverage.html"};
  var version$4 = "6.0.2";
  var _package$2 = {
  	_from: _from$1,
  	_id: _id$1,
  	_inBundle: _inBundle$1,
  	_integrity: _integrity$1,
  	_location: _location$1,
  	_phantomChildren: _phantomChildren$1,
  	_requested: _requested$1,
  	_requiredBy: _requiredBy$1,
  	_resolved: _resolved$1,
  	_shasum: _shasum$1,
  	_spec: _spec$1,
  	_where: _where$1,
  	author: author$1,
  	babel: babel,
  	browser: browser$1,
  	bugs: bugs$1,
  	bundleDependencies: bundleDependencies$1,
  	dependencies: dependencies$1,
  	deprecated: deprecated$1,
  	description: description$1,
  	devDependencies: devDependencies$1,
  	engines: engines$1,
  	homepage: homepage$1,
  	keywords: keywords$1,
  	license: license$1,
  	main: main$1,
  	name: name$1,
  	repository: repository$1,
  	scripts: scripts$1,
  	version: version$4
  };

  var _package$3 = /*#__PURE__*/Object.freeze({
    _from: _from$1,
    _id: _id$1,
    _inBundle: _inBundle$1,
    _integrity: _integrity$1,
    _location: _location$1,
    _phantomChildren: _phantomChildren$1,
    _requested: _requested$1,
    _requiredBy: _requiredBy$1,
    _resolved: _resolved$1,
    _shasum: _shasum$1,
    _spec: _spec$1,
    _where: _where$1,
    author: author$1,
    babel: babel,
    browser: browser$1,
    bugs: bugs$1,
    bundleDependencies: bundleDependencies$1,
    dependencies: dependencies$1,
    deprecated: deprecated$1,
    description: description$1,
    devDependencies: devDependencies$1,
    engines: engines$1,
    homepage: homepage$1,
    keywords: keywords$1,
    license: license$1,
    main: main$1,
    name: name$1,
    repository: repository$1,
    scripts: scripts$1,
    version: version$4,
    default: _package$2
  });

  var require$$0 = ( _package$3 && _package$2 ) || _package$3;

  var utils = createCommonjsModule(function (module, exports) {

  // Load modules





  // Declare internals

  var internals = {};


  exports.version = function () {

      return require$$0.version;
  };


  exports.limits = {
      maxMatchLength: 4096            // Limit the length of uris and headers to avoid a DoS attack on string matching
  };


  // Extract host and port from request

  //                                            $1                            $2
  internals.hostHeaderRegex = /^(?:(?:\r\n)?\s)*((?:[^:]+)|(?:\[[^\]]+\]))(?::(\d+))?(?:(?:\r\n)?\s)*$/;              // (IPv4, hostname)|(IPv6)


  exports.parseHost = function (req, hostHeaderName) {

      hostHeaderName = (hostHeaderName ? hostHeaderName.toLowerCase() : 'host');
      var hostHeader = req.headers[hostHeaderName];
      if (!hostHeader) {
          return null;
      }

      if (hostHeader.length > exports.limits.maxMatchLength) {
          return null;
      }

      var hostParts = hostHeader.match(internals.hostHeaderRegex);
      if (!hostParts) {
          return null;
      }

      return {
          name: hostParts[1],
          port: (hostParts[2] ? hostParts[2] : (req.connection && req.connection.encrypted ? 443 : 80))
      };
  };


  // Parse Content-Type header content

  exports.parseContentType = function (header) {

      if (!header) {
          return '';
      }

      return header.split(';')[0].trim().toLowerCase();
  };


  // Convert node's  to request configuration object

  exports.parseRequest = function (req, options) {

      if (!req.headers) {
          return req;
      }

      // Obtain host and port information

      var host;
      if (!options.host ||
          !options.port) {

          host = exports.parseHost(req, options.hostHeaderName);
          if (!host) {
              return new Error('Invalid Host header');
          }
      }

      var request = {
          method: req.method,
          url: req.url,
          host: options.host || host.name,
          port: options.port || host.port,
          authorization: req.headers.authorization,
          contentType: req.headers['content-type'] || ''
      };

      return request;
  };


  exports.now = function (localtimeOffsetMsec) {

      return lib$2.now() + (localtimeOffsetMsec || 0);
  };


  exports.nowSecs = function (localtimeOffsetMsec) {

      return Math.floor(exports.now(localtimeOffsetMsec) / 1000);
  };


  internals.authHeaderRegex = /^(\w+)(?:\s+(.*))?$/;                                      // Header: scheme[ something]
  internals.attributeRegex = /^[ \w\!#\$%&'\(\)\*\+,\-\.\/\:;<\=>\?@\[\]\^`\{\|\}~]+$/;   // !#$%&'()*+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9


  // Parse Hawk HTTP Authorization header

  exports.parseAuthorizationHeader = function (header, keys) {

      keys = keys || ['id', 'ts', 'nonce', 'hash', 'ext', 'mac', 'app', 'dlg'];

      if (!header) {
          return lib$1.unauthorized(null, 'Hawk');
      }

      if (header.length > exports.limits.maxMatchLength) {
          return lib$1.badRequest('Header length too long');
      }

      var headerParts = header.match(internals.authHeaderRegex);
      if (!headerParts) {
          return lib$1.badRequest('Invalid header syntax');
      }

      var scheme = headerParts[1];
      if (scheme.toLowerCase() !== 'hawk') {
          return lib$1.unauthorized(null, 'Hawk');
      }

      var attributesString = headerParts[2];
      if (!attributesString) {
          return lib$1.badRequest('Invalid header syntax');
      }

      var attributes = {};
      var errorMessage = '';
      var verify = attributesString.replace(/(\w+)="([^"\\]*)"\s*(?:,\s*|$)/g, function ($0, $1, $2) {

          // Check valid attribute names

          if (keys.indexOf($1) === -1) {
              errorMessage = 'Unknown attribute: ' + $1;
              return;
          }

          // Allowed attribute value characters

          if ($2.match(internals.attributeRegex) === null) {
              errorMessage = 'Bad attribute value: ' + $1;
              return;
          }

          // Check for duplicates

          if (attributes.hasOwnProperty($1)) {
              errorMessage = 'Duplicate attribute: ' + $1;
              return;
          }

          attributes[$1] = $2;
          return '';
      });

      if (verify !== '') {
          return lib$1.badRequest(errorMessage || 'Bad header format');
      }

      return attributes;
  };


  exports.unauthorized = function (message, attributes) {

      return lib$1.unauthorized(message || null, 'Hawk', attributes);
  };
  });
  var utils_1 = utils.version;
  var utils_2 = utils.limits;
  var utils_3 = utils.parseHost;
  var utils_4 = utils.parseContentType;
  var utils_5 = utils.parseRequest;
  var utils_6 = utils.now;
  var utils_7 = utils.nowSecs;
  var utils_8 = utils.parseAuthorizationHeader;
  var utils_9 = utils.unauthorized;

  var crypto = createCommonjsModule(function (module, exports) {


  // MAC normalization format version

  exports.headerVersion = '1';                        // Prevent comparison of mac values generated with different normalized string formats


  // Supported HMAC algorithms

  exports.algorithms = ['sha1', 'sha256'];


  // Calculate the request MAC

  /*
      type: 'header',                                 // 'header', 'bewit', 'response'
      credentials: {
          key: 'aoijedoaijsdlaksjdl',
          algorithm: 'sha256'                         // 'sha1', 'sha256'
      },
      options: {
          method: 'GET',
          resource: '/resource?a=1&b=2',
          host: 'example.com',
          port: 8080,
          ts: 1357718381034,
          nonce: 'd3d345f',
          hash: 'U4MKKSmiVxk37JCCrAVIjV/OhB3y+NdwoCr6RShbVkE=',
          ext: 'app-specific-data',
          app: 'hf48hd83qwkj',                        // Application id (Oz)
          dlg: 'd8djwekds9cj'                         // Delegated by application id (Oz), requires options.app
      }
  */

  exports.calculateMac = function (type, credentials, options) {

      var normalized = exports.generateNormalizedString(type, options);

      var hmac = tls.createHmac(credentials.algorithm, credentials.key).update(normalized);
      var digest = hmac.digest('base64');
      return digest;
  };


  exports.generateNormalizedString = function (type, options) {

      var resource = options.resource || '';
      if (resource &&
          resource[0] !== '/') {

          var url = url$2.parse(resource, false);
          resource = url.path;                        // Includes query
      }

      var normalized = 'hawk.' + exports.headerVersion + '.' + type + '\n' +
                       options.ts + '\n' +
                       options.nonce + '\n' +
                       (options.method || '').toUpperCase() + '\n' +
                       resource + '\n' +
                       options.host.toLowerCase() + '\n' +
                       options.port + '\n' +
                       (options.hash || '') + '\n';

      if (options.ext) {
          normalized = normalized + options.ext.replace('\\', '\\\\').replace('\n', '\\n');
      }

      normalized = normalized + '\n';

      if (options.app) {
          normalized = normalized + options.app + '\n' +
                                    (options.dlg || '') + '\n';
      }

      return normalized;
  };


  exports.calculatePayloadHash = function (payload, algorithm, contentType) {

      var hash = exports.initializePayloadHash(algorithm, contentType);
      hash.update(payload || '');
      return exports.finalizePayloadHash(hash);
  };


  exports.initializePayloadHash = function (algorithm, contentType) {

      var hash = tls.createHash(algorithm);
      hash.update('hawk.' + exports.headerVersion + '.payload\n');
      hash.update(utils.parseContentType(contentType) + '\n');
      return hash;
  };


  exports.finalizePayloadHash = function (hash) {

      hash.update('\n');
      return hash.digest('base64');
  };


  exports.calculateTsMac = function (ts, credentials) {

      var hmac = tls.createHmac(credentials.algorithm, credentials.key);
      hmac.update('hawk.' + exports.headerVersion + '.ts\n' + ts + '\n');
      return hmac.digest('base64');
  };


  exports.timestampMessage = function (credentials, localtimeOffsetMsec) {

      var now = utils.nowSecs(localtimeOffsetMsec);
      var tsm = exports.calculateTsMac(now, credentials);
      return { ts: now, tsm: tsm };
  };
  });
  var crypto_1 = crypto.headerVersion;
  var crypto_2 = crypto.algorithms;
  var crypto_3 = crypto.calculateMac;
  var crypto_4 = crypto.generateNormalizedString;
  var crypto_5 = crypto.calculatePayloadHash;
  var crypto_6 = crypto.initializePayloadHash;
  var crypto_7 = crypto.finalizePayloadHash;
  var crypto_8 = crypto.calculateTsMac;
  var crypto_9 = crypto.timestampMessage;

  // Load modules








  // Declare internals

  var internals$1 = {};


  // Hawk authentication

  /*
     req:                 node's HTTP request object or an object as follows:

                          const request = {
                              method: 'GET',
                              url: '/resource/4?a=1&b=2',
                              host: 'example.com',
                              port: 8080,
                              authorization: 'Hawk id="dh37fgj492je", ts="1353832234", nonce="j4h3g2", ext="some-app-ext-data", mac="6R4rV5iE+NPoym+WwjeHzjAGXUtLNIxmo1vpMofpLAE="'
                          };

     credentialsFunc:     required function to lookup the set of Hawk credentials based on the provided credentials id.
                          The credentials include the MAC key, MAC algorithm, and other attributes (such as username)
                          needed by the application. This function is the equivalent of verifying the username and
                          password in Basic authentication.

                          const credentialsFunc = function (id, callback) {

                              // Lookup credentials in database
                              db.lookup(id, function (err, item) {

                                  if (err || !item) {
                                      return callback(err);
                                  }

                                  const credentials = {
                                      // Required
                                      key: item.key,
                                      algorithm: item.algorithm,
                                      // Application specific
                                      user: item.user
                                  };

                                  return callback(null, credentials);
                              });
                          };

     options: {

          hostHeaderName:        optional header field name, used to override the default 'Host' header when used
                                 behind a cache of a proxy. Apache2 changes the value of the 'Host' header while preserving
                                 the original (which is what the module must verify) in the 'x-forwarded-host' header field.
                                 Only used when passed a node Http.ServerRequest object.

          nonceFunc:             optional nonce validation function. The function signature is function(key, nonce, ts, callback)
                                 where 'callback' must be called using the signature function(err).

          timestampSkewSec:      optional number of seconds of permitted clock skew for incoming timestamps. Defaults to 60 seconds.
                                 Provides a +/- skew which means actual allowed window is double the number of seconds.

          localtimeOffsetMsec:   optional local clock time offset express in a number of milliseconds (positive or negative).
                                 Defaults to 0.

          payload:               optional payload for validation. The client calculates the hash value and includes it via the 'hash'
                                 header attribute. The server always ensures the value provided has been included in the request
                                 MAC. When this option is provided, it validates the hash value itself. Validation is done by calculating
                                 a hash value over the entire payload (assuming it has already be normalized to the same format and
                                 encoding used by the client to calculate the hash on request). If the payload is not available at the time
                                 of authentication, the authenticatePayload() method can be used by passing it the credentials and
                                 attributes.hash returned in the authenticate callback.

          host:                  optional host name override. Only used when passed a node request object.
          port:                  optional port override. Only used when passed a node request object.
      }

      callback: function (err, credentials, artifacts) { }
   */

  var authenticate = function (req, credentialsFunc, options, callback) {

      callback = lib.nextTick(callback);

      // Default options

      options.nonceFunc = options.nonceFunc || internals$1.nonceFunc;
      options.timestampSkewSec = options.timestampSkewSec || 60;                                                  // 60 seconds

      // Application time

      var now = utils.now(options.localtimeOffsetMsec);                           // Measure now before any other processing

      // Convert node Http request object to a request configuration object

      var request = utils.parseRequest(req, options);
      if (request instanceof Error) {
          return callback(lib$1.badRequest(request.message));
      }

      // Parse HTTP Authorization header

      var attributes = utils.parseAuthorizationHeader(request.authorization);
      if (attributes instanceof Error) {
          return callback(attributes);
      }

      // Construct artifacts container

      var artifacts = {
          method: request.method,
          host: request.host,
          port: request.port,
          resource: request.url,
          ts: attributes.ts,
          nonce: attributes.nonce,
          hash: attributes.hash,
          ext: attributes.ext,
          app: attributes.app,
          dlg: attributes.dlg,
          mac: attributes.mac,
          id: attributes.id
      };

      // Verify required header attributes

      if (!attributes.id ||
          !attributes.ts ||
          !attributes.nonce ||
          !attributes.mac) {

          return callback(lib$1.badRequest('Missing attributes'), null, artifacts);
      }

      // Fetch Hawk credentials

      credentialsFunc(attributes.id, function (err, credentials) {

          if (err) {
              return callback(err, credentials || null, artifacts);
          }

          if (!credentials) {
              return callback(utils.unauthorized('Unknown credentials'), null, artifacts);
          }

          if (!credentials.key ||
              !credentials.algorithm) {

              return callback(lib$1.internal('Invalid credentials'), credentials, artifacts);
          }

          if (crypto.algorithms.indexOf(credentials.algorithm) === -1) {
              return callback(lib$1.internal('Unknown algorithm'), credentials, artifacts);
          }

          // Calculate MAC

          var mac = crypto.calculateMac('header', credentials, artifacts);
          if (!lib$4.fixedTimeComparison(mac, attributes.mac)) {
              return callback(utils.unauthorized('Bad mac'), credentials, artifacts);
          }

          // Check payload hash

          if (options.payload ||
              options.payload === '') {

              if (!attributes.hash) {
                  return callback(utils.unauthorized('Missing required payload hash'), credentials, artifacts);
              }

              var hash = crypto.calculatePayloadHash(options.payload, credentials.algorithm, request.contentType);
              if (!lib$4.fixedTimeComparison(hash, attributes.hash)) {
                  return callback(utils.unauthorized('Bad payload hash'), credentials, artifacts);
              }
          }

          // Check nonce

          options.nonceFunc(credentials.key, attributes.nonce, attributes.ts, function (err) {

              if (err) {
                  return callback(utils.unauthorized('Invalid nonce'), credentials, artifacts);
              }

              // Check timestamp staleness

              if (Math.abs((attributes.ts * 1000) - now) > (options.timestampSkewSec * 1000)) {
                  var tsm = crypto.timestampMessage(credentials, options.localtimeOffsetMsec);
                  return callback(utils.unauthorized('Stale timestamp', tsm), credentials, artifacts);
              }

              // Successful authentication

              return callback(null, credentials, artifacts);
          });
      });
  };


  // Authenticate payload hash - used when payload cannot be provided during authenticate()

  /*
      payload:        raw request payload
      credentials:    from authenticate callback
      artifacts:      from authenticate callback
      contentType:    req.headers['content-type']
  */

  var authenticatePayload = function (payload, credentials, artifacts, contentType) {

      var calculatedHash = crypto.calculatePayloadHash(payload, credentials.algorithm, contentType);
      return lib$4.fixedTimeComparison(calculatedHash, artifacts.hash);
  };


  // Authenticate payload hash - used when payload cannot be provided during authenticate()

  /*
      calculatedHash: the payload hash calculated using Crypto.calculatePayloadHash()
      artifacts:      from authenticate callback
  */

  var authenticatePayloadHash = function (calculatedHash, artifacts) {

      return lib$4.fixedTimeComparison(calculatedHash, artifacts.hash);
  };


  // Generate a Server-Authorization header for a given response

  /*
      credentials: {},                                        // Object received from authenticate()
      artifacts: {}                                           // Object received from authenticate(); 'mac', 'hash', and 'ext' - ignored
      options: {
          ext: 'application-specific',                        // Application specific data sent via the ext attribute
          payload: '{"some":"payload"}',                      // UTF-8 encoded string for body hash generation (ignored if hash provided)
          contentType: 'application/json',                    // Payload content-type (ignored if hash provided)
          hash: 'U4MKKSmiVxk37JCCrAVIjV='                     // Pre-calculated payload hash
      }
  */

  var header = function (credentials, artifacts, options) {

      // Prepare inputs

      options = options || {};

      if (!artifacts ||
          typeof artifacts !== 'object' ||
          typeof options !== 'object') {

          return '';
      }

      artifacts = lib.clone(artifacts);
      delete artifacts.mac;
      artifacts.hash = options.hash;
      artifacts.ext = options.ext;

      // Validate credentials

      if (!credentials ||
          !credentials.key ||
          !credentials.algorithm) {

          // Invalid credential object
          return '';
      }

      if (crypto.algorithms.indexOf(credentials.algorithm) === -1) {
          return '';
      }

      // Calculate payload hash

      if (!artifacts.hash &&
          (options.payload || options.payload === '')) {

          artifacts.hash = crypto.calculatePayloadHash(options.payload, credentials.algorithm, options.contentType);
      }

      var mac = crypto.calculateMac('response', credentials, artifacts);

      // Construct header

      var header = 'Hawk mac="' + mac + '"' +
                   (artifacts.hash ? ', hash="' + artifacts.hash + '"' : '');

      if (artifacts.ext !== null &&
          artifacts.ext !== undefined &&
          artifacts.ext !== '') {                       // Other falsey values allowed

          header = header + ', ext="' + lib.escapeHeaderAttribute(artifacts.ext) + '"';
      }

      return header;
  };


  /*
   * Arguments and options are the same as authenticate() with the exception that the only supported options are:
   * 'hostHeaderName', 'localtimeOffsetMsec', 'host', 'port'
   */


  //                       1     2             3           4
  internals$1.bewitRegex = /^(\/.*)([\?&])bewit\=([^&$]*)(?:&(.+))?$/;


  var authenticateBewit = function (req, credentialsFunc, options, callback) {

      callback = lib.nextTick(callback);

      // Application time

      var now = utils.now(options.localtimeOffsetMsec);

      // Convert node Http request object to a request configuration object

      var request = utils.parseRequest(req, options);
      if (request instanceof Error) {
          return callback(lib$1.badRequest(request.message));
      }

      // Extract bewit

      if (request.url.length > utils.limits.maxMatchLength) {
          return callback(lib$1.badRequest('Resource path exceeds max length'));
      }

      var resource = request.url.match(internals$1.bewitRegex);
      if (!resource) {
          return callback(utils.unauthorized());
      }

      // Bewit not empty

      if (!resource[3]) {
          return callback(utils.unauthorized('Empty bewit'));
      }

      // Verify method is GET

      if (request.method !== 'GET' &&
          request.method !== 'HEAD') {

          return callback(utils.unauthorized('Invalid method'));
      }

      // No other authentication

      if (request.authorization) {
          return callback(lib$1.badRequest('Multiple authentications'));
      }

      // Parse bewit

      var bewitString = lib.base64urlDecode(resource[3]);
      if (bewitString instanceof Error) {
          return callback(lib$1.badRequest('Invalid bewit encoding'));
      }

      // Bewit format: id\exp\mac\ext ('\' is used because it is a reserved header attribute character)

      var bewitParts = bewitString.split('\\');
      if (bewitParts.length !== 4) {
          return callback(lib$1.badRequest('Invalid bewit structure'));
      }

      var bewit = {
          id: bewitParts[0],
          exp: parseInt(bewitParts[1], 10),
          mac: bewitParts[2],
          ext: bewitParts[3] || ''
      };

      if (!bewit.id ||
          !bewit.exp ||
          !bewit.mac) {

          return callback(lib$1.badRequest('Missing bewit attributes'));
      }

      // Construct URL without bewit

      var url = resource[1];
      if (resource[4]) {
          url = url + resource[2] + resource[4];
      }

      // Check expiration

      if (bewit.exp * 1000 <= now) {
          return callback(utils.unauthorized('Access expired'), null, bewit);
      }

      // Fetch Hawk credentials

      credentialsFunc(bewit.id, function (err, credentials) {

          if (err) {
              return callback(err, credentials || null, bewit.ext);
          }

          if (!credentials) {
              return callback(utils.unauthorized('Unknown credentials'), null, bewit);
          }

          if (!credentials.key ||
              !credentials.algorithm) {

              return callback(lib$1.internal('Invalid credentials'), credentials, bewit);
          }

          if (crypto.algorithms.indexOf(credentials.algorithm) === -1) {
              return callback(lib$1.internal('Unknown algorithm'), credentials, bewit);
          }

          // Calculate MAC

          var mac = crypto.calculateMac('bewit', credentials, {
              ts: bewit.exp,
              nonce: '',
              method: 'GET',
              resource: url,
              host: request.host,
              port: request.port,
              ext: bewit.ext
          });

          if (!lib$4.fixedTimeComparison(mac, bewit.mac)) {
              return callback(utils.unauthorized('Bad mac'), credentials, bewit);
          }

          // Successful authentication

          return callback(null, credentials, bewit);
      });
  };


  /*
   *  options are the same as authenticate() with the exception that the only supported options are:
   * 'nonceFunc', 'timestampSkewSec', 'localtimeOffsetMsec'
   */

  var authenticateMessage = function (host, port, message, authorization, credentialsFunc, options, callback) {

      callback = lib.nextTick(callback);

      // Default options

      options.nonceFunc = options.nonceFunc || internals$1.nonceFunc;
      options.timestampSkewSec = options.timestampSkewSec || 60;                                                  // 60 seconds

      // Application time

      var now = utils.now(options.localtimeOffsetMsec);                       // Measure now before any other processing

      // Validate authorization

      if (!authorization.id ||
          !authorization.ts ||
          !authorization.nonce ||
          !authorization.hash ||
          !authorization.mac) {

          return callback(lib$1.badRequest('Invalid authorization'));
      }

      // Fetch Hawk credentials

      credentialsFunc(authorization.id, function (err, credentials) {

          if (err) {
              return callback(err, credentials || null);
          }

          if (!credentials) {
              return callback(utils.unauthorized('Unknown credentials'));
          }

          if (!credentials.key ||
              !credentials.algorithm) {

              return callback(lib$1.internal('Invalid credentials'), credentials);
          }

          if (crypto.algorithms.indexOf(credentials.algorithm) === -1) {
              return callback(lib$1.internal('Unknown algorithm'), credentials);
          }

          // Construct artifacts container

          var artifacts = {
              ts: authorization.ts,
              nonce: authorization.nonce,
              host: host,
              port: port,
              hash: authorization.hash
          };

          // Calculate MAC

          var mac = crypto.calculateMac('message', credentials, artifacts);
          if (!lib$4.fixedTimeComparison(mac, authorization.mac)) {
              return callback(utils.unauthorized('Bad mac'), credentials);
          }

          // Check payload hash

          var hash = crypto.calculatePayloadHash(message, credentials.algorithm);
          if (!lib$4.fixedTimeComparison(hash, authorization.hash)) {
              return callback(utils.unauthorized('Bad message hash'), credentials);
          }

          // Check nonce

          options.nonceFunc(credentials.key, authorization.nonce, authorization.ts, function (err) {

              if (err) {
                  return callback(utils.unauthorized('Invalid nonce'), credentials);
              }

              // Check timestamp staleness

              if (Math.abs((authorization.ts * 1000) - now) > (options.timestampSkewSec * 1000)) {
                  return callback(utils.unauthorized('Stale timestamp'), credentials);
              }

              // Successful authentication

              return callback(null, credentials);
          });
      });
  };


  internals$1.nonceFunc = function (key, nonce, ts, nonceCallback) {

      return nonceCallback();         // No validation
  };

  var server = {
  	authenticate: authenticate,
  	authenticatePayload: authenticatePayload,
  	authenticatePayloadHash: authenticatePayloadHash,
  	header: header,
  	authenticateBewit: authenticateBewit,
  	authenticateMessage: authenticateMessage
  };

  // Generate an Authorization header for a given request

  /*
      uri: 'http://example.com/resource?a=b' or object from Url.parse()
      method: HTTP verb (e.g. 'GET', 'POST')
      options: {

          // Required

          credentials: {
              id: 'dh37fgj492je',
              key: 'aoijedoaijsdlaksjdl',
              algorithm: 'sha256'                                 // 'sha1', 'sha256'
          },

          // Optional

          ext: 'application-specific',                        // Application specific data sent via the ext attribute
          timestamp: Date.now() / 1000,                       // A pre-calculated timestamp in seconds
          nonce: '2334f34f',                                  // A pre-generated nonce
          localtimeOffsetMsec: 400,                           // Time offset to sync with server time (ignored if timestamp provided)
          payload: '{"some":"payload"}',                      // UTF-8 encoded string for body hash generation (ignored if hash provided)
          contentType: 'application/json',                    // Payload content-type (ignored if hash provided)
          hash: 'U4MKKSmiVxk37JCCrAVIjV=',                    // Pre-calculated payload hash
          app: '24s23423f34dx',                               // Oz application id
          dlg: '234sz34tww3sd'                                // Oz delegated-by application id
      }
  */

  var header$1 = function (uri, method, options) {

      var result = {
          field: '',
          artifacts: {}
      };

      // Validate inputs

      if (!uri || (typeof uri !== 'string' && typeof uri !== 'object') ||
          !method || typeof method !== 'string' ||
          !options || typeof options !== 'object') {

          result.err = 'Invalid argument type';
          return result;
      }

      // Application time

      var timestamp = options.timestamp || utils.nowSecs(options.localtimeOffsetMsec);

      // Validate credentials

      var credentials = options.credentials;
      if (!credentials ||
          !credentials.id ||
          !credentials.key ||
          !credentials.algorithm) {

          result.err = 'Invalid credential object';
          return result;
      }

      if (crypto.algorithms.indexOf(credentials.algorithm) === -1) {
          result.err = 'Unknown algorithm';
          return result;
      }

      // Parse URI

      if (typeof uri === 'string') {
          uri = url$2.parse(uri);
      }

      // Calculate signature

      var artifacts = {
          ts: timestamp,
          nonce: options.nonce || lib$4.randomString(6),
          method: method,
          resource: uri.pathname + (uri.search || ''),                            // Maintain trailing '?'
          host: uri.hostname,
          port: uri.port || (uri.protocol === 'http:' ? 80 : 443),
          hash: options.hash,
          ext: options.ext,
          app: options.app,
          dlg: options.dlg
      };

      result.artifacts = artifacts;

      // Calculate payload hash

      if (!artifacts.hash &&
          (options.payload || options.payload === '')) {

          artifacts.hash = crypto.calculatePayloadHash(options.payload, credentials.algorithm, options.contentType);
      }

      var mac = crypto.calculateMac('header', credentials, artifacts);

      // Construct header

      var hasExt = artifacts.ext !== null && artifacts.ext !== undefined && artifacts.ext !== '';       // Other falsey values allowed
      var header = 'Hawk id="' + credentials.id +
                   '", ts="' + artifacts.ts +
                   '", nonce="' + artifacts.nonce +
                   (artifacts.hash ? '", hash="' + artifacts.hash : '') +
                   (hasExt ? '", ext="' + lib.escapeHeaderAttribute(artifacts.ext) : '') +
                   '", mac="' + mac + '"';

      if (artifacts.app) {
          header = header + ', app="' + artifacts.app +
                    (artifacts.dlg ? '", dlg="' + artifacts.dlg : '') + '"';
      }

      result.field = header;

      return result;
  };


  // Validate server response

  /*
      res:        node's response object
      artifacts:  object received from header().artifacts
      options: {
          payload:    optional payload received
          required:   specifies if a Server-Authorization header is required. Defaults to 'false'
      }
  */

  var authenticate$1 = function (res, credentials, artifacts, options, callback) {

      artifacts = lib.clone(artifacts);
      options = options || {};

      var wwwAttributes = null;
      var serverAuthAttributes = null;

      var finalize = function (err) {

          if (callback) {
              var headers = {
                  'www-authenticate': wwwAttributes,
                  'server-authorization': serverAuthAttributes
              };

              return callback(err, headers);
          }

          return !err;
      };

      if (res.headers['www-authenticate']) {

          // Parse HTTP WWW-Authenticate header

          wwwAttributes = utils.parseAuthorizationHeader(res.headers['www-authenticate'], ['ts', 'tsm', 'error']);
          if (wwwAttributes instanceof Error) {
              wwwAttributes = null;
              return finalize(new Error('Invalid WWW-Authenticate header'));
          }

          // Validate server timestamp (not used to update clock since it is done via the SNPT client)

          if (wwwAttributes.ts) {
              var tsm = crypto.calculateTsMac(wwwAttributes.ts, credentials);
              if (tsm !== wwwAttributes.tsm) {
                  return finalize(new Error('Invalid server timestamp hash'));
              }
          }
      }

      // Parse HTTP Server-Authorization header

      if (!res.headers['server-authorization'] &&
          !options.required) {

          return finalize();
      }

      serverAuthAttributes = utils.parseAuthorizationHeader(res.headers['server-authorization'], ['mac', 'ext', 'hash']);
      if (serverAuthAttributes instanceof Error) {
          serverAuthAttributes = null;
          return finalize(new Error('Invalid Server-Authorization header'));
      }

      artifacts.ext = serverAuthAttributes.ext;
      artifacts.hash = serverAuthAttributes.hash;

      var mac = crypto.calculateMac('response', credentials, artifacts);
      if (mac !== serverAuthAttributes.mac) {
          return finalize(new Error('Bad response mac'));
      }

      if (!options.payload &&
          options.payload !== '') {

          return finalize();
      }

      if (!serverAuthAttributes.hash) {
          return finalize(new Error('Missing response hash attribute'));
      }

      var calculatedHash = crypto.calculatePayloadHash(options.payload, credentials.algorithm, res.headers['content-type']);
      if (calculatedHash !== serverAuthAttributes.hash) {
          return finalize(new Error('Bad response payload mac'));
      }

      return finalize();
  };


  // Generate a bewit value for a given URI

  /*
      uri: 'http://example.com/resource?a=b' or object from Url.parse()
      options: {

          // Required

          credentials: {
              id: 'dh37fgj492je',
              key: 'aoijedoaijsdlaksjdl',
              algorithm: 'sha256'                             // 'sha1', 'sha256'
          },
          ttlSec: 60 * 60,                                    // TTL in seconds

          // Optional

          ext: 'application-specific',                        // Application specific data sent via the ext attribute
          localtimeOffsetMsec: 400                            // Time offset to sync with server time
      };
  */

  var getBewit = function (uri, options) {

      // Validate inputs

      if (!uri ||
          (typeof uri !== 'string' && typeof uri !== 'object') ||
          !options ||
          typeof options !== 'object' ||
          !options.ttlSec) {

          return '';
      }

      options.ext = (options.ext === null || options.ext === undefined ? '' : options.ext);       // Zero is valid value

      // Application time

      var now = utils.now(options.localtimeOffsetMsec);

      // Validate credentials

      var credentials = options.credentials;
      if (!credentials ||
          !credentials.id ||
          !credentials.key ||
          !credentials.algorithm) {

          return '';
      }

      if (crypto.algorithms.indexOf(credentials.algorithm) === -1) {
          return '';
      }

      // Parse URI

      if (typeof uri === 'string') {
          uri = url$2.parse(uri);
      }

      // Calculate signature

      var exp = Math.floor(now / 1000) + options.ttlSec;
      var mac = crypto.calculateMac('bewit', credentials, {
          ts: exp,
          nonce: '',
          method: 'GET',
          resource: uri.pathname + (uri.search || ''),                            // Maintain trailing '?'
          host: uri.hostname,
          port: uri.port || (uri.protocol === 'http:' ? 80 : 443),
          ext: options.ext
      });

      // Construct bewit: id\exp\mac\ext

      var bewit = credentials.id + '\\' + exp + '\\' + mac + '\\' + options.ext;
      return lib.base64urlEncode(bewit);
  };


  // Generate an authorization string for a message

  /*
      host: 'example.com',
      port: 8000,
      message: '{"some":"payload"}',                          // UTF-8 encoded string for body hash generation
      options: {

          // Required

          credentials: {
              id: 'dh37fgj492je',
              key: 'aoijedoaijsdlaksjdl',
              algorithm: 'sha256'                             // 'sha1', 'sha256'
          },

          // Optional

          timestamp: Date.now() / 1000,                       // A pre-calculated timestamp in seconds
          nonce: '2334f34f',                                  // A pre-generated nonce
          localtimeOffsetMsec: 400,                           // Time offset to sync with server time (ignored if timestamp provided)
      }
  */

  var message = function (host, port, message, options) {

      // Validate inputs

      if (!host || typeof host !== 'string' ||
          !port || typeof port !== 'number' ||
          message === null || message === undefined || typeof message !== 'string' ||
          !options || typeof options !== 'object') {

          return null;
      }

      // Application time

      var timestamp = options.timestamp || utils.nowSecs(options.localtimeOffsetMsec);

      // Validate credentials

      var credentials = options.credentials;
      if (!credentials ||
          !credentials.id ||
          !credentials.key ||
          !credentials.algorithm) {

          // Invalid credential object
          return null;
      }

      if (crypto.algorithms.indexOf(credentials.algorithm) === -1) {
          return null;
      }

      // Calculate signature

      var artifacts = {
          ts: timestamp,
          nonce: options.nonce || lib$4.randomString(6),
          host: host,
          port: port,
          hash: crypto.calculatePayloadHash(message, credentials.algorithm)
      };

      // Construct authorization

      var result = {
          id: credentials.id,
          ts: artifacts.ts,
          nonce: artifacts.nonce,
          hash: artifacts.hash,
          mac: crypto.calculateMac('message', credentials, artifacts)
      };

      return result;
  };

  var client = {
  	header: header$1,
  	authenticate: authenticate$1,
  	getBewit: getBewit,
  	message: message
  };

  var lib$5 = createCommonjsModule(function (module, exports) {

  // Export sub-modules

  exports.error = exports.Error = lib$1;
  exports.sntp = lib$2;

  exports.server = server;
  exports.client = client;
  exports.crypto = crypto;
  exports.utils = utils;

  exports.uri = {
      authenticate: exports.server.authenticateBewit,
      getBewit: exports.client.getBewit
  };
  });
  var lib_1$5 = lib$5.error;
  var lib_2$5 = lib$5.Error;
  var lib_3$5 = lib$5.sntp;
  var lib_4$5 = lib$5.server;
  var lib_5$4 = lib$5.client;
  var lib_6$4 = lib$5.crypto;
  var lib_7$3 = lib$5.utils;
  var lib_8$3 = lib$5.uri;

  /*!
   *  Copyright 2010 LearnBoost <dev@learnboost.com>
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Module dependencies.
   */

  var parse$4 = url$2.parse
    ;

  /**
   * Valid keys.
   */

  var keys$1 = 
    [ 'acl'
    , 'location'
    , 'logging'
    , 'notification'
    , 'partNumber'
    , 'policy'
    , 'requestPayment'
    , 'torrent'
    , 'uploadId'
    , 'uploads'
    , 'versionId'
    , 'versioning'
    , 'versions'
    , 'website'
    ];

  /**
   * Return an "Authorization" header value with the given `options`
   * in the form of "AWS <key>:<signature>"
   *
   * @param {Object} options
   * @return {String}
   * @api private
   */

  function authorization (options) {
    return 'AWS ' + options.key + ':' + sign(options)
  }

  var awsSign2 = authorization;
  var authorization_1 = authorization;

  /**
   * Simple HMAC-SHA1 Wrapper
   *
   * @param {Object} options
   * @return {String}
   * @api private
   */ 

  function hmacSha1 (options) {
    return tls.createHmac('sha1', options.secret).update(options.message).digest('base64')
  }

  var hmacSha1_1 = hmacSha1;

  /**
   * Create a base64 sha1 HMAC for `options`. 
   * 
   * @param {Object} options
   * @return {String}
   * @api private
   */

  function sign (options) {
    options.message = stringToSign(options);
    return hmacSha1(options)
  }
  var sign_1 = sign;

  /**
   * Create a base64 sha1 HMAC for `options`. 
   *
   * Specifically to be used with S3 presigned URLs
   * 
   * @param {Object} options
   * @return {String}
   * @api private
   */

  function signQuery (options) {
    options.message = queryStringToSign(options);
    return hmacSha1(options)
  }
  var signQuery_1= signQuery;

  /**
   * Return a string for sign() with the given `options`.
   *
   * Spec:
   * 
   *    <verb>\n
   *    <md5>\n
   *    <content-type>\n
   *    <date>\n
   *    [headers\n]
   *    <resource>
   *
   * @param {Object} options
   * @return {String}
   * @api private
   */

  function stringToSign (options) {
    var headers = options.amazonHeaders || '';
    if (headers) { headers += '\n'; }
    var r = 
      [ options.verb
      , options.md5
      , options.contentType
      , options.date ? options.date.toUTCString() : ''
      , headers + options.resource
      ];
    return r.join('\n')
  }
  var stringToSign_1 = stringToSign;

  /**
   * Return a string for sign() with the given `options`, but is meant exclusively
   * for S3 presigned URLs
   *
   * Spec:
   * 
   *    <date>\n
   *    <resource>
   *
   * @param {Object} options
   * @return {String}
   * @api private
   */

  function queryStringToSign (options){
    return 'GET\n\n\n' + options.date + '\n' + options.resource
  }
  var queryStringToSign_1 = queryStringToSign;

  /**
   * Perform the following:
   *
   *  - ignore non-amazon headers
   *  - lowercase fields
   *  - sort lexicographically
   *  - trim whitespace between ":"
   *  - join with newline
   *
   * @param {Object} headers
   * @return {String}
   * @api private
   */

  function canonicalizeHeaders (headers) {
    var buf = []
      , fields = Object.keys(headers)
      ;
    for (var i = 0, len = fields.length; i < len; ++i) {
      var field = fields[i]
        , val = headers[field]
        , field = field.toLowerCase()
        ;
      if (0 !== field.indexOf('x-amz')) { continue }
      buf.push(field + ':' + val);
    }
    return buf.sort().join('\n')
  }
  var canonicalizeHeaders_1 = canonicalizeHeaders;

  /**
   * Perform the following:
   *
   *  - ignore non sub-resources
   *  - sort lexicographically
   *
   * @param {String} resource
   * @return {String}
   * @api private
   */

  function canonicalizeResource (resource) {
    var url = parse$4(resource, true)
      , path = url.pathname
      , buf = []
      ;

    Object.keys(url.query).forEach(function(key){
      if (!~keys$1.indexOf(key)) { return }
      var val = '' == url.query[key] ? '' : '=' + encodeURIComponent(url.query[key]);
      buf.push(key + val);
    });

    return path + (buf.length ? '?' + buf.sort().join('&') : '')
  }
  var canonicalizeResource_1 = canonicalizeResource;
  awsSign2.authorization = authorization_1;
  awsSign2.hmacSha1 = hmacSha1_1;
  awsSign2.sign = sign_1;
  awsSign2.signQuery = signQuery_1;
  awsSign2.stringToSign = stringToSign_1;
  awsSign2.queryStringToSign = queryStringToSign_1;
  awsSign2.canonicalizeHeaders = canonicalizeHeaders_1;
  awsSign2.canonicalizeResource = canonicalizeResource_1;

  var lru = function(size) {
    return new LruCache(size)
  };

  function LruCache(size) {
    this.capacity = size | 0;
    this.map = Object.create(null);
    this.list = new DoublyLinkedList();
  }

  LruCache.prototype.get = function(key) {
    var node = this.map[key];
    if (node == null) { return undefined }
    this.used(node);
    return node.val
  };

  LruCache.prototype.set = function(key, val) {
    var node = this.map[key];
    if (node != null) {
      node.val = val;
    } else {
      if (!this.capacity) { this.prune(); }
      if (!this.capacity) { return false }
      node = new DoublyLinkedNode(key, val);
      this.map[key] = node;
      this.capacity--;
    }
    this.used(node);
    return true
  };

  LruCache.prototype.used = function(node) {
    this.list.moveToFront(node);
  };

  LruCache.prototype.prune = function() {
    var node = this.list.pop();
    if (node != null) {
      delete this.map[node.key];
      this.capacity++;
    }
  };


  function DoublyLinkedList() {
    this.firstNode = null;
    this.lastNode = null;
  }

  DoublyLinkedList.prototype.moveToFront = function(node) {
    if (this.firstNode == node) { return }

    this.remove(node);

    if (this.firstNode == null) {
      this.firstNode = node;
      this.lastNode = node;
      node.prev = null;
      node.next = null;
    } else {
      node.prev = null;
      node.next = this.firstNode;
      node.next.prev = node;
      this.firstNode = node;
    }
  };

  DoublyLinkedList.prototype.pop = function() {
    var lastNode = this.lastNode;
    if (lastNode != null) {
      this.remove(lastNode);
    }
    return lastNode
  };

  DoublyLinkedList.prototype.remove = function(node) {
    if (this.firstNode == node) {
      this.firstNode = node.next;
    } else if (node.prev != null) {
      node.prev.next = node.next;
    }
    if (this.lastNode == node) {
      this.lastNode = node.prev;
    } else if (node.next != null) {
      node.next.prev = node.prev;
    }
  };


  function DoublyLinkedNode(key, val) {
    this.key = key;
    this.val = val;
    this.prev = null;
    this.next = null;
  }

  var qs$2 = ( qs$1 && qs ) || qs$1;

  var aws4_1 = createCommonjsModule(function (module, exports) {
  var aws4 = exports,
      credentialsCache = lru(1000);

  // http://docs.amazonwebservices.com/general/latest/gr/signature-version-4.html

  function hmac(key, string, encoding) {
    return tls.createHmac('sha256', key).update(string, 'utf8').digest(encoding)
  }

  function hash(string, encoding) {
    return tls.createHash('sha256').update(string, 'utf8').digest(encoding)
  }

  // This function assumes the string has already been percent encoded
  function encodeRfc3986(urlEncodedString) {
    return urlEncodedString.replace(/[!'()*]/g, function(c) {
      return '%' + c.charCodeAt(0).toString(16).toUpperCase()
    })
  }

  // request: { path | body, [host], [method], [headers], [service], [region] }
  // credentials: { accessKeyId, secretAccessKey, [sessionToken] }
  function RequestSigner(request, credentials) {

    if (typeof request === 'string') { request = url$2.parse(request); }

    var headers = request.headers = (request.headers || {}),
        hostParts = this.matchHost(request.hostname || request.host || headers.Host || headers.host);

    this.request = request;
    this.credentials = credentials || this.defaultCredentials();

    this.service = request.service || hostParts[0] || '';
    this.region = request.region || hostParts[1] || 'us-east-1';

    // SES uses a different domain from the service name
    if (this.service === 'email') { this.service = 'ses'; }

    if (!request.method && request.body)
      { request.method = 'POST'; }

    if (!headers.Host && !headers.host) {
      headers.Host = request.hostname || request.host || this.createHost();

      // If a port is specified explicitly, use it as is
      if (request.port)
        { headers.Host += ':' + request.port; }
    }
    if (!request.hostname && !request.host)
      { request.hostname = headers.Host || headers.host; }

    this.isCodeCommitGit = this.service === 'codecommit' && request.method === 'GIT';
  }

  RequestSigner.prototype.matchHost = function(host) {
    var match = (host || '').match(/([^\.]+)\.(?:([^\.]*)\.)?amazonaws\.com$/);
    var hostParts = (match || []).slice(1, 3);

    // ES's hostParts are sometimes the other way round, if the value that is expected
    // to be region equals ‘es’ switch them back
    // e.g. search-cluster-name-aaaa00aaaa0aaa0aaaaaaa0aaa.us-east-1.es.amazonaws.com
    if (hostParts[1] === 'es')
      { hostParts = hostParts.reverse(); }

    return hostParts
  };

  // http://docs.aws.amazon.com/general/latest/gr/rande.html
  RequestSigner.prototype.isSingleRegion = function() {
    // Special case for S3 and SimpleDB in us-east-1
    if (['s3', 'sdb'].indexOf(this.service) >= 0 && this.region === 'us-east-1') { return true }

    return ['cloudfront', 'ls', 'route53', 'iam', 'importexport', 'sts']
      .indexOf(this.service) >= 0
  };

  RequestSigner.prototype.createHost = function() {
    var region = this.isSingleRegion() ? '' :
          (this.service === 's3' && this.region !== 'us-east-1' ? '-' : '.') + this.region,
        service = this.service === 'ses' ? 'email' : this.service;
    return service + region + '.amazonaws.com'
  };

  RequestSigner.prototype.prepareRequest = function() {
    this.parsePath();

    var request = this.request, headers = request.headers, query;

    if (request.signQuery) {

      this.parsedPath.query = query = this.parsedPath.query || {};

      if (this.credentials.sessionToken)
        { query['X-Amz-Security-Token'] = this.credentials.sessionToken; }

      if (this.service === 's3' && !query['X-Amz-Expires'])
        { query['X-Amz-Expires'] = 86400; }

      if (query['X-Amz-Date'])
        { this.datetime = query['X-Amz-Date']; }
      else
        { query['X-Amz-Date'] = this.getDateTime(); }

      query['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256';
      query['X-Amz-Credential'] = this.credentials.accessKeyId + '/' + this.credentialString();
      query['X-Amz-SignedHeaders'] = this.signedHeaders();

    } else {

      if (!request.doNotModifyHeaders && !this.isCodeCommitGit) {
        if (request.body && !headers['Content-Type'] && !headers['content-type'])
          { headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8'; }

        if (request.body && !headers['Content-Length'] && !headers['content-length'])
          { headers['Content-Length'] = Buffer.byteLength(request.body); }

        if (this.credentials.sessionToken && !headers['X-Amz-Security-Token'] && !headers['x-amz-security-token'])
          { headers['X-Amz-Security-Token'] = this.credentials.sessionToken; }

        if (this.service === 's3' && !headers['X-Amz-Content-Sha256'] && !headers['x-amz-content-sha256'])
          { headers['X-Amz-Content-Sha256'] = hash(this.request.body || '', 'hex'); }

        if (headers['X-Amz-Date'] || headers['x-amz-date'])
          { this.datetime = headers['X-Amz-Date'] || headers['x-amz-date']; }
        else
          { headers['X-Amz-Date'] = this.getDateTime(); }
      }

      delete headers.Authorization;
      delete headers.authorization;
    }
  };

  RequestSigner.prototype.sign = function() {
    if (!this.parsedPath) { this.prepareRequest(); }

    if (this.request.signQuery) {
      this.parsedPath.query['X-Amz-Signature'] = this.signature();
    } else {
      this.request.headers.Authorization = this.authHeader();
    }

    this.request.path = this.formatPath();

    return this.request
  };

  RequestSigner.prototype.getDateTime = function() {
    if (!this.datetime) {
      var headers = this.request.headers,
        date = new Date(headers.Date || headers.date || new Date);

      this.datetime = date.toISOString().replace(/[:\-]|\.\d{3}/g, '');

      // Remove the trailing 'Z' on the timestamp string for CodeCommit git access
      if (this.isCodeCommitGit) { this.datetime = this.datetime.slice(0, -1); }
    }
    return this.datetime
  };

  RequestSigner.prototype.getDate = function() {
    return this.getDateTime().substr(0, 8)
  };

  RequestSigner.prototype.authHeader = function() {
    return [
      'AWS4-HMAC-SHA256 Credential=' + this.credentials.accessKeyId + '/' + this.credentialString(),
      'SignedHeaders=' + this.signedHeaders(),
      'Signature=' + this.signature() ].join(', ')
  };

  RequestSigner.prototype.signature = function() {
    var date = this.getDate(),
        cacheKey = [this.credentials.secretAccessKey, date, this.region, this.service].join(),
        kDate, kRegion, kService, kCredentials = credentialsCache.get(cacheKey);
    if (!kCredentials) {
      kDate = hmac('AWS4' + this.credentials.secretAccessKey, date);
      kRegion = hmac(kDate, this.region);
      kService = hmac(kRegion, this.service);
      kCredentials = hmac(kService, 'aws4_request');
      credentialsCache.set(cacheKey, kCredentials);
    }
    return hmac(kCredentials, this.stringToSign(), 'hex')
  };

  RequestSigner.prototype.stringToSign = function() {
    return [
      'AWS4-HMAC-SHA256',
      this.getDateTime(),
      this.credentialString(),
      hash(this.canonicalString(), 'hex') ].join('\n')
  };

  RequestSigner.prototype.canonicalString = function() {
    if (!this.parsedPath) { this.prepareRequest(); }

    var pathStr = this.parsedPath.path,
        query = this.parsedPath.query,
        headers = this.request.headers,
        queryStr = '',
        normalizePath = this.service !== 's3',
        decodePath = this.service === 's3' || this.request.doNotEncodePath,
        decodeSlashesInPath = this.service === 's3',
        firstValOnly = this.service === 's3',
        bodyHash;

    if (this.service === 's3' && this.request.signQuery) {
      bodyHash = 'UNSIGNED-PAYLOAD';
    } else if (this.isCodeCommitGit) {
      bodyHash = '';
    } else {
      bodyHash = headers['X-Amz-Content-Sha256'] || headers['x-amz-content-sha256'] ||
        hash(this.request.body || '', 'hex');
    }

    if (query) {
      queryStr = encodeRfc3986(qs$2.stringify(Object.keys(query).sort().reduce(function(obj, key) {
        if (!key) { return obj }
        obj[key] = !Array.isArray(query[key]) ? query[key] :
          (firstValOnly ? query[key][0] : query[key].slice().sort());
        return obj
      }, {})));
    }
    if (pathStr !== '/') {
      if (normalizePath) { pathStr = pathStr.replace(/\/{2,}/g, '/'); }
      pathStr = pathStr.split('/').reduce(function(path, piece) {
        if (normalizePath && piece === '..') {
          path.pop();
        } else if (!normalizePath || piece !== '.') {
          if (decodePath) { piece = qs$2.unescape(piece); }
          path.push(encodeRfc3986(qs$2.escape(piece)));
        }
        return path
      }, []).join('/');
      if (pathStr[0] !== '/') { pathStr = '/' + pathStr; }
      if (decodeSlashesInPath) { pathStr = pathStr.replace(/%2F/g, '/'); }
    }

    return [
      this.request.method || 'GET',
      pathStr,
      queryStr,
      this.canonicalHeaders() + '\n',
      this.signedHeaders(),
      bodyHash ].join('\n')
  };

  RequestSigner.prototype.canonicalHeaders = function() {
    var headers = this.request.headers;
    function trimAll(header) {
      return header.toString().trim().replace(/\s+/g, ' ')
    }
    return Object.keys(headers)
      .sort(function(a, b) { return a.toLowerCase() < b.toLowerCase() ? -1 : 1 })
      .map(function(key) { return key.toLowerCase() + ':' + trimAll(headers[key]) })
      .join('\n')
  };

  RequestSigner.prototype.signedHeaders = function() {
    return Object.keys(this.request.headers)
      .map(function(key) { return key.toLowerCase() })
      .sort()
      .join(';')
  };

  RequestSigner.prototype.credentialString = function() {
    return [
      this.getDate(),
      this.region,
      this.service,
      'aws4_request' ].join('/')
  };

  RequestSigner.prototype.defaultCredentials = function() {
    var env = process.env;
    return {
      accessKeyId: env.AWS_ACCESS_KEY_ID || env.AWS_ACCESS_KEY,
      secretAccessKey: env.AWS_SECRET_ACCESS_KEY || env.AWS_SECRET_KEY,
      sessionToken: env.AWS_SESSION_TOKEN,
    }
  };

  RequestSigner.prototype.parsePath = function() {
    var path = this.request.path || '/',
        queryIx = path.indexOf('?'),
        query = null;

    if (queryIx >= 0) {
      query = qs$2.parse(path.slice(queryIx + 1));
      path = path.slice(0, queryIx);
    }

    // S3 doesn't always encode characters > 127 correctly and
    // all services don't encode characters > 255 correctly
    // So if there are non-reserved chars (and it's not already all % encoded), just encode them all
    if (/[^0-9A-Za-z!'()*\-._~%/]/.test(path)) {
      path = path.split('/').map(function(piece) {
        return qs$2.escape(qs$2.unescape(piece))
      }).join('/');
    }

    this.parsedPath = {
      path: path,
      query: query,
    };
  };

  RequestSigner.prototype.formatPath = function() {
    var path = this.parsedPath.path,
        query = this.parsedPath.query;

    if (!query) { return path }

    // Services don't support empty query string keys
    if (query[''] != null) { delete query['']; }

    return path + '?' + encodeRfc3986(qs$2.stringify(query))
  };

  aws4.RequestSigner = RequestSigner;

  aws4.sign = function(request, credentials) {
    return new RequestSigner(request, credentials).sign()
  };
  });

  function compare(a, b) {
    if (a === b) {
      return 0;
    }

    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
      }
    }

    if (x < y) {
      return -1;
    }
    if (y < x) {
      return 1;
    }
    return 0;
  }
  var hasOwn$2 = Object.prototype.hasOwnProperty;

  var objectKeys$1 = Object.keys || function (obj) {
    var keys = [];
    for (var key in obj) {
      if (hasOwn$2.call(obj, key)) { keys.push(key); }
    }
    return keys;
  };
  var pSlice = Array.prototype.slice;
  var _functionsHaveNames;
  function functionsHaveNames() {
    if (typeof _functionsHaveNames !== 'undefined') {
      return _functionsHaveNames;
    }
    return _functionsHaveNames = (function () {
      return function foo() {}.name === 'foo';
    }());
  }
  function pToString (obj) {
    return Object.prototype.toString.call(obj);
  }
  function isView(arrbuf) {
    if (isBuffer$1(arrbuf)) {
      return false;
    }
    if (typeof global.ArrayBuffer !== 'function') {
      return false;
    }
    if (typeof ArrayBuffer.isView === 'function') {
      return ArrayBuffer.isView(arrbuf);
    }
    if (!arrbuf) {
      return false;
    }
    if (arrbuf instanceof DataView) {
      return true;
    }
    if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
      return true;
    }
    return false;
  }
  // 1. The assert module provides functions that throw
  // AssertionError's when particular conditions are not met. The
  // assert module must conform to the following interface.

  function assert$2(value, message) {
    if (!value) { fail(value, true, message, '==', ok); }
  }

  // 2. The AssertionError is defined in assert.
  // new assert.AssertionError({ message: message,
  //                             actual: actual,
  //                             expected: expected })

  var regex = /\s*function\s+([^\(\s]*)\s*/;
  // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
  function getName(func) {
    if (!isFunction(func)) {
      return;
    }
    if (functionsHaveNames()) {
      return func.name;
    }
    var str = func.toString();
    var match = str.match(regex);
    return match && match[1];
  }
  assert$2.AssertionError = AssertionError;
  function AssertionError(options) {
    this.name = 'AssertionError';
    this.actual = options.actual;
    this.expected = options.expected;
    this.operator = options.operator;
    if (options.message) {
      this.message = options.message;
      this.generatedMessage = false;
    } else {
      this.message = getMessage(this);
      this.generatedMessage = true;
    }
    var stackStartFunction = options.stackStartFunction || fail;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, stackStartFunction);
    } else {
      // non v8 browsers so we can have a stacktrace
      var err = new Error();
      if (err.stack) {
        var out = err.stack;

        // try to strip useless frames
        var fn_name = getName(stackStartFunction);
        var idx = out.indexOf('\n' + fn_name);
        if (idx >= 0) {
          // once we have located the function frame
          // we need to strip out everything before it (and its line)
          var next_line = out.indexOf('\n', idx + 1);
          out = out.substring(next_line + 1);
        }

        this.stack = out;
      }
    }
  }

  // assert.AssertionError instanceof Error
  inherits$1(AssertionError, Error);

  function truncate(s, n) {
    if (typeof s === 'string') {
      return s.length < n ? s : s.slice(0, n);
    } else {
      return s;
    }
  }
  function inspect$1(something) {
    if (functionsHaveNames() || !isFunction(something)) {
      return inspect(something);
    }
    var rawname = getName(something);
    var name = rawname ? ': ' + rawname : '';
    return '[Function' +  name + ']';
  }
  function getMessage(self) {
    return truncate(inspect$1(self.actual), 128) + ' ' +
           self.operator + ' ' +
           truncate(inspect$1(self.expected), 128);
  }

  // At present only the three keys mentioned above are used and
  // understood by the spec. Implementations or sub modules can pass
  // other keys to the AssertionError's constructor - they will be
  // ignored.

  // 3. All of the following functions must throw an AssertionError
  // when a corresponding condition is not met, with a message that
  // may be undefined if not provided.  All assertion methods provide
  // both the actual and expected values to the assertion error for
  // display purposes.

  function fail(actual, expected, message, operator, stackStartFunction) {
    throw new AssertionError({
      message: message,
      actual: actual,
      expected: expected,
      operator: operator,
      stackStartFunction: stackStartFunction
    });
  }

  // EXTENSION! allows for well behaved errors defined elsewhere.
  assert$2.fail = fail;

  // 4. Pure assertion tests whether a value is truthy, as determined
  // by !!guard.
  // assert.ok(guard, message_opt);
  // This statement is equivalent to assert.equal(true, !!guard,
  // message_opt);. To test strictly for the value true, use
  // assert.strictEqual(true, guard, message_opt);.

  function ok(value, message) {
    if (!value) { fail(value, true, message, '==', ok); }
  }
  assert$2.ok = ok;

  // 5. The equality assertion tests shallow, coercive equality with
  // ==.
  // assert.equal(actual, expected, message_opt);
  assert$2.equal = equal;
  function equal(actual, expected, message) {
    if (actual != expected) { fail(actual, expected, message, '==', equal); }
  }

  // 6. The non-equality assertion tests for whether two objects are not equal
  // with != assert.notEqual(actual, expected, message_opt);
  assert$2.notEqual = notEqual;
  function notEqual(actual, expected, message) {
    if (actual == expected) {
      fail(actual, expected, message, '!=', notEqual);
    }
  }

  // 7. The equivalence assertion tests a deep equality relation.
  // assert.deepEqual(actual, expected, message_opt);
  assert$2.deepEqual = deepEqual;
  function deepEqual(actual, expected, message) {
    if (!_deepEqual(actual, expected, false)) {
      fail(actual, expected, message, 'deepEqual', deepEqual);
    }
  }
  assert$2.deepStrictEqual = deepStrictEqual;
  function deepStrictEqual(actual, expected, message) {
    if (!_deepEqual(actual, expected, true)) {
      fail(actual, expected, message, 'deepStrictEqual', deepStrictEqual);
    }
  }

  function _deepEqual(actual, expected, strict, memos) {
    // 7.1. All identical values are equivalent, as determined by ===.
    if (actual === expected) {
      return true;
    } else if (isBuffer$1(actual) && isBuffer$1(expected)) {
      return compare(actual, expected) === 0;

    // 7.2. If the expected value is a Date object, the actual value is
    // equivalent if it is also a Date object that refers to the same time.
    } else if (isDate(actual) && isDate(expected)) {
      return actual.getTime() === expected.getTime();

    // 7.3 If the expected value is a RegExp object, the actual value is
    // equivalent if it is also a RegExp object with the same source and
    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
    } else if (isRegExp$1(actual) && isRegExp$1(expected)) {
      return actual.source === expected.source &&
             actual.global === expected.global &&
             actual.multiline === expected.multiline &&
             actual.lastIndex === expected.lastIndex &&
             actual.ignoreCase === expected.ignoreCase;

    // 7.4. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
    } else if ((actual === null || typeof actual !== 'object') &&
               (expected === null || typeof expected !== 'object')) {
      return strict ? actual === expected : actual == expected;

    // If both values are instances of typed arrays, wrap their underlying
    // ArrayBuffers in a Buffer each to increase performance
    // This optimization requires the arrays to have the same type as checked by
    // Object.prototype.toString (aka pToString). Never perform binary
    // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
    // bit patterns are not identical.
    } else if (isView(actual) && isView(expected) &&
               pToString(actual) === pToString(expected) &&
               !(actual instanceof Float32Array ||
                 actual instanceof Float64Array)) {
      return compare(new Uint8Array(actual.buffer),
                     new Uint8Array(expected.buffer)) === 0;

    // 7.5 For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
    } else if (isBuffer$1(actual) !== isBuffer$1(expected)) {
      return false;
    } else {
      memos = memos || {actual: [], expected: []};

      var actualIndex = memos.actual.indexOf(actual);
      if (actualIndex !== -1) {
        if (actualIndex === memos.expected.indexOf(expected)) {
          return true;
        }
      }

      memos.actual.push(actual);
      memos.expected.push(expected);

      return objEquiv(actual, expected, strict, memos);
    }
  }

  function isArguments(object) {
    return Object.prototype.toString.call(object) == '[object Arguments]';
  }

  function objEquiv(a, b, strict, actualVisitedObjects) {
    if (a === null || a === undefined || b === null || b === undefined)
      { return false; }
    // if one is a primitive, the other must be same
    if (isPrimitive$1(a) || isPrimitive$1(b))
      { return a === b; }
    if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
      { return false; }
    var aIsArgs = isArguments(a);
    var bIsArgs = isArguments(b);
    if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
      { return false; }
    if (aIsArgs) {
      a = pSlice.call(a);
      b = pSlice.call(b);
      return _deepEqual(a, b, strict);
    }
    var ka = objectKeys$1(a);
    var kb = objectKeys$1(b);
    var key, i;
    // having the same number of owned properties (keys incorporates
    // hasOwnProperty)
    if (ka.length !== kb.length)
      { return false; }
    //the same set of keys (although not necessarily the same order),
    ka.sort();
    kb.sort();
    //~~~cheap key test
    for (i = ka.length - 1; i >= 0; i--) {
      if (ka[i] !== kb[i])
        { return false; }
    }
    //equivalent values for every corresponding key, and
    //~~~possibly expensive deep test
    for (i = ka.length - 1; i >= 0; i--) {
      key = ka[i];
      if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
        { return false; }
    }
    return true;
  }

  // 8. The non-equivalence assertion tests for any deep inequality.
  // assert.notDeepEqual(actual, expected, message_opt);
  assert$2.notDeepEqual = notDeepEqual;
  function notDeepEqual(actual, expected, message) {
    if (_deepEqual(actual, expected, false)) {
      fail(actual, expected, message, 'notDeepEqual', notDeepEqual);
    }
  }

  assert$2.notDeepStrictEqual = notDeepStrictEqual;
  function notDeepStrictEqual(actual, expected, message) {
    if (_deepEqual(actual, expected, true)) {
      fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
    }
  }


  // 9. The strict equality assertion tests strict equality, as determined by ===.
  // assert.strictEqual(actual, expected, message_opt);
  assert$2.strictEqual = strictEqual;
  function strictEqual(actual, expected, message) {
    if (actual !== expected) {
      fail(actual, expected, message, '===', strictEqual);
    }
  }

  // 10. The strict non-equality assertion tests for strict inequality, as
  // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
  assert$2.notStrictEqual = notStrictEqual;
  function notStrictEqual(actual, expected, message) {
    if (actual === expected) {
      fail(actual, expected, message, '!==', notStrictEqual);
    }
  }

  function expectedException(actual, expected) {
    if (!actual || !expected) {
      return false;
    }

    if (Object.prototype.toString.call(expected) == '[object RegExp]') {
      return expected.test(actual);
    }

    try {
      if (actual instanceof expected) {
        return true;
      }
    } catch (e) {
      // Ignore.  The instanceof check doesn't work for arrow functions.
    }

    if (Error.isPrototypeOf(expected)) {
      return false;
    }

    return expected.call({}, actual) === true;
  }

  function _tryBlock(block) {
    var error;
    try {
      block();
    } catch (e) {
      error = e;
    }
    return error;
  }

  function _throws(shouldThrow, block, expected, message) {
    var actual;

    if (typeof block !== 'function') {
      throw new TypeError('"block" argument must be a function');
    }

    if (typeof expected === 'string') {
      message = expected;
      expected = null;
    }

    actual = _tryBlock(block);

    message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
              (message ? ' ' + message : '.');

    if (shouldThrow && !actual) {
      fail(actual, expected, 'Missing expected exception' + message);
    }

    var userProvidedMessage = typeof message === 'string';
    var isUnwantedException = !shouldThrow && isError(actual);
    var isUnexpectedException = !shouldThrow && actual && !expected;

    if ((isUnwantedException &&
        userProvidedMessage &&
        expectedException(actual, expected)) ||
        isUnexpectedException) {
      fail(actual, expected, 'Got unwanted exception' + message);
    }

    if ((shouldThrow && actual && expected &&
        !expectedException(actual, expected)) || (!shouldThrow && actual)) {
      throw actual;
    }
  }

  // 11. Expected to throw an error:
  // assert.throws(block, Error_opt, message_opt);
  assert$2.throws = throws;
  function throws(block, /*optional*/error, /*optional*/message) {
    _throws(true, block, error, message);
  }

  // EXTENSION! This is annoying to write outside this module.
  assert$2.doesNotThrow = doesNotThrow;
  function doesNotThrow(block, /*optional*/error, /*optional*/message) {
    _throws(false, block, error, message);
  }

  assert$2.ifError = ifError;
  function ifError(err) {
    if (err) { throw err; }
  }

  var assert$3 = /*#__PURE__*/Object.freeze({
    default: assert$2,
    AssertionError: AssertionError,
    fail: fail,
    ok: ok,
    assert: ok,
    equal: equal,
    notEqual: notEqual,
    deepEqual: deepEqual,
    deepStrictEqual: deepStrictEqual,
    notDeepEqual: notDeepEqual,
    notDeepStrictEqual: notDeepStrictEqual,
    strictEqual: strictEqual,
    notStrictEqual: notStrictEqual,
    throws: throws,
    doesNotThrow: doesNotThrow,
    ifError: ifError
  });

  var assert$4 = ( assert$3 && assert$2 ) || assert$3;

  var stream$1 = ( stream && Stream ) || stream;

  // Copyright (c) 2012, Mark Cavage. All rights reserved.
  // Copyright 2015 Joyent, Inc.


  var Stream$1 = stream$1.Stream;



  ///--- Globals

  /* JSSTYLED */
  var UUID_REGEXP = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;


  ///--- Internal

  function _capitalize(str) {
      return (str.charAt(0).toUpperCase() + str.slice(1));
  }

  function _toss(name, expected, oper, arg, actual) {
      throw new assert$4.AssertionError({
          message: util$2.format('%s (%s) is required', name, expected),
          actual: (actual === undefined) ? typeof (arg) : actual(arg),
          expected: expected,
          operator: oper || '===',
          stackStartFunction: _toss.caller
      });
  }

  function _getClass(arg) {
      return (Object.prototype.toString.call(arg).slice(8, -1));
  }

  function noop$2() {
      // Why even bother with asserts?
  }


  ///--- Exports

  var types = {
      bool: {
          check: function (arg) { return typeof (arg) === 'boolean'; }
      },
      func: {
          check: function (arg) { return typeof (arg) === 'function'; }
      },
      string: {
          check: function (arg) { return typeof (arg) === 'string'; }
      },
      object: {
          check: function (arg) {
              return typeof (arg) === 'object' && arg !== null;
          }
      },
      number: {
          check: function (arg) {
              return typeof (arg) === 'number' && !isNaN(arg);
          }
      },
      finite: {
          check: function (arg) {
              return typeof (arg) === 'number' && !isNaN(arg) && isFinite(arg);
          }
      },
      buffer: {
          check: function (arg) { return Buffer.isBuffer(arg); },
          operator: 'Buffer.isBuffer'
      },
      array: {
          check: function (arg) { return Array.isArray(arg); },
          operator: 'Array.isArray'
      },
      stream: {
          check: function (arg) { return arg instanceof Stream$1; },
          operator: 'instanceof',
          actual: _getClass
      },
      date: {
          check: function (arg) { return arg instanceof Date; },
          operator: 'instanceof',
          actual: _getClass
      },
      regexp: {
          check: function (arg) { return arg instanceof RegExp; },
          operator: 'instanceof',
          actual: _getClass
      },
      uuid: {
          check: function (arg) {
              return typeof (arg) === 'string' && UUID_REGEXP.test(arg);
          },
          operator: 'isUUID'
      }
  };

  function _setExports(ndebug) {
      var keys = Object.keys(types);
      var out;

      /* re-export standard assert */
      if (process.env.NODE_NDEBUG) {
          out = noop$2;
      } else {
          out = function (arg, msg) {
              if (!arg) {
                  _toss(msg, 'true', arg);
              }
          };
      }

      /* standard checks */
      keys.forEach(function (k) {
          if (ndebug) {
              out[k] = noop$2;
              return;
          }
          var type = types[k];
          out[k] = function (arg, msg) {
              if (!type.check(arg)) {
                  _toss(msg, k, type.operator, arg, type.actual);
              }
          };
      });

      /* optional checks */
      keys.forEach(function (k) {
          var name = 'optional' + _capitalize(k);
          if (ndebug) {
              out[name] = noop$2;
              return;
          }
          var type = types[k];
          out[name] = function (arg, msg) {
              if (arg === undefined || arg === null) {
                  return;
              }
              if (!type.check(arg)) {
                  _toss(msg, k, type.operator, arg, type.actual);
              }
          };
      });

      /* arrayOf checks */
      keys.forEach(function (k) {
          var name = 'arrayOf' + _capitalize(k);
          if (ndebug) {
              out[name] = noop$2;
              return;
          }
          var type = types[k];
          var expected = '[' + k + ']';
          out[name] = function (arg, msg) {
              if (!Array.isArray(arg)) {
                  _toss(msg, expected, type.operator, arg, type.actual);
              }
              var i;
              for (i = 0; i < arg.length; i++) {
                  if (!type.check(arg[i])) {
                      _toss(msg, expected, type.operator, arg, type.actual);
                  }
              }
          };
      });

      /* optionalArrayOf checks */
      keys.forEach(function (k) {
          var name = 'optionalArrayOf' + _capitalize(k);
          if (ndebug) {
              out[name] = noop$2;
              return;
          }
          var type = types[k];
          var expected = '[' + k + ']';
          out[name] = function (arg, msg) {
              if (arg === undefined || arg === null) {
                  return;
              }
              if (!Array.isArray(arg)) {
                  _toss(msg, expected, type.operator, arg, type.actual);
              }
              var i;
              for (i = 0; i < arg.length; i++) {
                  if (!type.check(arg[i])) {
                      _toss(msg, expected, type.operator, arg, type.actual);
                  }
              }
          };
      });

      /* re-export built-in assertions */
      Object.keys(assert$4).forEach(function (k) {
          if (k === 'AssertionError') {
              out[k] = assert$4[k];
              return;
          }
          if (ndebug) {
              out[k] = noop$2;
              return;
          }
          out[k] = assert$4[k];
      });

      /* export ourselves (for unit tests _only_) */
      out._setExports = _setExports;

      return out;
  }

  var assert_1 = _setExports(process.env.NODE_NDEBUG);

  // Copyright 2015 Joyent, Inc.

  var algInfo = {
  	'dsa': {
  		parts: ['p', 'q', 'g', 'y'],
  		sizePart: 'p'
  	},
  	'rsa': {
  		parts: ['e', 'n'],
  		sizePart: 'n'
  	},
  	'ecdsa': {
  		parts: ['curve', 'Q'],
  		sizePart: 'Q'
  	},
  	'ed25519': {
  		parts: ['R'],
  		normalize: false,
  		sizePart: 'R'
  	}
  };
  algInfo['curve25519'] = algInfo['ed25519'];

  var algPrivInfo = {
  	'dsa': {
  		parts: ['p', 'q', 'g', 'y', 'x']
  	},
  	'rsa': {
  		parts: ['n', 'e', 'd', 'iqmp', 'p', 'q']
  	},
  	'ecdsa': {
  		parts: ['curve', 'Q', 'd']
  	},
  	'ed25519': {
  		parts: ['R', 'r'],
  		normalize: false
  	}
  };
  algPrivInfo['curve25519'] = algPrivInfo['ed25519'];

  var hashAlgs = {
  	'md5': true,
  	'sha1': true,
  	'sha256': true,
  	'sha384': true,
  	'sha512': true
  };

  /*
   * Taken from
   * http://csrc.nist.gov/groups/ST/toolkit/documents/dss/NISTReCur.pdf
   */
  var curves = {
  	'nistp256': {
  		size: 256,
  		pkcs8oid: '1.2.840.10045.3.1.7',
  		p: new Buffer(('00' +
  		    'ffffffff 00000001 00000000 00000000' +
  		    '00000000 ffffffff ffffffff ffffffff').
  		    replace(/ /g, ''), 'hex'),
  		a: new Buffer(('00' +
  		    'FFFFFFFF 00000001 00000000 00000000' +
  		    '00000000 FFFFFFFF FFFFFFFF FFFFFFFC').
  		    replace(/ /g, ''), 'hex'),
  		b: new Buffer((
  		    '5ac635d8 aa3a93e7 b3ebbd55 769886bc' +
  		    '651d06b0 cc53b0f6 3bce3c3e 27d2604b').
  		    replace(/ /g, ''), 'hex'),
  		s: new Buffer(('00' +
  		    'c49d3608 86e70493 6a6678e1 139d26b7' +
  		    '819f7e90').
  		    replace(/ /g, ''), 'hex'),
  		n: new Buffer(('00' +
  		    'ffffffff 00000000 ffffffff ffffffff' +
  		    'bce6faad a7179e84 f3b9cac2 fc632551').
  		    replace(/ /g, ''), 'hex'),
  		G: new Buffer(('04' +
  		    '6b17d1f2 e12c4247 f8bce6e5 63a440f2' +
  		    '77037d81 2deb33a0 f4a13945 d898c296' +
  		    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16' +
  		    '2bce3357 6b315ece cbb64068 37bf51f5').
  		    replace(/ /g, ''), 'hex')
  	},
  	'nistp384': {
  		size: 384,
  		pkcs8oid: '1.3.132.0.34',
  		p: new Buffer(('00' +
  		    'ffffffff ffffffff ffffffff ffffffff' +
  		    'ffffffff ffffffff ffffffff fffffffe' +
  		    'ffffffff 00000000 00000000 ffffffff').
  		    replace(/ /g, ''), 'hex'),
  		a: new Buffer(('00' +
  		    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +
  		    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE' +
  		    'FFFFFFFF 00000000 00000000 FFFFFFFC').
  		    replace(/ /g, ''), 'hex'),
  		b: new Buffer((
  		    'b3312fa7 e23ee7e4 988e056b e3f82d19' +
  		    '181d9c6e fe814112 0314088f 5013875a' +
  		    'c656398d 8a2ed19d 2a85c8ed d3ec2aef').
  		    replace(/ /g, ''), 'hex'),
  		s: new Buffer(('00' +
  		    'a335926a a319a27a 1d00896a 6773a482' +
  		    '7acdac73').
  		    replace(/ /g, ''), 'hex'),
  		n: new Buffer(('00' +
  		    'ffffffff ffffffff ffffffff ffffffff' +
  		    'ffffffff ffffffff c7634d81 f4372ddf' +
  		    '581a0db2 48b0a77a ecec196a ccc52973').
  		    replace(/ /g, ''), 'hex'),
  		G: new Buffer(('04' +
  		    'aa87ca22 be8b0537 8eb1c71e f320ad74' +
  		    '6e1d3b62 8ba79b98 59f741e0 82542a38' +
  		    '5502f25d bf55296c 3a545e38 72760ab7' +
  		    '3617de4a 96262c6f 5d9e98bf 9292dc29' +
  		    'f8f41dbd 289a147c e9da3113 b5f0b8c0' +
  		    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f').
  		    replace(/ /g, ''), 'hex')
  	},
  	'nistp521': {
  		size: 521,
  		pkcs8oid: '1.3.132.0.35',
  		p: new Buffer((
  		    '01ffffff ffffffff ffffffff ffffffff' +
  		    'ffffffff ffffffff ffffffff ffffffff' +
  		    'ffffffff ffffffff ffffffff ffffffff' +
  		    'ffffffff ffffffff ffffffff ffffffff' +
  		    'ffff').replace(/ /g, ''), 'hex'),
  		a: new Buffer(('01FF' +
  		    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +
  		    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +
  		    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +
  		    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFC').
  		    replace(/ /g, ''), 'hex'),
  		b: new Buffer(('51' +
  		    '953eb961 8e1c9a1f 929a21a0 b68540ee' +
  		    'a2da725b 99b315f3 b8b48991 8ef109e1' +
  		    '56193951 ec7e937b 1652c0bd 3bb1bf07' +
  		    '3573df88 3d2c34f1 ef451fd4 6b503f00').
  		    replace(/ /g, ''), 'hex'),
  		s: new Buffer(('00' +
  		    'd09e8800 291cb853 96cc6717 393284aa' +
  		    'a0da64ba').replace(/ /g, ''), 'hex'),
  		n: new Buffer(('01ff' +
  		    'ffffffff ffffffff ffffffff ffffffff' +
  		    'ffffffff ffffffff ffffffff fffffffa' +
  		    '51868783 bf2f966b 7fcc0148 f709a5d0' +
  		    '3bb5c9b8 899c47ae bb6fb71e 91386409').
  		    replace(/ /g, ''), 'hex'),
  		G: new Buffer(('04' +
  		    '00c6 858e06b7 0404e9cd 9e3ecb66 2395b442' +
  		         '9c648139 053fb521 f828af60 6b4d3dba' +
  		         'a14b5e77 efe75928 fe1dc127 a2ffa8de' +
  		         '3348b3c1 856a429b f97e7e31 c2e5bd66' +
  		    '0118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9' +
  		         '98f54449 579b4468 17afbd17 273e662c' +
  		         '97ee7299 5ef42640 c550b901 3fad0761' +
  		         '353c7086 a272c240 88be9476 9fd16650').
  		    replace(/ /g, ''), 'hex')
  	}
  };

  var algs = {
  	info: algInfo,
  	privInfo: algPrivInfo,
  	hashAlgs: hashAlgs,
  	curves: curves
  };

  // Copyright 2015 Joyent, Inc.




  function FingerprintFormatError(fp, format) {
  	if (Error.captureStackTrace)
  		{ Error.captureStackTrace(this, FingerprintFormatError); }
  	this.name = 'FingerprintFormatError';
  	this.fingerprint = fp;
  	this.format = format;
  	this.message = 'Fingerprint format is not supported, or is invalid: ';
  	if (fp !== undefined)
  		{ this.message += ' fingerprint = ' + fp; }
  	if (format !== undefined)
  		{ this.message += ' format = ' + format; }
  }
  util$2.inherits(FingerprintFormatError, Error);

  function InvalidAlgorithmError(alg) {
  	if (Error.captureStackTrace)
  		{ Error.captureStackTrace(this, InvalidAlgorithmError); }
  	this.name = 'InvalidAlgorithmError';
  	this.algorithm = alg;
  	this.message = 'Algorithm "' + alg + '" is not supported';
  }
  util$2.inherits(InvalidAlgorithmError, Error);

  function KeyParseError(name, format, innerErr) {
  	if (Error.captureStackTrace)
  		{ Error.captureStackTrace(this, KeyParseError); }
  	this.name = 'KeyParseError';
  	this.format = format;
  	this.keyName = name;
  	this.innerErr = innerErr;
  	this.message = 'Failed to parse ' + name + ' as a valid ' + format +
  	    ' format key: ' + innerErr.message;
  }
  util$2.inherits(KeyParseError, Error);

  function SignatureParseError(type, format, innerErr) {
  	if (Error.captureStackTrace)
  		{ Error.captureStackTrace(this, SignatureParseError); }
  	this.name = 'SignatureParseError';
  	this.type = type;
  	this.format = format;
  	this.innerErr = innerErr;
  	this.message = 'Failed to parse the given data as a ' + type +
  	    ' signature in ' + format + ' format: ' + innerErr.message;
  }
  util$2.inherits(SignatureParseError, Error);

  function CertificateParseError(name, format, innerErr) {
  	if (Error.captureStackTrace)
  		{ Error.captureStackTrace(this, CertificateParseError); }
  	this.name = 'CertificateParseError';
  	this.format = format;
  	this.certName = name;
  	this.innerErr = innerErr;
  	this.message = 'Failed to parse ' + name + ' as a valid ' + format +
  	    ' format certificate: ' + innerErr.message;
  }
  util$2.inherits(CertificateParseError, Error);

  function KeyEncryptedError(name, format) {
  	if (Error.captureStackTrace)
  		{ Error.captureStackTrace(this, KeyEncryptedError); }
  	this.name = 'KeyEncryptedError';
  	this.format = format;
  	this.keyName = name;
  	this.message = 'The ' + format + ' format key ' + name + ' is ' +
  	    'encrypted (password-protected), and no passphrase was ' +
  	    'provided in `options`';
  }
  util$2.inherits(KeyEncryptedError, Error);

  var errors$1 = {
  	FingerprintFormatError: FingerprintFormatError,
  	InvalidAlgorithmError: InvalidAlgorithmError,
  	KeyParseError: KeyParseError,
  	SignatureParseError: SignatureParseError,
  	KeyEncryptedError: KeyEncryptedError,
  	CertificateParseError: CertificateParseError
  };

  var jsbn = createCommonjsModule(function (module, exports) {
  (function(){

      // Copyright (c) 2005  Tom Wu
      // All Rights Reserved.
      // See "LICENSE" for details.

      // Basic JavaScript BN library - subset useful for RSA encryption.

      // Bits per digit
      var dbits;

      // JavaScript engine analysis
      var canary = 0xdeadbeefcafe;
      var j_lm = ((canary&0xffffff)==0xefcafe);

      // (public) Constructor
      function BigInteger(a,b,c) {
        if(a != null)
          { if("number" == typeof a) { this.fromNumber(a,b,c); }
          else if(b == null && "string" != typeof a) { this.fromString(a,256); }
          else { this.fromString(a,b); } }
      }

      // return new, unset BigInteger
      function nbi() { return new BigInteger(null); }

      // am: Compute w_j += (x*this_i), propagate carries,
      // c is initial carry, returns final carry.
      // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
      // We need to select the fastest one that works in this environment.

      // am1: use a single mult and divide to get the high bits,
      // max digit bits should be 26 because
      // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
      function am1(i,x,w,j,c,n) {
        var this$1 = this;

        while(--n >= 0) {
          var v = x*this$1[i++]+w[j]+c;
          c = Math.floor(v/0x4000000);
          w[j++] = v&0x3ffffff;
        }
        return c;
      }
      // am2 avoids a big mult-and-extract completely.
      // Max digit bits should be <= 30 because we do bitwise ops
      // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
      function am2(i,x,w,j,c,n) {
        var this$1 = this;

        var xl = x&0x7fff, xh = x>>15;
        while(--n >= 0) {
          var l = this$1[i]&0x7fff;
          var h = this$1[i++]>>15;
          var m = xh*l+h*xl;
          l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
          c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
          w[j++] = l&0x3fffffff;
        }
        return c;
      }
      // Alternately, set max digit bits to 28 since some
      // browsers slow down when dealing with 32-bit numbers.
      function am3(i,x,w,j,c,n) {
        var this$1 = this;

        var xl = x&0x3fff, xh = x>>14;
        while(--n >= 0) {
          var l = this$1[i]&0x3fff;
          var h = this$1[i++]>>14;
          var m = xh*l+h*xl;
          l = xl*l+((m&0x3fff)<<14)+w[j]+c;
          c = (l>>28)+(m>>14)+xh*h;
          w[j++] = l&0xfffffff;
        }
        return c;
      }
      var inBrowser = typeof navigator !== "undefined";
      if(inBrowser && j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
        BigInteger.prototype.am = am2;
        dbits = 30;
      }
      else if(inBrowser && j_lm && (navigator.appName != "Netscape")) {
        BigInteger.prototype.am = am1;
        dbits = 26;
      }
      else { // Mozilla/Netscape seems to prefer am3
        BigInteger.prototype.am = am3;
        dbits = 28;
      }

      BigInteger.prototype.DB = dbits;
      BigInteger.prototype.DM = ((1<<dbits)-1);
      BigInteger.prototype.DV = (1<<dbits);

      var BI_FP = 52;
      BigInteger.prototype.FV = Math.pow(2,BI_FP);
      BigInteger.prototype.F1 = BI_FP-dbits;
      BigInteger.prototype.F2 = 2*dbits-BI_FP;

      // Digit conversions
      var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
      var BI_RC = new Array();
      var rr,vv;
      rr = "0".charCodeAt(0);
      for(vv = 0; vv <= 9; ++vv) { BI_RC[rr++] = vv; }
      rr = "a".charCodeAt(0);
      for(vv = 10; vv < 36; ++vv) { BI_RC[rr++] = vv; }
      rr = "A".charCodeAt(0);
      for(vv = 10; vv < 36; ++vv) { BI_RC[rr++] = vv; }

      function int2char(n) { return BI_RM.charAt(n); }
      function intAt(s,i) {
        var c = BI_RC[s.charCodeAt(i)];
        return (c==null)?-1:c;
      }

      // (protected) copy this to r
      function bnpCopyTo(r) {
        var this$1 = this;

        for(var i = this.t-1; i >= 0; --i) { r[i] = this$1[i]; }
        r.t = this.t;
        r.s = this.s;
      }

      // (protected) set from integer value x, -DV <= x < DV
      function bnpFromInt(x) {
        this.t = 1;
        this.s = (x<0)?-1:0;
        if(x > 0) { this[0] = x; }
        else if(x < -1) { this[0] = x+this.DV; }
        else { this.t = 0; }
      }

      // return bigint initialized to value
      function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

      // (protected) set from string and radix
      function bnpFromString(s,b) {
        var this$1 = this;

        var k;
        if(b == 16) { k = 4; }
        else if(b == 8) { k = 3; }
        else if(b == 256) { k = 8; } // byte array
        else if(b == 2) { k = 1; }
        else if(b == 32) { k = 5; }
        else if(b == 4) { k = 2; }
        else { this.fromRadix(s,b); return; }
        this.t = 0;
        this.s = 0;
        var i = s.length, mi = false, sh = 0;
        while(--i >= 0) {
          var x = (k==8)?s[i]&0xff:intAt(s,i);
          if(x < 0) {
            if(s.charAt(i) == "-") { mi = true; }
            continue;
          }
          mi = false;
          if(sh == 0)
            { this$1[this$1.t++] = x; }
          else if(sh+k > this$1.DB) {
            this$1[this$1.t-1] |= (x&((1<<(this$1.DB-sh))-1))<<sh;
            this$1[this$1.t++] = (x>>(this$1.DB-sh));
          }
          else
            { this$1[this$1.t-1] |= x<<sh; }
          sh += k;
          if(sh >= this$1.DB) { sh -= this$1.DB; }
        }
        if(k == 8 && (s[0]&0x80) != 0) {
          this.s = -1;
          if(sh > 0) { this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh; }
        }
        this.clamp();
        if(mi) { BigInteger.ZERO.subTo(this,this); }
      }

      // (protected) clamp off excess high words
      function bnpClamp() {
        var this$1 = this;

        var c = this.s&this.DM;
        while(this.t > 0 && this[this.t-1] == c) { --this$1.t; }
      }

      // (public) return string representation in given radix
      function bnToString(b) {
        var this$1 = this;

        if(this.s < 0) { return "-"+this.negate().toString(b); }
        var k;
        if(b == 16) { k = 4; }
        else if(b == 8) { k = 3; }
        else if(b == 2) { k = 1; }
        else if(b == 32) { k = 5; }
        else if(b == 4) { k = 2; }
        else { return this.toRadix(b); }
        var km = (1<<k)-1, d, m = false, r = "", i = this.t;
        var p = this.DB-(i*this.DB)%k;
        if(i-- > 0) {
          if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
          while(i >= 0) {
            if(p < k) {
              d = (this$1[i]&((1<<p)-1))<<(k-p);
              d |= this$1[--i]>>(p+=this$1.DB-k);
            }
            else {
              d = (this$1[i]>>(p-=k))&km;
              if(p <= 0) { p += this$1.DB; --i; }
            }
            if(d > 0) { m = true; }
            if(m) { r += int2char(d); }
          }
        }
        return m?r:"0";
      }

      // (public) -this
      function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

      // (public) |this|
      function bnAbs() { return (this.s<0)?this.negate():this; }

      // (public) return + if this > a, - if this < a, 0 if equal
      function bnCompareTo(a) {
        var this$1 = this;

        var r = this.s-a.s;
        if(r != 0) { return r; }
        var i = this.t;
        r = i-a.t;
        if(r != 0) { return (this.s<0)?-r:r; }
        while(--i >= 0) { if((r=this$1[i]-a[i]) != 0) { return r; } }
        return 0;
      }

      // returns bit length of the integer x
      function nbits(x) {
        var r = 1, t;
        if((t=x>>>16) != 0) { x = t; r += 16; }
        if((t=x>>8) != 0) { x = t; r += 8; }
        if((t=x>>4) != 0) { x = t; r += 4; }
        if((t=x>>2) != 0) { x = t; r += 2; }
        if((t=x>>1) != 0) { x = t; r += 1; }
        return r;
      }

      // (public) return the number of bits in "this"
      function bnBitLength() {
        if(this.t <= 0) { return 0; }
        return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
      }

      // (protected) r = this << n*DB
      function bnpDLShiftTo(n,r) {
        var this$1 = this;

        var i;
        for(i = this.t-1; i >= 0; --i) { r[i+n] = this$1[i]; }
        for(i = n-1; i >= 0; --i) { r[i] = 0; }
        r.t = this.t+n;
        r.s = this.s;
      }

      // (protected) r = this >> n*DB
      function bnpDRShiftTo(n,r) {
        var this$1 = this;

        for(var i = n; i < this.t; ++i) { r[i-n] = this$1[i]; }
        r.t = Math.max(this.t-n,0);
        r.s = this.s;
      }

      // (protected) r = this << n
      function bnpLShiftTo(n,r) {
        var this$1 = this;

        var bs = n%this.DB;
        var cbs = this.DB-bs;
        var bm = (1<<cbs)-1;
        var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
        for(i = this.t-1; i >= 0; --i) {
          r[i+ds+1] = (this$1[i]>>cbs)|c;
          c = (this$1[i]&bm)<<bs;
        }
        for(i = ds-1; i >= 0; --i) { r[i] = 0; }
        r[ds] = c;
        r.t = this.t+ds+1;
        r.s = this.s;
        r.clamp();
      }

      // (protected) r = this >> n
      function bnpRShiftTo(n,r) {
        var this$1 = this;

        r.s = this.s;
        var ds = Math.floor(n/this.DB);
        if(ds >= this.t) { r.t = 0; return; }
        var bs = n%this.DB;
        var cbs = this.DB-bs;
        var bm = (1<<bs)-1;
        r[0] = this[ds]>>bs;
        for(var i = ds+1; i < this.t; ++i) {
          r[i-ds-1] |= (this$1[i]&bm)<<cbs;
          r[i-ds] = this$1[i]>>bs;
        }
        if(bs > 0) { r[this.t-ds-1] |= (this.s&bm)<<cbs; }
        r.t = this.t-ds;
        r.clamp();
      }

      // (protected) r = this - a
      function bnpSubTo(a,r) {
        var this$1 = this;

        var i = 0, c = 0, m = Math.min(a.t,this.t);
        while(i < m) {
          c += this$1[i]-a[i];
          r[i++] = c&this$1.DM;
          c >>= this$1.DB;
        }
        if(a.t < this.t) {
          c -= a.s;
          while(i < this.t) {
            c += this$1[i];
            r[i++] = c&this$1.DM;
            c >>= this$1.DB;
          }
          c += this.s;
        }
        else {
          c += this.s;
          while(i < a.t) {
            c -= a[i];
            r[i++] = c&this$1.DM;
            c >>= this$1.DB;
          }
          c -= a.s;
        }
        r.s = (c<0)?-1:0;
        if(c < -1) { r[i++] = this.DV+c; }
        else if(c > 0) { r[i++] = c; }
        r.t = i;
        r.clamp();
      }

      // (protected) r = this * a, r != this,a (HAC 14.12)
      // "this" should be the larger one if appropriate.
      function bnpMultiplyTo(a,r) {
        var x = this.abs(), y = a.abs();
        var i = x.t;
        r.t = i+y.t;
        while(--i >= 0) { r[i] = 0; }
        for(i = 0; i < y.t; ++i) { r[i+x.t] = x.am(0,y[i],r,i,0,x.t); }
        r.s = 0;
        r.clamp();
        if(this.s != a.s) { BigInteger.ZERO.subTo(r,r); }
      }

      // (protected) r = this^2, r != this (HAC 14.16)
      function bnpSquareTo(r) {
        var x = this.abs();
        var i = r.t = 2*x.t;
        while(--i >= 0) { r[i] = 0; }
        for(i = 0; i < x.t-1; ++i) {
          var c = x.am(i,x[i],r,2*i,0,1);
          if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
            r[i+x.t] -= x.DV;
            r[i+x.t+1] = 1;
          }
        }
        if(r.t > 0) { r[r.t-1] += x.am(i,x[i],r,2*i,0,1); }
        r.s = 0;
        r.clamp();
      }

      // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
      // r != q, this != m.  q or r may be null.
      function bnpDivRemTo(m,q,r) {
        var this$1 = this;

        var pm = m.abs();
        if(pm.t <= 0) { return; }
        var pt = this.abs();
        if(pt.t < pm.t) {
          if(q != null) { q.fromInt(0); }
          if(r != null) { this.copyTo(r); }
          return;
        }
        if(r == null) { r = nbi(); }
        var y = nbi(), ts = this.s, ms = m.s;
        var nsh = this.DB-nbits(pm[pm.t-1]);   // normalize modulus
        if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
        else { pm.copyTo(y); pt.copyTo(r); }
        var ys = y.t;
        var y0 = y[ys-1];
        if(y0 == 0) { return; }
        var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
        var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
        var i = r.t, j = i-ys, t = (q==null)?nbi():q;
        y.dlShiftTo(j,t);
        if(r.compareTo(t) >= 0) {
          r[r.t++] = 1;
          r.subTo(t,r);
        }
        BigInteger.ONE.dlShiftTo(ys,t);
        t.subTo(y,y);  // "negative" y so we can replace sub with am later
        while(y.t < ys) { y[y.t++] = 0; }
        while(--j >= 0) {
          // Estimate quotient digit
          var qd = (r[--i]==y0)?this$1.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
          if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {   // Try it out
            y.dlShiftTo(j,t);
            r.subTo(t,r);
            while(r[i] < --qd) { r.subTo(t,r); }
          }
        }
        if(q != null) {
          r.drShiftTo(ys,q);
          if(ts != ms) { BigInteger.ZERO.subTo(q,q); }
        }
        r.t = ys;
        r.clamp();
        if(nsh > 0) { r.rShiftTo(nsh,r); } // Denormalize remainder
        if(ts < 0) { BigInteger.ZERO.subTo(r,r); }
      }

      // (public) this mod a
      function bnMod(a) {
        var r = nbi();
        this.abs().divRemTo(a,null,r);
        if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) { a.subTo(r,r); }
        return r;
      }

      // Modular reduction using "classic" algorithm
      function Classic(m) { this.m = m; }
      function cConvert(x) {
        if(x.s < 0 || x.compareTo(this.m) >= 0) { return x.mod(this.m); }
        else { return x; }
      }
      function cRevert(x) { return x; }
      function cReduce(x) { x.divRemTo(this.m,null,x); }
      function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
      function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

      Classic.prototype.convert = cConvert;
      Classic.prototype.revert = cRevert;
      Classic.prototype.reduce = cReduce;
      Classic.prototype.mulTo = cMulTo;
      Classic.prototype.sqrTo = cSqrTo;

      // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
      // justification:
      //         xy == 1 (mod m)
      //         xy =  1+km
      //   xy(2-xy) = (1+km)(1-km)
      // x[y(2-xy)] = 1-k^2m^2
      // x[y(2-xy)] == 1 (mod m^2)
      // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
      // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
      // JS multiply "overflows" differently from C/C++, so care is needed here.
      function bnpInvDigit() {
        if(this.t < 1) { return 0; }
        var x = this[0];
        if((x&1) == 0) { return 0; }
        var y = x&3;       // y == 1/x mod 2^2
        y = (y*(2-(x&0xf)*y))&0xf; // y == 1/x mod 2^4
        y = (y*(2-(x&0xff)*y))&0xff;   // y == 1/x mod 2^8
        y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;    // y == 1/x mod 2^16
        // last step - calculate inverse mod DV directly;
        // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
        y = (y*(2-x*y%this.DV))%this.DV;       // y == 1/x mod 2^dbits
        // we really want the negative inverse, and -DV < y < DV
        return (y>0)?this.DV-y:-y;
      }

      // Montgomery reduction
      function Montgomery(m) {
        this.m = m;
        this.mp = m.invDigit();
        this.mpl = this.mp&0x7fff;
        this.mph = this.mp>>15;
        this.um = (1<<(m.DB-15))-1;
        this.mt2 = 2*m.t;
      }

      // xR mod m
      function montConvert(x) {
        var r = nbi();
        x.abs().dlShiftTo(this.m.t,r);
        r.divRemTo(this.m,null,r);
        if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) { this.m.subTo(r,r); }
        return r;
      }

      // x/R mod m
      function montRevert(x) {
        var r = nbi();
        x.copyTo(r);
        this.reduce(r);
        return r;
      }

      // x = x/R mod m (HAC 14.32)
      function montReduce(x) {
        var this$1 = this;

        while(x.t <= this.mt2) // pad x so am has enough room later
          { x[x.t++] = 0; }
        for(var i = 0; i < this.m.t; ++i) {
          // faster way of calculating u0 = x[i]*mp mod DV
          var j = x[i]&0x7fff;
          var u0 = (j*this$1.mpl+(((j*this$1.mph+(x[i]>>15)*this$1.mpl)&this$1.um)<<15))&x.DM;
          // use am to combine the multiply-shift-add into one call
          j = i+this$1.m.t;
          x[j] += this$1.m.am(0,u0,x,i,0,this$1.m.t);
          // propagate carry
          while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
        }
        x.clamp();
        x.drShiftTo(this.m.t,x);
        if(x.compareTo(this.m) >= 0) { x.subTo(this.m,x); }
      }

      // r = "x^2/R mod m"; x != r
      function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

      // r = "xy/R mod m"; x,y != r
      function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

      Montgomery.prototype.convert = montConvert;
      Montgomery.prototype.revert = montRevert;
      Montgomery.prototype.reduce = montReduce;
      Montgomery.prototype.mulTo = montMulTo;
      Montgomery.prototype.sqrTo = montSqrTo;

      // (protected) true iff this is even
      function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

      // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
      function bnpExp(e,z) {
        if(e > 0xffffffff || e < 1) { return BigInteger.ONE; }
        var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
        g.copyTo(r);
        while(--i >= 0) {
          z.sqrTo(r,r2);
          if((e&(1<<i)) > 0) { z.mulTo(r2,g,r); }
          else { var t = r; r = r2; r2 = t; }
        }
        return z.revert(r);
      }

      // (public) this^e % m, 0 <= e < 2^32
      function bnModPowInt(e,m) {
        var z;
        if(e < 256 || m.isEven()) { z = new Classic(m); } else { z = new Montgomery(m); }
        return this.exp(e,z);
      }

      // protected
      BigInteger.prototype.copyTo = bnpCopyTo;
      BigInteger.prototype.fromInt = bnpFromInt;
      BigInteger.prototype.fromString = bnpFromString;
      BigInteger.prototype.clamp = bnpClamp;
      BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
      BigInteger.prototype.drShiftTo = bnpDRShiftTo;
      BigInteger.prototype.lShiftTo = bnpLShiftTo;
      BigInteger.prototype.rShiftTo = bnpRShiftTo;
      BigInteger.prototype.subTo = bnpSubTo;
      BigInteger.prototype.multiplyTo = bnpMultiplyTo;
      BigInteger.prototype.squareTo = bnpSquareTo;
      BigInteger.prototype.divRemTo = bnpDivRemTo;
      BigInteger.prototype.invDigit = bnpInvDigit;
      BigInteger.prototype.isEven = bnpIsEven;
      BigInteger.prototype.exp = bnpExp;

      // public
      BigInteger.prototype.toString = bnToString;
      BigInteger.prototype.negate = bnNegate;
      BigInteger.prototype.abs = bnAbs;
      BigInteger.prototype.compareTo = bnCompareTo;
      BigInteger.prototype.bitLength = bnBitLength;
      BigInteger.prototype.mod = bnMod;
      BigInteger.prototype.modPowInt = bnModPowInt;

      // "constants"
      BigInteger.ZERO = nbv(0);
      BigInteger.ONE = nbv(1);

      // Copyright (c) 2005-2009  Tom Wu
      // All Rights Reserved.
      // See "LICENSE" for details.

      // Extended JavaScript BN functions, required for RSA private ops.

      // Version 1.1: new BigInteger("0", 10) returns "proper" zero
      // Version 1.2: square() API, isProbablePrime fix

      // (public)
      function bnClone() { var r = nbi(); this.copyTo(r); return r; }

      // (public) return value as integer
      function bnIntValue() {
        if(this.s < 0) {
          if(this.t == 1) { return this[0]-this.DV; }
          else if(this.t == 0) { return -1; }
        }
        else if(this.t == 1) { return this[0]; }
        else if(this.t == 0) { return 0; }
        // assumes 16 < DB < 32
        return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
      }

      // (public) return value as byte
      function bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }

      // (public) return value as short (assumes DB>=16)
      function bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }

      // (protected) return x s.t. r^x < DV
      function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

      // (public) 0 if this == 0, 1 if this > 0
      function bnSigNum() {
        if(this.s < 0) { return -1; }
        else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) { return 0; }
        else { return 1; }
      }

      // (protected) convert to radix string
      function bnpToRadix(b) {
        if(b == null) { b = 10; }
        if(this.signum() == 0 || b < 2 || b > 36) { return "0"; }
        var cs = this.chunkSize(b);
        var a = Math.pow(b,cs);
        var d = nbv(a), y = nbi(), z = nbi(), r = "";
        this.divRemTo(d,y,z);
        while(y.signum() > 0) {
          r = (a+z.intValue()).toString(b).substr(1) + r;
          y.divRemTo(d,y,z);
        }
        return z.intValue().toString(b) + r;
      }

      // (protected) convert from radix string
      function bnpFromRadix(s,b) {
        var this$1 = this;

        this.fromInt(0);
        if(b == null) { b = 10; }
        var cs = this.chunkSize(b);
        var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
        for(var i = 0; i < s.length; ++i) {
          var x = intAt(s,i);
          if(x < 0) {
            if(s.charAt(i) == "-" && this$1.signum() == 0) { mi = true; }
            continue;
          }
          w = b*w+x;
          if(++j >= cs) {
            this$1.dMultiply(d);
            this$1.dAddOffset(w,0);
            j = 0;
            w = 0;
          }
        }
        if(j > 0) {
          this.dMultiply(Math.pow(b,j));
          this.dAddOffset(w,0);
        }
        if(mi) { BigInteger.ZERO.subTo(this,this); }
      }

      // (protected) alternate constructor
      function bnpFromNumber(a,b,c) {
        var this$1 = this;

        if("number" == typeof b) {
          // new BigInteger(int,int,RNG)
          if(a < 2) { this.fromInt(1); }
          else {
            this.fromNumber(a,c);
            if(!this.testBit(a-1))	// force MSB set
              { this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this); }
            if(this.isEven()) { this.dAddOffset(1,0); } // force odd
            while(!this.isProbablePrime(b)) {
              this$1.dAddOffset(2,0);
              if(this$1.bitLength() > a) { this$1.subTo(BigInteger.ONE.shiftLeft(a-1),this$1); }
            }
          }
        }
        else {
          // new BigInteger(int,RNG)
          var x = new Array(), t = a&7;
          x.length = (a>>3)+1;
          b.nextBytes(x);
          if(t > 0) { x[0] &= ((1<<t)-1); } else { x[0] = 0; }
          this.fromString(x,256);
        }
      }

      // (public) convert to bigendian byte array
      function bnToByteArray() {
        var this$1 = this;

        var i = this.t, r = new Array();
        r[0] = this.s;
        var p = this.DB-(i*this.DB)%8, d, k = 0;
        if(i-- > 0) {
          if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)
            { r[k++] = d|(this.s<<(this.DB-p)); }
          while(i >= 0) {
            if(p < 8) {
              d = (this$1[i]&((1<<p)-1))<<(8-p);
              d |= this$1[--i]>>(p+=this$1.DB-8);
            }
            else {
              d = (this$1[i]>>(p-=8))&0xff;
              if(p <= 0) { p += this$1.DB; --i; }
            }
            if((d&0x80) != 0) { d |= -256; }
            if(k == 0 && (this$1.s&0x80) != (d&0x80)) { ++k; }
            if(k > 0 || d != this$1.s) { r[k++] = d; }
          }
        }
        return r;
      }

      function bnEquals(a) { return(this.compareTo(a)==0); }
      function bnMin(a) { return(this.compareTo(a)<0)?this:a; }
      function bnMax(a) { return(this.compareTo(a)>0)?this:a; }

      // (protected) r = this op a (bitwise)
      function bnpBitwiseTo(a,op,r) {
        var this$1 = this;

        var i, f, m = Math.min(a.t,this.t);
        for(i = 0; i < m; ++i) { r[i] = op(this$1[i],a[i]); }
        if(a.t < this.t) {
          f = a.s&this.DM;
          for(i = m; i < this.t; ++i) { r[i] = op(this$1[i],f); }
          r.t = this.t;
        }
        else {
          f = this.s&this.DM;
          for(i = m; i < a.t; ++i) { r[i] = op(f,a[i]); }
          r.t = a.t;
        }
        r.s = op(this.s,a.s);
        r.clamp();
      }

      // (public) this & a
      function op_and(x,y) { return x&y; }
      function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }

      // (public) this | a
      function op_or(x,y) { return x|y; }
      function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }

      // (public) this ^ a
      function op_xor(x,y) { return x^y; }
      function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }

      // (public) this & ~a
      function op_andnot(x,y) { return x&~y; }
      function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }

      // (public) ~this
      function bnNot() {
        var this$1 = this;

        var r = nbi();
        for(var i = 0; i < this.t; ++i) { r[i] = this$1.DM&~this$1[i]; }
        r.t = this.t;
        r.s = ~this.s;
        return r;
      }

      // (public) this << n
      function bnShiftLeft(n) {
        var r = nbi();
        if(n < 0) { this.rShiftTo(-n,r); } else { this.lShiftTo(n,r); }
        return r;
      }

      // (public) this >> n
      function bnShiftRight(n) {
        var r = nbi();
        if(n < 0) { this.lShiftTo(-n,r); } else { this.rShiftTo(n,r); }
        return r;
      }

      // return index of lowest 1-bit in x, x < 2^31
      function lbit(x) {
        if(x == 0) { return -1; }
        var r = 0;
        if((x&0xffff) == 0) { x >>= 16; r += 16; }
        if((x&0xff) == 0) { x >>= 8; r += 8; }
        if((x&0xf) == 0) { x >>= 4; r += 4; }
        if((x&3) == 0) { x >>= 2; r += 2; }
        if((x&1) == 0) { ++r; }
        return r;
      }

      // (public) returns index of lowest 1-bit (or -1 if none)
      function bnGetLowestSetBit() {
        var this$1 = this;

        for(var i = 0; i < this.t; ++i)
          { if(this$1[i] != 0) { return i*this$1.DB+lbit(this$1[i]); } }
        if(this.s < 0) { return this.t*this.DB; }
        return -1;
      }

      // return number of 1 bits in x
      function cbit(x) {
        var r = 0;
        while(x != 0) { x &= x-1; ++r; }
        return r;
      }

      // (public) return number of set bits
      function bnBitCount() {
        var this$1 = this;

        var r = 0, x = this.s&this.DM;
        for(var i = 0; i < this.t; ++i) { r += cbit(this$1[i]^x); }
        return r;
      }

      // (public) true iff nth bit is set
      function bnTestBit(n) {
        var j = Math.floor(n/this.DB);
        if(j >= this.t) { return(this.s!=0); }
        return((this[j]&(1<<(n%this.DB)))!=0);
      }

      // (protected) this op (1<<n)
      function bnpChangeBit(n,op) {
        var r = BigInteger.ONE.shiftLeft(n);
        this.bitwiseTo(r,op,r);
        return r;
      }

      // (public) this | (1<<n)
      function bnSetBit(n) { return this.changeBit(n,op_or); }

      // (public) this & ~(1<<n)
      function bnClearBit(n) { return this.changeBit(n,op_andnot); }

      // (public) this ^ (1<<n)
      function bnFlipBit(n) { return this.changeBit(n,op_xor); }

      // (protected) r = this + a
      function bnpAddTo(a,r) {
        var this$1 = this;

        var i = 0, c = 0, m = Math.min(a.t,this.t);
        while(i < m) {
          c += this$1[i]+a[i];
          r[i++] = c&this$1.DM;
          c >>= this$1.DB;
        }
        if(a.t < this.t) {
          c += a.s;
          while(i < this.t) {
            c += this$1[i];
            r[i++] = c&this$1.DM;
            c >>= this$1.DB;
          }
          c += this.s;
        }
        else {
          c += this.s;
          while(i < a.t) {
            c += a[i];
            r[i++] = c&this$1.DM;
            c >>= this$1.DB;
          }
          c += a.s;
        }
        r.s = (c<0)?-1:0;
        if(c > 0) { r[i++] = c; }
        else if(c < -1) { r[i++] = this.DV+c; }
        r.t = i;
        r.clamp();
      }

      // (public) this + a
      function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }

      // (public) this - a
      function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }

      // (public) this * a
      function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }

      // (public) this^2
      function bnSquare() { var r = nbi(); this.squareTo(r); return r; }

      // (public) this / a
      function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }

      // (public) this % a
      function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }

      // (public) [this/a,this%a]
      function bnDivideAndRemainder(a) {
        var q = nbi(), r = nbi();
        this.divRemTo(a,q,r);
        return new Array(q,r);
      }

      // (protected) this *= n, this >= 0, 1 < n < DV
      function bnpDMultiply(n) {
        this[this.t] = this.am(0,n-1,this,0,0,this.t);
        ++this.t;
        this.clamp();
      }

      // (protected) this += n << w words, this >= 0
      function bnpDAddOffset(n,w) {
        var this$1 = this;

        if(n == 0) { return; }
        while(this.t <= w) { this$1[this$1.t++] = 0; }
        this[w] += n;
        while(this[w] >= this.DV) {
          this$1[w] -= this$1.DV;
          if(++w >= this$1.t) { this$1[this$1.t++] = 0; }
          ++this$1[w];
        }
      }

      // A "null" reducer
      function NullExp() {}
      function nNop(x) { return x; }
      function nMulTo(x,y,r) { x.multiplyTo(y,r); }
      function nSqrTo(x,r) { x.squareTo(r); }

      NullExp.prototype.convert = nNop;
      NullExp.prototype.revert = nNop;
      NullExp.prototype.mulTo = nMulTo;
      NullExp.prototype.sqrTo = nSqrTo;

      // (public) this^e
      function bnPow(e) { return this.exp(e,new NullExp()); }

      // (protected) r = lower n words of "this * a", a.t <= n
      // "this" should be the larger one if appropriate.
      function bnpMultiplyLowerTo(a,n,r) {
        var this$1 = this;

        var i = Math.min(this.t+a.t,n);
        r.s = 0; // assumes a,this >= 0
        r.t = i;
        while(i > 0) { r[--i] = 0; }
        var j;
        for(j = r.t-this.t; i < j; ++i) { r[i+this$1.t] = this$1.am(0,a[i],r,i,0,this$1.t); }
        for(j = Math.min(a.t,n); i < j; ++i) { this$1.am(0,a[i],r,i,0,n-i); }
        r.clamp();
      }

      // (protected) r = "this * a" without lower n words, n > 0
      // "this" should be the larger one if appropriate.
      function bnpMultiplyUpperTo(a,n,r) {
        var this$1 = this;

        --n;
        var i = r.t = this.t+a.t-n;
        r.s = 0; // assumes a,this >= 0
        while(--i >= 0) { r[i] = 0; }
        for(i = Math.max(n-this.t,0); i < a.t; ++i)
          { r[this$1.t+i-n] = this$1.am(n-i,a[i],r,0,0,this$1.t+i-n); }
        r.clamp();
        r.drShiftTo(1,r);
      }

      // Barrett modular reduction
      function Barrett(m) {
        // setup Barrett
        this.r2 = nbi();
        this.q3 = nbi();
        BigInteger.ONE.dlShiftTo(2*m.t,this.r2);
        this.mu = this.r2.divide(m);
        this.m = m;
      }

      function barrettConvert(x) {
        if(x.s < 0 || x.t > 2*this.m.t) { return x.mod(this.m); }
        else if(x.compareTo(this.m) < 0) { return x; }
        else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }
      }

      function barrettRevert(x) { return x; }

      // x = x mod m (HAC 14.42)
      function barrettReduce(x) {
        var this$1 = this;

        x.drShiftTo(this.m.t-1,this.r2);
        if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }
        this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);
        this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);
        while(x.compareTo(this.r2) < 0) { x.dAddOffset(1,this$1.m.t+1); }
        x.subTo(this.r2,x);
        while(x.compareTo(this.m) >= 0) { x.subTo(this$1.m,x); }
      }

      // r = x^2 mod m; x != r
      function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

      // r = x*y mod m; x,y != r
      function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

      Barrett.prototype.convert = barrettConvert;
      Barrett.prototype.revert = barrettRevert;
      Barrett.prototype.reduce = barrettReduce;
      Barrett.prototype.mulTo = barrettMulTo;
      Barrett.prototype.sqrTo = barrettSqrTo;

      // (public) this^e % m (HAC 14.85)
      function bnModPow(e,m) {
        var this$1 = this;

        var i = e.bitLength(), k, r = nbv(1), z;
        if(i <= 0) { return r; }
        else if(i < 18) { k = 1; }
        else if(i < 48) { k = 3; }
        else if(i < 144) { k = 4; }
        else if(i < 768) { k = 5; }
        else { k = 6; }
        if(i < 8)
          { z = new Classic(m); }
        else if(m.isEven())
          { z = new Barrett(m); }
        else
          { z = new Montgomery(m); }

        // precomputation
        var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;
        g[1] = z.convert(this);
        if(k > 1) {
          var g2 = nbi();
          z.sqrTo(g[1],g2);
          while(n <= km) {
            g[n] = nbi();
            z.mulTo(g2,g[n-2],g[n]);
            n += 2;
          }
        }

        var j = e.t-1, w, is1 = true, r2 = nbi(), t;
        i = nbits(e[j])-1;
        while(j >= 0) {
          if(i >= k1) { w = (e[j]>>(i-k1))&km; }
          else {
            w = (e[j]&((1<<(i+1))-1))<<(k1-i);
            if(j > 0) { w |= e[j-1]>>(this$1.DB+i-k1); }
          }

          n = k;
          while((w&1) == 0) { w >>= 1; --n; }
          if((i -= n) < 0) { i += this$1.DB; --j; }
          if(is1) {	// ret == 1, don't bother squaring or multiplying it
            g[w].copyTo(r);
            is1 = false;
          }
          else {
            while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }
            if(n > 0) { z.sqrTo(r,r2); } else { t = r; r = r2; r2 = t; }
            z.mulTo(r2,g[w],r);
          }

          while(j >= 0 && (e[j]&(1<<i)) == 0) {
            z.sqrTo(r,r2); t = r; r = r2; r2 = t;
            if(--i < 0) { i = this$1.DB-1; --j; }
          }
        }
        return z.revert(r);
      }

      // (public) gcd(this,a) (HAC 14.54)
      function bnGCD(a) {
        var x = (this.s<0)?this.negate():this.clone();
        var y = (a.s<0)?a.negate():a.clone();
        if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }
        var i = x.getLowestSetBit(), g = y.getLowestSetBit();
        if(g < 0) { return x; }
        if(i < g) { g = i; }
        if(g > 0) {
          x.rShiftTo(g,x);
          y.rShiftTo(g,y);
        }
        while(x.signum() > 0) {
          if((i = x.getLowestSetBit()) > 0) { x.rShiftTo(i,x); }
          if((i = y.getLowestSetBit()) > 0) { y.rShiftTo(i,y); }
          if(x.compareTo(y) >= 0) {
            x.subTo(y,x);
            x.rShiftTo(1,x);
          }
          else {
            y.subTo(x,y);
            y.rShiftTo(1,y);
          }
        }
        if(g > 0) { y.lShiftTo(g,y); }
        return y;
      }

      // (protected) this % n, n < 2^26
      function bnpModInt(n) {
        var this$1 = this;

        if(n <= 0) { return 0; }
        var d = this.DV%n, r = (this.s<0)?n-1:0;
        if(this.t > 0)
          { if(d == 0) { r = this[0]%n; }
          else { for(var i = this.t-1; i >= 0; --i) { r = (d*r+this$1[i])%n; } } }
        return r;
      }

      // (public) 1/this % m (HAC 14.61)
      function bnModInverse(m) {
        var this$1 = this;

        var ac = m.isEven();
        if((this.isEven() && ac) || m.signum() == 0) { return BigInteger.ZERO; }
        var u = m.clone(), v = this.clone();
        var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
        while(u.signum() != 0) {
          while(u.isEven()) {
            u.rShiftTo(1,u);
            if(ac) {
              if(!a.isEven() || !b.isEven()) { a.addTo(this$1,a); b.subTo(m,b); }
              a.rShiftTo(1,a);
            }
            else if(!b.isEven()) { b.subTo(m,b); }
            b.rShiftTo(1,b);
          }
          while(v.isEven()) {
            v.rShiftTo(1,v);
            if(ac) {
              if(!c.isEven() || !d.isEven()) { c.addTo(this$1,c); d.subTo(m,d); }
              c.rShiftTo(1,c);
            }
            else if(!d.isEven()) { d.subTo(m,d); }
            d.rShiftTo(1,d);
          }
          if(u.compareTo(v) >= 0) {
            u.subTo(v,u);
            if(ac) { a.subTo(c,a); }
            b.subTo(d,b);
          }
          else {
            v.subTo(u,v);
            if(ac) { c.subTo(a,c); }
            d.subTo(b,d);
          }
        }
        if(v.compareTo(BigInteger.ONE) != 0) { return BigInteger.ZERO; }
        if(d.compareTo(m) >= 0) { return d.subtract(m); }
        if(d.signum() < 0) { d.addTo(m,d); } else { return d; }
        if(d.signum() < 0) { return d.add(m); } else { return d; }
      }

      var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];
      var lplim = (1<<26)/lowprimes[lowprimes.length-1];

      // (public) test primality with certainty >= 1-.5^t
      function bnIsProbablePrime(t) {
        var i, x = this.abs();
        if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {
          for(i = 0; i < lowprimes.length; ++i)
            { if(x[0] == lowprimes[i]) { return true; } }
          return false;
        }
        if(x.isEven()) { return false; }
        i = 1;
        while(i < lowprimes.length) {
          var m = lowprimes[i], j = i+1;
          while(j < lowprimes.length && m < lplim) { m *= lowprimes[j++]; }
          m = x.modInt(m);
          while(i < j) { if(m%lowprimes[i++] == 0) { return false; } }
        }
        return x.millerRabin(t);
      }

      // (protected) true if probably prime (HAC 4.24, Miller-Rabin)
      function bnpMillerRabin(t) {
        var this$1 = this;

        var n1 = this.subtract(BigInteger.ONE);
        var k = n1.getLowestSetBit();
        if(k <= 0) { return false; }
        var r = n1.shiftRight(k);
        t = (t+1)>>1;
        if(t > lowprimes.length) { t = lowprimes.length; }
        var a = nbi();
        for(var i = 0; i < t; ++i) {
          //Pick bases at random, instead of starting at 2
          a.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);
          var y = a.modPow(r,this$1);
          if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
            var j = 1;
            while(j++ < k && y.compareTo(n1) != 0) {
              y = y.modPowInt(2,this$1);
              if(y.compareTo(BigInteger.ONE) == 0) { return false; }
            }
            if(y.compareTo(n1) != 0) { return false; }
          }
        }
        return true;
      }

      // protected
      BigInteger.prototype.chunkSize = bnpChunkSize;
      BigInteger.prototype.toRadix = bnpToRadix;
      BigInteger.prototype.fromRadix = bnpFromRadix;
      BigInteger.prototype.fromNumber = bnpFromNumber;
      BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
      BigInteger.prototype.changeBit = bnpChangeBit;
      BigInteger.prototype.addTo = bnpAddTo;
      BigInteger.prototype.dMultiply = bnpDMultiply;
      BigInteger.prototype.dAddOffset = bnpDAddOffset;
      BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
      BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
      BigInteger.prototype.modInt = bnpModInt;
      BigInteger.prototype.millerRabin = bnpMillerRabin;

      // public
      BigInteger.prototype.clone = bnClone;
      BigInteger.prototype.intValue = bnIntValue;
      BigInteger.prototype.byteValue = bnByteValue;
      BigInteger.prototype.shortValue = bnShortValue;
      BigInteger.prototype.signum = bnSigNum;
      BigInteger.prototype.toByteArray = bnToByteArray;
      BigInteger.prototype.equals = bnEquals;
      BigInteger.prototype.min = bnMin;
      BigInteger.prototype.max = bnMax;
      BigInteger.prototype.and = bnAnd;
      BigInteger.prototype.or = bnOr;
      BigInteger.prototype.xor = bnXor;
      BigInteger.prototype.andNot = bnAndNot;
      BigInteger.prototype.not = bnNot;
      BigInteger.prototype.shiftLeft = bnShiftLeft;
      BigInteger.prototype.shiftRight = bnShiftRight;
      BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
      BigInteger.prototype.bitCount = bnBitCount;
      BigInteger.prototype.testBit = bnTestBit;
      BigInteger.prototype.setBit = bnSetBit;
      BigInteger.prototype.clearBit = bnClearBit;
      BigInteger.prototype.flipBit = bnFlipBit;
      BigInteger.prototype.add = bnAdd;
      BigInteger.prototype.subtract = bnSubtract;
      BigInteger.prototype.multiply = bnMultiply;
      BigInteger.prototype.divide = bnDivide;
      BigInteger.prototype.remainder = bnRemainder;
      BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
      BigInteger.prototype.modPow = bnModPow;
      BigInteger.prototype.modInverse = bnModInverse;
      BigInteger.prototype.pow = bnPow;
      BigInteger.prototype.gcd = bnGCD;
      BigInteger.prototype.isProbablePrime = bnIsProbablePrime;

      // JSBN-specific extension
      BigInteger.prototype.square = bnSquare;

      // Expose the Barrett function
      BigInteger.prototype.Barrett = Barrett;

      // BigInteger interfaces not implemented in jsbn:

      // BigInteger(int signum, byte[] magnitude)
      // double doubleValue()
      // float floatValue()
      // int hashCode()
      // long longValue()
      // static BigInteger valueOf(long val)

  	// Random number generator - requires a PRNG backend, e.g. prng4.js

  	// For best results, put code like
  	// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>
  	// in your main HTML document.

  	var rng_state;
  	var rng_pool;
  	var rng_pptr;

  	// Mix in a 32-bit integer into the pool
  	function rng_seed_int(x) {
  	  rng_pool[rng_pptr++] ^= x & 255;
  	  rng_pool[rng_pptr++] ^= (x >> 8) & 255;
  	  rng_pool[rng_pptr++] ^= (x >> 16) & 255;
  	  rng_pool[rng_pptr++] ^= (x >> 24) & 255;
  	  if(rng_pptr >= rng_psize) { rng_pptr -= rng_psize; }
  	}

  	// Mix in the current time (w/milliseconds) into the pool
  	function rng_seed_time() {
  	  rng_seed_int(new Date().getTime());
  	}

  	// Initialize the pool with junk if needed.
  	if(rng_pool == null) {
  	  rng_pool = new Array();
  	  rng_pptr = 0;
  	  var t;
  	  if(typeof window !== "undefined" && window.crypto) {
  		if (window.crypto.getRandomValues) {
  		  // Use webcrypto if available
  		  var ua = new Uint8Array(32);
  		  window.crypto.getRandomValues(ua);
  		  for(t = 0; t < 32; ++t)
  			{ rng_pool[rng_pptr++] = ua[t]; }
  		}
  		else if(navigator.appName == "Netscape" && navigator.appVersion < "5") {
  		  // Extract entropy (256 bits) from NS4 RNG if available
  		  var z = window.crypto.random(32);
  		  for(t = 0; t < z.length; ++t)
  			{ rng_pool[rng_pptr++] = z.charCodeAt(t) & 255; }
  		}
  	  }
  	  while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()
  		t = Math.floor(65536 * Math.random());
  		rng_pool[rng_pptr++] = t >>> 8;
  		rng_pool[rng_pptr++] = t & 255;
  	  }
  	  rng_pptr = 0;
  	  rng_seed_time();
  	  //rng_seed_int(window.screenX);
  	  //rng_seed_int(window.screenY);
  	}

  	function rng_get_byte() {
  	  if(rng_state == null) {
  		rng_seed_time();
  		rng_state = prng_newstate();
  		rng_state.init(rng_pool);
  		for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)
  		  { rng_pool[rng_pptr] = 0; }
  		rng_pptr = 0;
  		//rng_pool = null;
  	  }
  	  // TODO: allow reseeding after first request
  	  return rng_state.next();
  	}

  	function rng_get_bytes(ba) {
  	  var i;
  	  for(i = 0; i < ba.length; ++i) { ba[i] = rng_get_byte(); }
  	}

  	function SecureRandom() {}

  	SecureRandom.prototype.nextBytes = rng_get_bytes;

  	// prng4.js - uses Arcfour as a PRNG

  	function Arcfour() {
  	  this.i = 0;
  	  this.j = 0;
  	  this.S = new Array();
  	}

  	// Initialize arcfour context from key, an array of ints, each from [0..255]
  	function ARC4init(key) {
  	  var this$1 = this;

  	  var i, j, t;
  	  for(i = 0; i < 256; ++i)
  		{ this$1.S[i] = i; }
  	  j = 0;
  	  for(i = 0; i < 256; ++i) {
  		j = (j + this$1.S[i] + key[i % key.length]) & 255;
  		t = this$1.S[i];
  		this$1.S[i] = this$1.S[j];
  		this$1.S[j] = t;
  	  }
  	  this.i = 0;
  	  this.j = 0;
  	}

  	function ARC4next() {
  	  var t;
  	  this.i = (this.i + 1) & 255;
  	  this.j = (this.j + this.S[this.i]) & 255;
  	  t = this.S[this.i];
  	  this.S[this.i] = this.S[this.j];
  	  this.S[this.j] = t;
  	  return this.S[(t + this.S[this.i]) & 255];
  	}

  	Arcfour.prototype.init = ARC4init;
  	Arcfour.prototype.next = ARC4next;

  	// Plug in your RNG constructor here
  	function prng_newstate() {
  	  return new Arcfour();
  	}

  	// Pool size must be a multiple of 4 and greater than 32.
  	// An array of bytes the size of the pool will be passed to init()
  	var rng_psize = 256;

    BigInteger.SecureRandom = SecureRandom;
    BigInteger.BigInteger = BigInteger;
    {
      exports = module.exports = BigInteger;
    }

  }).call(commonjsGlobal);
  });

  // Basic Javascript Elliptic Curve implementation
  // Ported loosely from BouncyCastle's Java EC code
  // Only Fp curves implemented for now

  // Requires jsbn.js and jsbn2.js
  var BigInteger = jsbn.BigInteger;
  var Barrett = BigInteger.prototype.Barrett;

  // ----------------
  // ECFieldElementFp

  // constructor
  function ECFieldElementFp(q,x) {
      this.x = x;
      // TODO if(x.compareTo(q) >= 0) error
      this.q = q;
  }

  function feFpEquals(other) {
      if(other == this) { return true; }
      return (this.q.equals(other.q) && this.x.equals(other.x));
  }

  function feFpToBigInteger() {
      return this.x;
  }

  function feFpNegate() {
      return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));
  }

  function feFpAdd(b) {
      return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q));
  }

  function feFpSubtract(b) {
      return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q));
  }

  function feFpMultiply(b) {
      return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q));
  }

  function feFpSquare() {
      return new ECFieldElementFp(this.q, this.x.square().mod(this.q));
  }

  function feFpDivide(b) {
      return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q));
  }

  ECFieldElementFp.prototype.equals = feFpEquals;
  ECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;
  ECFieldElementFp.prototype.negate = feFpNegate;
  ECFieldElementFp.prototype.add = feFpAdd;
  ECFieldElementFp.prototype.subtract = feFpSubtract;
  ECFieldElementFp.prototype.multiply = feFpMultiply;
  ECFieldElementFp.prototype.square = feFpSquare;
  ECFieldElementFp.prototype.divide = feFpDivide;

  // ----------------
  // ECPointFp

  // constructor
  function ECPointFp(curve,x,y,z) {
      this.curve = curve;
      this.x = x;
      this.y = y;
      // Projective coordinates: either zinv == null or z * zinv == 1
      // z and zinv are just BigIntegers, not fieldElements
      if(z == null) {
        this.z = BigInteger.ONE;
      }
      else {
        this.z = z;
      }
      this.zinv = null;
      //TODO: compression flag
  }

  function pointFpGetX() {
      if(this.zinv == null) {
        this.zinv = this.z.modInverse(this.curve.q);
      }
      var r = this.x.toBigInteger().multiply(this.zinv);
      this.curve.reduce(r);
      return this.curve.fromBigInteger(r);
  }

  function pointFpGetY() {
      if(this.zinv == null) {
        this.zinv = this.z.modInverse(this.curve.q);
      }
      var r = this.y.toBigInteger().multiply(this.zinv);
      this.curve.reduce(r);
      return this.curve.fromBigInteger(r);
  }

  function pointFpEquals(other) {
      if(other == this) { return true; }
      if(this.isInfinity()) { return other.isInfinity(); }
      if(other.isInfinity()) { return this.isInfinity(); }
      var u, v;
      // u = Y2 * Z1 - Y1 * Z2
      u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q);
      if(!u.equals(BigInteger.ZERO)) { return false; }
      // v = X2 * Z1 - X1 * Z2
      v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q);
      return v.equals(BigInteger.ZERO);
  }

  function pointFpIsInfinity() {
      if((this.x == null) && (this.y == null)) { return true; }
      return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);
  }

  function pointFpNegate() {
      return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);
  }

  function pointFpAdd(b) {
      if(this.isInfinity()) { return b; }
      if(b.isInfinity()) { return this; }

      // u = Y2 * Z1 - Y1 * Z2
      var u = b.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(b.z)).mod(this.curve.q);
      // v = X2 * Z1 - X1 * Z2
      var v = b.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(b.z)).mod(this.curve.q);

      if(BigInteger.ZERO.equals(v)) {
          if(BigInteger.ZERO.equals(u)) {
              return this.twice(); // this == b, so double
          }
  	return this.curve.getInfinity(); // this = -b, so infinity
      }

      var THREE = new BigInteger("3");
      var x1 = this.x.toBigInteger();
      var y1 = this.y.toBigInteger();
      var x2 = b.x.toBigInteger();
      var y2 = b.y.toBigInteger();

      var v2 = v.square();
      var v3 = v2.multiply(v);
      var x1v2 = x1.multiply(v2);
      var zu2 = u.square().multiply(this.z);

      // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)
      var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.q);
      // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3
      var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.q);
      // z3 = v^3 * z1 * z2
      var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.q);

      return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);
  }

  function pointFpTwice() {
      if(this.isInfinity()) { return this; }
      if(this.y.toBigInteger().signum() == 0) { return this.curve.getInfinity(); }

      // TODO: optimized handling of constants
      var THREE = new BigInteger("3");
      var x1 = this.x.toBigInteger();
      var y1 = this.y.toBigInteger();

      var y1z1 = y1.multiply(this.z);
      var y1sqz1 = y1z1.multiply(y1).mod(this.curve.q);
      var a = this.curve.a.toBigInteger();

      // w = 3 * x1^2 + a * z1^2
      var w = x1.square().multiply(THREE);
      if(!BigInteger.ZERO.equals(a)) {
        w = w.add(this.z.square().multiply(a));
      }
      w = w.mod(this.curve.q);
      //this.curve.reduce(w);
      // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)
      var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.q);
      // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3
      var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.square().multiply(w)).mod(this.curve.q);
      // z3 = 8 * (y1 * z1)^3
      var z3 = y1z1.square().multiply(y1z1).shiftLeft(3).mod(this.curve.q);

      return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);
  }

  // Simple NAF (Non-Adjacent Form) multiplication algorithm
  // TODO: modularize the multiplication algorithm
  function pointFpMultiply(k) {
      var this$1 = this;

      if(this.isInfinity()) { return this; }
      if(k.signum() == 0) { return this.curve.getInfinity(); }

      var e = k;
      var h = e.multiply(new BigInteger("3"));

      var neg = this.negate();
      var R = this;

      var i;
      for(i = h.bitLength() - 2; i > 0; --i) {
  	R = R.twice();

  	var hBit = h.testBit(i);
  	var eBit = e.testBit(i);

  	if (hBit != eBit) {
  	    R = R.add(hBit ? this$1 : neg);
  	}
      }

      return R;
  }

  // Compute this*j + x*k (simultaneous multiplication)
  function pointFpMultiplyTwo(j,x,k) {
    var this$1 = this;

    var i;
    if(j.bitLength() > k.bitLength())
      { i = j.bitLength() - 1; }
    else
      { i = k.bitLength() - 1; }

    var R = this.curve.getInfinity();
    var both = this.add(x);
    while(i >= 0) {
      R = R.twice();
      if(j.testBit(i)) {
        if(k.testBit(i)) {
          R = R.add(both);
        }
        else {
          R = R.add(this$1);
        }
      }
      else {
        if(k.testBit(i)) {
          R = R.add(x);
        }
      }
      --i;
    }

    return R;
  }

  ECPointFp.prototype.getX = pointFpGetX;
  ECPointFp.prototype.getY = pointFpGetY;
  ECPointFp.prototype.equals = pointFpEquals;
  ECPointFp.prototype.isInfinity = pointFpIsInfinity;
  ECPointFp.prototype.negate = pointFpNegate;
  ECPointFp.prototype.add = pointFpAdd;
  ECPointFp.prototype.twice = pointFpTwice;
  ECPointFp.prototype.multiply = pointFpMultiply;
  ECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;

  // ----------------
  // ECCurveFp

  // constructor
  function ECCurveFp(q,a,b) {
      this.q = q;
      this.a = this.fromBigInteger(a);
      this.b = this.fromBigInteger(b);
      this.infinity = new ECPointFp(this, null, null);
      this.reducer = new Barrett(this.q);
  }

  function curveFpGetQ() {
      return this.q;
  }

  function curveFpGetA() {
      return this.a;
  }

  function curveFpGetB() {
      return this.b;
  }

  function curveFpEquals(other) {
      if(other == this) { return true; }
      return(this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b));
  }

  function curveFpGetInfinity() {
      return this.infinity;
  }

  function curveFpFromBigInteger(x) {
      return new ECFieldElementFp(this.q, x);
  }

  function curveReduce(x) {
      this.reducer.reduce(x);
  }

  function curveFpEncodePointHex(p) {
  	if (p.isInfinity()) { return "00"; }
  	var xHex = p.getX().toBigInteger().toString(16);
  	var yHex = p.getY().toBigInteger().toString(16);
  	var oLen = this.getQ().toString(16).length;
  	if ((oLen % 2) != 0) { oLen++; }
  	while (xHex.length < oLen) {
  		xHex = "0" + xHex;
  	}
  	while (yHex.length < oLen) {
  		yHex = "0" + yHex;
  	}
  	return "04" + xHex + yHex;
  }

  ECCurveFp.prototype.getQ = curveFpGetQ;
  ECCurveFp.prototype.getA = curveFpGetA;
  ECCurveFp.prototype.getB = curveFpGetB;
  ECCurveFp.prototype.equals = curveFpEquals;
  ECCurveFp.prototype.getInfinity = curveFpGetInfinity;
  ECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;
  ECCurveFp.prototype.reduce = curveReduce;
  //ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;
  ECCurveFp.prototype.encodePointHex = curveFpEncodePointHex;

  // from: https://github.com/kaielvin/jsbn-ec-point-compression
  ECCurveFp.prototype.decodePointHex = function(s)
  {
  	var yIsEven;
      switch(parseInt(s.substr(0,2), 16)) { // first byte
      case 0:
  	return this.infinity;
      case 2:
  	yIsEven = false;
      case 3:
  	if(yIsEven == undefined) { yIsEven = true; }
  	var len = s.length - 2;
  	var xHex = s.substr(2, len);
  	var x = this.fromBigInteger(new BigInteger(xHex,16));
  	var alpha = x.multiply(x.square().add(this.getA())).add(this.getB());
  	var beta = alpha.sqrt();

      if (beta == null) { throw "Invalid point compression"; }

      var betaValue = beta.toBigInteger();
      if (betaValue.testBit(0) != yIsEven)
      {
          // Use the other root
          beta = this.fromBigInteger(this.getQ().subtract(betaValue));
      }
      return new ECPointFp(this,x,beta);
      case 4:
      case 6:
      case 7:
  	var len = (s.length - 2) / 2;
  	var xHex = s.substr(2, len);
  	var yHex = s.substr(len+2, len);

  	return new ECPointFp(this,
  			     this.fromBigInteger(new BigInteger(xHex, 16)),
  			     this.fromBigInteger(new BigInteger(yHex, 16)));

      default: // unsupported
  	return null;
      }
  };
  ECCurveFp.prototype.encodeCompressedPointHex = function(p)
  {
  	if (p.isInfinity()) { return "00"; }
  	var xHex = p.getX().toBigInteger().toString(16);
  	var oLen = this.getQ().toString(16).length;
  	if ((oLen % 2) != 0) { oLen++; }
  	while (xHex.length < oLen)
  		{ xHex = "0" + xHex; }
  	var yPrefix;
  	if(p.getY().toBigInteger().isEven()) { yPrefix = "02"; }
  	else                                 { yPrefix = "03"; }

  	return yPrefix + xHex;
  };


  ECFieldElementFp.prototype.getR = function()
  {
  	if(this.r != undefined) { return this.r; }

      this.r = null;
      var bitLength = this.q.bitLength();
      if (bitLength > 128)
      {
          var firstWord = this.q.shiftRight(bitLength - 64);
          if (firstWord.intValue() == -1)
          {
              this.r = BigInteger.ONE.shiftLeft(bitLength).subtract(this.q);
          }
      }
      return this.r;
  };
  ECFieldElementFp.prototype.modMult = function(x1,x2)
  {
      return this.modReduce(x1.multiply(x2));
  };
  ECFieldElementFp.prototype.modReduce = function(x)
  {
      var this$1 = this;

      if (this.getR() != null)
      {
          var qLen = q.bitLength();
          while (x.bitLength() > (qLen + 1))
          {
              var u = x.shiftRight(qLen);
              var v = x.subtract(u.shiftLeft(qLen));
              if (!this$1.getR().equals(BigInteger.ONE))
              {
                  u = u.multiply(this$1.getR());
              }
              x = u.add(v); 
          }
          while (x.compareTo(q) >= 0)
          {
              x = x.subtract(q);
          }
      }
      else
      {
          x = x.mod(q);
      }
      return x;
  };
  ECFieldElementFp.prototype.sqrt = function()
  {
      var this$1 = this;

      if (!this.q.testBit(0)) { throw "unsupported"; }

      // p mod 4 == 3
      if (this.q.testBit(1))
      {
      	var z = new ECFieldElementFp(this.q,this.x.modPow(this.q.shiftRight(2).add(BigInteger.ONE),this.q));
      	return z.square().equals(this) ? z : null;
      }

      // p mod 4 == 1
      var qMinusOne = this.q.subtract(BigInteger.ONE);

      var legendreExponent = qMinusOne.shiftRight(1);
      if (!(this.x.modPow(legendreExponent, this.q).equals(BigInteger.ONE)))
      {
          return null;
      }

      var u = qMinusOne.shiftRight(2);
      var k = u.shiftLeft(1).add(BigInteger.ONE);

      var Q = this.x;
      var fourQ = modDouble(modDouble(Q));

      var U, V;
      do
      {
          var P;
          do
          {
              P = new BigInteger(this$1.q.bitLength(), new SecureRandom());
          }
          while (P.compareTo(this.q) >= 0
              || !(P.multiply(P).subtract(fourQ).modPow(legendreExponent, this.q).equals(qMinusOne)));

          var result = this$1.lucasSequence(P, Q, k);
          U = result[0];
          V = result[1];

          if (this$1.modMult(V, V).equals(fourQ))
          {
              // Integer division by 2, mod q
              if (V.testBit(0))
              {
                  V = V.add(q);
              }

              V = V.shiftRight(1);

              return new ECFieldElementFp(q,V);
          }
      }
      while (U.equals(BigInteger.ONE) || U.equals(qMinusOne));

      return null;
  };
  ECFieldElementFp.prototype.lucasSequence = function(P,Q,k)
  {
      var this$1 = this;

      var n = k.bitLength();
      var s = k.getLowestSetBit();

      var Uh = BigInteger.ONE;
      var Vl = BigInteger.TWO;
      var Vh = P;
      var Ql = BigInteger.ONE;
      var Qh = BigInteger.ONE;

      for (var j = n - 1; j >= s + 1; --j)
      {
          Ql = this$1.modMult(Ql, Qh);

          if (k.testBit(j))
          {
              Qh = this$1.modMult(Ql, Q);
              Uh = this$1.modMult(Uh, Vh);
              Vl = this$1.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));
              Vh = this$1.modReduce(Vh.multiply(Vh).subtract(Qh.shiftLeft(1)));
          }
          else
          {
              Qh = Ql;
              Uh = this$1.modReduce(Uh.multiply(Vl).subtract(Ql));
              Vh = this$1.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));
              Vl = this$1.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));
          }
      }

      Ql = this.modMult(Ql, Qh);
      Qh = this.modMult(Ql, Q);
      Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));
      Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));
      Ql = this.modMult(Ql, Qh);

      for (var j = 1; j <= s; ++j)
      {
          Uh = this$1.modMult(Uh, Vl);
          Vl = this$1.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));
          Ql = this$1.modMult(Ql, Ql);
      }

      return [ Uh, Vl ];
  };

  var exports$1 = {
    ECCurveFp: ECCurveFp,
    ECPointFp: ECPointFp,
    ECFieldElementFp: ECFieldElementFp
  };

  var ec = exports$1;

  // Named EC curves

  // Requires ec.js, jsbn.js, and jsbn2.js
  var BigInteger$1 = jsbn.BigInteger;

  var BigInteger$2 = jsbn.BigInteger;

  var naclFast = createCommonjsModule(function (module) {
  (function(nacl) {

  // Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
  // Public domain.
  //
  // Implementation derived from TweetNaCl version 20140427.
  // See for details: http://tweetnacl.cr.yp.to/

  var gf = function(init) {
    var i, r = new Float64Array(16);
    if (init) { for (i = 0; i < init.length; i++) { r[i] = init[i]; } }
    return r;
  };

  //  Pluggable, initialized in high-level API below.
  var randombytes = function(/* x, n */) { throw new Error('no PRNG'); };

  var _0 = new Uint8Array(16);
  var _9 = new Uint8Array(32); _9[0] = 9;

  var gf0 = gf(),
      gf1 = gf([1]),
      _121665 = gf([0xdb41, 1]),
      D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
      D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
      X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
      Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
      I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

  function ts64(x, i, h, l) {
    x[i]   = (h >> 24) & 0xff;
    x[i+1] = (h >> 16) & 0xff;
    x[i+2] = (h >>  8) & 0xff;
    x[i+3] = h & 0xff;
    x[i+4] = (l >> 24)  & 0xff;
    x[i+5] = (l >> 16)  & 0xff;
    x[i+6] = (l >>  8)  & 0xff;
    x[i+7] = l & 0xff;
  }

  function vn(x, xi, y, yi, n) {
    var i,d = 0;
    for (i = 0; i < n; i++) { d |= x[xi+i]^y[yi+i]; }
    return (1 & ((d - 1) >>> 8)) - 1;
  }

  function crypto_verify_16(x, xi, y, yi) {
    return vn(x,xi,y,yi,16);
  }

  function crypto_verify_32(x, xi, y, yi) {
    return vn(x,xi,y,yi,32);
  }

  function core_salsa20(o, p, k, c) {
    var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
        j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
        j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
        j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
        j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
        j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
        j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
        j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
        j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
        j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
        j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
        j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
        j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
        j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
        j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
        j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

    var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
        x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
        x15 = j15, u;

    for (var i = 0; i < 20; i += 2) {
      u = x0 + x12 | 0;
      x4 ^= u<<7 | u>>>(32-7);
      u = x4 + x0 | 0;
      x8 ^= u<<9 | u>>>(32-9);
      u = x8 + x4 | 0;
      x12 ^= u<<13 | u>>>(32-13);
      u = x12 + x8 | 0;
      x0 ^= u<<18 | u>>>(32-18);

      u = x5 + x1 | 0;
      x9 ^= u<<7 | u>>>(32-7);
      u = x9 + x5 | 0;
      x13 ^= u<<9 | u>>>(32-9);
      u = x13 + x9 | 0;
      x1 ^= u<<13 | u>>>(32-13);
      u = x1 + x13 | 0;
      x5 ^= u<<18 | u>>>(32-18);

      u = x10 + x6 | 0;
      x14 ^= u<<7 | u>>>(32-7);
      u = x14 + x10 | 0;
      x2 ^= u<<9 | u>>>(32-9);
      u = x2 + x14 | 0;
      x6 ^= u<<13 | u>>>(32-13);
      u = x6 + x2 | 0;
      x10 ^= u<<18 | u>>>(32-18);

      u = x15 + x11 | 0;
      x3 ^= u<<7 | u>>>(32-7);
      u = x3 + x15 | 0;
      x7 ^= u<<9 | u>>>(32-9);
      u = x7 + x3 | 0;
      x11 ^= u<<13 | u>>>(32-13);
      u = x11 + x7 | 0;
      x15 ^= u<<18 | u>>>(32-18);

      u = x0 + x3 | 0;
      x1 ^= u<<7 | u>>>(32-7);
      u = x1 + x0 | 0;
      x2 ^= u<<9 | u>>>(32-9);
      u = x2 + x1 | 0;
      x3 ^= u<<13 | u>>>(32-13);
      u = x3 + x2 | 0;
      x0 ^= u<<18 | u>>>(32-18);

      u = x5 + x4 | 0;
      x6 ^= u<<7 | u>>>(32-7);
      u = x6 + x5 | 0;
      x7 ^= u<<9 | u>>>(32-9);
      u = x7 + x6 | 0;
      x4 ^= u<<13 | u>>>(32-13);
      u = x4 + x7 | 0;
      x5 ^= u<<18 | u>>>(32-18);

      u = x10 + x9 | 0;
      x11 ^= u<<7 | u>>>(32-7);
      u = x11 + x10 | 0;
      x8 ^= u<<9 | u>>>(32-9);
      u = x8 + x11 | 0;
      x9 ^= u<<13 | u>>>(32-13);
      u = x9 + x8 | 0;
      x10 ^= u<<18 | u>>>(32-18);

      u = x15 + x14 | 0;
      x12 ^= u<<7 | u>>>(32-7);
      u = x12 + x15 | 0;
      x13 ^= u<<9 | u>>>(32-9);
      u = x13 + x12 | 0;
      x14 ^= u<<13 | u>>>(32-13);
      u = x14 + x13 | 0;
      x15 ^= u<<18 | u>>>(32-18);
    }
     x0 =  x0 +  j0 | 0;
     x1 =  x1 +  j1 | 0;
     x2 =  x2 +  j2 | 0;
     x3 =  x3 +  j3 | 0;
     x4 =  x4 +  j4 | 0;
     x5 =  x5 +  j5 | 0;
     x6 =  x6 +  j6 | 0;
     x7 =  x7 +  j7 | 0;
     x8 =  x8 +  j8 | 0;
     x9 =  x9 +  j9 | 0;
    x10 = x10 + j10 | 0;
    x11 = x11 + j11 | 0;
    x12 = x12 + j12 | 0;
    x13 = x13 + j13 | 0;
    x14 = x14 + j14 | 0;
    x15 = x15 + j15 | 0;

    o[ 0] = x0 >>>  0 & 0xff;
    o[ 1] = x0 >>>  8 & 0xff;
    o[ 2] = x0 >>> 16 & 0xff;
    o[ 3] = x0 >>> 24 & 0xff;

    o[ 4] = x1 >>>  0 & 0xff;
    o[ 5] = x1 >>>  8 & 0xff;
    o[ 6] = x1 >>> 16 & 0xff;
    o[ 7] = x1 >>> 24 & 0xff;

    o[ 8] = x2 >>>  0 & 0xff;
    o[ 9] = x2 >>>  8 & 0xff;
    o[10] = x2 >>> 16 & 0xff;
    o[11] = x2 >>> 24 & 0xff;

    o[12] = x3 >>>  0 & 0xff;
    o[13] = x3 >>>  8 & 0xff;
    o[14] = x3 >>> 16 & 0xff;
    o[15] = x3 >>> 24 & 0xff;

    o[16] = x4 >>>  0 & 0xff;
    o[17] = x4 >>>  8 & 0xff;
    o[18] = x4 >>> 16 & 0xff;
    o[19] = x4 >>> 24 & 0xff;

    o[20] = x5 >>>  0 & 0xff;
    o[21] = x5 >>>  8 & 0xff;
    o[22] = x5 >>> 16 & 0xff;
    o[23] = x5 >>> 24 & 0xff;

    o[24] = x6 >>>  0 & 0xff;
    o[25] = x6 >>>  8 & 0xff;
    o[26] = x6 >>> 16 & 0xff;
    o[27] = x6 >>> 24 & 0xff;

    o[28] = x7 >>>  0 & 0xff;
    o[29] = x7 >>>  8 & 0xff;
    o[30] = x7 >>> 16 & 0xff;
    o[31] = x7 >>> 24 & 0xff;

    o[32] = x8 >>>  0 & 0xff;
    o[33] = x8 >>>  8 & 0xff;
    o[34] = x8 >>> 16 & 0xff;
    o[35] = x8 >>> 24 & 0xff;

    o[36] = x9 >>>  0 & 0xff;
    o[37] = x9 >>>  8 & 0xff;
    o[38] = x9 >>> 16 & 0xff;
    o[39] = x9 >>> 24 & 0xff;

    o[40] = x10 >>>  0 & 0xff;
    o[41] = x10 >>>  8 & 0xff;
    o[42] = x10 >>> 16 & 0xff;
    o[43] = x10 >>> 24 & 0xff;

    o[44] = x11 >>>  0 & 0xff;
    o[45] = x11 >>>  8 & 0xff;
    o[46] = x11 >>> 16 & 0xff;
    o[47] = x11 >>> 24 & 0xff;

    o[48] = x12 >>>  0 & 0xff;
    o[49] = x12 >>>  8 & 0xff;
    o[50] = x12 >>> 16 & 0xff;
    o[51] = x12 >>> 24 & 0xff;

    o[52] = x13 >>>  0 & 0xff;
    o[53] = x13 >>>  8 & 0xff;
    o[54] = x13 >>> 16 & 0xff;
    o[55] = x13 >>> 24 & 0xff;

    o[56] = x14 >>>  0 & 0xff;
    o[57] = x14 >>>  8 & 0xff;
    o[58] = x14 >>> 16 & 0xff;
    o[59] = x14 >>> 24 & 0xff;

    o[60] = x15 >>>  0 & 0xff;
    o[61] = x15 >>>  8 & 0xff;
    o[62] = x15 >>> 16 & 0xff;
    o[63] = x15 >>> 24 & 0xff;
  }

  function core_hsalsa20(o,p,k,c) {
    var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
        j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
        j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
        j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
        j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
        j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
        j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
        j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
        j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
        j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
        j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
        j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
        j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
        j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
        j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
        j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

    var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
        x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
        x15 = j15, u;

    for (var i = 0; i < 20; i += 2) {
      u = x0 + x12 | 0;
      x4 ^= u<<7 | u>>>(32-7);
      u = x4 + x0 | 0;
      x8 ^= u<<9 | u>>>(32-9);
      u = x8 + x4 | 0;
      x12 ^= u<<13 | u>>>(32-13);
      u = x12 + x8 | 0;
      x0 ^= u<<18 | u>>>(32-18);

      u = x5 + x1 | 0;
      x9 ^= u<<7 | u>>>(32-7);
      u = x9 + x5 | 0;
      x13 ^= u<<9 | u>>>(32-9);
      u = x13 + x9 | 0;
      x1 ^= u<<13 | u>>>(32-13);
      u = x1 + x13 | 0;
      x5 ^= u<<18 | u>>>(32-18);

      u = x10 + x6 | 0;
      x14 ^= u<<7 | u>>>(32-7);
      u = x14 + x10 | 0;
      x2 ^= u<<9 | u>>>(32-9);
      u = x2 + x14 | 0;
      x6 ^= u<<13 | u>>>(32-13);
      u = x6 + x2 | 0;
      x10 ^= u<<18 | u>>>(32-18);

      u = x15 + x11 | 0;
      x3 ^= u<<7 | u>>>(32-7);
      u = x3 + x15 | 0;
      x7 ^= u<<9 | u>>>(32-9);
      u = x7 + x3 | 0;
      x11 ^= u<<13 | u>>>(32-13);
      u = x11 + x7 | 0;
      x15 ^= u<<18 | u>>>(32-18);

      u = x0 + x3 | 0;
      x1 ^= u<<7 | u>>>(32-7);
      u = x1 + x0 | 0;
      x2 ^= u<<9 | u>>>(32-9);
      u = x2 + x1 | 0;
      x3 ^= u<<13 | u>>>(32-13);
      u = x3 + x2 | 0;
      x0 ^= u<<18 | u>>>(32-18);

      u = x5 + x4 | 0;
      x6 ^= u<<7 | u>>>(32-7);
      u = x6 + x5 | 0;
      x7 ^= u<<9 | u>>>(32-9);
      u = x7 + x6 | 0;
      x4 ^= u<<13 | u>>>(32-13);
      u = x4 + x7 | 0;
      x5 ^= u<<18 | u>>>(32-18);

      u = x10 + x9 | 0;
      x11 ^= u<<7 | u>>>(32-7);
      u = x11 + x10 | 0;
      x8 ^= u<<9 | u>>>(32-9);
      u = x8 + x11 | 0;
      x9 ^= u<<13 | u>>>(32-13);
      u = x9 + x8 | 0;
      x10 ^= u<<18 | u>>>(32-18);

      u = x15 + x14 | 0;
      x12 ^= u<<7 | u>>>(32-7);
      u = x12 + x15 | 0;
      x13 ^= u<<9 | u>>>(32-9);
      u = x13 + x12 | 0;
      x14 ^= u<<13 | u>>>(32-13);
      u = x14 + x13 | 0;
      x15 ^= u<<18 | u>>>(32-18);
    }

    o[ 0] = x0 >>>  0 & 0xff;
    o[ 1] = x0 >>>  8 & 0xff;
    o[ 2] = x0 >>> 16 & 0xff;
    o[ 3] = x0 >>> 24 & 0xff;

    o[ 4] = x5 >>>  0 & 0xff;
    o[ 5] = x5 >>>  8 & 0xff;
    o[ 6] = x5 >>> 16 & 0xff;
    o[ 7] = x5 >>> 24 & 0xff;

    o[ 8] = x10 >>>  0 & 0xff;
    o[ 9] = x10 >>>  8 & 0xff;
    o[10] = x10 >>> 16 & 0xff;
    o[11] = x10 >>> 24 & 0xff;

    o[12] = x15 >>>  0 & 0xff;
    o[13] = x15 >>>  8 & 0xff;
    o[14] = x15 >>> 16 & 0xff;
    o[15] = x15 >>> 24 & 0xff;

    o[16] = x6 >>>  0 & 0xff;
    o[17] = x6 >>>  8 & 0xff;
    o[18] = x6 >>> 16 & 0xff;
    o[19] = x6 >>> 24 & 0xff;

    o[20] = x7 >>>  0 & 0xff;
    o[21] = x7 >>>  8 & 0xff;
    o[22] = x7 >>> 16 & 0xff;
    o[23] = x7 >>> 24 & 0xff;

    o[24] = x8 >>>  0 & 0xff;
    o[25] = x8 >>>  8 & 0xff;
    o[26] = x8 >>> 16 & 0xff;
    o[27] = x8 >>> 24 & 0xff;

    o[28] = x9 >>>  0 & 0xff;
    o[29] = x9 >>>  8 & 0xff;
    o[30] = x9 >>> 16 & 0xff;
    o[31] = x9 >>> 24 & 0xff;
  }

  function crypto_core_salsa20(out,inp,k,c) {
    core_salsa20(out,inp,k,c);
  }

  function crypto_core_hsalsa20(out,inp,k,c) {
    core_hsalsa20(out,inp,k,c);
  }

  var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
              // "expand 32-byte k"

  function crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {
    var z = new Uint8Array(16), x = new Uint8Array(64);
    var u, i;
    for (i = 0; i < 16; i++) { z[i] = 0; }
    for (i = 0; i < 8; i++) { z[i] = n[i]; }
    while (b >= 64) {
      crypto_core_salsa20(x,z,k,sigma);
      for (i = 0; i < 64; i++) { c[cpos+i] = m[mpos+i] ^ x[i]; }
      u = 1;
      for (i = 8; i < 16; i++) {
        u = u + (z[i] & 0xff) | 0;
        z[i] = u & 0xff;
        u >>>= 8;
      }
      b -= 64;
      cpos += 64;
      mpos += 64;
    }
    if (b > 0) {
      crypto_core_salsa20(x,z,k,sigma);
      for (i = 0; i < b; i++) { c[cpos+i] = m[mpos+i] ^ x[i]; }
    }
    return 0;
  }

  function crypto_stream_salsa20(c,cpos,b,n,k) {
    var z = new Uint8Array(16), x = new Uint8Array(64);
    var u, i;
    for (i = 0; i < 16; i++) { z[i] = 0; }
    for (i = 0; i < 8; i++) { z[i] = n[i]; }
    while (b >= 64) {
      crypto_core_salsa20(x,z,k,sigma);
      for (i = 0; i < 64; i++) { c[cpos+i] = x[i]; }
      u = 1;
      for (i = 8; i < 16; i++) {
        u = u + (z[i] & 0xff) | 0;
        z[i] = u & 0xff;
        u >>>= 8;
      }
      b -= 64;
      cpos += 64;
    }
    if (b > 0) {
      crypto_core_salsa20(x,z,k,sigma);
      for (i = 0; i < b; i++) { c[cpos+i] = x[i]; }
    }
    return 0;
  }

  function crypto_stream(c,cpos,d,n,k) {
    var s = new Uint8Array(32);
    crypto_core_hsalsa20(s,n,k,sigma);
    var sn = new Uint8Array(8);
    for (var i = 0; i < 8; i++) { sn[i] = n[i+16]; }
    return crypto_stream_salsa20(c,cpos,d,sn,s);
  }

  function crypto_stream_xor(c,cpos,m,mpos,d,n,k) {
    var s = new Uint8Array(32);
    crypto_core_hsalsa20(s,n,k,sigma);
    var sn = new Uint8Array(8);
    for (var i = 0; i < 8; i++) { sn[i] = n[i+16]; }
    return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);
  }

  /*
  * Port of Andrew Moon's Poly1305-donna-16. Public domain.
  * https://github.com/floodyberry/poly1305-donna
  */

  var poly1305 = function(key) {
    this.buffer = new Uint8Array(16);
    this.r = new Uint16Array(10);
    this.h = new Uint16Array(10);
    this.pad = new Uint16Array(8);
    this.leftover = 0;
    this.fin = 0;

    var t0, t1, t2, t3, t4, t5, t6, t7;

    t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;
    t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
    t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;
    t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
    t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;
    this.r[5] = ((t4 >>>  1)) & 0x1ffe;
    t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
    t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;
    t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
    this.r[9] = ((t7 >>>  5)) & 0x007f;

    this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
    this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
    this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
    this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
    this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
    this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
    this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
    this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
  };

  poly1305.prototype.blocks = function(m, mpos, bytes) {
    var hibit = this.fin ? 0 : (1 << 11);
    var t0, t1, t2, t3, t4, t5, t6, t7, c;
    var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

    var h0 = this.h[0],
        h1 = this.h[1],
        h2 = this.h[2],
        h3 = this.h[3],
        h4 = this.h[4],
        h5 = this.h[5],
        h6 = this.h[6],
        h7 = this.h[7],
        h8 = this.h[8],
        h9 = this.h[9];

    var r0 = this.r[0],
        r1 = this.r[1],
        r2 = this.r[2],
        r3 = this.r[3],
        r4 = this.r[4],
        r5 = this.r[5],
        r6 = this.r[6],
        r7 = this.r[7],
        r8 = this.r[8],
        r9 = this.r[9];

    while (bytes >= 16) {
      t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;
      t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
      t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;
      t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
      t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;
      h5 += ((t4 >>>  1)) & 0x1fff;
      t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
      t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;
      t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
      h9 += ((t7 >>> 5)) | hibit;

      c = 0;

      d0 = c;
      d0 += h0 * r0;
      d0 += h1 * (5 * r9);
      d0 += h2 * (5 * r8);
      d0 += h3 * (5 * r7);
      d0 += h4 * (5 * r6);
      c = (d0 >>> 13); d0 &= 0x1fff;
      d0 += h5 * (5 * r5);
      d0 += h6 * (5 * r4);
      d0 += h7 * (5 * r3);
      d0 += h8 * (5 * r2);
      d0 += h9 * (5 * r1);
      c += (d0 >>> 13); d0 &= 0x1fff;

      d1 = c;
      d1 += h0 * r1;
      d1 += h1 * r0;
      d1 += h2 * (5 * r9);
      d1 += h3 * (5 * r8);
      d1 += h4 * (5 * r7);
      c = (d1 >>> 13); d1 &= 0x1fff;
      d1 += h5 * (5 * r6);
      d1 += h6 * (5 * r5);
      d1 += h7 * (5 * r4);
      d1 += h8 * (5 * r3);
      d1 += h9 * (5 * r2);
      c += (d1 >>> 13); d1 &= 0x1fff;

      d2 = c;
      d2 += h0 * r2;
      d2 += h1 * r1;
      d2 += h2 * r0;
      d2 += h3 * (5 * r9);
      d2 += h4 * (5 * r8);
      c = (d2 >>> 13); d2 &= 0x1fff;
      d2 += h5 * (5 * r7);
      d2 += h6 * (5 * r6);
      d2 += h7 * (5 * r5);
      d2 += h8 * (5 * r4);
      d2 += h9 * (5 * r3);
      c += (d2 >>> 13); d2 &= 0x1fff;

      d3 = c;
      d3 += h0 * r3;
      d3 += h1 * r2;
      d3 += h2 * r1;
      d3 += h3 * r0;
      d3 += h4 * (5 * r9);
      c = (d3 >>> 13); d3 &= 0x1fff;
      d3 += h5 * (5 * r8);
      d3 += h6 * (5 * r7);
      d3 += h7 * (5 * r6);
      d3 += h8 * (5 * r5);
      d3 += h9 * (5 * r4);
      c += (d3 >>> 13); d3 &= 0x1fff;

      d4 = c;
      d4 += h0 * r4;
      d4 += h1 * r3;
      d4 += h2 * r2;
      d4 += h3 * r1;
      d4 += h4 * r0;
      c = (d4 >>> 13); d4 &= 0x1fff;
      d4 += h5 * (5 * r9);
      d4 += h6 * (5 * r8);
      d4 += h7 * (5 * r7);
      d4 += h8 * (5 * r6);
      d4 += h9 * (5 * r5);
      c += (d4 >>> 13); d4 &= 0x1fff;

      d5 = c;
      d5 += h0 * r5;
      d5 += h1 * r4;
      d5 += h2 * r3;
      d5 += h3 * r2;
      d5 += h4 * r1;
      c = (d5 >>> 13); d5 &= 0x1fff;
      d5 += h5 * r0;
      d5 += h6 * (5 * r9);
      d5 += h7 * (5 * r8);
      d5 += h8 * (5 * r7);
      d5 += h9 * (5 * r6);
      c += (d5 >>> 13); d5 &= 0x1fff;

      d6 = c;
      d6 += h0 * r6;
      d6 += h1 * r5;
      d6 += h2 * r4;
      d6 += h3 * r3;
      d6 += h4 * r2;
      c = (d6 >>> 13); d6 &= 0x1fff;
      d6 += h5 * r1;
      d6 += h6 * r0;
      d6 += h7 * (5 * r9);
      d6 += h8 * (5 * r8);
      d6 += h9 * (5 * r7);
      c += (d6 >>> 13); d6 &= 0x1fff;

      d7 = c;
      d7 += h0 * r7;
      d7 += h1 * r6;
      d7 += h2 * r5;
      d7 += h3 * r4;
      d7 += h4 * r3;
      c = (d7 >>> 13); d7 &= 0x1fff;
      d7 += h5 * r2;
      d7 += h6 * r1;
      d7 += h7 * r0;
      d7 += h8 * (5 * r9);
      d7 += h9 * (5 * r8);
      c += (d7 >>> 13); d7 &= 0x1fff;

      d8 = c;
      d8 += h0 * r8;
      d8 += h1 * r7;
      d8 += h2 * r6;
      d8 += h3 * r5;
      d8 += h4 * r4;
      c = (d8 >>> 13); d8 &= 0x1fff;
      d8 += h5 * r3;
      d8 += h6 * r2;
      d8 += h7 * r1;
      d8 += h8 * r0;
      d8 += h9 * (5 * r9);
      c += (d8 >>> 13); d8 &= 0x1fff;

      d9 = c;
      d9 += h0 * r9;
      d9 += h1 * r8;
      d9 += h2 * r7;
      d9 += h3 * r6;
      d9 += h4 * r5;
      c = (d9 >>> 13); d9 &= 0x1fff;
      d9 += h5 * r4;
      d9 += h6 * r3;
      d9 += h7 * r2;
      d9 += h8 * r1;
      d9 += h9 * r0;
      c += (d9 >>> 13); d9 &= 0x1fff;

      c = (((c << 2) + c)) | 0;
      c = (c + d0) | 0;
      d0 = c & 0x1fff;
      c = (c >>> 13);
      d1 += c;

      h0 = d0;
      h1 = d1;
      h2 = d2;
      h3 = d3;
      h4 = d4;
      h5 = d5;
      h6 = d6;
      h7 = d7;
      h8 = d8;
      h9 = d9;

      mpos += 16;
      bytes -= 16;
    }
    this.h[0] = h0;
    this.h[1] = h1;
    this.h[2] = h2;
    this.h[3] = h3;
    this.h[4] = h4;
    this.h[5] = h5;
    this.h[6] = h6;
    this.h[7] = h7;
    this.h[8] = h8;
    this.h[9] = h9;
  };

  poly1305.prototype.finish = function(mac, macpos) {
    var this$1 = this;

    var g = new Uint16Array(10);
    var c, mask, f, i;

    if (this.leftover) {
      i = this.leftover;
      this.buffer[i++] = 1;
      for (; i < 16; i++) { this$1.buffer[i] = 0; }
      this.fin = 1;
      this.blocks(this.buffer, 0, 16);
    }

    c = this.h[1] >>> 13;
    this.h[1] &= 0x1fff;
    for (i = 2; i < 10; i++) {
      this$1.h[i] += c;
      c = this$1.h[i] >>> 13;
      this$1.h[i] &= 0x1fff;
    }
    this.h[0] += (c * 5);
    c = this.h[0] >>> 13;
    this.h[0] &= 0x1fff;
    this.h[1] += c;
    c = this.h[1] >>> 13;
    this.h[1] &= 0x1fff;
    this.h[2] += c;

    g[0] = this.h[0] + 5;
    c = g[0] >>> 13;
    g[0] &= 0x1fff;
    for (i = 1; i < 10; i++) {
      g[i] = this$1.h[i] + c;
      c = g[i] >>> 13;
      g[i] &= 0x1fff;
    }
    g[9] -= (1 << 13);

    mask = (c ^ 1) - 1;
    for (i = 0; i < 10; i++) { g[i] &= mask; }
    mask = ~mask;
    for (i = 0; i < 10; i++) { this$1.h[i] = (this$1.h[i] & mask) | g[i]; }

    this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;
    this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;
    this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;
    this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;
    this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;
    this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;
    this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;
    this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;

    f = this.h[0] + this.pad[0];
    this.h[0] = f & 0xffff;
    for (i = 1; i < 8; i++) {
      f = (((this$1.h[i] + this$1.pad[i]) | 0) + (f >>> 16)) | 0;
      this$1.h[i] = f & 0xffff;
    }

    mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;
    mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;
    mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;
    mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;
    mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;
    mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;
    mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;
    mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;
    mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;
    mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;
    mac[macpos+10] = (this.h[5] >>> 0) & 0xff;
    mac[macpos+11] = (this.h[5] >>> 8) & 0xff;
    mac[macpos+12] = (this.h[6] >>> 0) & 0xff;
    mac[macpos+13] = (this.h[6] >>> 8) & 0xff;
    mac[macpos+14] = (this.h[7] >>> 0) & 0xff;
    mac[macpos+15] = (this.h[7] >>> 8) & 0xff;
  };

  poly1305.prototype.update = function(m, mpos, bytes) {
    var this$1 = this;

    var i, want;

    if (this.leftover) {
      want = (16 - this.leftover);
      if (want > bytes)
        { want = bytes; }
      for (i = 0; i < want; i++)
        { this$1.buffer[this$1.leftover + i] = m[mpos+i]; }
      bytes -= want;
      mpos += want;
      this.leftover += want;
      if (this.leftover < 16)
        { return; }
      this.blocks(this.buffer, 0, 16);
      this.leftover = 0;
    }

    if (bytes >= 16) {
      want = bytes - (bytes % 16);
      this.blocks(m, mpos, want);
      mpos += want;
      bytes -= want;
    }

    if (bytes) {
      for (i = 0; i < bytes; i++)
        { this$1.buffer[this$1.leftover + i] = m[mpos+i]; }
      this.leftover += bytes;
    }
  };

  function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
    var s = new poly1305(k);
    s.update(m, mpos, n);
    s.finish(out, outpos);
    return 0;
  }

  function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
    var x = new Uint8Array(16);
    crypto_onetimeauth(x,0,m,mpos,n,k);
    return crypto_verify_16(h,hpos,x,0);
  }

  function crypto_secretbox(c,m,d,n,k) {
    var i;
    if (d < 32) { return -1; }
    crypto_stream_xor(c,0,m,0,d,n,k);
    crypto_onetimeauth(c, 16, c, 32, d - 32, c);
    for (i = 0; i < 16; i++) { c[i] = 0; }
    return 0;
  }

  function crypto_secretbox_open(m,c,d,n,k) {
    var i;
    var x = new Uint8Array(32);
    if (d < 32) { return -1; }
    crypto_stream(x,0,32,n,k);
    if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) { return -1; }
    crypto_stream_xor(m,0,c,0,d,n,k);
    for (i = 0; i < 32; i++) { m[i] = 0; }
    return 0;
  }

  function set25519(r, a) {
    var i;
    for (i = 0; i < 16; i++) { r[i] = a[i]|0; }
  }

  function car25519(o) {
    var i, v, c = 1;
    for (i = 0; i < 16; i++) {
      v = o[i] + c + 65535;
      c = Math.floor(v / 65536);
      o[i] = v - c * 65536;
    }
    o[0] += c-1 + 37 * (c-1);
  }

  function sel25519(p, q, b) {
    var t, c = ~(b-1);
    for (var i = 0; i < 16; i++) {
      t = c & (p[i] ^ q[i]);
      p[i] ^= t;
      q[i] ^= t;
    }
  }

  function pack25519(o, n) {
    var i, j, b;
    var m = gf(), t = gf();
    for (i = 0; i < 16; i++) { t[i] = n[i]; }
    car25519(t);
    car25519(t);
    car25519(t);
    for (j = 0; j < 2; j++) {
      m[0] = t[0] - 0xffed;
      for (i = 1; i < 15; i++) {
        m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
        m[i-1] &= 0xffff;
      }
      m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
      b = (m[15]>>16) & 1;
      m[14] &= 0xffff;
      sel25519(t, m, 1-b);
    }
    for (i = 0; i < 16; i++) {
      o[2*i] = t[i] & 0xff;
      o[2*i+1] = t[i]>>8;
    }
  }

  function neq25519(a, b) {
    var c = new Uint8Array(32), d = new Uint8Array(32);
    pack25519(c, a);
    pack25519(d, b);
    return crypto_verify_32(c, 0, d, 0);
  }

  function par25519(a) {
    var d = new Uint8Array(32);
    pack25519(d, a);
    return d[0] & 1;
  }

  function unpack25519(o, n) {
    var i;
    for (i = 0; i < 16; i++) { o[i] = n[2*i] + (n[2*i+1] << 8); }
    o[15] &= 0x7fff;
  }

  function A(o, a, b) {
    for (var i = 0; i < 16; i++) { o[i] = a[i] + b[i]; }
  }

  function Z(o, a, b) {
    for (var i = 0; i < 16; i++) { o[i] = a[i] - b[i]; }
  }

  function M(o, a, b) {
    var v, c,
       t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
       t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
      t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
      t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
      b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7],
      b8 = b[8],
      b9 = b[9],
      b10 = b[10],
      b11 = b[11],
      b12 = b[12],
      b13 = b[13],
      b14 = b[14],
      b15 = b[15];

    v = a[0];
    t0 += v * b0;
    t1 += v * b1;
    t2 += v * b2;
    t3 += v * b3;
    t4 += v * b4;
    t5 += v * b5;
    t6 += v * b6;
    t7 += v * b7;
    t8 += v * b8;
    t9 += v * b9;
    t10 += v * b10;
    t11 += v * b11;
    t12 += v * b12;
    t13 += v * b13;
    t14 += v * b14;
    t15 += v * b15;
    v = a[1];
    t1 += v * b0;
    t2 += v * b1;
    t3 += v * b2;
    t4 += v * b3;
    t5 += v * b4;
    t6 += v * b5;
    t7 += v * b6;
    t8 += v * b7;
    t9 += v * b8;
    t10 += v * b9;
    t11 += v * b10;
    t12 += v * b11;
    t13 += v * b12;
    t14 += v * b13;
    t15 += v * b14;
    t16 += v * b15;
    v = a[2];
    t2 += v * b0;
    t3 += v * b1;
    t4 += v * b2;
    t5 += v * b3;
    t6 += v * b4;
    t7 += v * b5;
    t8 += v * b6;
    t9 += v * b7;
    t10 += v * b8;
    t11 += v * b9;
    t12 += v * b10;
    t13 += v * b11;
    t14 += v * b12;
    t15 += v * b13;
    t16 += v * b14;
    t17 += v * b15;
    v = a[3];
    t3 += v * b0;
    t4 += v * b1;
    t5 += v * b2;
    t6 += v * b3;
    t7 += v * b4;
    t8 += v * b5;
    t9 += v * b6;
    t10 += v * b7;
    t11 += v * b8;
    t12 += v * b9;
    t13 += v * b10;
    t14 += v * b11;
    t15 += v * b12;
    t16 += v * b13;
    t17 += v * b14;
    t18 += v * b15;
    v = a[4];
    t4 += v * b0;
    t5 += v * b1;
    t6 += v * b2;
    t7 += v * b3;
    t8 += v * b4;
    t9 += v * b5;
    t10 += v * b6;
    t11 += v * b7;
    t12 += v * b8;
    t13 += v * b9;
    t14 += v * b10;
    t15 += v * b11;
    t16 += v * b12;
    t17 += v * b13;
    t18 += v * b14;
    t19 += v * b15;
    v = a[5];
    t5 += v * b0;
    t6 += v * b1;
    t7 += v * b2;
    t8 += v * b3;
    t9 += v * b4;
    t10 += v * b5;
    t11 += v * b6;
    t12 += v * b7;
    t13 += v * b8;
    t14 += v * b9;
    t15 += v * b10;
    t16 += v * b11;
    t17 += v * b12;
    t18 += v * b13;
    t19 += v * b14;
    t20 += v * b15;
    v = a[6];
    t6 += v * b0;
    t7 += v * b1;
    t8 += v * b2;
    t9 += v * b3;
    t10 += v * b4;
    t11 += v * b5;
    t12 += v * b6;
    t13 += v * b7;
    t14 += v * b8;
    t15 += v * b9;
    t16 += v * b10;
    t17 += v * b11;
    t18 += v * b12;
    t19 += v * b13;
    t20 += v * b14;
    t21 += v * b15;
    v = a[7];
    t7 += v * b0;
    t8 += v * b1;
    t9 += v * b2;
    t10 += v * b3;
    t11 += v * b4;
    t12 += v * b5;
    t13 += v * b6;
    t14 += v * b7;
    t15 += v * b8;
    t16 += v * b9;
    t17 += v * b10;
    t18 += v * b11;
    t19 += v * b12;
    t20 += v * b13;
    t21 += v * b14;
    t22 += v * b15;
    v = a[8];
    t8 += v * b0;
    t9 += v * b1;
    t10 += v * b2;
    t11 += v * b3;
    t12 += v * b4;
    t13 += v * b5;
    t14 += v * b6;
    t15 += v * b7;
    t16 += v * b8;
    t17 += v * b9;
    t18 += v * b10;
    t19 += v * b11;
    t20 += v * b12;
    t21 += v * b13;
    t22 += v * b14;
    t23 += v * b15;
    v = a[9];
    t9 += v * b0;
    t10 += v * b1;
    t11 += v * b2;
    t12 += v * b3;
    t13 += v * b4;
    t14 += v * b5;
    t15 += v * b6;
    t16 += v * b7;
    t17 += v * b8;
    t18 += v * b9;
    t19 += v * b10;
    t20 += v * b11;
    t21 += v * b12;
    t22 += v * b13;
    t23 += v * b14;
    t24 += v * b15;
    v = a[10];
    t10 += v * b0;
    t11 += v * b1;
    t12 += v * b2;
    t13 += v * b3;
    t14 += v * b4;
    t15 += v * b5;
    t16 += v * b6;
    t17 += v * b7;
    t18 += v * b8;
    t19 += v * b9;
    t20 += v * b10;
    t21 += v * b11;
    t22 += v * b12;
    t23 += v * b13;
    t24 += v * b14;
    t25 += v * b15;
    v = a[11];
    t11 += v * b0;
    t12 += v * b1;
    t13 += v * b2;
    t14 += v * b3;
    t15 += v * b4;
    t16 += v * b5;
    t17 += v * b6;
    t18 += v * b7;
    t19 += v * b8;
    t20 += v * b9;
    t21 += v * b10;
    t22 += v * b11;
    t23 += v * b12;
    t24 += v * b13;
    t25 += v * b14;
    t26 += v * b15;
    v = a[12];
    t12 += v * b0;
    t13 += v * b1;
    t14 += v * b2;
    t15 += v * b3;
    t16 += v * b4;
    t17 += v * b5;
    t18 += v * b6;
    t19 += v * b7;
    t20 += v * b8;
    t21 += v * b9;
    t22 += v * b10;
    t23 += v * b11;
    t24 += v * b12;
    t25 += v * b13;
    t26 += v * b14;
    t27 += v * b15;
    v = a[13];
    t13 += v * b0;
    t14 += v * b1;
    t15 += v * b2;
    t16 += v * b3;
    t17 += v * b4;
    t18 += v * b5;
    t19 += v * b6;
    t20 += v * b7;
    t21 += v * b8;
    t22 += v * b9;
    t23 += v * b10;
    t24 += v * b11;
    t25 += v * b12;
    t26 += v * b13;
    t27 += v * b14;
    t28 += v * b15;
    v = a[14];
    t14 += v * b0;
    t15 += v * b1;
    t16 += v * b2;
    t17 += v * b3;
    t18 += v * b4;
    t19 += v * b5;
    t20 += v * b6;
    t21 += v * b7;
    t22 += v * b8;
    t23 += v * b9;
    t24 += v * b10;
    t25 += v * b11;
    t26 += v * b12;
    t27 += v * b13;
    t28 += v * b14;
    t29 += v * b15;
    v = a[15];
    t15 += v * b0;
    t16 += v * b1;
    t17 += v * b2;
    t18 += v * b3;
    t19 += v * b4;
    t20 += v * b5;
    t21 += v * b6;
    t22 += v * b7;
    t23 += v * b8;
    t24 += v * b9;
    t25 += v * b10;
    t26 += v * b11;
    t27 += v * b12;
    t28 += v * b13;
    t29 += v * b14;
    t30 += v * b15;

    t0  += 38 * t16;
    t1  += 38 * t17;
    t2  += 38 * t18;
    t3  += 38 * t19;
    t4  += 38 * t20;
    t5  += 38 * t21;
    t6  += 38 * t22;
    t7  += 38 * t23;
    t8  += 38 * t24;
    t9  += 38 * t25;
    t10 += 38 * t26;
    t11 += 38 * t27;
    t12 += 38 * t28;
    t13 += 38 * t29;
    t14 += 38 * t30;
    // t15 left as is

    // first car
    c = 1;
    v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
    v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
    v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
    v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
    v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
    v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
    v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
    v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
    v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
    v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
    v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
    v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
    v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
    v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
    v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
    v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
    t0 += c-1 + 37 * (c-1);

    // second car
    c = 1;
    v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
    v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
    v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
    v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
    v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
    v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
    v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
    v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
    v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
    v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
    v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
    v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
    v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
    v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
    v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
    v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
    t0 += c-1 + 37 * (c-1);

    o[ 0] = t0;
    o[ 1] = t1;
    o[ 2] = t2;
    o[ 3] = t3;
    o[ 4] = t4;
    o[ 5] = t5;
    o[ 6] = t6;
    o[ 7] = t7;
    o[ 8] = t8;
    o[ 9] = t9;
    o[10] = t10;
    o[11] = t11;
    o[12] = t12;
    o[13] = t13;
    o[14] = t14;
    o[15] = t15;
  }

  function S(o, a) {
    M(o, a, a);
  }

  function inv25519(o, i) {
    var c = gf();
    var a;
    for (a = 0; a < 16; a++) { c[a] = i[a]; }
    for (a = 253; a >= 0; a--) {
      S(c, c);
      if(a !== 2 && a !== 4) { M(c, c, i); }
    }
    for (a = 0; a < 16; a++) { o[a] = c[a]; }
  }

  function pow2523(o, i) {
    var c = gf();
    var a;
    for (a = 0; a < 16; a++) { c[a] = i[a]; }
    for (a = 250; a >= 0; a--) {
        S(c, c);
        if(a !== 1) { M(c, c, i); }
    }
    for (a = 0; a < 16; a++) { o[a] = c[a]; }
  }

  function crypto_scalarmult(q, n, p) {
    var z = new Uint8Array(32);
    var x = new Float64Array(80), r, i;
    var a = gf(), b = gf(), c = gf(),
        d = gf(), e = gf(), f = gf();
    for (i = 0; i < 31; i++) { z[i] = n[i]; }
    z[31]=(n[31]&127)|64;
    z[0]&=248;
    unpack25519(x,p);
    for (i = 0; i < 16; i++) {
      b[i]=x[i];
      d[i]=a[i]=c[i]=0;
    }
    a[0]=d[0]=1;
    for (i=254; i>=0; --i) {
      r=(z[i>>>3]>>>(i&7))&1;
      sel25519(a,b,r);
      sel25519(c,d,r);
      A(e,a,c);
      Z(a,a,c);
      A(c,b,d);
      Z(b,b,d);
      S(d,e);
      S(f,a);
      M(a,c,a);
      M(c,b,e);
      A(e,a,c);
      Z(a,a,c);
      S(b,a);
      Z(c,d,f);
      M(a,c,_121665);
      A(a,a,d);
      M(c,c,a);
      M(a,d,f);
      M(d,b,x);
      S(b,e);
      sel25519(a,b,r);
      sel25519(c,d,r);
    }
    for (i = 0; i < 16; i++) {
      x[i+16]=a[i];
      x[i+32]=c[i];
      x[i+48]=b[i];
      x[i+64]=d[i];
    }
    var x32 = x.subarray(32);
    var x16 = x.subarray(16);
    inv25519(x32,x32);
    M(x16,x16,x32);
    pack25519(q,x16);
    return 0;
  }

  function crypto_scalarmult_base(q, n) {
    return crypto_scalarmult(q, n, _9);
  }

  function crypto_box_keypair(y, x) {
    randombytes(x, 32);
    return crypto_scalarmult_base(y, x);
  }

  function crypto_box_beforenm(k, y, x) {
    var s = new Uint8Array(32);
    crypto_scalarmult(s, x, y);
    return crypto_core_hsalsa20(k, _0, s, sigma);
  }

  var crypto_box_afternm = crypto_secretbox;
  var crypto_box_open_afternm = crypto_secretbox_open;

  function crypto_box(c, m, d, n, y, x) {
    var k = new Uint8Array(32);
    crypto_box_beforenm(k, y, x);
    return crypto_box_afternm(c, m, d, n, k);
  }

  function crypto_box_open(m, c, d, n, y, x) {
    var k = new Uint8Array(32);
    crypto_box_beforenm(k, y, x);
    return crypto_box_open_afternm(m, c, d, n, k);
  }

  var K = [
    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
  ];

  function crypto_hashblocks_hl(hh, hl, m, n) {
    var wh = new Int32Array(16), wl = new Int32Array(16),
        bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
        bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
        th, tl, i, j, h, l, a, b, c, d;

    var ah0 = hh[0],
        ah1 = hh[1],
        ah2 = hh[2],
        ah3 = hh[3],
        ah4 = hh[4],
        ah5 = hh[5],
        ah6 = hh[6],
        ah7 = hh[7],

        al0 = hl[0],
        al1 = hl[1],
        al2 = hl[2],
        al3 = hl[3],
        al4 = hl[4],
        al5 = hl[5],
        al6 = hl[6],
        al7 = hl[7];

    var pos = 0;
    while (n >= 128) {
      for (i = 0; i < 16; i++) {
        j = 8 * i + pos;
        wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];
        wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];
      }
      for (i = 0; i < 80; i++) {
        bh0 = ah0;
        bh1 = ah1;
        bh2 = ah2;
        bh3 = ah3;
        bh4 = ah4;
        bh5 = ah5;
        bh6 = ah6;
        bh7 = ah7;

        bl0 = al0;
        bl1 = al1;
        bl2 = al2;
        bl3 = al3;
        bl4 = al4;
        bl5 = al5;
        bl6 = al6;
        bl7 = al7;

        // add
        h = ah7;
        l = al7;

        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;

        // Sigma1
        h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));
        l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        // Ch
        h = (ah4 & ah5) ^ (~ah4 & ah6);
        l = (al4 & al5) ^ (~al4 & al6);

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        // K
        h = K[i*2];
        l = K[i*2+1];

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        // w
        h = wh[i%16];
        l = wl[i%16];

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        th = c & 0xffff | d << 16;
        tl = a & 0xffff | b << 16;

        // add
        h = th;
        l = tl;

        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;

        // Sigma0
        h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));
        l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        // Maj
        h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
        l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        bh7 = (c & 0xffff) | (d << 16);
        bl7 = (a & 0xffff) | (b << 16);

        // add
        h = bh3;
        l = bl3;

        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;

        h = th;
        l = tl;

        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        bh3 = (c & 0xffff) | (d << 16);
        bl3 = (a & 0xffff) | (b << 16);

        ah1 = bh0;
        ah2 = bh1;
        ah3 = bh2;
        ah4 = bh3;
        ah5 = bh4;
        ah6 = bh5;
        ah7 = bh6;
        ah0 = bh7;

        al1 = bl0;
        al2 = bl1;
        al3 = bl2;
        al4 = bl3;
        al5 = bl4;
        al6 = bl5;
        al7 = bl6;
        al0 = bl7;

        if (i%16 === 15) {
          for (j = 0; j < 16; j++) {
            // add
            h = wh[j];
            l = wl[j];

            a = l & 0xffff; b = l >>> 16;
            c = h & 0xffff; d = h >>> 16;

            h = wh[(j+9)%16];
            l = wl[(j+9)%16];

            a += l & 0xffff; b += l >>> 16;
            c += h & 0xffff; d += h >>> 16;

            // sigma0
            th = wh[(j+1)%16];
            tl = wl[(j+1)%16];
            h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);
            l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));

            a += l & 0xffff; b += l >>> 16;
            c += h & 0xffff; d += h >>> 16;

            // sigma1
            th = wh[(j+14)%16];
            tl = wl[(j+14)%16];
            h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);
            l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));

            a += l & 0xffff; b += l >>> 16;
            c += h & 0xffff; d += h >>> 16;

            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;

            wh[j] = (c & 0xffff) | (d << 16);
            wl[j] = (a & 0xffff) | (b << 16);
          }
        }
      }

      // add
      h = ah0;
      l = al0;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      h = hh[0];
      l = hl[0];

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      hh[0] = ah0 = (c & 0xffff) | (d << 16);
      hl[0] = al0 = (a & 0xffff) | (b << 16);

      h = ah1;
      l = al1;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      h = hh[1];
      l = hl[1];

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      hh[1] = ah1 = (c & 0xffff) | (d << 16);
      hl[1] = al1 = (a & 0xffff) | (b << 16);

      h = ah2;
      l = al2;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      h = hh[2];
      l = hl[2];

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      hh[2] = ah2 = (c & 0xffff) | (d << 16);
      hl[2] = al2 = (a & 0xffff) | (b << 16);

      h = ah3;
      l = al3;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      h = hh[3];
      l = hl[3];

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      hh[3] = ah3 = (c & 0xffff) | (d << 16);
      hl[3] = al3 = (a & 0xffff) | (b << 16);

      h = ah4;
      l = al4;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      h = hh[4];
      l = hl[4];

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      hh[4] = ah4 = (c & 0xffff) | (d << 16);
      hl[4] = al4 = (a & 0xffff) | (b << 16);

      h = ah5;
      l = al5;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      h = hh[5];
      l = hl[5];

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      hh[5] = ah5 = (c & 0xffff) | (d << 16);
      hl[5] = al5 = (a & 0xffff) | (b << 16);

      h = ah6;
      l = al6;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      h = hh[6];
      l = hl[6];

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      hh[6] = ah6 = (c & 0xffff) | (d << 16);
      hl[6] = al6 = (a & 0xffff) | (b << 16);

      h = ah7;
      l = al7;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      h = hh[7];
      l = hl[7];

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      hh[7] = ah7 = (c & 0xffff) | (d << 16);
      hl[7] = al7 = (a & 0xffff) | (b << 16);

      pos += 128;
      n -= 128;
    }

    return n;
  }

  function crypto_hash(out, m, n) {
    var hh = new Int32Array(8),
        hl = new Int32Array(8),
        x = new Uint8Array(256),
        i, b = n;

    hh[0] = 0x6a09e667;
    hh[1] = 0xbb67ae85;
    hh[2] = 0x3c6ef372;
    hh[3] = 0xa54ff53a;
    hh[4] = 0x510e527f;
    hh[5] = 0x9b05688c;
    hh[6] = 0x1f83d9ab;
    hh[7] = 0x5be0cd19;

    hl[0] = 0xf3bcc908;
    hl[1] = 0x84caa73b;
    hl[2] = 0xfe94f82b;
    hl[3] = 0x5f1d36f1;
    hl[4] = 0xade682d1;
    hl[5] = 0x2b3e6c1f;
    hl[6] = 0xfb41bd6b;
    hl[7] = 0x137e2179;

    crypto_hashblocks_hl(hh, hl, m, n);
    n %= 128;

    for (i = 0; i < n; i++) { x[i] = m[b-n+i]; }
    x[n] = 128;

    n = 256-128*(n<112?1:0);
    x[n-9] = 0;
    ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);
    crypto_hashblocks_hl(hh, hl, x, n);

    for (i = 0; i < 8; i++) { ts64(out, 8*i, hh[i], hl[i]); }

    return 0;
  }

  function add(p, q) {
    var a = gf(), b = gf(), c = gf(),
        d = gf(), e = gf(), f = gf(),
        g = gf(), h = gf(), t = gf();

    Z(a, p[1], p[0]);
    Z(t, q[1], q[0]);
    M(a, a, t);
    A(b, p[0], p[1]);
    A(t, q[0], q[1]);
    M(b, b, t);
    M(c, p[3], q[3]);
    M(c, c, D2);
    M(d, p[2], q[2]);
    A(d, d, d);
    Z(e, b, a);
    Z(f, d, c);
    A(g, d, c);
    A(h, b, a);

    M(p[0], e, f);
    M(p[1], h, g);
    M(p[2], g, f);
    M(p[3], e, h);
  }

  function cswap(p, q, b) {
    var i;
    for (i = 0; i < 4; i++) {
      sel25519(p[i], q[i], b);
    }
  }

  function pack(r, p) {
    var tx = gf(), ty = gf(), zi = gf();
    inv25519(zi, p[2]);
    M(tx, p[0], zi);
    M(ty, p[1], zi);
    pack25519(r, ty);
    r[31] ^= par25519(tx) << 7;
  }

  function scalarmult(p, q, s) {
    var b, i;
    set25519(p[0], gf0);
    set25519(p[1], gf1);
    set25519(p[2], gf1);
    set25519(p[3], gf0);
    for (i = 255; i >= 0; --i) {
      b = (s[(i/8)|0] >> (i&7)) & 1;
      cswap(p, q, b);
      add(q, p);
      add(p, p);
      cswap(p, q, b);
    }
  }

  function scalarbase(p, s) {
    var q = [gf(), gf(), gf(), gf()];
    set25519(q[0], X);
    set25519(q[1], Y);
    set25519(q[2], gf1);
    M(q[3], X, Y);
    scalarmult(p, q, s);
  }

  function crypto_sign_keypair(pk, sk, seeded) {
    var d = new Uint8Array(64);
    var p = [gf(), gf(), gf(), gf()];
    var i;

    if (!seeded) { randombytes(sk, 32); }
    crypto_hash(d, sk, 32);
    d[0] &= 248;
    d[31] &= 127;
    d[31] |= 64;

    scalarbase(p, d);
    pack(pk, p);

    for (i = 0; i < 32; i++) { sk[i+32] = pk[i]; }
    return 0;
  }

  var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

  function modL(r, x) {
    var carry, i, j, k;
    for (i = 63; i >= 32; --i) {
      carry = 0;
      for (j = i - 32, k = i - 12; j < k; ++j) {
        x[j] += carry - 16 * x[i] * L[j - (i - 32)];
        carry = (x[j] + 128) >> 8;
        x[j] -= carry * 256;
      }
      x[j] += carry;
      x[i] = 0;
    }
    carry = 0;
    for (j = 0; j < 32; j++) {
      x[j] += carry - (x[31] >> 4) * L[j];
      carry = x[j] >> 8;
      x[j] &= 255;
    }
    for (j = 0; j < 32; j++) { x[j] -= carry * L[j]; }
    for (i = 0; i < 32; i++) {
      x[i+1] += x[i] >> 8;
      r[i] = x[i] & 255;
    }
  }

  function reduce(r) {
    var x = new Float64Array(64), i;
    for (i = 0; i < 64; i++) { x[i] = r[i]; }
    for (i = 0; i < 64; i++) { r[i] = 0; }
    modL(r, x);
  }

  // Note: difference from C - smlen returned, not passed as argument.
  function crypto_sign(sm, m, n, sk) {
    var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
    var i, j, x = new Float64Array(64);
    var p = [gf(), gf(), gf(), gf()];

    crypto_hash(d, sk, 32);
    d[0] &= 248;
    d[31] &= 127;
    d[31] |= 64;

    var smlen = n + 64;
    for (i = 0; i < n; i++) { sm[64 + i] = m[i]; }
    for (i = 0; i < 32; i++) { sm[32 + i] = d[32 + i]; }

    crypto_hash(r, sm.subarray(32), n+32);
    reduce(r);
    scalarbase(p, r);
    pack(sm, p);

    for (i = 32; i < 64; i++) { sm[i] = sk[i]; }
    crypto_hash(h, sm, n + 64);
    reduce(h);

    for (i = 0; i < 64; i++) { x[i] = 0; }
    for (i = 0; i < 32; i++) { x[i] = r[i]; }
    for (i = 0; i < 32; i++) {
      for (j = 0; j < 32; j++) {
        x[i+j] += h[i] * d[j];
      }
    }

    modL(sm.subarray(32), x);
    return smlen;
  }

  function unpackneg(r, p) {
    var t = gf(), chk = gf(), num = gf(),
        den = gf(), den2 = gf(), den4 = gf(),
        den6 = gf();

    set25519(r[2], gf1);
    unpack25519(r[1], p);
    S(num, r[1]);
    M(den, num, D);
    Z(num, num, r[2]);
    A(den, r[2], den);

    S(den2, den);
    S(den4, den2);
    M(den6, den4, den2);
    M(t, den6, num);
    M(t, t, den);

    pow2523(t, t);
    M(t, t, num);
    M(t, t, den);
    M(t, t, den);
    M(r[0], t, den);

    S(chk, r[0]);
    M(chk, chk, den);
    if (neq25519(chk, num)) { M(r[0], r[0], I); }

    S(chk, r[0]);
    M(chk, chk, den);
    if (neq25519(chk, num)) { return -1; }

    if (par25519(r[0]) === (p[31]>>7)) { Z(r[0], gf0, r[0]); }

    M(r[3], r[0], r[1]);
    return 0;
  }

  function crypto_sign_open(m, sm, n, pk) {
    var i, mlen;
    var t = new Uint8Array(32), h = new Uint8Array(64);
    var p = [gf(), gf(), gf(), gf()],
        q = [gf(), gf(), gf(), gf()];

    mlen = -1;
    if (n < 64) { return -1; }

    if (unpackneg(q, pk)) { return -1; }

    for (i = 0; i < n; i++) { m[i] = sm[i]; }
    for (i = 0; i < 32; i++) { m[i+32] = pk[i]; }
    crypto_hash(h, m, n);
    reduce(h);
    scalarmult(p, q, h);

    scalarbase(q, sm.subarray(32));
    add(p, q);
    pack(t, p);

    n -= 64;
    if (crypto_verify_32(sm, 0, t, 0)) {
      for (i = 0; i < n; i++) { m[i] = 0; }
      return -1;
    }

    for (i = 0; i < n; i++) { m[i] = sm[i + 64]; }
    mlen = n;
    return mlen;
  }

  var crypto_secretbox_KEYBYTES = 32,
      crypto_secretbox_NONCEBYTES = 24,
      crypto_secretbox_ZEROBYTES = 32,
      crypto_secretbox_BOXZEROBYTES = 16,
      crypto_scalarmult_BYTES = 32,
      crypto_scalarmult_SCALARBYTES = 32,
      crypto_box_PUBLICKEYBYTES = 32,
      crypto_box_SECRETKEYBYTES = 32,
      crypto_box_BEFORENMBYTES = 32,
      crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
      crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
      crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
      crypto_sign_BYTES = 64,
      crypto_sign_PUBLICKEYBYTES = 32,
      crypto_sign_SECRETKEYBYTES = 64,
      crypto_sign_SEEDBYTES = 32,
      crypto_hash_BYTES = 64;

  nacl.lowlevel = {
    crypto_core_hsalsa20: crypto_core_hsalsa20,
    crypto_stream_xor: crypto_stream_xor,
    crypto_stream: crypto_stream,
    crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
    crypto_stream_salsa20: crypto_stream_salsa20,
    crypto_onetimeauth: crypto_onetimeauth,
    crypto_onetimeauth_verify: crypto_onetimeauth_verify,
    crypto_verify_16: crypto_verify_16,
    crypto_verify_32: crypto_verify_32,
    crypto_secretbox: crypto_secretbox,
    crypto_secretbox_open: crypto_secretbox_open,
    crypto_scalarmult: crypto_scalarmult,
    crypto_scalarmult_base: crypto_scalarmult_base,
    crypto_box_beforenm: crypto_box_beforenm,
    crypto_box_afternm: crypto_box_afternm,
    crypto_box: crypto_box,
    crypto_box_open: crypto_box_open,
    crypto_box_keypair: crypto_box_keypair,
    crypto_hash: crypto_hash,
    crypto_sign: crypto_sign,
    crypto_sign_keypair: crypto_sign_keypair,
    crypto_sign_open: crypto_sign_open,

    crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
    crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
    crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
    crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
    crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
    crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
    crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
    crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
    crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
    crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
    crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
    crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
    crypto_sign_BYTES: crypto_sign_BYTES,
    crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
    crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
    crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
    crypto_hash_BYTES: crypto_hash_BYTES
  };

  /* High-level API */

  function checkLengths(k, n) {
    if (k.length !== crypto_secretbox_KEYBYTES) { throw new Error('bad key size'); }
    if (n.length !== crypto_secretbox_NONCEBYTES) { throw new Error('bad nonce size'); }
  }

  function checkBoxLengths(pk, sk) {
    if (pk.length !== crypto_box_PUBLICKEYBYTES) { throw new Error('bad public key size'); }
    if (sk.length !== crypto_box_SECRETKEYBYTES) { throw new Error('bad secret key size'); }
  }

  function checkArrayTypes() {
    var arguments$1 = arguments;

    var t, i;
    for (i = 0; i < arguments.length; i++) {
       if ((t = Object.prototype.toString.call(arguments$1[i])) !== '[object Uint8Array]')
         { throw new TypeError('unexpected type ' + t + ', use Uint8Array'); }
    }
  }

  function cleanup(arr) {
    for (var i = 0; i < arr.length; i++) { arr[i] = 0; }
  }

  // TODO: Completely remove this in v0.15.
  if (!nacl.util) {
    nacl.util = {};
    nacl.util.decodeUTF8 = nacl.util.encodeUTF8 = nacl.util.encodeBase64 = nacl.util.decodeBase64 = function() {
      throw new Error('nacl.util moved into separate package: https://github.com/dchest/tweetnacl-util-js');
    };
  }

  nacl.randomBytes = function(n) {
    var b = new Uint8Array(n);
    randombytes(b, n);
    return b;
  };

  nacl.secretbox = function(msg, nonce, key) {
    checkArrayTypes(msg, nonce, key);
    checkLengths(key, nonce);
    var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
    var c = new Uint8Array(m.length);
    for (var i = 0; i < msg.length; i++) { m[i+crypto_secretbox_ZEROBYTES] = msg[i]; }
    crypto_secretbox(c, m, m.length, nonce, key);
    return c.subarray(crypto_secretbox_BOXZEROBYTES);
  };

  nacl.secretbox.open = function(box, nonce, key) {
    checkArrayTypes(box, nonce, key);
    checkLengths(key, nonce);
    var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
    var m = new Uint8Array(c.length);
    for (var i = 0; i < box.length; i++) { c[i+crypto_secretbox_BOXZEROBYTES] = box[i]; }
    if (c.length < 32) { return false; }
    if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) { return false; }
    return m.subarray(crypto_secretbox_ZEROBYTES);
  };

  nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
  nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
  nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

  nacl.scalarMult = function(n, p) {
    checkArrayTypes(n, p);
    if (n.length !== crypto_scalarmult_SCALARBYTES) { throw new Error('bad n size'); }
    if (p.length !== crypto_scalarmult_BYTES) { throw new Error('bad p size'); }
    var q = new Uint8Array(crypto_scalarmult_BYTES);
    crypto_scalarmult(q, n, p);
    return q;
  };

  nacl.scalarMult.base = function(n) {
    checkArrayTypes(n);
    if (n.length !== crypto_scalarmult_SCALARBYTES) { throw new Error('bad n size'); }
    var q = new Uint8Array(crypto_scalarmult_BYTES);
    crypto_scalarmult_base(q, n);
    return q;
  };

  nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
  nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

  nacl.box = function(msg, nonce, publicKey, secretKey) {
    var k = nacl.box.before(publicKey, secretKey);
    return nacl.secretbox(msg, nonce, k);
  };

  nacl.box.before = function(publicKey, secretKey) {
    checkArrayTypes(publicKey, secretKey);
    checkBoxLengths(publicKey, secretKey);
    var k = new Uint8Array(crypto_box_BEFORENMBYTES);
    crypto_box_beforenm(k, publicKey, secretKey);
    return k;
  };

  nacl.box.after = nacl.secretbox;

  nacl.box.open = function(msg, nonce, publicKey, secretKey) {
    var k = nacl.box.before(publicKey, secretKey);
    return nacl.secretbox.open(msg, nonce, k);
  };

  nacl.box.open.after = nacl.secretbox.open;

  nacl.box.keyPair = function() {
    var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
    var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
    crypto_box_keypair(pk, sk);
    return {publicKey: pk, secretKey: sk};
  };

  nacl.box.keyPair.fromSecretKey = function(secretKey) {
    checkArrayTypes(secretKey);
    if (secretKey.length !== crypto_box_SECRETKEYBYTES)
      { throw new Error('bad secret key size'); }
    var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
    crypto_scalarmult_base(pk, secretKey);
    return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
  };

  nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
  nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
  nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
  nacl.box.nonceLength = crypto_box_NONCEBYTES;
  nacl.box.overheadLength = nacl.secretbox.overheadLength;

  nacl.sign = function(msg, secretKey) {
    checkArrayTypes(msg, secretKey);
    if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
      { throw new Error('bad secret key size'); }
    var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);
    crypto_sign(signedMsg, msg, msg.length, secretKey);
    return signedMsg;
  };

  nacl.sign.open = function(signedMsg, publicKey) {
    if (arguments.length !== 2)
      { throw new Error('nacl.sign.open accepts 2 arguments; did you mean to use nacl.sign.detached.verify?'); }
    checkArrayTypes(signedMsg, publicKey);
    if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
      { throw new Error('bad public key size'); }
    var tmp = new Uint8Array(signedMsg.length);
    var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
    if (mlen < 0) { return null; }
    var m = new Uint8Array(mlen);
    for (var i = 0; i < m.length; i++) { m[i] = tmp[i]; }
    return m;
  };

  nacl.sign.detached = function(msg, secretKey) {
    var signedMsg = nacl.sign(msg, secretKey);
    var sig = new Uint8Array(crypto_sign_BYTES);
    for (var i = 0; i < sig.length; i++) { sig[i] = signedMsg[i]; }
    return sig;
  };

  nacl.sign.detached.verify = function(msg, sig, publicKey) {
    checkArrayTypes(msg, sig, publicKey);
    if (sig.length !== crypto_sign_BYTES)
      { throw new Error('bad signature size'); }
    if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
      { throw new Error('bad public key size'); }
    var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
    var m = new Uint8Array(crypto_sign_BYTES + msg.length);
    var i;
    for (i = 0; i < crypto_sign_BYTES; i++) { sm[i] = sig[i]; }
    for (i = 0; i < msg.length; i++) { sm[i+crypto_sign_BYTES] = msg[i]; }
    return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
  };

  nacl.sign.keyPair = function() {
    var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
    var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
    crypto_sign_keypair(pk, sk);
    return {publicKey: pk, secretKey: sk};
  };

  nacl.sign.keyPair.fromSecretKey = function(secretKey) {
    checkArrayTypes(secretKey);
    if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
      { throw new Error('bad secret key size'); }
    var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
    for (var i = 0; i < pk.length; i++) { pk[i] = secretKey[32+i]; }
    return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
  };

  nacl.sign.keyPair.fromSeed = function(seed) {
    checkArrayTypes(seed);
    if (seed.length !== crypto_sign_SEEDBYTES)
      { throw new Error('bad seed size'); }
    var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
    var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
    for (var i = 0; i < 32; i++) { sk[i] = seed[i]; }
    crypto_sign_keypair(pk, sk, true);
    return {publicKey: pk, secretKey: sk};
  };

  nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
  nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
  nacl.sign.seedLength = crypto_sign_SEEDBYTES;
  nacl.sign.signatureLength = crypto_sign_BYTES;

  nacl.hash = function(msg) {
    checkArrayTypes(msg);
    var h = new Uint8Array(crypto_hash_BYTES);
    crypto_hash(h, msg, msg.length);
    return h;
  };

  nacl.hash.hashLength = crypto_hash_BYTES;

  nacl.verify = function(x, y) {
    checkArrayTypes(x, y);
    // Zero length arguments are considered not equal.
    if (x.length === 0 || y.length === 0) { return false; }
    if (x.length !== y.length) { return false; }
    return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
  };

  nacl.setPRNG = function(fn) {
    randombytes = fn;
  };

  (function() {
    // Initialize PRNG if environment provides CSPRNG.
    // If not, methods calling randombytes will throw.
    var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
    if (crypto && crypto.getRandomValues) {
      // Browsers.
      var QUOTA = 65536;
      nacl.setPRNG(function(x, n) {
        var i, v = new Uint8Array(n);
        for (i = 0; i < n; i += QUOTA) {
          crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
        }
        for (i = 0; i < n; i++) { x[i] = v[i]; }
        cleanup(v);
      });
    } else if (typeof commonjsRequire !== 'undefined') {
      // Node.js.
      crypto = tls;
      if (crypto && crypto.randomBytes) {
        nacl.setPRNG(function(x, n) {
          var i, v = crypto.randomBytes(n);
          for (i = 0; i < n; i++) { x[i] = v[i]; }
          cleanup(v);
        });
      }
    }
  })();

  })('object' !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));
  });

  // Copyright 2017 Joyent, Inc.

  var dhe = {
  	DiffieHellman: DiffieHellman,
  	generateECDSA: generateECDSA,
  	generateED25519: generateED25519
  };





  var nacl;




  var CRYPTO_HAVE_ECDH = (tls.createECDH !== undefined);

  var ec$1, jsbn$1;

  function DiffieHellman(key$$1) {
  	utils$1.assertCompatible(key$$1, key, [1, 4], 'key');
  	this._isPriv = privateKey.isPrivateKey(key$$1, [1, 3]);
  	this._algo = key$$1.type;
  	this._curve = key$$1.curve;
  	this._key = key$$1;
  	if (key$$1.type === 'dsa') {
  		if (!CRYPTO_HAVE_ECDH) {
  			throw (new Error('Due to bugs in the node 0.10 ' +
  			    'crypto API, node 0.12.x or later is required ' +
  			    'to use DH'));
  		}
  		this._dh = tls.createDiffieHellman(
  		    key$$1.part.p.data, undefined,
  		    key$$1.part.g.data, undefined);
  		this._p = key$$1.part.p;
  		this._g = key$$1.part.g;
  		if (this._isPriv)
  			{ this._dh.setPrivateKey(key$$1.part.x.data); }
  		this._dh.setPublicKey(key$$1.part.y.data);

  	} else if (key$$1.type === 'ecdsa') {
  		if (!CRYPTO_HAVE_ECDH) {
  			if (ec$1 === undefined)
  				{ ec$1 = ec; }
  			if (jsbn$1 === undefined)
  				{ jsbn$1 = jsbn.BigInteger; }

  			this._ecParams = new X9ECParameters$1(this._curve);

  			if (this._isPriv) {
  				this._priv = new ECPrivate(
  				    this._ecParams, key$$1.part.d.data);
  			}
  			return;
  		}

  		var curve = {
  			'nistp256': 'prime256v1',
  			'nistp384': 'secp384r1',
  			'nistp521': 'secp521r1'
  		}[key$$1.curve];
  		this._dh = tls.createECDH(curve);
  		if (typeof (this._dh) !== 'object' ||
  		    typeof (this._dh.setPrivateKey) !== 'function') {
  			CRYPTO_HAVE_ECDH = false;
  			DiffieHellman.call(this, key$$1);
  			return;
  		}
  		if (this._isPriv)
  			{ this._dh.setPrivateKey(key$$1.part.d.data); }
  		this._dh.setPublicKey(key$$1.part.Q.data);

  	} else if (key$$1.type === 'curve25519') {
  		if (nacl === undefined)
  			{ nacl = naclFast; }

  		if (this._isPriv) {
  			this._priv = key$$1.part.r.data;
  		}

  	} else {
  		throw (new Error('DH not supported for ' + key$$1.type + ' keys'));
  	}
  }

  DiffieHellman.prototype.getPublicKey = function () {
  	if (this._isPriv)
  		{ return (this._key.toPublic()); }
  	return (this._key);
  };

  DiffieHellman.prototype.getPrivateKey = function () {
  	if (this._isPriv)
  		{ return (this._key); }
  	else
  		{ return (undefined); }
  };
  DiffieHellman.prototype.getKey = DiffieHellman.prototype.getPrivateKey;

  DiffieHellman.prototype._keyCheck = function (pk, isPub) {
  	assert_1.object(pk, 'key');
  	if (!isPub)
  		{ utils$1.assertCompatible(pk, privateKey, [1, 3], 'key'); }
  	utils$1.assertCompatible(pk, key, [1, 4], 'key');

  	if (pk.type !== this._algo) {
  		throw (new Error('A ' + pk.type + ' key cannot be used in ' +
  		    this._algo + ' Diffie-Hellman'));
  	}

  	if (pk.curve !== this._curve) {
  		throw (new Error('A key from the ' + pk.curve + ' curve ' +
  		    'cannot be used with a ' + this._curve +
  		    ' Diffie-Hellman'));
  	}

  	if (pk.type === 'dsa') {
  		assert_1.deepEqual(pk.part.p, this._p,
  		    'DSA key prime does not match');
  		assert_1.deepEqual(pk.part.g, this._g,
  		    'DSA key generator does not match');
  	}
  };

  DiffieHellman.prototype.setKey = function (pk) {
  	this._keyCheck(pk);

  	if (pk.type === 'dsa') {
  		this._dh.setPrivateKey(pk.part.x.data);
  		this._dh.setPublicKey(pk.part.y.data);

  	} else if (pk.type === 'ecdsa') {
  		if (CRYPTO_HAVE_ECDH) {
  			this._dh.setPrivateKey(pk.part.d.data);
  			this._dh.setPublicKey(pk.part.Q.data);
  		} else {
  			this._priv = new ECPrivate(
  			    this._ecParams, pk.part.d.data);
  		}

  	} else if (pk.type === 'curve25519') {
  		this._priv = pk.part.r.data;
  		if (this._priv[0] === 0x00)
  			{ this._priv = this._priv.slice(1); }
  		this._priv = this._priv.slice(0, 32);
  	}
  	this._key = pk;
  	this._isPriv = true;
  };
  DiffieHellman.prototype.setPrivateKey = DiffieHellman.prototype.setKey;

  DiffieHellman.prototype.computeSecret = function (otherpk) {
  	this._keyCheck(otherpk, true);
  	if (!this._isPriv)
  		{ throw (new Error('DH exchange has not been initialized with ' +
  		    'a private key yet')); }

  	var pub;
  	if (this._algo === 'dsa') {
  		return (this._dh.computeSecret(
  		    otherpk.part.y.data));

  	} else if (this._algo === 'ecdsa') {
  		if (CRYPTO_HAVE_ECDH) {
  			return (this._dh.computeSecret(
  			    otherpk.part.Q.data));
  		} else {
  			pub = new ECPublic(
  			    this._ecParams, otherpk.part.Q.data);
  			return (this._priv.deriveSharedSecret(pub));
  		}

  	} else if (this._algo === 'curve25519') {
  		pub = otherpk.part.R.data;
  		while (pub[0] === 0x00 && pub.length > 32)
  			{ pub = pub.slice(1); }
  		assert_1.strictEqual(pub.length, 32);
  		assert_1.strictEqual(this._priv.length, 64);

  		var priv = this._priv.slice(0, 32);

  		var secret = nacl.box.before(new Uint8Array(pub),
  		    new Uint8Array(priv));

  		return (new Buffer(secret));
  	}

  	throw (new Error('Invalid algorithm: ' + this._algo));
  };

  DiffieHellman.prototype.generateKey = function () {
  	var parts = [];
  	var priv, pub;
  	if (this._algo === 'dsa') {
  		this._dh.generateKeys();

  		parts.push({name: 'p', data: this._p.data});
  		parts.push({name: 'q', data: this._key.part.q.data});
  		parts.push({name: 'g', data: this._g.data});
  		parts.push({name: 'y', data: this._dh.getPublicKey()});
  		parts.push({name: 'x', data: this._dh.getPrivateKey()});
  		this._key = new privateKey({
  			type: 'dsa',
  			parts: parts
  		});
  		this._isPriv = true;
  		return (this._key);

  	} else if (this._algo === 'ecdsa') {
  		if (CRYPTO_HAVE_ECDH) {
  			this._dh.generateKeys();

  			parts.push({name: 'curve',
  			    data: new Buffer(this._curve)});
  			parts.push({name: 'Q', data: this._dh.getPublicKey()});
  			parts.push({name: 'd', data: this._dh.getPrivateKey()});
  			this._key = new privateKey({
  				type: 'ecdsa',
  				curve: this._curve,
  				parts: parts
  			});
  			this._isPriv = true;
  			return (this._key);

  		} else {
  			var n = this._ecParams.getN();
  			var r = new jsbn$1(tls.randomBytes(n.bitLength()));
  			var n1 = n.subtract(jsbn$1.ONE);
  			priv = r.mod(n1).add(jsbn$1.ONE);
  			pub = this._ecParams.getG().multiply(priv);

  			priv = new Buffer(priv.toByteArray());
  			pub = new Buffer(this._ecParams.getCurve().
  			    encodePointHex(pub), 'hex');

  			this._priv = new ECPrivate(this._ecParams, priv);

  			parts.push({name: 'curve',
  			    data: new Buffer(this._curve)});
  			parts.push({name: 'Q', data: pub});
  			parts.push({name: 'd', data: priv});

  			this._key = new privateKey({
  				type: 'ecdsa',
  				curve: this._curve,
  				parts: parts
  			});
  			this._isPriv = true;
  			return (this._key);
  		}

  	} else if (this._algo === 'curve25519') {
  		var pair = nacl.box.keyPair();
  		priv = new Buffer(pair.secretKey);
  		pub = new Buffer(pair.publicKey);
  		priv = Buffer.concat([priv, pub]);
  		assert_1.strictEqual(priv.length, 64);
  		assert_1.strictEqual(pub.length, 32);

  		parts.push({name: 'R', data: pub});
  		parts.push({name: 'r', data: priv});
  		this._key = new privateKey({
  			type: 'curve25519',
  			parts: parts
  		});
  		this._isPriv = true;
  		return (this._key);
  	}

  	throw (new Error('Invalid algorithm: ' + this._algo));
  };
  DiffieHellman.prototype.generateKeys = DiffieHellman.prototype.generateKey;

  /* These are helpers for using ecc-jsbn (for node 0.10 compatibility). */

  function X9ECParameters$1(name) {
  	var params = algs.curves[name];
  	assert_1.object(params);

  	var p = new jsbn$1(params.p);
  	var a = new jsbn$1(params.a);
  	var b = new jsbn$1(params.b);
  	var n = new jsbn$1(params.n);
  	var h = jsbn$1.ONE;
  	var curve = new ec$1.ECCurveFp(p, a, b);
  	var G = curve.decodePointHex(params.G.toString('hex'));

  	this.curve = curve;
  	this.g = G;
  	this.n = n;
  	this.h = h;
  }
  X9ECParameters$1.prototype.getCurve = function () { return (this.curve); };
  X9ECParameters$1.prototype.getG = function () { return (this.g); };
  X9ECParameters$1.prototype.getN = function () { return (this.n); };
  X9ECParameters$1.prototype.getH = function () { return (this.h); };

  function ECPublic(params, buffer) {
  	this._params = params;
  	if (buffer[0] === 0x00)
  		{ buffer = buffer.slice(1); }
  	this._pub = params.getCurve().decodePointHex(buffer.toString('hex'));
  }

  function ECPrivate(params, buffer) {
  	this._params = params;
  	this._priv = new jsbn$1(utils$1.mpNormalize(buffer));
  }
  ECPrivate.prototype.deriveSharedSecret = function (pubKey) {
  	assert_1.ok(pubKey instanceof ECPublic);
  	var S = pubKey._pub.multiply(this._priv);
  	return (new Buffer(S.getX().toBigInteger().toByteArray()));
  };

  function generateED25519() {
  	if (nacl === undefined)
  		{ nacl = naclFast; }

  	var pair = nacl.sign.keyPair();
  	var priv = new Buffer(pair.secretKey);
  	var pub = new Buffer(pair.publicKey);
  	assert_1.strictEqual(priv.length, 64);
  	assert_1.strictEqual(pub.length, 32);

  	var parts = [];
  	parts.push({name: 'R', data: pub});
  	parts.push({name: 'r', data: priv});
  	var key$$1 = new privateKey({
  		type: 'ed25519',
  		parts: parts
  	});
  	return (key$$1);
  }

  /* Generates a new ECDSA private key on a given curve. */
  function generateECDSA(curve) {
  	var parts = [];
  	var key$$1;

  	if (CRYPTO_HAVE_ECDH) {
  		/*
  		 * Node crypto doesn't expose key generation directly, but the
  		 * ECDH instances can generate keys. It turns out this just
  		 * calls into the OpenSSL generic key generator, and we can
  		 * read its output happily without doing an actual DH. So we
  		 * use that here.
  		 */
  		var osCurve = {
  			'nistp256': 'prime256v1',
  			'nistp384': 'secp384r1',
  			'nistp521': 'secp521r1'
  		}[curve];

  		var dh = tls.createECDH(osCurve);
  		dh.generateKeys();

  		parts.push({name: 'curve',
  		    data: new Buffer(curve)});
  		parts.push({name: 'Q', data: dh.getPublicKey()});
  		parts.push({name: 'd', data: dh.getPrivateKey()});

  		key$$1 = new privateKey({
  			type: 'ecdsa',
  			curve: curve,
  			parts: parts
  		});
  		return (key$$1);

  	} else {
  		if (ec$1 === undefined)
  			{ ec$1 = ec; }
  		if (jsbn$1 === undefined)
  			{ jsbn$1 = jsbn.BigInteger; }

  		var ecParams = new X9ECParameters$1(curve);

  		/* This algorithm taken from FIPS PUB 186-4 (section B.4.1) */
  		var n = ecParams.getN();
  		/*
  		 * The crypto.randomBytes() function can only give us whole
  		 * bytes, so taking a nod from X9.62, we round up.
  		 */
  		var cByteLen = Math.ceil((n.bitLength() + 64) / 8);
  		var c = new jsbn$1(tls.randomBytes(cByteLen));

  		var n1 = n.subtract(jsbn$1.ONE);
  		var priv = c.mod(n1).add(jsbn$1.ONE);
  		var pub = ecParams.getG().multiply(priv);

  		priv = new Buffer(priv.toByteArray());
  		pub = new Buffer(ecParams.getCurve().
  		    encodePointHex(pub), 'hex');

  		parts.push({name: 'curve', data: new Buffer(curve)});
  		parts.push({name: 'Q', data: pub});
  		parts.push({name: 'd', data: priv});

  		key$$1 = new privateKey({
  			type: 'ecdsa',
  			curve: curve,
  			parts: parts
  		});
  		return (key$$1);
  	}
  }

  // Copyright 2015 Joyent, Inc.

  var edCompat = {
  	Verifier: Verifier,
  	Signer: Signer
  };

  var nacl$1;





  function Verifier(key, hashAlgo) {
  	if (nacl$1 === undefined)
  		{ nacl$1 = naclFast; }

  	if (hashAlgo.toLowerCase() !== 'sha512')
  		{ throw (new Error('ED25519 only supports the use of ' +
  		    'SHA-512 hashes')); }

  	this.key = key;
  	this.chunks = [];

  	stream$1.Writable.call(this, {});
  }
  util$2.inherits(Verifier, stream$1.Writable);

  Verifier.prototype._write = function (chunk, enc, cb) {
  	this.chunks.push(chunk);
  	cb();
  };

  Verifier.prototype.update = function (chunk) {
  	if (typeof (chunk) === 'string')
  		{ chunk = new Buffer(chunk, 'binary'); }
  	this.chunks.push(chunk);
  };

  Verifier.prototype.verify = function (signature$$1, fmt) {
  	var sig;
  	if (signature.isSignature(signature$$1, [2, 0])) {
  		if (signature$$1.type !== 'ed25519')
  			{ return (false); }
  		sig = signature$$1.toBuffer('raw');

  	} else if (typeof (signature$$1) === 'string') {
  		sig = new Buffer(signature$$1, 'base64');

  	} else if (signature.isSignature(signature$$1, [1, 0])) {
  		throw (new Error('signature was created by too old ' +
  		    'a version of sshpk and cannot be verified'));
  	}

  	assert_1.buffer(sig);
  	return (nacl$1.sign.detached.verify(
  	    new Uint8Array(Buffer.concat(this.chunks)),
  	    new Uint8Array(sig),
  	    new Uint8Array(this.key.part.R.data)));
  };

  function Signer(key, hashAlgo) {
  	if (nacl$1 === undefined)
  		{ nacl$1 = naclFast; }

  	if (hashAlgo.toLowerCase() !== 'sha512')
  		{ throw (new Error('ED25519 only supports the use of ' +
  		    'SHA-512 hashes')); }

  	this.key = key;
  	this.chunks = [];

  	stream$1.Writable.call(this, {});
  }
  util$2.inherits(Signer, stream$1.Writable);

  Signer.prototype._write = function (chunk, enc, cb) {
  	this.chunks.push(chunk);
  	cb();
  };

  Signer.prototype.update = function (chunk) {
  	if (typeof (chunk) === 'string')
  		{ chunk = new Buffer(chunk, 'binary'); }
  	this.chunks.push(chunk);
  };

  Signer.prototype.sign = function () {
  	var sig = nacl$1.sign.detached(
  	    new Uint8Array(Buffer.concat(this.chunks)),
  	    new Uint8Array(this.key.part.r.data));
  	var sigBuf = new Buffer(sig);
  	var sigObj = signature.parse(sigBuf, 'ed25519', 'raw');
  	sigObj.hashAlgorithm = 'sha512';
  	return (sigObj);
  };

  // Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.


  var errors$2 = {

    newInvalidAsn1Error: function(msg) {
      var e = new Error();
      e.name = 'InvalidAsn1Error';
      e.message = msg || '';
      return e;
    }

  };

  // Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.


  var types$1 = {
    EOC: 0,
    Boolean: 1,
    Integer: 2,
    BitString: 3,
    OctetString: 4,
    Null: 5,
    OID: 6,
    ObjectDescriptor: 7,
    External: 8,
    Real: 9, // float
    Enumeration: 10,
    PDV: 11,
    Utf8String: 12,
    RelativeOID: 13,
    Sequence: 16,
    Set: 17,
    NumericString: 18,
    PrintableString: 19,
    T61String: 20,
    VideotexString: 21,
    IA5String: 22,
    UTCTime: 23,
    GeneralizedTime: 24,
    GraphicString: 25,
    VisibleString: 26,
    GeneralString: 28,
    UniversalString: 29,
    CharacterString: 30,
    BMPString: 31,
    Constructor: 32,
    Context: 128
  };

  // Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.







  ///--- Globals

  var newInvalidAsn1Error = errors$2.newInvalidAsn1Error;



  ///--- API

  function Reader(data) {
    if (!data || !Buffer.isBuffer(data))
      { throw new TypeError('data must be a node Buffer'); }

    this._buf = data;
    this._size = data.length;

    // These hold the "current" state
    this._len = 0;
    this._offset = 0;
  }

  Object.defineProperty(Reader.prototype, 'length', {
    enumerable: true,
    get: function () { return (this._len); }
  });

  Object.defineProperty(Reader.prototype, 'offset', {
    enumerable: true,
    get: function () { return (this._offset); }
  });

  Object.defineProperty(Reader.prototype, 'remain', {
    get: function () { return (this._size - this._offset); }
  });

  Object.defineProperty(Reader.prototype, 'buffer', {
    get: function () { return (this._buf.slice(this._offset)); }
  });


  /**
   * Reads a single byte and advances offset; you can pass in `true` to make this
   * a "peek" operation (i.e., get the byte, but don't advance the offset).
   *
   * @param {Boolean} peek true means don't move offset.
   * @return {Number} the next byte, null if not enough data.
   */
  Reader.prototype.readByte = function(peek) {
    if (this._size - this._offset < 1)
      { return null; }

    var b = this._buf[this._offset] & 0xff;

    if (!peek)
      { this._offset += 1; }

    return b;
  };


  Reader.prototype.peek = function() {
    return this.readByte(true);
  };


  /**
   * Reads a (potentially) variable length off the BER buffer.  This call is
   * not really meant to be called directly, as callers have to manipulate
   * the internal buffer afterwards.
   *
   * As a result of this call, you can call `Reader.length`, until the
   * next thing called that does a readLength.
   *
   * @return {Number} the amount of offset to advance the buffer.
   * @throws {InvalidAsn1Error} on bad ASN.1
   */
  Reader.prototype.readLength = function(offset) {
    var this$1 = this;

    if (offset === undefined)
      { offset = this._offset; }

    if (offset >= this._size)
      { return null; }

    var lenB = this._buf[offset++] & 0xff;
    if (lenB === null)
      { return null; }

    if ((lenB & 0x80) == 0x80) {
      lenB &= 0x7f;

      if (lenB == 0)
        { throw newInvalidAsn1Error('Indefinite length not supported'); }

      if (lenB > 4)
        { throw newInvalidAsn1Error('encoding too long'); }

      if (this._size - offset < lenB)
        { return null; }

      this._len = 0;
      for (var i = 0; i < lenB; i++)
        { this$1._len = (this$1._len << 8) + (this$1._buf[offset++] & 0xff); }

    } else {
      // Wasn't a variable length
      this._len = lenB;
    }

    return offset;
  };


  /**
   * Parses the next sequence in this BER buffer.
   *
   * To get the length of the sequence, call `Reader.length`.
   *
   * @return {Number} the sequence's tag.
   */
  Reader.prototype.readSequence = function(tag) {
    var seq = this.peek();
    if (seq === null)
      { return null; }
    if (tag !== undefined && tag !== seq)
      { throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
                                ': got 0x' + seq.toString(16)); }

    var o = this.readLength(this._offset + 1); // stored in `length`
    if (o === null)
      { return null; }

    this._offset = o;
    return seq;
  };


  Reader.prototype.readInt = function() {
    return this._readTag(types$1.Integer);
  };


  Reader.prototype.readBoolean = function() {
    return (this._readTag(types$1.Boolean) === 0 ? false : true);
  };


  Reader.prototype.readEnumeration = function() {
    return this._readTag(types$1.Enumeration);
  };


  Reader.prototype.readString = function(tag, retbuf) {
    if (!tag)
      { tag = types$1.OctetString; }

    var b = this.peek();
    if (b === null)
      { return null; }

    if (b !== tag)
      { throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
                                ': got 0x' + b.toString(16)); }

    var o = this.readLength(this._offset + 1); // stored in `length`

    if (o === null)
      { return null; }

    if (this.length > this._size - o)
      { return null; }

    this._offset = o;

    if (this.length === 0)
      { return retbuf ? new Buffer(0) : ''; }

    var str = this._buf.slice(this._offset, this._offset + this.length);
    this._offset += this.length;

    return retbuf ? str : str.toString('utf8');
  };

  Reader.prototype.readOID = function(tag) {
    if (!tag)
      { tag = types$1.OID; }

    var b = this.readString(tag, true);
    if (b === null)
      { return null; }

    var values = [];
    var value = 0;

    for (var i = 0; i < b.length; i++) {
      var byte = b[i] & 0xff;

      value <<= 7;
      value += byte & 0x7f;
      if ((byte & 0x80) == 0) {
        values.push(value);
        value = 0;
      }
    }

    value = values.shift();
    values.unshift(value % 40);
    values.unshift((value / 40) >> 0);

    return values.join('.');
  };


  Reader.prototype._readTag = function(tag) {
    var this$1 = this;

    assert$4.ok(tag !== undefined);

    var b = this.peek();

    if (b === null)
      { return null; }

    if (b !== tag)
      { throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
                                ': got 0x' + b.toString(16)); }

    var o = this.readLength(this._offset + 1); // stored in `length`
    if (o === null)
      { return null; }

    if (this.length > 4)
      { throw newInvalidAsn1Error('Integer too long: ' + this.length); }

    if (this.length > this._size - o)
      { return null; }
    this._offset = o;

    var fb = this._buf[this._offset];
    var value = 0;

    for (var i = 0; i < this.length; i++) {
      value <<= 8;
      value |= (this$1._buf[this$1._offset++] & 0xff);
    }

    if ((fb & 0x80) == 0x80 && i !== 4)
      { value -= (1 << (i * 8)); }

    return value >> 0;
  };



  ///--- Exported API

  var reader = Reader;

  var DEFAULT_OPTS = {
    size: 1024,
    growthFactor: 8
  };


  ///--- Helpers

  function merge(from, to) {
    assert$4.ok(from);
    assert$4.equal(typeof(from), 'object');
    assert$4.ok(to);
    assert$4.equal(typeof(to), 'object');

    var keys = Object.getOwnPropertyNames(from);
    keys.forEach(function(key) {
      if (to[key])
        { return; }

      var value = Object.getOwnPropertyDescriptor(from, key);
      Object.defineProperty(to, key, value);
    });

    return to;
  }



  ///--- API

  function Writer(options) {
    options = merge(DEFAULT_OPTS, options || {});

    this._buf = new Buffer(options.size || 1024);
    this._size = this._buf.length;
    this._offset = 0;
    this._options = options;

    // A list of offsets in the buffer where we need to insert
    // sequence tag/len pairs.
    this._seq = [];
  }

  Object.defineProperty(Writer.prototype, 'buffer', {
    get: function () {
      if (this._seq.length)
        { throw new InvalidAsn1Error(this._seq.length + ' unended sequence(s)'); }

      return (this._buf.slice(0, this._offset));
    }
  });

  Writer.prototype.writeByte = function(b) {
    if (typeof(b) !== 'number')
      { throw new TypeError('argument must be a Number'); }

    this._ensure(1);
    this._buf[this._offset++] = b;
  };


  Writer.prototype.writeInt = function(i, tag) {
    var this$1 = this;

    if (typeof(i) !== 'number')
      { throw new TypeError('argument must be a Number'); }
    if (typeof(tag) !== 'number')
      { tag = types$1.Integer; }

    var sz = 4;

    while ((((i & 0xff800000) === 0) || ((i & 0xff800000) === 0xff800000 >> 0)) &&
           (sz > 1)) {
      sz--;
      i <<= 8;
    }

    if (sz > 4)
      { throw new InvalidAsn1Error('BER ints cannot be > 0xffffffff'); }

    this._ensure(2 + sz);
    this._buf[this._offset++] = tag;
    this._buf[this._offset++] = sz;

    while (sz-- > 0) {
      this$1._buf[this$1._offset++] = ((i & 0xff000000) >>> 24);
      i <<= 8;
    }

  };


  Writer.prototype.writeNull = function() {
    this.writeByte(types$1.Null);
    this.writeByte(0x00);
  };


  Writer.prototype.writeEnumeration = function(i, tag) {
    if (typeof(i) !== 'number')
      { throw new TypeError('argument must be a Number'); }
    if (typeof(tag) !== 'number')
      { tag = types$1.Enumeration; }

    return this.writeInt(i, tag);
  };


  Writer.prototype.writeBoolean = function(b, tag) {
    if (typeof(b) !== 'boolean')
      { throw new TypeError('argument must be a Boolean'); }
    if (typeof(tag) !== 'number')
      { tag = types$1.Boolean; }

    this._ensure(3);
    this._buf[this._offset++] = tag;
    this._buf[this._offset++] = 0x01;
    this._buf[this._offset++] = b ? 0xff : 0x00;
  };


  Writer.prototype.writeString = function(s, tag) {
    if (typeof(s) !== 'string')
      { throw new TypeError('argument must be a string (was: ' + typeof(s) + ')'); }
    if (typeof(tag) !== 'number')
      { tag = types$1.OctetString; }

    var len = Buffer.byteLength(s);
    this.writeByte(tag);
    this.writeLength(len);
    if (len) {
      this._ensure(len);
      this._buf.write(s, this._offset);
      this._offset += len;
    }
  };


  Writer.prototype.writeBuffer = function(buf, tag) {
    if (typeof(tag) !== 'number')
      { throw new TypeError('tag must be a number'); }
    if (!Buffer.isBuffer(buf))
      { throw new TypeError('argument must be a buffer'); }

    this.writeByte(tag);
    this.writeLength(buf.length);
    this._ensure(buf.length);
    buf.copy(this._buf, this._offset, 0, buf.length);
    this._offset += buf.length;
  };


  Writer.prototype.writeStringArray = function(strings) {
    if ((!strings instanceof Array))
      { throw new TypeError('argument must be an Array[String]'); }

    var self = this;
    strings.forEach(function(s) {
      self.writeString(s);
    });
  };

  // This is really to solve DER cases, but whatever for now
  Writer.prototype.writeOID = function(s, tag) {
    if (typeof(s) !== 'string')
      { throw new TypeError('argument must be a string'); }
    if (typeof(tag) !== 'number')
      { tag = types$1.OID; }

    if (!/^([0-9]+\.){3,}[0-9]+$/.test(s))
      { throw new Error('argument is not a valid OID string'); }

    function encodeOctet(bytes, octet) {
      if (octet < 128) {
          bytes.push(octet);
      } else if (octet < 16384) {
          bytes.push((octet >>> 7) | 0x80);
          bytes.push(octet & 0x7F);
      } else if (octet < 2097152) {
        bytes.push((octet >>> 14) | 0x80);
        bytes.push(((octet >>> 7) | 0x80) & 0xFF);
        bytes.push(octet & 0x7F);
      } else if (octet < 268435456) {
        bytes.push((octet >>> 21) | 0x80);
        bytes.push(((octet >>> 14) | 0x80) & 0xFF);
        bytes.push(((octet >>> 7) | 0x80) & 0xFF);
        bytes.push(octet & 0x7F);
      } else {
        bytes.push(((octet >>> 28) | 0x80) & 0xFF);
        bytes.push(((octet >>> 21) | 0x80) & 0xFF);
        bytes.push(((octet >>> 14) | 0x80) & 0xFF);
        bytes.push(((octet >>> 7) | 0x80) & 0xFF);
        bytes.push(octet & 0x7F);
      }
    }

    var tmp = s.split('.');
    var bytes = [];
    bytes.push(parseInt(tmp[0], 10) * 40 + parseInt(tmp[1], 10));
    tmp.slice(2).forEach(function(b) {
      encodeOctet(bytes, parseInt(b, 10));
    });

    var self = this;
    this._ensure(2 + bytes.length);
    this.writeByte(tag);
    this.writeLength(bytes.length);
    bytes.forEach(function(b) {
      self.writeByte(b);
    });
  };


  Writer.prototype.writeLength = function(len) {
    if (typeof(len) !== 'number')
      { throw new TypeError('argument must be a Number'); }

    this._ensure(4);

    if (len <= 0x7f) {
      this._buf[this._offset++] = len;
    } else if (len <= 0xff) {
      this._buf[this._offset++] = 0x81;
      this._buf[this._offset++] = len;
    } else if (len <= 0xffff) {
      this._buf[this._offset++] = 0x82;
      this._buf[this._offset++] = len >> 8;
      this._buf[this._offset++] = len;
    } else if (len <= 0xffffff) {
      this._buf[this._offset++] = 0x83;
      this._buf[this._offset++] = len >> 16;
      this._buf[this._offset++] = len >> 8;
      this._buf[this._offset++] = len;
    } else {
      throw new InvalidAsn1ERror('Length too long (> 4 bytes)');
    }
  };

  Writer.prototype.startSequence = function(tag) {
    if (typeof(tag) !== 'number')
      { tag = types$1.Sequence | types$1.Constructor; }

    this.writeByte(tag);
    this._seq.push(this._offset);
    this._ensure(3);
    this._offset += 3;
  };


  Writer.prototype.endSequence = function() {
    var seq = this._seq.pop();
    var start = seq + 3;
    var len = this._offset - start;

    if (len <= 0x7f) {
      this._shift(start, len, -2);
      this._buf[seq] = len;
    } else if (len <= 0xff) {
      this._shift(start, len, -1);
      this._buf[seq] = 0x81;
      this._buf[seq + 1] = len;
    } else if (len <= 0xffff) {
      this._buf[seq] = 0x82;
      this._buf[seq + 1] = len >> 8;
      this._buf[seq + 2] = len;
    } else if (len <= 0xffffff) {
      this._shift(start, len, 1);
      this._buf[seq] = 0x83;
      this._buf[seq + 1] = len >> 16;
      this._buf[seq + 2] = len >> 8;
      this._buf[seq + 3] = len;
    } else {
      throw new InvalidAsn1Error('Sequence too long');
    }
  };


  Writer.prototype._shift = function(start, len, shift) {
    assert$4.ok(start !== undefined);
    assert$4.ok(len !== undefined);
    assert$4.ok(shift);

    this._buf.copy(this._buf, start + shift, start, start + len);
    this._offset += shift;
  };

  Writer.prototype._ensure = function(len) {
    assert$4.ok(len);

    if (this._size - this._offset < len) {
      var sz = this._size * this._options.growthFactor;
      if (sz - this._offset < len)
        { sz += len; }

      var buf = new Buffer(sz);

      this._buf.copy(buf, 0, 0, this._offset);
      this._buf = buf;
      this._size = sz;
    }
  };



  ///--- Exported API

  var writer = Writer;

  var ber = createCommonjsModule(function (module) {
  // Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.








  ///--- Exports

  module.exports = {

    Reader: reader,

    Writer: writer

  };

  for (var t in types$1) {
    if (types$1.hasOwnProperty(t))
      { module.exports[t] = types$1[t]; }
  }
  for (var e in errors$2) {
    if (errors$2.hasOwnProperty(e))
      { module.exports[e] = errors$2[e]; }
  }
  });
  var ber_1 = ber.Reader;
  var ber_2 = ber.Writer;

  // Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

  // If you have no idea what ASN.1 or BER is, see this:
  // ftp://ftp.rsa.com/pub/pkcs/ascii/layman.asc





  ///--- Exported API

  var lib$6 = {

    Ber: ber,

    BerReader: ber.Reader,

    BerWriter: ber.Writer

  };

  // Copyright 2015 Joyent, Inc.

  var pkcs8 = {
  	read: read$1,
  	readPkcs8: readPkcs8,
  	write: write$1,
  	writePkcs8: writePkcs8,

  	readECDSACurve: readECDSACurve,
  	writeECDSACurve: writeECDSACurve
  };









  function read$1(buf, options) {
  	return (pem.read(buf, options, 'pkcs8'));
  }

  function write$1(key$$1, options) {
  	return (pem.write(key$$1, options, 'pkcs8'));
  }

  /* Helper to read in a single mpint */
  function readMPInt(der, nm) {
  	assert_1.strictEqual(der.peek(), lib$6.Ber.Integer,
  	    nm + ' is not an Integer');
  	return (utils$1.mpNormalize(der.readString(lib$6.Ber.Integer, true)));
  }

  function readPkcs8(alg, type, der) {
  	/* Private keys in pkcs#8 format have a weird extra int */
  	if (der.peek() === lib$6.Ber.Integer) {
  		assert_1.strictEqual(type, 'private',
  		    'unexpected Integer at start of public key');
  		der.readString(lib$6.Ber.Integer, true);
  	}

  	der.readSequence();
  	var next = der.offset + der.length;

  	var oid = der.readOID();
  	switch (oid) {
  	case '1.2.840.113549.1.1.1':
  		der._offset = next;
  		if (type === 'public')
  			{ return (readPkcs8RSAPublic(der)); }
  		else
  			{ return (readPkcs8RSAPrivate(der)); }
  	case '1.2.840.10040.4.1':
  		if (type === 'public')
  			{ return (readPkcs8DSAPublic(der)); }
  		else
  			{ return (readPkcs8DSAPrivate(der)); }
  	case '1.2.840.10045.2.1':
  		if (type === 'public')
  			{ return (readPkcs8ECDSAPublic(der)); }
  		else
  			{ return (readPkcs8ECDSAPrivate(der)); }
  	default:
  		throw (new Error('Unknown key type OID ' + oid));
  	}
  }

  function readPkcs8RSAPublic(der) {
  	// bit string sequence
  	der.readSequence(lib$6.Ber.BitString);
  	der.readByte();
  	der.readSequence();

  	// modulus
  	var n = readMPInt(der, 'modulus');
  	var e = readMPInt(der, 'exponent');

  	// now, make the key
  	var key$$1 = {
  		type: 'rsa',
  		source: der.originalInput,
  		parts: [
  			{ name: 'e', data: e },
  			{ name: 'n', data: n }
  		]
  	};

  	return (new key(key$$1));
  }

  function readPkcs8RSAPrivate(der) {
  	der.readSequence(lib$6.Ber.OctetString);
  	der.readSequence();

  	var ver = readMPInt(der, 'version');
  	assert_1.equal(ver[0], 0x0, 'unknown RSA private key version');

  	// modulus then public exponent
  	var n = readMPInt(der, 'modulus');
  	var e = readMPInt(der, 'public exponent');
  	var d = readMPInt(der, 'private exponent');
  	var p = readMPInt(der, 'prime1');
  	var q = readMPInt(der, 'prime2');
  	var dmodp = readMPInt(der, 'exponent1');
  	var dmodq = readMPInt(der, 'exponent2');
  	var iqmp = readMPInt(der, 'iqmp');

  	// now, make the key
  	var key$$1 = {
  		type: 'rsa',
  		parts: [
  			{ name: 'n', data: n },
  			{ name: 'e', data: e },
  			{ name: 'd', data: d },
  			{ name: 'iqmp', data: iqmp },
  			{ name: 'p', data: p },
  			{ name: 'q', data: q },
  			{ name: 'dmodp', data: dmodp },
  			{ name: 'dmodq', data: dmodq }
  		]
  	};

  	return (new privateKey(key$$1));
  }

  function readPkcs8DSAPublic(der) {
  	der.readSequence();

  	var p = readMPInt(der, 'p');
  	var q = readMPInt(der, 'q');
  	var g = readMPInt(der, 'g');

  	// bit string sequence
  	der.readSequence(lib$6.Ber.BitString);
  	der.readByte();

  	var y = readMPInt(der, 'y');

  	// now, make the key
  	var key$$1 = {
  		type: 'dsa',
  		parts: [
  			{ name: 'p', data: p },
  			{ name: 'q', data: q },
  			{ name: 'g', data: g },
  			{ name: 'y', data: y }
  		]
  	};

  	return (new key(key$$1));
  }

  function readPkcs8DSAPrivate(der) {
  	der.readSequence();

  	var p = readMPInt(der, 'p');
  	var q = readMPInt(der, 'q');
  	var g = readMPInt(der, 'g');

  	der.readSequence(lib$6.Ber.OctetString);
  	var x = readMPInt(der, 'x');

  	/* The pkcs#8 format does not include the public key */
  	var y = utils$1.calculateDSAPublic(g, p, x);

  	var key$$1 = {
  		type: 'dsa',
  		parts: [
  			{ name: 'p', data: p },
  			{ name: 'q', data: q },
  			{ name: 'g', data: g },
  			{ name: 'y', data: y },
  			{ name: 'x', data: x }
  		]
  	};

  	return (new privateKey(key$$1));
  }

  function readECDSACurve(der) {
  	var curveName, curveNames;
  	var j, c, cd;

  	if (der.peek() === lib$6.Ber.OID) {
  		var oid = der.readOID();

  		curveNames = Object.keys(algs.curves);
  		for (j = 0; j < curveNames.length; ++j) {
  			c = curveNames[j];
  			cd = algs.curves[c];
  			if (cd.pkcs8oid === oid) {
  				curveName = c;
  				break;
  			}
  		}

  	} else {
  		// ECParameters sequence
  		der.readSequence();
  		var version = der.readString(lib$6.Ber.Integer, true);
  		assert_1.strictEqual(version[0], 1, 'ECDSA key not version 1');

  		var curve = {};

  		// FieldID sequence
  		der.readSequence();
  		var fieldTypeOid = der.readOID();
  		assert_1.strictEqual(fieldTypeOid, '1.2.840.10045.1.1',
  		    'ECDSA key is not from a prime-field');
  		var p = curve.p = utils$1.mpNormalize(
  		    der.readString(lib$6.Ber.Integer, true));
  		/*
  		 * p always starts with a 1 bit, so count the zeros to get its
  		 * real size.
  		 */
  		curve.size = p.length * 8 - utils$1.countZeros(p);

  		// Curve sequence
  		der.readSequence();
  		curve.a = utils$1.mpNormalize(
  		    der.readString(lib$6.Ber.OctetString, true));
  		curve.b = utils$1.mpNormalize(
  		    der.readString(lib$6.Ber.OctetString, true));
  		if (der.peek() === lib$6.Ber.BitString)
  			{ curve.s = der.readString(lib$6.Ber.BitString, true); }

  		// Combined Gx and Gy
  		curve.G = der.readString(lib$6.Ber.OctetString, true);
  		assert_1.strictEqual(curve.G[0], 0x4,
  		    'uncompressed G is required');

  		curve.n = utils$1.mpNormalize(
  		    der.readString(lib$6.Ber.Integer, true));
  		curve.h = utils$1.mpNormalize(
  		    der.readString(lib$6.Ber.Integer, true));
  		assert_1.strictEqual(curve.h[0], 0x1, 'a cofactor=1 curve is ' +
  		    'required');

  		curveNames = Object.keys(algs.curves);
  		var ks = Object.keys(curve);
  		for (j = 0; j < curveNames.length; ++j) {
  			c = curveNames[j];
  			cd = algs.curves[c];
  			var equal = true;
  			for (var i = 0; i < ks.length; ++i) {
  				var k = ks[i];
  				if (cd[k] === undefined)
  					{ continue; }
  				if (typeof (cd[k]) === 'object' &&
  				    cd[k].equals !== undefined) {
  					if (!cd[k].equals(curve[k])) {
  						equal = false;
  						break;
  					}
  				} else if (Buffer.isBuffer(cd[k])) {
  					if (cd[k].toString('binary')
  					    !== curve[k].toString('binary')) {
  						equal = false;
  						break;
  					}
  				} else {
  					if (cd[k] !== curve[k]) {
  						equal = false;
  						break;
  					}
  				}
  			}
  			if (equal) {
  				curveName = c;
  				break;
  			}
  		}
  	}
  	return (curveName);
  }

  function readPkcs8ECDSAPrivate(der) {
  	var curveName = readECDSACurve(der);
  	assert_1.string(curveName, 'a known elliptic curve');

  	der.readSequence(lib$6.Ber.OctetString);
  	der.readSequence();

  	var version = readMPInt(der, 'version');
  	assert_1.equal(version[0], 1, 'unknown version of ECDSA key');

  	var d = der.readString(lib$6.Ber.OctetString, true);
  	der.readSequence(0xa1);

  	var Q = der.readString(lib$6.Ber.BitString, true);
  	Q = utils$1.ecNormalize(Q);

  	var key$$1 = {
  		type: 'ecdsa',
  		parts: [
  			{ name: 'curve', data: new Buffer(curveName) },
  			{ name: 'Q', data: Q },
  			{ name: 'd', data: d }
  		]
  	};

  	return (new privateKey(key$$1));
  }

  function readPkcs8ECDSAPublic(der) {
  	var curveName = readECDSACurve(der);
  	assert_1.string(curveName, 'a known elliptic curve');

  	var Q = der.readString(lib$6.Ber.BitString, true);
  	Q = utils$1.ecNormalize(Q);

  	var key$$1 = {
  		type: 'ecdsa',
  		parts: [
  			{ name: 'curve', data: new Buffer(curveName) },
  			{ name: 'Q', data: Q }
  		]
  	};

  	return (new key(key$$1));
  }

  function writePkcs8(der, key$$1) {
  	der.startSequence();

  	if (privateKey.isPrivateKey(key$$1)) {
  		var sillyInt = new Buffer(1);
  		sillyInt[0] = 0x0;
  		der.writeBuffer(sillyInt, lib$6.Ber.Integer);
  	}

  	der.startSequence();
  	switch (key$$1.type) {
  	case 'rsa':
  		der.writeOID('1.2.840.113549.1.1.1');
  		if (privateKey.isPrivateKey(key$$1))
  			{ writePkcs8RSAPrivate(key$$1, der); }
  		else
  			{ writePkcs8RSAPublic(key$$1, der); }
  		break;
  	case 'dsa':
  		der.writeOID('1.2.840.10040.4.1');
  		if (privateKey.isPrivateKey(key$$1))
  			{ writePkcs8DSAPrivate(key$$1, der); }
  		else
  			{ writePkcs8DSAPublic(key$$1, der); }
  		break;
  	case 'ecdsa':
  		der.writeOID('1.2.840.10045.2.1');
  		if (privateKey.isPrivateKey(key$$1))
  			{ writePkcs8ECDSAPrivate(key$$1, der); }
  		else
  			{ writePkcs8ECDSAPublic(key$$1, der); }
  		break;
  	default:
  		throw (new Error('Unsupported key type: ' + key$$1.type));
  	}

  	der.endSequence();
  }

  function writePkcs8RSAPrivate(key$$1, der) {
  	der.writeNull();
  	der.endSequence();

  	der.startSequence(lib$6.Ber.OctetString);
  	der.startSequence();

  	var version = new Buffer(1);
  	version[0] = 0;
  	der.writeBuffer(version, lib$6.Ber.Integer);

  	der.writeBuffer(key$$1.part.n.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.e.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.d.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.p.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.q.data, lib$6.Ber.Integer);
  	if (!key$$1.part.dmodp || !key$$1.part.dmodq)
  		{ utils$1.addRSAMissing(key$$1); }
  	der.writeBuffer(key$$1.part.dmodp.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.dmodq.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.iqmp.data, lib$6.Ber.Integer);

  	der.endSequence();
  	der.endSequence();
  }

  function writePkcs8RSAPublic(key$$1, der) {
  	der.writeNull();
  	der.endSequence();

  	der.startSequence(lib$6.Ber.BitString);
  	der.writeByte(0x00);

  	der.startSequence();
  	der.writeBuffer(key$$1.part.n.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.e.data, lib$6.Ber.Integer);
  	der.endSequence();

  	der.endSequence();
  }

  function writePkcs8DSAPrivate(key$$1, der) {
  	der.startSequence();
  	der.writeBuffer(key$$1.part.p.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.q.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.g.data, lib$6.Ber.Integer);
  	der.endSequence();

  	der.endSequence();

  	der.startSequence(lib$6.Ber.OctetString);
  	der.writeBuffer(key$$1.part.x.data, lib$6.Ber.Integer);
  	der.endSequence();
  }

  function writePkcs8DSAPublic(key$$1, der) {
  	der.startSequence();
  	der.writeBuffer(key$$1.part.p.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.q.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.g.data, lib$6.Ber.Integer);
  	der.endSequence();
  	der.endSequence();

  	der.startSequence(lib$6.Ber.BitString);
  	der.writeByte(0x00);
  	der.writeBuffer(key$$1.part.y.data, lib$6.Ber.Integer);
  	der.endSequence();
  }

  function writeECDSACurve(key$$1, der) {
  	var curve = algs.curves[key$$1.curve];
  	if (curve.pkcs8oid) {
  		/* This one has a name in pkcs#8, so just write the oid */
  		der.writeOID(curve.pkcs8oid);

  	} else {
  		// ECParameters sequence
  		der.startSequence();

  		var version = new Buffer(1);
  		version.writeUInt8(1, 0);
  		der.writeBuffer(version, lib$6.Ber.Integer);

  		// FieldID sequence
  		der.startSequence();
  		der.writeOID('1.2.840.10045.1.1'); // prime-field
  		der.writeBuffer(curve.p, lib$6.Ber.Integer);
  		der.endSequence();

  		// Curve sequence
  		der.startSequence();
  		var a = curve.p;
  		if (a[0] === 0x0)
  			{ a = a.slice(1); }
  		der.writeBuffer(a, lib$6.Ber.OctetString);
  		der.writeBuffer(curve.b, lib$6.Ber.OctetString);
  		der.writeBuffer(curve.s, lib$6.Ber.BitString);
  		der.endSequence();

  		der.writeBuffer(curve.G, lib$6.Ber.OctetString);
  		der.writeBuffer(curve.n, lib$6.Ber.Integer);
  		var h = curve.h;
  		if (!h) {
  			h = new Buffer(1);
  			h[0] = 1;
  		}
  		der.writeBuffer(h, lib$6.Ber.Integer);

  		// ECParameters
  		der.endSequence();
  	}
  }

  function writePkcs8ECDSAPublic(key$$1, der) {
  	writeECDSACurve(key$$1, der);
  	der.endSequence();

  	var Q = utils$1.ecNormalize(key$$1.part.Q.data, true);
  	der.writeBuffer(Q, lib$6.Ber.BitString);
  }

  function writePkcs8ECDSAPrivate(key$$1, der) {
  	writeECDSACurve(key$$1, der);
  	der.endSequence();

  	der.startSequence(lib$6.Ber.OctetString);
  	der.startSequence();

  	var version = new Buffer(1);
  	version[0] = 1;
  	der.writeBuffer(version, lib$6.Ber.Integer);

  	der.writeBuffer(key$$1.part.d.data, lib$6.Ber.OctetString);

  	der.startSequence(0xa1);
  	var Q = utils$1.ecNormalize(key$$1.part.Q.data, true);
  	der.writeBuffer(Q, lib$6.Ber.BitString);
  	der.endSequence();

  	der.endSequence();
  	der.endSequence();
  }

  // Copyright 2015 Joyent, Inc.

  var pkcs1 = {
  	read: read$2,
  	readPkcs1: readPkcs1,
  	write: write$2,
  	writePkcs1: writePkcs1
  };











  var readECDSACurve$1 = pkcs8.readECDSACurve;

  function read$2(buf, options) {
  	return (pem.read(buf, options, 'pkcs1'));
  }

  function write$2(key$$1, options) {
  	return (pem.write(key$$1, options, 'pkcs1'));
  }

  /* Helper to read in a single mpint */
  function readMPInt$1(der, nm) {
  	assert_1.strictEqual(der.peek(), lib$6.Ber.Integer,
  	    nm + ' is not an Integer');
  	return (utils$1.mpNormalize(der.readString(lib$6.Ber.Integer, true)));
  }

  function readPkcs1(alg, type, der) {
  	switch (alg) {
  	case 'RSA':
  		if (type === 'public')
  			{ return (readPkcs1RSAPublic(der)); }
  		else if (type === 'private')
  			{ return (readPkcs1RSAPrivate(der)); }
  		throw (new Error('Unknown key type: ' + type));
  	case 'DSA':
  		if (type === 'public')
  			{ return (readPkcs1DSAPublic(der)); }
  		else if (type === 'private')
  			{ return (readPkcs1DSAPrivate(der)); }
  		throw (new Error('Unknown key type: ' + type));
  	case 'EC':
  	case 'ECDSA':
  		if (type === 'private')
  			{ return (readPkcs1ECDSAPrivate(der)); }
  		else if (type === 'public')
  			{ return (readPkcs1ECDSAPublic(der)); }
  		throw (new Error('Unknown key type: ' + type));
  	default:
  		throw (new Error('Unknown key algo: ' + alg));
  	}
  }

  function readPkcs1RSAPublic(der) {
  	// modulus and exponent
  	var n = readMPInt$1(der, 'modulus');
  	var e = readMPInt$1(der, 'exponent');

  	// now, make the key
  	var key$$1 = {
  		type: 'rsa',
  		parts: [
  			{ name: 'e', data: e },
  			{ name: 'n', data: n }
  		]
  	};

  	return (new key(key$$1));
  }

  function readPkcs1RSAPrivate(der) {
  	var version = readMPInt$1(der, 'version');
  	assert_1.strictEqual(version[0], 0);

  	// modulus then public exponent
  	var n = readMPInt$1(der, 'modulus');
  	var e = readMPInt$1(der, 'public exponent');
  	var d = readMPInt$1(der, 'private exponent');
  	var p = readMPInt$1(der, 'prime1');
  	var q = readMPInt$1(der, 'prime2');
  	var dmodp = readMPInt$1(der, 'exponent1');
  	var dmodq = readMPInt$1(der, 'exponent2');
  	var iqmp = readMPInt$1(der, 'iqmp');

  	// now, make the key
  	var key$$1 = {
  		type: 'rsa',
  		parts: [
  			{ name: 'n', data: n },
  			{ name: 'e', data: e },
  			{ name: 'd', data: d },
  			{ name: 'iqmp', data: iqmp },
  			{ name: 'p', data: p },
  			{ name: 'q', data: q },
  			{ name: 'dmodp', data: dmodp },
  			{ name: 'dmodq', data: dmodq }
  		]
  	};

  	return (new privateKey(key$$1));
  }

  function readPkcs1DSAPrivate(der) {
  	var version = readMPInt$1(der, 'version');
  	assert_1.strictEqual(version.readUInt8(0), 0);

  	var p = readMPInt$1(der, 'p');
  	var q = readMPInt$1(der, 'q');
  	var g = readMPInt$1(der, 'g');
  	var y = readMPInt$1(der, 'y');
  	var x = readMPInt$1(der, 'x');

  	// now, make the key
  	var key$$1 = {
  		type: 'dsa',
  		parts: [
  			{ name: 'p', data: p },
  			{ name: 'q', data: q },
  			{ name: 'g', data: g },
  			{ name: 'y', data: y },
  			{ name: 'x', data: x }
  		]
  	};

  	return (new privateKey(key$$1));
  }

  function readPkcs1DSAPublic(der) {
  	var y = readMPInt$1(der, 'y');
  	var p = readMPInt$1(der, 'p');
  	var q = readMPInt$1(der, 'q');
  	var g = readMPInt$1(der, 'g');

  	var key$$1 = {
  		type: 'dsa',
  		parts: [
  			{ name: 'y', data: y },
  			{ name: 'p', data: p },
  			{ name: 'q', data: q },
  			{ name: 'g', data: g }
  		]
  	};

  	return (new key(key$$1));
  }

  function readPkcs1ECDSAPublic(der) {
  	der.readSequence();

  	var oid = der.readOID();
  	assert_1.strictEqual(oid, '1.2.840.10045.2.1', 'must be ecPublicKey');

  	var curveOid = der.readOID();

  	var curve;
  	var curves = Object.keys(algs.curves);
  	for (var j = 0; j < curves.length; ++j) {
  		var c = curves[j];
  		var cd = algs.curves[c];
  		if (cd.pkcs8oid === curveOid) {
  			curve = c;
  			break;
  		}
  	}
  	assert_1.string(curve, 'a known ECDSA named curve');

  	var Q = der.readString(lib$6.Ber.BitString, true);
  	Q = utils$1.ecNormalize(Q);

  	var key$$1 = {
  		type: 'ecdsa',
  		parts: [
  			{ name: 'curve', data: new Buffer(curve) },
  			{ name: 'Q', data: Q }
  		]
  	};

  	return (new key(key$$1));
  }

  function readPkcs1ECDSAPrivate(der) {
  	var version = readMPInt$1(der, 'version');
  	assert_1.strictEqual(version.readUInt8(0), 1);

  	// private key
  	var d = der.readString(lib$6.Ber.OctetString, true);

  	der.readSequence(0xa0);
  	var curve = readECDSACurve$1(der);
  	assert_1.string(curve, 'a known elliptic curve');

  	der.readSequence(0xa1);
  	var Q = der.readString(lib$6.Ber.BitString, true);
  	Q = utils$1.ecNormalize(Q);

  	var key$$1 = {
  		type: 'ecdsa',
  		parts: [
  			{ name: 'curve', data: new Buffer(curve) },
  			{ name: 'Q', data: Q },
  			{ name: 'd', data: d }
  		]
  	};

  	return (new privateKey(key$$1));
  }

  function writePkcs1(der, key$$1) {
  	der.startSequence();

  	switch (key$$1.type) {
  	case 'rsa':
  		if (privateKey.isPrivateKey(key$$1))
  			{ writePkcs1RSAPrivate(der, key$$1); }
  		else
  			{ writePkcs1RSAPublic(der, key$$1); }
  		break;
  	case 'dsa':
  		if (privateKey.isPrivateKey(key$$1))
  			{ writePkcs1DSAPrivate(der, key$$1); }
  		else
  			{ writePkcs1DSAPublic(der, key$$1); }
  		break;
  	case 'ecdsa':
  		if (privateKey.isPrivateKey(key$$1))
  			{ writePkcs1ECDSAPrivate(der, key$$1); }
  		else
  			{ writePkcs1ECDSAPublic(der, key$$1); }
  		break;
  	default:
  		throw (new Error('Unknown key algo: ' + key$$1.type));
  	}

  	der.endSequence();
  }

  function writePkcs1RSAPublic(der, key$$1) {
  	der.writeBuffer(key$$1.part.n.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.e.data, lib$6.Ber.Integer);
  }

  function writePkcs1RSAPrivate(der, key$$1) {
  	var ver = new Buffer(1);
  	ver[0] = 0;
  	der.writeBuffer(ver, lib$6.Ber.Integer);

  	der.writeBuffer(key$$1.part.n.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.e.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.d.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.p.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.q.data, lib$6.Ber.Integer);
  	if (!key$$1.part.dmodp || !key$$1.part.dmodq)
  		{ utils$1.addRSAMissing(key$$1); }
  	der.writeBuffer(key$$1.part.dmodp.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.dmodq.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.iqmp.data, lib$6.Ber.Integer);
  }

  function writePkcs1DSAPrivate(der, key$$1) {
  	var ver = new Buffer(1);
  	ver[0] = 0;
  	der.writeBuffer(ver, lib$6.Ber.Integer);

  	der.writeBuffer(key$$1.part.p.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.q.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.g.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.y.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.x.data, lib$6.Ber.Integer);
  }

  function writePkcs1DSAPublic(der, key$$1) {
  	der.writeBuffer(key$$1.part.y.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.p.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.q.data, lib$6.Ber.Integer);
  	der.writeBuffer(key$$1.part.g.data, lib$6.Ber.Integer);
  }

  function writePkcs1ECDSAPublic(der, key$$1) {
  	der.startSequence();

  	der.writeOID('1.2.840.10045.2.1'); /* ecPublicKey */
  	var curve = key$$1.part.curve.data.toString();
  	var curveOid = algs.curves[curve].pkcs8oid;
  	assert_1.string(curveOid, 'a known ECDSA named curve');
  	der.writeOID(curveOid);

  	der.endSequence();

  	var Q = utils$1.ecNormalize(key$$1.part.Q.data, true);
  	der.writeBuffer(Q, lib$6.Ber.BitString);
  }

  function writePkcs1ECDSAPrivate(der, key$$1) {
  	var ver = new Buffer(1);
  	ver[0] = 1;
  	der.writeBuffer(ver, lib$6.Ber.Integer);

  	der.writeBuffer(key$$1.part.d.data, lib$6.Ber.OctetString);

  	der.startSequence(0xa0);
  	var curve = key$$1.part.curve.data.toString();
  	var curveOid = algs.curves[curve].pkcs8oid;
  	assert_1.string(curveOid, 'a known ECDSA named curve');
  	der.writeOID(curveOid);
  	der.endSequence();

  	der.startSequence(0xa1);
  	var Q = utils$1.ecNormalize(key$$1.part.Q.data, true);
  	der.writeBuffer(Q, lib$6.Ber.BitString);
  	der.endSequence();
  }

  // Copyright 2015 Joyent, Inc.

  var sshBuffer = SSHBuffer;



  function SSHBuffer(opts) {
  	assert_1.object(opts, 'options');
  	if (opts.buffer !== undefined)
  		{ assert_1.buffer(opts.buffer, 'options.buffer'); }

  	this._size = opts.buffer ? opts.buffer.length : 1024;
  	this._buffer = opts.buffer || (new Buffer(this._size));
  	this._offset = 0;
  }

  SSHBuffer.prototype.toBuffer = function () {
  	return (this._buffer.slice(0, this._offset));
  };

  SSHBuffer.prototype.atEnd = function () {
  	return (this._offset >= this._buffer.length);
  };

  SSHBuffer.prototype.remainder = function () {
  	return (this._buffer.slice(this._offset));
  };

  SSHBuffer.prototype.skip = function (n) {
  	this._offset += n;
  };

  SSHBuffer.prototype.expand = function () {
  	this._size *= 2;
  	var buf = new Buffer(this._size);
  	this._buffer.copy(buf, 0);
  	this._buffer = buf;
  };

  SSHBuffer.prototype.readPart = function () {
  	return ({data: this.readBuffer()});
  };

  SSHBuffer.prototype.readBuffer = function () {
  	var len = this._buffer.readUInt32BE(this._offset);
  	this._offset += 4;
  	assert_1.ok(this._offset + len <= this._buffer.length,
  	    'length out of bounds at +0x' + this._offset.toString(16) +
  	    ' (data truncated?)');
  	var buf = this._buffer.slice(this._offset, this._offset + len);
  	this._offset += len;
  	return (buf);
  };

  SSHBuffer.prototype.readString = function () {
  	return (this.readBuffer().toString());
  };

  SSHBuffer.prototype.readCString = function () {
  	var offset = this._offset;
  	while (offset < this._buffer.length &&
  	    this._buffer[offset] !== 0x00)
  		{ offset++; }
  	assert_1.ok(offset < this._buffer.length, 'c string does not terminate');
  	var str = this._buffer.slice(this._offset, offset).toString();
  	this._offset = offset + 1;
  	return (str);
  };

  SSHBuffer.prototype.readInt = function () {
  	var v = this._buffer.readUInt32BE(this._offset);
  	this._offset += 4;
  	return (v);
  };

  SSHBuffer.prototype.readInt64 = function () {
  	assert_1.ok(this._offset + 8 < this._buffer.length,
  	    'buffer not long enough to read Int64');
  	var v = this._buffer.slice(this._offset, this._offset + 8);
  	this._offset += 8;
  	return (v);
  };

  SSHBuffer.prototype.readChar = function () {
  	var v = this._buffer[this._offset++];
  	return (v);
  };

  SSHBuffer.prototype.writeBuffer = function (buf) {
  	var this$1 = this;

  	while (this._offset + 4 + buf.length > this._size)
  		{ this$1.expand(); }
  	this._buffer.writeUInt32BE(buf.length, this._offset);
  	this._offset += 4;
  	buf.copy(this._buffer, this._offset);
  	this._offset += buf.length;
  };

  SSHBuffer.prototype.writeString = function (str) {
  	this.writeBuffer(new Buffer(str, 'utf8'));
  };

  SSHBuffer.prototype.writeCString = function (str) {
  	var this$1 = this;

  	while (this._offset + 1 + str.length > this._size)
  		{ this$1.expand(); }
  	this._buffer.write(str, this._offset);
  	this._offset += str.length;
  	this._buffer[this._offset++] = 0;
  };

  SSHBuffer.prototype.writeInt = function (v) {
  	var this$1 = this;

  	while (this._offset + 4 > this._size)
  		{ this$1.expand(); }
  	this._buffer.writeUInt32BE(v, this._offset);
  	this._offset += 4;
  };

  SSHBuffer.prototype.writeInt64 = function (v) {
  	var this$1 = this;

  	assert_1.buffer(v, 'value');
  	if (v.length > 8) {
  		var lead = v.slice(0, v.length - 8);
  		for (var i = 0; i < lead.length; ++i) {
  			assert_1.strictEqual(lead[i], 0,
  			    'must fit in 64 bits of precision');
  		}
  		v = v.slice(v.length - 8, v.length);
  	}
  	while (this._offset + 8 > this._size)
  		{ this$1.expand(); }
  	v.copy(this._buffer, this._offset);
  	this._offset += 8;
  };

  SSHBuffer.prototype.writeChar = function (v) {
  	var this$1 = this;

  	while (this._offset + 1 > this._size)
  		{ this$1.expand(); }
  	this._buffer[this._offset++] = v;
  };

  SSHBuffer.prototype.writePart = function (p) {
  	this.writeBuffer(p.data);
  };

  SSHBuffer.prototype.write = function (buf) {
  	var this$1 = this;

  	while (this._offset + buf.length > this._size)
  		{ this$1.expand(); }
  	buf.copy(this._buffer, this._offset);
  	this._offset += buf.length;
  };

  // Copyright 2015 Joyent, Inc.

  var rfc4253 = {
  	read: read$3.bind(undefined, false, undefined),
  	readType: read$3.bind(undefined, false),
  	write: write$3,
  	/* semi-private api, used by sshpk-agent */
  	readPartial: read$3.bind(undefined, true),

  	/* shared with ssh format */
  	readInternal: read$3,
  	keyTypeToAlg: keyTypeToAlg,
  	algToKeyType: algToKeyType
  };








  function algToKeyType(alg) {
  	assert_1.string(alg);
  	if (alg === 'ssh-dss')
  		{ return ('dsa'); }
  	else if (alg === 'ssh-rsa')
  		{ return ('rsa'); }
  	else if (alg === 'ssh-ed25519')
  		{ return ('ed25519'); }
  	else if (alg === 'ssh-curve25519')
  		{ return ('curve25519'); }
  	else if (alg.match(/^ecdsa-sha2-/))
  		{ return ('ecdsa'); }
  	else
  		{ throw (new Error('Unknown algorithm ' + alg)); }
  }

  function keyTypeToAlg(key$$1) {
  	assert_1.object(key$$1);
  	if (key$$1.type === 'dsa')
  		{ return ('ssh-dss'); }
  	else if (key$$1.type === 'rsa')
  		{ return ('ssh-rsa'); }
  	else if (key$$1.type === 'ed25519')
  		{ return ('ssh-ed25519'); }
  	else if (key$$1.type === 'curve25519')
  		{ return ('ssh-curve25519'); }
  	else if (key$$1.type === 'ecdsa')
  		{ return ('ecdsa-sha2-' + key$$1.part.curve.data.toString()); }
  	else
  		{ throw (new Error('Unknown key type ' + key$$1.type)); }
  }

  function read$3(partial, type, buf, options) {
  	if (typeof (buf) === 'string')
  		{ buf = new Buffer(buf); }
  	assert_1.buffer(buf, 'buf');

  	var key$$1 = {};

  	var parts = key$$1.parts = [];
  	var sshbuf = new sshBuffer({buffer: buf});

  	var alg = sshbuf.readString();
  	assert_1.ok(!sshbuf.atEnd(), 'key must have at least one part');

  	key$$1.type = algToKeyType(alg);

  	var partCount = algs.info[key$$1.type].parts.length;
  	if (type && type === 'private')
  		{ partCount = algs.privInfo[key$$1.type].parts.length; }

  	while (!sshbuf.atEnd() && parts.length < partCount)
  		{ parts.push(sshbuf.readPart()); }
  	while (!partial && !sshbuf.atEnd())
  		{ parts.push(sshbuf.readPart()); }

  	assert_1.ok(parts.length >= 1,
  	    'key must have at least one part');
  	assert_1.ok(partial || sshbuf.atEnd(),
  	    'leftover bytes at end of key');

  	var Constructor = key;
  	var algInfo = algs.info[key$$1.type];
  	if (type === 'private' || algInfo.parts.length !== parts.length) {
  		algInfo = algs.privInfo[key$$1.type];
  		Constructor = privateKey;
  	}
  	assert_1.strictEqual(algInfo.parts.length, parts.length);

  	if (key$$1.type === 'ecdsa') {
  		var res = /^ecdsa-sha2-(.+)$/.exec(alg);
  		assert_1.ok(res !== null);
  		assert_1.strictEqual(res[1], parts[0].data.toString());
  	}

  	var normalized = true;
  	for (var i = 0; i < algInfo.parts.length; ++i) {
  		parts[i].name = algInfo.parts[i];
  		if (parts[i].name !== 'curve' &&
  		    algInfo.normalize !== false) {
  			var p = parts[i];
  			var nd = utils$1.mpNormalize(p.data);
  			if (nd !== p.data) {
  				p.data = nd;
  				normalized = false;
  			}
  		}
  	}

  	if (normalized)
  		{ key$$1._rfc4253Cache = sshbuf.toBuffer(); }

  	if (partial && typeof (partial) === 'object') {
  		partial.remainder = sshbuf.remainder();
  		partial.consumed = sshbuf._offset;
  	}

  	return (new Constructor(key$$1));
  }

  function write$3(key$$1, options) {
  	assert_1.object(key$$1);

  	var alg = keyTypeToAlg(key$$1);
  	var i;

  	var algInfo = algs.info[key$$1.type];
  	if (privateKey.isPrivateKey(key$$1))
  		{ algInfo = algs.privInfo[key$$1.type]; }
  	var parts = algInfo.parts;

  	var buf = new sshBuffer({});

  	buf.writeString(alg);

  	for (i = 0; i < parts.length; ++i) {
  		var data = key$$1.part[parts[i]].data;
  		if (algInfo.normalize !== false)
  			{ data = utils$1.mpNormalize(data); }
  		buf.writeBuffer(data);
  	}

  	return (buf.toBuffer());
  }

  var crypto_hash_sha512 = naclFast.lowlevel.crypto_hash;

  /*
   * This file is a 1:1 port from the OpenBSD blowfish.c and bcrypt_pbkdf.c. As a
   * result, it retains the original copyright and license. The two files are
   * under slightly different (but compatible) licenses, and are here combined in
   * one file.
   *
   * Credit for the actual porting work goes to:
   *  Devi Mandiri <me@devi.web.id>
   */

  /*
   * The Blowfish portions are under the following license:
   *
   * Blowfish block cipher for OpenBSD
   * Copyright 1997 Niels Provos <provos@physnet.uni-hamburg.de>
   * All rights reserved.
   *
   * Implementation advice by David Mazieres <dm@lcs.mit.edu>.
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions
   * are met:
   * 1. Redistributions of source code must retain the above copyright
   *    notice, this list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright
   *    notice, this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. The name of the author may not be used to endorse or promote products
   *    derived from this software without specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
   * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
   * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
   * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
   * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   */

  /*
   * The bcrypt_pbkdf portions are under the following license:
   *
   * Copyright (c) 2013 Ted Unangst <tedu@openbsd.org>
   *
   * Permission to use, copy, modify, and distribute this software for any
   * purpose with or without fee is hereby granted, provided that the above
   * copyright notice and this permission notice appear in all copies.
   *
   * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   */

  /*
   * Performance improvements (Javascript-specific):
   *
   * Copyright 2016, Joyent Inc
   * Author: Alex Wilson <alex.wilson@joyent.com>
   *
   * Permission to use, copy, modify, and distribute this software for any
   * purpose with or without fee is hereby granted, provided that the above
   * copyright notice and this permission notice appear in all copies.
   *
   * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   */

  // Ported from OpenBSD bcrypt_pbkdf.c v1.9

  var BLF_J = 0;

  var Blowfish = function() {
    this.S = [
      new Uint32Array([
        0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7,
        0xb8e1afed, 0x6a267e96, 0xba7c9045, 0xf12c7f99,
        0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16,
        0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e,
        0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee,
        0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013,
        0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef,
        0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e,
        0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60,
        0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440,
        0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce,
        0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a,
        0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e,
        0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677,
        0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,
        0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032,
        0xef845d5d, 0xe98575b1, 0xdc262302, 0xeb651b88,
        0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239,
        0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e,
        0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0,
        0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3,
        0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98,
        0xa1f1651d, 0x39af0176, 0x66ca593e, 0x82430e88,
        0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe,
        0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6,
        0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d,
        0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b,
        0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7,
        0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04c006ba,
        0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,
        0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f,
        0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09,
        0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3,
        0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb,
        0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279,
        0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8,
        0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab,
        0x323db5fa, 0xfd238760, 0x53317b48, 0x3e00df82,
        0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db,
        0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573,
        0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0,
        0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b,
        0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790,
        0xe1ddf2da, 0xa4cb7e33, 0x62fb1341, 0xcee4c6e8,
        0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,
        0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0,
        0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7,
        0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c,
        0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad,
        0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1,
        0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299,
        0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9,
        0x165fa266, 0x80957705, 0x93cc7314, 0x211a1477,
        0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf,
        0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49,
        0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af,
        0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa,
        0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5,
        0x83260376, 0x6295cfa9, 0x11c81968, 0x4e734a41,
        0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,
        0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400,
        0x08ba6fb5, 0x571be91f, 0xf296ec6b, 0x2a0dd915,
        0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664,
        0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a]),
      new Uint32Array([
        0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623,
        0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266,
        0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1,
        0x193602a5, 0x75094c29, 0xa0591340, 0xe4183a3e,
        0x3f54989a, 0x5b429d65, 0x6b8fe4d6, 0x99f73fd6,
        0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,
        0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e,
        0x09686b3f, 0x3ebaefc9, 0x3c971814, 0x6b6a70a1,
        0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737,
        0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8,
        0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff,
        0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd,
        0xd19113f9, 0x7ca92ff6, 0x94324773, 0x22f54701,
        0x3ae5e581, 0x37c2dadc, 0xc8b57634, 0x9af3dda7,
        0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41,
        0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331,
        0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf,
        0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af,
        0xde9a771f, 0xd9930810, 0xb38bae12, 0xdccf3f2e,
        0x5512721f, 0x2e6b7124, 0x501adde6, 0x9f84cd87,
        0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c,
        0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2,
        0xef1c1847, 0x3215d908, 0xdd433b37, 0x24c2ba16,
        0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd,
        0x71dff89e, 0x10314e55, 0x81ac77d6, 0x5f11199b,
        0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,
        0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e,
        0x86e34570, 0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3,
        0x771fe71c, 0x4e3d06fa, 0x2965dcb9, 0x99e71d0f,
        0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a,
        0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4,
        0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960,
        0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66,
        0xe3bc4595, 0xa67bc883, 0xb17f37d1, 0x018cff28,
        0xc332ddef, 0xbe6c5aa5, 0x65582185, 0x68ab9802,
        0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,
        0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510,
        0x13cca830, 0xeb61bd96, 0x0334fe1e, 0xaa0363cf,
        0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14,
        0xeecc86bc, 0x60622ca7, 0x9cab5cab, 0xb2f3846e,
        0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50,
        0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7,
        0x9b540b19, 0x875fa099, 0x95f7997e, 0x623d7da8,
        0xf837889a, 0x97e32d77, 0x11ed935f, 0x16681281,
        0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99,
        0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696,
        0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128,
        0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73,
        0x5d4a14d9, 0xe864b7e3, 0x42105d14, 0x203e13e0,
        0x45eee2b6, 0xa3aaabea, 0xdb6c4f15, 0xfacb4fd0,
        0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105,
        0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250,
        0xcf62a1f2, 0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3,
        0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285,
        0x095bbf00, 0xad19489d, 0x1462b174, 0x23820e00,
        0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,
        0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb,
        0x7cde3759, 0xcbee7460, 0x4085f2a7, 0xce77326e,
        0xa6078084, 0x19f8509e, 0xe8efd855, 0x61d99735,
        0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc,
        0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9,
        0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340,
        0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20,
        0x153e21e7, 0x8fb03d4a, 0xe6e39f2b, 0xdb83adf7]),
      new Uint32Array([
        0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934,
        0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068,
        0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af,
        0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840,
        0x4d95fc1d, 0x96b591af, 0x70f4ddd3, 0x66a02f45,
        0xbfbc09ec, 0x03bd9785, 0x7fac6dd0, 0x31cb8504,
        0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a,
        0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb,
        0x68dc1462, 0xd7486900, 0x680ec0a4, 0x27a18dee,
        0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6,
        0xaace1e7c, 0xd3375fec, 0xce78a399, 0x406b2a42,
        0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b,
        0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2,
        0x3a6efa74, 0xdd5b4332, 0x6841e7f7, 0xca7820fb,
        0xfb0af54e, 0xd8feb397, 0x454056ac, 0xba489527,
        0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b,
        0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33,
        0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c,
        0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3,
        0x95c11548, 0xe4c66d22, 0x48c1133f, 0xc70f86dc,
        0x07f9c9ee, 0x41041f0f, 0x404779a4, 0x5d886e17,
        0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564,
        0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b,
        0x0e12b4c2, 0x02e1329e, 0xaf664fd1, 0xcad18115,
        0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922,
        0x85b2a20e, 0xe6ba0d99, 0xde720c8c, 0x2da2f728,
        0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0,
        0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e,
        0x0a476341, 0x992eff74, 0x3a6f6eab, 0xf4f8fd37,
        0xa812dc60, 0xa1ebddf8, 0x991be14c, 0xdb6e6b0d,
        0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804,
        0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b,
        0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3,
        0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb,
        0x37392eb3, 0xcc115979, 0x8026e297, 0xf42e312d,
        0x6842ada7, 0xc66a2b3b, 0x12754ccc, 0x782ef11c,
        0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350,
        0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9,
        0x44421659, 0x0a121386, 0xd90cec6e, 0xd5abea2a,
        0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe,
        0x9dbc8057, 0xf0f7c086, 0x60787bf8, 0x6003604d,
        0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc,
        0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f,
        0x77a057be, 0xbde8ae24, 0x55464299, 0xbf582e61,
        0x4e58f48f, 0xf2ddfda2, 0xf474ef38, 0x8789bdc2,
        0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9,
        0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2,
        0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c,
        0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e,
        0xb77f19b6, 0xe0a9dc09, 0x662d09a1, 0xc4324633,
        0xe85a1f02, 0x09f0be8c, 0x4a99a025, 0x1d6efe10,
        0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169,
        0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52,
        0x50115e01, 0xa70683fa, 0xa002b5c4, 0x0de6d027,
        0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5,
        0xf0177a28, 0xc0f586e0, 0x006058aa, 0x30dc7d62,
        0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634,
        0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76,
        0x6f05e409, 0x4b7c0188, 0x39720a3d, 0x7c927c24,
        0x86e3725f, 0x724d9db9, 0x1ac15bb4, 0xd39eb8fc,
        0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4,
        0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c,
        0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837,
        0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0]),
      new Uint32Array([
        0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b,
        0x5cb0679e, 0x4fa33742, 0xd3822740, 0x99bc9bbe,
        0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,
        0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4,
        0x5748ab2f, 0xbc946e79, 0xc6a376d2, 0x6549c2c8,
        0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6,
        0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304,
        0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22,
        0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4,
        0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6,
        0x2826a2f9, 0xa73a3ae1, 0x4ba99586, 0xef5562e9,
        0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59,
        0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593,
        0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51,
        0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28,
        0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c,
        0xe029ac71, 0xe019a5e6, 0x47b0acfd, 0xed93fa9b,
        0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,
        0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c,
        0x15056dd4, 0x88f46dba, 0x03a16125, 0x0564f0bd,
        0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a,
        0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319,
        0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb,
        0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f,
        0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991,
        0xea7a90c2, 0xfb3e7bce, 0x5121ce64, 0x774fbe32,
        0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680,
        0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166,
        0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae,
        0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb,
        0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5,
        0x72eacea8, 0xfa6484bb, 0x8d6612ae, 0xbf3c6f47,
        0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,
        0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d,
        0x4040cb08, 0x4eb4e2cc, 0x34d2466a, 0x0115af84,
        0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048,
        0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8,
        0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd,
        0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9,
        0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7,
        0x1a908749, 0xd44fbd9a, 0xd0dadecb, 0xd50ada38,
        0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f,
        0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c,
        0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525,
        0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1,
        0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442,
        0xe0ec6e0e, 0x1698db3b, 0x4c98a0be, 0x3278e964,
        0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,
        0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8,
        0xdf359f8d, 0x9b992f2e, 0xe60b6f47, 0x0fe3f11d,
        0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f,
        0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299,
        0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02,
        0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc,
        0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614,
        0xe6c6c7bd, 0x327a140a, 0x45e1d006, 0xc3f27b9a,
        0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6,
        0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b,
        0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0,
        0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060,
        0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e,
        0x1948c25c, 0x02fb8a8c, 0x01c36ae4, 0xd6ebe1f9,
        0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,
        0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6])
      ];
    this.P = new Uint32Array([
      0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344,
      0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89,
      0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,
      0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917,
      0x9216d5d9, 0x8979fb1b]);
  };

  function F(S, x8, i) {
    return (((S[0][x8[i+3]] +
              S[1][x8[i+2]]) ^
              S[2][x8[i+1]]) +
              S[3][x8[i]]);
  }
  Blowfish.prototype.encipher = function(x, x8) {
    var this$1 = this;

    if (x8 === undefined) {
      x8 = new Uint8Array(x.buffer);
      if (x.byteOffset !== 0)
        { x8 = x8.subarray(x.byteOffset); }
    }
    x[0] ^= this.P[0];
    for (var i = 1; i < 16; i += 2) {
      x[1] ^= F(this$1.S, x8, 0) ^ this$1.P[i];
      x[0] ^= F(this$1.S, x8, 4) ^ this$1.P[i+1];
    }
    var t = x[0];
    x[0] = x[1] ^ this.P[17];
    x[1] = t;
  };

  Blowfish.prototype.decipher = function(x) {
    var this$1 = this;

    var x8 = new Uint8Array(x.buffer);
    if (x.byteOffset !== 0)
      { x8 = x8.subarray(x.byteOffset); }
    x[0] ^= this.P[17];
    for (var i = 16; i > 0; i -= 2) {
      x[1] ^= F(this$1.S, x8, 0) ^ this$1.P[i];
      x[0] ^= F(this$1.S, x8, 4) ^ this$1.P[i-1];
    }
    var t = x[0];
    x[0] = x[1] ^ this.P[0];
    x[1] = t;
  };

  function stream2word(data, databytes){
    var i, temp = 0;
    for (i = 0; i < 4; i++, BLF_J++) {
      if (BLF_J >= databytes) { BLF_J = 0; }
      temp = (temp << 8) | data[BLF_J];
    }
    return temp;
  }
  Blowfish.prototype.expand0state = function(key, keybytes) {
    var this$1 = this;

    var d = new Uint32Array(2), i, k;
    var d8 = new Uint8Array(d.buffer);

    for (i = 0, BLF_J = 0; i < 18; i++) {
      this$1.P[i] ^= stream2word(key, keybytes);
    }
    BLF_J = 0;

    for (i = 0; i < 18; i += 2) {
      this$1.encipher(d, d8);
      this$1.P[i]   = d[0];
      this$1.P[i+1] = d[1];
    }

    for (i = 0; i < 4; i++) {
      for (k = 0; k < 256; k += 2) {
        this$1.encipher(d, d8);
        this$1.S[i][k]   = d[0];
        this$1.S[i][k+1] = d[1];
      }
    }
  };

  Blowfish.prototype.expandstate = function(data, databytes, key, keybytes) {
    var this$1 = this;

    var d = new Uint32Array(2), i, k;

    for (i = 0, BLF_J = 0; i < 18; i++) {
      this$1.P[i] ^= stream2word(key, keybytes);
    }

    for (i = 0, BLF_J = 0; i < 18; i += 2) {
      d[0] ^= stream2word(data, databytes);
      d[1] ^= stream2word(data, databytes);
      this$1.encipher(d);
      this$1.P[i]   = d[0];
      this$1.P[i+1] = d[1];
    }

    for (i = 0; i < 4; i++) {
      for (k = 0; k < 256; k += 2) {
        d[0] ^= stream2word(data, databytes);
        d[1] ^= stream2word(data, databytes);
        this$1.encipher(d);
        this$1.S[i][k]   = d[0];
        this$1.S[i][k+1] = d[1];
      }
    }
    BLF_J = 0;
  };

  Blowfish.prototype.enc = function(data, blocks) {
    var this$1 = this;

    for (var i = 0; i < blocks; i++) {
      this$1.encipher(data.subarray(i*2));
    }
  };

  Blowfish.prototype.dec = function(data, blocks) {
    var this$1 = this;

    for (var i = 0; i < blocks; i++) {
      this$1.decipher(data.subarray(i*2));
    }
  };

  var BCRYPT_BLOCKS = 8,
      BCRYPT_HASHSIZE = 32;

  function bcrypt_hash(sha2pass, sha2salt, out) {
    var state = new Blowfish(),
        cdata = new Uint32Array(BCRYPT_BLOCKS), i,
        ciphertext = new Uint8Array([79,120,121,99,104,114,111,109,97,116,105,
              99,66,108,111,119,102,105,115,104,83,119,97,116,68,121,110,97,109,
              105,116,101]); //"OxychromaticBlowfishSwatDynamite"

    state.expandstate(sha2salt, 64, sha2pass, 64);
    for (i = 0; i < 64; i++) {
      state.expand0state(sha2salt, 64);
      state.expand0state(sha2pass, 64);
    }

    for (i = 0; i < BCRYPT_BLOCKS; i++)
      { cdata[i] = stream2word(ciphertext, ciphertext.byteLength); }
    for (i = 0; i < 64; i++)
      { state.enc(cdata, cdata.byteLength / 8); }

    for (i = 0; i < BCRYPT_BLOCKS; i++) {
      out[4*i+3] = cdata[i] >>> 24;
      out[4*i+2] = cdata[i] >>> 16;
      out[4*i+1] = cdata[i] >>> 8;
      out[4*i+0] = cdata[i];
    }
  }
  function bcrypt_pbkdf(pass, passlen, salt, saltlen, key, keylen, rounds) {
    var sha2pass = new Uint8Array(64),
        sha2salt = new Uint8Array(64),
        out = new Uint8Array(BCRYPT_HASHSIZE),
        tmpout = new Uint8Array(BCRYPT_HASHSIZE),
        countsalt = new Uint8Array(saltlen+4),
        i, j, amt, stride, dest, count,
        origkeylen = keylen;

    if (rounds < 1)
      { return -1; }
    if (passlen === 0 || saltlen === 0 || keylen === 0 ||
        keylen > (out.byteLength * out.byteLength) || saltlen > (1<<20))
      { return -1; }

    stride = Math.floor((keylen + out.byteLength - 1) / out.byteLength);
    amt = Math.floor((keylen + stride - 1) / stride);

    for (i = 0; i < saltlen; i++)
      { countsalt[i] = salt[i]; }

    crypto_hash_sha512(sha2pass, pass, passlen);

    for (count = 1; keylen > 0; count++) {
      countsalt[saltlen+0] = count >>> 24;
      countsalt[saltlen+1] = count >>> 16;
      countsalt[saltlen+2] = count >>>  8;
      countsalt[saltlen+3] = count;

      crypto_hash_sha512(sha2salt, countsalt, saltlen + 4);
      bcrypt_hash(sha2pass, sha2salt, tmpout);
      for (i = out.byteLength; i--;)
        { out[i] = tmpout[i]; }

      for (i = 1; i < rounds; i++) {
        crypto_hash_sha512(sha2salt, tmpout, tmpout.byteLength);
        bcrypt_hash(sha2pass, sha2salt, tmpout);
        for (j = 0; j < out.byteLength; j++)
          { out[j] ^= tmpout[j]; }
      }

      amt = Math.min(amt, keylen);
      for (i = 0; i < amt; i++) {
        dest = i * stride + (count - 1);
        if (dest >= origkeylen)
          { break; }
        key[dest] = out[i];
      }
      keylen -= i;
    }

    return 0;
  }
  var bcryptPbkdf = {
        BLOCKS: BCRYPT_BLOCKS,
        HASHSIZE: BCRYPT_HASHSIZE,
        hash: bcrypt_hash,
        pbkdf: bcrypt_pbkdf
  };

  // Copyright 2015 Joyent, Inc.

  var sshPrivate = {
  	read: read$4,
  	readSSHPrivate: readSSHPrivate,
  	write: write$4
  };














  var bcrypt;

  function read$4(buf, options) {
  	return (pem.read(buf, options));
  }

  var MAGIC = 'openssh-key-v1';

  function readSSHPrivate(type, buf, options) {
  	buf = new sshBuffer({buffer: buf});

  	var magic = buf.readCString();
  	assert_1.strictEqual(magic, MAGIC, 'bad magic string');

  	var cipher = buf.readString();
  	var kdf = buf.readString();
  	var kdfOpts = buf.readBuffer();

  	var nkeys = buf.readInt();
  	if (nkeys !== 1) {
  		throw (new Error('OpenSSH-format key file contains ' +
  		    'multiple keys: this is unsupported.'));
  	}

  	var pubKey = buf.readBuffer();

  	if (type === 'public') {
  		assert_1.ok(buf.atEnd(), 'excess bytes left after key');
  		return (rfc4253.read(pubKey));
  	}

  	var privKeyBlob = buf.readBuffer();
  	assert_1.ok(buf.atEnd(), 'excess bytes left after key');

  	var kdfOptsBuf = new sshBuffer({ buffer: kdfOpts });
  	switch (kdf) {
  	case 'none':
  		if (cipher !== 'none') {
  			throw (new Error('OpenSSH-format key uses KDF "none" ' +
  			     'but specifies a cipher other than "none"'));
  		}
  		break;
  	case 'bcrypt':
  		var salt = kdfOptsBuf.readBuffer();
  		var rounds = kdfOptsBuf.readInt();
  		var cinf = utils$1.opensshCipherInfo(cipher);
  		if (bcrypt === undefined) {
  			bcrypt = bcryptPbkdf;
  		}

  		if (typeof (options.passphrase) === 'string') {
  			options.passphrase = new Buffer(options.passphrase,
  			    'utf-8');
  		}
  		if (!Buffer.isBuffer(options.passphrase)) {
  			throw (new errors$1.KeyEncryptedError(
  			    options.filename, 'OpenSSH'));
  		}

  		var pass = new Uint8Array(options.passphrase);
  		var salti = new Uint8Array(salt);
  		/* Use the pbkdf to derive both the key and the IV. */
  		var out = new Uint8Array(cinf.keySize + cinf.blockSize);
  		var res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,
  		    out, out.length, rounds);
  		if (res !== 0) {
  			throw (new Error('bcrypt_pbkdf function returned ' +
  			    'failure, parameters invalid'));
  		}
  		out = new Buffer(out);
  		var ckey = out.slice(0, cinf.keySize);
  		var iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);
  		var cipherStream = tls.createDecipheriv(cinf.opensslName,
  		    ckey, iv);
  		cipherStream.setAutoPadding(false);
  		var chunk, chunks = [];
  		cipherStream.once('error', function (e) {
  			if (e.toString().indexOf('bad decrypt') !== -1) {
  				throw (new Error('Incorrect passphrase ' +
  				    'supplied, could not decrypt key'));
  			}
  			throw (e);
  		});
  		cipherStream.write(privKeyBlob);
  		cipherStream.end();
  		while ((chunk = cipherStream.read()) !== null)
  			{ chunks.push(chunk); }
  		privKeyBlob = Buffer.concat(chunks);
  		break;
  	default:
  		throw (new Error(
  		    'OpenSSH-format key uses unknown KDF "' + kdf + '"'));
  	}

  	buf = new sshBuffer({buffer: privKeyBlob});

  	var checkInt1 = buf.readInt();
  	var checkInt2 = buf.readInt();
  	if (checkInt1 !== checkInt2) {
  		throw (new Error('Incorrect passphrase supplied, could not ' +
  		    'decrypt key'));
  	}

  	var ret = {};
  	var key$$1 = rfc4253.readInternal(ret, 'private', buf.remainder());

  	buf.skip(ret.consumed);

  	var comment = buf.readString();
  	key$$1.comment = comment;

  	return (key$$1);
  }

  function write$4(key$$1, options) {
  	var pubKey;
  	if (privateKey.isPrivateKey(key$$1))
  		{ pubKey = key$$1.toPublic(); }
  	else
  		{ pubKey = key$$1; }

  	var cipher = 'none';
  	var kdf = 'none';
  	var kdfopts = new Buffer(0);
  	var cinf = { blockSize: 8 };
  	var passphrase;
  	if (options !== undefined) {
  		passphrase = options.passphrase;
  		if (typeof (passphrase) === 'string')
  			{ passphrase = new Buffer(passphrase, 'utf-8'); }
  		if (passphrase !== undefined) {
  			assert_1.buffer(passphrase, 'options.passphrase');
  			assert_1.optionalString(options.cipher, 'options.cipher');
  			cipher = options.cipher;
  			if (cipher === undefined)
  				{ cipher = 'aes128-ctr'; }
  			cinf = utils$1.opensshCipherInfo(cipher);
  			kdf = 'bcrypt';
  		}
  	}

  	var privBuf;
  	if (privateKey.isPrivateKey(key$$1)) {
  		privBuf = new sshBuffer({});
  		var checkInt = tls.randomBytes(4).readUInt32BE(0);
  		privBuf.writeInt(checkInt);
  		privBuf.writeInt(checkInt);
  		privBuf.write(key$$1.toBuffer('rfc4253'));
  		privBuf.writeString(key$$1.comment || '');

  		var n = 1;
  		while (privBuf._offset % cinf.blockSize !== 0)
  			{ privBuf.writeChar(n++); }
  		privBuf = privBuf.toBuffer();
  	}

  	switch (kdf) {
  	case 'none':
  		break;
  	case 'bcrypt':
  		var salt = tls.randomBytes(16);
  		var rounds = 16;
  		var kdfssh = new sshBuffer({});
  		kdfssh.writeBuffer(salt);
  		kdfssh.writeInt(rounds);
  		kdfopts = kdfssh.toBuffer();

  		if (bcrypt === undefined) {
  			bcrypt = bcryptPbkdf;
  		}
  		var pass = new Uint8Array(passphrase);
  		var salti = new Uint8Array(salt);
  		/* Use the pbkdf to derive both the key and the IV. */
  		var out = new Uint8Array(cinf.keySize + cinf.blockSize);
  		var res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,
  		    out, out.length, rounds);
  		if (res !== 0) {
  			throw (new Error('bcrypt_pbkdf function returned ' +
  			    'failure, parameters invalid'));
  		}
  		out = new Buffer(out);
  		var ckey = out.slice(0, cinf.keySize);
  		var iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);

  		var cipherStream = tls.createCipheriv(cinf.opensslName,
  		    ckey, iv);
  		cipherStream.setAutoPadding(false);
  		var chunk, chunks = [];
  		cipherStream.once('error', function (e) {
  			throw (e);
  		});
  		cipherStream.write(privBuf);
  		cipherStream.end();
  		while ((chunk = cipherStream.read()) !== null)
  			{ chunks.push(chunk); }
  		privBuf = Buffer.concat(chunks);
  		break;
  	default:
  		throw (new Error('Unsupported kdf ' + kdf));
  	}

  	var buf = new sshBuffer({});

  	buf.writeCString(MAGIC);
  	buf.writeString(cipher);	/* cipher */
  	buf.writeString(kdf);		/* kdf */
  	buf.writeBuffer(kdfopts);	/* kdfoptions */

  	buf.writeInt(1);		/* nkeys */
  	buf.writeBuffer(pubKey.toBuffer('rfc4253'));

  	if (privBuf)
  		{ buf.writeBuffer(privBuf); }

  	buf = buf.toBuffer();

  	var header;
  	if (privateKey.isPrivateKey(key$$1))
  		{ header = 'OPENSSH PRIVATE KEY'; }
  	else
  		{ header = 'OPENSSH PUBLIC KEY'; }

  	var tmp = buf.toString('base64');
  	var len = tmp.length + (tmp.length / 70) +
  	    18 + 16 + header.length*2 + 10;
  	buf = new Buffer(len);
  	var o = 0;
  	o += buf.write('-----BEGIN ' + header + '-----\n', o);
  	for (var i = 0; i < tmp.length; ) {
  		var limit = i + 70;
  		if (limit > tmp.length)
  			{ limit = tmp.length; }
  		o += buf.write(tmp.slice(i, limit), o);
  		buf[o++] = 10;
  		i = limit;
  	}
  	o += buf.write('-----END ' + header + '-----\n', o);

  	return (buf.slice(0, o));
  }

  // Copyright 2015 Joyent, Inc.

  var pem = {
  	read: read$5,
  	write: write$5
  };
















  /*
   * For reading we support both PKCS#1 and PKCS#8. If we find a private key,
   * we just take the public component of it and use that.
   */
  function read$5(buf, options, forceType) {
  	var input = buf;
  	if (typeof (buf) !== 'string') {
  		assert_1.buffer(buf, 'buf');
  		buf = buf.toString('ascii');
  	}

  	var lines = buf.trim().split('\n');

  	var m = lines[0].match(/*JSSTYLED*/
  	    /[-]+[ ]*BEGIN ([A-Z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);
  	assert_1.ok(m, 'invalid PEM header');

  	var m2 = lines[lines.length - 1].match(/*JSSTYLED*/
  	    /[-]+[ ]*END ([A-Z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);
  	assert_1.ok(m2, 'invalid PEM footer');

  	/* Begin and end banners must match key type */
  	assert_1.equal(m[2], m2[2]);
  	var type = m[2].toLowerCase();

  	var alg;
  	if (m[1]) {
  		/* They also must match algorithms, if given */
  		assert_1.equal(m[1], m2[1], 'PEM header and footer mismatch');
  		alg = m[1].trim();
  	}

  	var headers = {};
  	while (true) {
  		lines = lines.slice(1);
  		m = lines[0].match(/*JSSTYLED*/
  		    /^([A-Za-z0-9-]+): (.+)$/);
  		if (!m)
  			{ break; }
  		headers[m[1].toLowerCase()] = m[2];
  	}

  	var cipher, key$$1, iv;
  	if (headers['proc-type']) {
  		var parts = headers['proc-type'].split(',');
  		if (parts[0] === '4' && parts[1] === 'ENCRYPTED') {
  			if (typeof (options.passphrase) === 'string') {
  				options.passphrase = new Buffer(
  				    options.passphrase, 'utf-8');
  			}
  			if (!Buffer.isBuffer(options.passphrase)) {
  				throw (new errors$1.KeyEncryptedError(
  				    options.filename, 'PEM'));
  			} else {
  				parts = headers['dek-info'].split(',');
  				assert_1.ok(parts.length === 2);
  				cipher = parts[0].toLowerCase();
  				iv = new Buffer(parts[1], 'hex');
  				key$$1 = utils$1.opensslKeyDeriv(cipher, iv,
  				    options.passphrase, 1).key;
  			}
  		}
  	}

  	/* Chop off the first and last lines */
  	lines = lines.slice(0, -1).join('');
  	buf = new Buffer(lines, 'base64');

  	if (cipher && key$$1 && iv) {
  		var cipherStream = tls.createDecipheriv(cipher, key$$1, iv);
  		var chunk, chunks = [];
  		cipherStream.once('error', function (e) {
  			if (e.toString().indexOf('bad decrypt') !== -1) {
  				throw (new Error('Incorrect passphrase ' +
  				    'supplied, could not decrypt key'));
  			}
  			throw (e);
  		});
  		cipherStream.write(buf);
  		cipherStream.end();
  		while ((chunk = cipherStream.read()) !== null)
  			{ chunks.push(chunk); }
  		buf = Buffer.concat(chunks);
  	}

  	/* The new OpenSSH internal format abuses PEM headers */
  	if (alg && alg.toLowerCase() === 'openssh')
  		{ return (sshPrivate.readSSHPrivate(type, buf, options)); }
  	if (alg && alg.toLowerCase() === 'ssh2')
  		{ return (rfc4253.readType(type, buf, options)); }

  	var der = new lib$6.BerReader(buf);
  	der.originalInput = input;

  	/*
  	 * All of the PEM file types start with a sequence tag, so chop it
  	 * off here
  	 */
  	der.readSequence();

  	/* PKCS#1 type keys name an algorithm in the banner explicitly */
  	if (alg) {
  		if (forceType)
  			{ assert_1.strictEqual(forceType, 'pkcs1'); }
  		return (pkcs1.readPkcs1(alg, type, der));
  	} else {
  		if (forceType)
  			{ assert_1.strictEqual(forceType, 'pkcs8'); }
  		return (pkcs8.readPkcs8(alg, type, der));
  	}
  }

  function write$5(key$$1, options, type) {
  	assert_1.object(key$$1);

  	var alg = {'ecdsa': 'EC', 'rsa': 'RSA', 'dsa': 'DSA'}[key$$1.type];
  	var header;

  	var der = new lib$6.BerWriter();

  	if (privateKey.isPrivateKey(key$$1)) {
  		if (type && type === 'pkcs8') {
  			header = 'PRIVATE KEY';
  			pkcs8.writePkcs8(der, key$$1);
  		} else {
  			if (type)
  				{ assert_1.strictEqual(type, 'pkcs1'); }
  			header = alg + ' PRIVATE KEY';
  			pkcs1.writePkcs1(der, key$$1);
  		}

  	} else if (key.isKey(key$$1)) {
  		if (type && type === 'pkcs1') {
  			header = alg + ' PUBLIC KEY';
  			pkcs1.writePkcs1(der, key$$1);
  		} else {
  			if (type)
  				{ assert_1.strictEqual(type, 'pkcs8'); }
  			header = 'PUBLIC KEY';
  			pkcs8.writePkcs8(der, key$$1);
  		}

  	} else {
  		throw (new Error('key is not a Key or PrivateKey'));
  	}

  	var tmp = der.buffer.toString('base64');
  	var len = tmp.length + (tmp.length / 64) +
  	    18 + 16 + header.length*2 + 10;
  	var buf = new Buffer(len);
  	var o = 0;
  	o += buf.write('-----BEGIN ' + header + '-----\n', o);
  	for (var i = 0; i < tmp.length; ) {
  		var limit = i + 64;
  		if (limit > tmp.length)
  			{ limit = tmp.length; }
  		o += buf.write(tmp.slice(i, limit), o);
  		buf[o++] = 10;
  		i = limit;
  	}
  	o += buf.write('-----END ' + header + '-----\n', o);

  	return (buf.slice(0, o));
  }

  // Copyright 2015 Joyent, Inc.

  var ssh = {
  	read: read$6,
  	write: write$6
  };









  /*JSSTYLED*/
  var SSHKEY_RE = /^([a-z0-9-]+)[ \t]+([a-zA-Z0-9+\/]+[=]*)([\n \t]+([^\n]+))?$/;
  /*JSSTYLED*/
  var SSHKEY_RE2 = /^([a-z0-9-]+)[ \t]+([a-zA-Z0-9+\/ \t\n]+[=]*)(.*)$/;

  function read$6(buf, options) {
  	if (typeof (buf) !== 'string') {
  		assert_1.buffer(buf, 'buf');
  		buf = buf.toString('ascii');
  	}

  	var trimmed = buf.trim().replace(/[\\\r]/g, '');
  	var m = trimmed.match(SSHKEY_RE);
  	if (!m)
  		{ m = trimmed.match(SSHKEY_RE2); }
  	assert_1.ok(m, 'key must match regex');

  	var type = rfc4253.algToKeyType(m[1]);
  	var kbuf = new Buffer(m[2], 'base64');

  	/*
  	 * This is a bit tricky. If we managed to parse the key and locate the
  	 * key comment with the regex, then do a non-partial read and assert
  	 * that we have consumed all bytes. If we couldn't locate the key
  	 * comment, though, there may be whitespace shenanigans going on that
  	 * have conjoined the comment to the rest of the key. We do a partial
  	 * read in this case to try to make the best out of a sorry situation.
  	 */
  	var key$$1;
  	var ret = {};
  	if (m[4]) {
  		try {
  			key$$1 = rfc4253.read(kbuf);

  		} catch (e) {
  			m = trimmed.match(SSHKEY_RE2);
  			assert_1.ok(m, 'key must match regex');
  			kbuf = new Buffer(m[2], 'base64');
  			key$$1 = rfc4253.readInternal(ret, 'public', kbuf);
  		}
  	} else {
  		key$$1 = rfc4253.readInternal(ret, 'public', kbuf);
  	}

  	assert_1.strictEqual(type, key$$1.type);

  	if (m[4] && m[4].length > 0) {
  		key$$1.comment = m[4];

  	} else if (ret.consumed) {
  		/*
  		 * Now the magic: trying to recover the key comment when it's
  		 * gotten conjoined to the key or otherwise shenanigan'd.
  		 *
  		 * Work out how much base64 we used, then drop all non-base64
  		 * chars from the beginning up to this point in the the string.
  		 * Then offset in this and try to make up for missing = chars.
  		 */
  		var data = m[2] + m[3];
  		var realOffset = Math.ceil(ret.consumed / 3) * 4;
  		data = data.slice(0, realOffset - 2). /*JSSTYLED*/
  		    replace(/[^a-zA-Z0-9+\/=]/g, '') +
  		    data.slice(realOffset - 2);

  		var padding = ret.consumed % 3;
  		if (padding > 0 &&
  		    data.slice(realOffset - 1, realOffset) !== '=')
  			{ realOffset--; }
  		while (data.slice(realOffset, realOffset + 1) === '=')
  			{ realOffset++; }

  		/* Finally, grab what we think is the comment & clean it up. */
  		var trailer = data.slice(realOffset);
  		trailer = trailer.replace(/[\r\n]/g, ' ').
  		    replace(/^\s+/, '');
  		if (trailer.match(/^[a-zA-Z0-9]/))
  			{ key$$1.comment = trailer; }
  	}

  	return (key$$1);
  }

  function write$6(key$$1, options) {
  	assert_1.object(key$$1);
  	if (!key.isKey(key$$1))
  		{ throw (new Error('Must be a public key')); }

  	var parts = [];
  	var alg = rfc4253.keyTypeToAlg(key$$1);
  	parts.push(alg);

  	var buf = rfc4253.write(key$$1);
  	parts.push(buf.toString('base64'));

  	if (key$$1.comment)
  		{ parts.push(key$$1.comment); }

  	return (new Buffer(parts.join(' ')));
  }

  // Copyright 2015 Joyent, Inc.

  var auto = {
  	read: read$7,
  	write: write$7
  };










  function read$7(buf, options) {
  	if (typeof (buf) === 'string') {
  		if (buf.trim().match(/^[-]+[ ]*BEGIN/))
  			{ return (pem.read(buf, options)); }
  		if (buf.match(/^\s*ssh-[a-z]/))
  			{ return (ssh.read(buf, options)); }
  		if (buf.match(/^\s*ecdsa-/))
  			{ return (ssh.read(buf, options)); }
  		buf = new Buffer(buf, 'binary');
  	} else {
  		assert_1.buffer(buf);
  		if (findPEMHeader(buf))
  			{ return (pem.read(buf, options)); }
  		if (findSSHHeader(buf))
  			{ return (ssh.read(buf, options)); }
  	}
  	if (buf.readUInt32BE(0) < buf.length)
  		{ return (rfc4253.read(buf, options)); }
  	throw (new Error('Failed to auto-detect format of key'));
  }

  function findSSHHeader(buf) {
  	var offset = 0;
  	while (offset < buf.length &&
  	    (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))
  		{ ++offset; }
  	if (offset + 4 <= buf.length &&
  	    buf.slice(offset, offset + 4).toString('ascii') === 'ssh-')
  		{ return (true); }
  	if (offset + 6 <= buf.length &&
  	    buf.slice(offset, offset + 6).toString('ascii') === 'ecdsa-')
  		{ return (true); }
  	return (false);
  }

  function findPEMHeader(buf) {
  	var offset = 0;
  	while (offset < buf.length &&
  	    (buf[offset] === 32 || buf[offset] === 10))
  		{ ++offset; }
  	if (buf[offset] !== 45)
  		{ return (false); }
  	while (offset < buf.length &&
  	    (buf[offset] === 45))
  		{ ++offset; }
  	while (offset < buf.length &&
  	    (buf[offset] === 32))
  		{ ++offset; }
  	if (offset + 5 > buf.length ||
  	    buf.slice(offset, offset + 5).toString('ascii') !== 'BEGIN')
  		{ return (false); }
  	return (true);
  }

  function write$7(key$$1, options) {
  	throw (new Error('"auto" format cannot be used for writing'));
  }

  // Copyright 2017 Joyent, Inc.

  var privateKey = PrivateKey;










  var generateECDSA$1 = dhe.generateECDSA;
  var generateED25519$1 = dhe.generateED25519;
  var edCompat$1;
  var nacl$2;

  try {
  	edCompat$1 = edCompat;
  } catch (e) {
  	/* Just continue through, and bail out if we try to use it. */
  }
  var KeyParseError$1 = errors$1.KeyParseError;

  var formats = {};
  formats['auto'] = auto;
  formats['pem'] = pem;
  formats['pkcs1'] = pkcs1;
  formats['pkcs8'] = pkcs8;
  formats['rfc4253'] = rfc4253;
  formats['ssh-private'] = sshPrivate;
  formats['openssh'] = formats['ssh-private'];
  formats['ssh'] = formats['ssh-private'];

  function PrivateKey(opts) {
  	assert_1.object(opts, 'options');
  	key.call(this, opts);

  	this._pubCache = undefined;
  }
  util$2.inherits(PrivateKey, key);

  PrivateKey.formats = formats;

  PrivateKey.prototype.toBuffer = function (format, options) {
  	if (format === undefined)
  		{ format = 'pkcs1'; }
  	assert_1.string(format, 'format');
  	assert_1.object(formats[format], 'formats[format]');
  	assert_1.optionalObject(options, 'options');

  	return (formats[format].write(this, options));
  };

  PrivateKey.prototype.hash = function (algo) {
  	return (this.toPublic().hash(algo));
  };

  PrivateKey.prototype.toPublic = function () {
  	var this$1 = this;

  	if (this._pubCache)
  		{ return (this._pubCache); }

  	var algInfo = algs.info[this.type];
  	var pubParts = [];
  	for (var i = 0; i < algInfo.parts.length; ++i) {
  		var p = algInfo.parts[i];
  		pubParts.push(this$1.part[p]);
  	}

  	this._pubCache = new key({
  		type: this.type,
  		source: this,
  		parts: pubParts
  	});
  	if (this.comment)
  		{ this._pubCache.comment = this.comment; }
  	return (this._pubCache);
  };

  PrivateKey.prototype.derive = function (newType) {
  	assert_1.string(newType, 'type');
  	var priv, pub, pair;

  	if (this.type === 'ed25519' && newType === 'curve25519') {
  		if (nacl$2 === undefined)
  			{ nacl$2 = naclFast; }

  		priv = this.part.r.data;
  		if (priv[0] === 0x00)
  			{ priv = priv.slice(1); }
  		priv = priv.slice(0, 32);

  		pair = nacl$2.box.keyPair.fromSecretKey(new Uint8Array(priv));
  		pub = new Buffer(pair.publicKey);
  		priv = Buffer.concat([priv, pub]);

  		return (new PrivateKey({
  			type: 'curve25519',
  			parts: [
  				{ name: 'R', data: utils$1.mpNormalize(pub) },
  				{ name: 'r', data: priv }
  			]
  		}));
  	} else if (this.type === 'curve25519' && newType === 'ed25519') {
  		if (nacl$2 === undefined)
  			{ nacl$2 = naclFast; }

  		priv = this.part.r.data;
  		if (priv[0] === 0x00)
  			{ priv = priv.slice(1); }
  		priv = priv.slice(0, 32);

  		pair = nacl$2.sign.keyPair.fromSeed(new Uint8Array(priv));
  		pub = new Buffer(pair.publicKey);
  		priv = Buffer.concat([priv, pub]);

  		return (new PrivateKey({
  			type: 'ed25519',
  			parts: [
  				{ name: 'R', data: utils$1.mpNormalize(pub) },
  				{ name: 'r', data: priv }
  			]
  		}));
  	}
  	throw (new Error('Key derivation not supported from ' + this.type +
  	    ' to ' + newType));
  };

  PrivateKey.prototype.createVerify = function (hashAlgo) {
  	return (this.toPublic().createVerify(hashAlgo));
  };

  PrivateKey.prototype.createSign = function (hashAlgo) {
  	if (hashAlgo === undefined)
  		{ hashAlgo = this.defaultHashAlgorithm(); }
  	assert_1.string(hashAlgo, 'hash algorithm');

  	/* ED25519 is not supported by OpenSSL, use a javascript impl. */
  	if (this.type === 'ed25519' && edCompat$1 !== undefined)
  		{ return (new edCompat$1.Signer(this, hashAlgo)); }
  	if (this.type === 'curve25519')
  		{ throw (new Error('Curve25519 keys are not suitable for ' +
  		    'signing or verification')); }

  	var v, nm, err;
  	try {
  		nm = hashAlgo.toUpperCase();
  		v = tls.createSign(nm);
  	} catch (e) {
  		err = e;
  	}
  	if (v === undefined || (err instanceof Error &&
  	    err.message.match(/Unknown message digest/))) {
  		nm = 'RSA-';
  		nm += hashAlgo.toUpperCase();
  		v = tls.createSign(nm);
  	}
  	assert_1.ok(v, 'failed to create verifier');
  	var oldSign = v.sign.bind(v);
  	var key$$1 = this.toBuffer('pkcs1');
  	var type = this.type;
  	var curve = this.curve;
  	v.sign = function () {
  		var sig = oldSign(key$$1);
  		if (typeof (sig) === 'string')
  			{ sig = new Buffer(sig, 'binary'); }
  		sig = signature.parse(sig, type, 'asn1');
  		sig.hashAlgorithm = hashAlgo;
  		sig.curve = curve;
  		return (sig);
  	};
  	return (v);
  };

  PrivateKey.parse = function (data, format, options) {
  	if (typeof (data) !== 'string')
  		{ assert_1.buffer(data, 'data'); }
  	if (format === undefined)
  		{ format = 'auto'; }
  	assert_1.string(format, 'format');
  	if (typeof (options) === 'string')
  		{ options = { filename: options }; }
  	assert_1.optionalObject(options, 'options');
  	if (options === undefined)
  		{ options = {}; }
  	assert_1.optionalString(options.filename, 'options.filename');
  	if (options.filename === undefined)
  		{ options.filename = '(unnamed)'; }

  	assert_1.object(formats[format], 'formats[format]');

  	try {
  		var k = formats[format].read(data, options);
  		assert_1.ok(k instanceof PrivateKey, 'key is not a private key');
  		if (!k.comment)
  			{ k.comment = options.filename; }
  		return (k);
  	} catch (e) {
  		if (e.name === 'KeyEncryptedError')
  			{ throw (e); }
  		throw (new KeyParseError$1(options.filename, format, e));
  	}
  };

  PrivateKey.isPrivateKey = function (obj, ver) {
  	return (utils$1.isCompatible(obj, PrivateKey, ver));
  };

  PrivateKey.generate = function (type, options) {
  	if (options === undefined)
  		{ options = {}; }
  	assert_1.object(options, 'options');

  	switch (type) {
  	case 'ecdsa':
  		if (options.curve === undefined)
  			{ options.curve = 'nistp256'; }
  		assert_1.string(options.curve, 'options.curve');
  		return (generateECDSA$1(options.curve));
  	case 'ed25519':
  		return (generateED25519$1());
  	default:
  		throw (new Error('Key generation not supported with key ' +
  		    'type "' + type + '"'));
  	}
  };

  /*
   * API versions for PrivateKey:
   * [1,0] -- initial ver
   * [1,1] -- added auto, pkcs[18], openssh/ssh-private formats
   * [1,2] -- added defaultHashAlgorithm
   * [1,3] -- added derive, ed, createDH
   * [1,4] -- first tagged version
   */
  PrivateKey.prototype._sshpkApiVersion = [1, 4];

  PrivateKey._oldVersionDetect = function (obj) {
  	assert_1.func(obj.toPublic);
  	assert_1.func(obj.createSign);
  	if (obj.derive)
  		{ return ([1, 3]); }
  	if (obj.defaultHashAlgorithm)
  		{ return ([1, 2]); }
  	if (obj.formats['auto'])
  		{ return ([1, 1]); }
  	return ([1, 0]);
  };

  // Copyright 2015 Joyent, Inc.

  var utils$1 = {
  	bufferSplit: bufferSplit,
  	addRSAMissing: addRSAMissing,
  	calculateDSAPublic: calculateDSAPublic,
  	mpNormalize: mpNormalize,
  	ecNormalize: ecNormalize,
  	countZeros: countZeros,
  	assertCompatible: assertCompatible,
  	isCompatible: isCompatible,
  	opensslKeyDeriv: opensslKeyDeriv,
  	opensshCipherInfo: opensshCipherInfo
  };





  var MAX_CLASS_DEPTH = 3;

  function isCompatible(obj, klass, needVer) {
  	if (obj === null || typeof (obj) !== 'object')
  		{ return (false); }
  	if (needVer === undefined)
  		{ needVer = klass.prototype._sshpkApiVersion; }
  	if (obj instanceof klass &&
  	    klass.prototype._sshpkApiVersion[0] == needVer[0])
  		{ return (true); }
  	var proto = Object.getPrototypeOf(obj);
  	var depth = 0;
  	while (proto.constructor.name !== klass.name) {
  		proto = Object.getPrototypeOf(proto);
  		if (!proto || ++depth > MAX_CLASS_DEPTH)
  			{ return (false); }
  	}
  	if (proto.constructor.name !== klass.name)
  		{ return (false); }
  	var ver = proto._sshpkApiVersion;
  	if (ver === undefined)
  		{ ver = klass._oldVersionDetect(obj); }
  	if (ver[0] != needVer[0] || ver[1] < needVer[1])
  		{ return (false); }
  	return (true);
  }

  function assertCompatible(obj, klass, needVer, name) {
  	if (name === undefined)
  		{ name = 'object'; }
  	assert_1.ok(obj, name + ' must not be null');
  	assert_1.object(obj, name + ' must be an object');
  	if (needVer === undefined)
  		{ needVer = klass.prototype._sshpkApiVersion; }
  	if (obj instanceof klass &&
  	    klass.prototype._sshpkApiVersion[0] == needVer[0])
  		{ return; }
  	var proto = Object.getPrototypeOf(obj);
  	var depth = 0;
  	while (proto.constructor.name !== klass.name) {
  		proto = Object.getPrototypeOf(proto);
  		assert_1.ok(proto && ++depth <= MAX_CLASS_DEPTH,
  		    name + ' must be a ' + klass.name + ' instance');
  	}
  	assert_1.strictEqual(proto.constructor.name, klass.name,
  	    name + ' must be a ' + klass.name + ' instance');
  	var ver = proto._sshpkApiVersion;
  	if (ver === undefined)
  		{ ver = klass._oldVersionDetect(obj); }
  	assert_1.ok(ver[0] == needVer[0] && ver[1] >= needVer[1],
  	    name + ' must be compatible with ' + klass.name + ' klass ' +
  	    'version ' + needVer[0] + '.' + needVer[1]);
  }

  var CIPHER_LEN = {
  	'des-ede3-cbc': { key: 7, iv: 8 },
  	'aes-128-cbc': { key: 16, iv: 16 }
  };
  var PKCS5_SALT_LEN = 8;

  function opensslKeyDeriv(cipher, salt, passphrase, count) {
  	assert_1.buffer(salt, 'salt');
  	assert_1.buffer(passphrase, 'passphrase');
  	assert_1.number(count, 'iteration count');

  	var clen = CIPHER_LEN[cipher];
  	assert_1.object(clen, 'supported cipher');

  	salt = salt.slice(0, PKCS5_SALT_LEN);

  	var D, D_prev, bufs;
  	var material = new Buffer(0);
  	while (material.length < clen.key + clen.iv) {
  		bufs = [];
  		if (D_prev)
  			{ bufs.push(D_prev); }
  		bufs.push(passphrase);
  		bufs.push(salt);
  		D = Buffer.concat(bufs);
  		for (var j = 0; j < count; ++j)
  			{ D = tls.createHash('md5').update(D).digest(); }
  		material = Buffer.concat([material, D]);
  		D_prev = D;
  	}

  	return ({
  	    key: material.slice(0, clen.key),
  	    iv: material.slice(clen.key, clen.key + clen.iv)
  	});
  }

  /* Count leading zero bits on a buffer */
  function countZeros(buf) {
  	var o = 0, obit = 8;
  	while (o < buf.length) {
  		var mask = (1 << obit);
  		if ((buf[o] & mask) === mask)
  			{ break; }
  		obit--;
  		if (obit < 0) {
  			o++;
  			obit = 8;
  		}
  	}
  	return (o*8 + (8 - obit) - 1);
  }

  function bufferSplit(buf, chr) {
  	assert_1.buffer(buf);
  	assert_1.string(chr);

  	var parts = [];
  	var lastPart = 0;
  	var matches = 0;
  	for (var i = 0; i < buf.length; ++i) {
  		if (buf[i] === chr.charCodeAt(matches))
  			{ ++matches; }
  		else if (buf[i] === chr.charCodeAt(0))
  			{ matches = 1; }
  		else
  			{ matches = 0; }

  		if (matches >= chr.length) {
  			var newPart = i + 1;
  			parts.push(buf.slice(lastPart, newPart - matches));
  			lastPart = newPart;
  			matches = 0;
  		}
  	}
  	if (lastPart <= buf.length)
  		{ parts.push(buf.slice(lastPart, buf.length)); }

  	return (parts);
  }

  function ecNormalize(buf, addZero) {
  	assert_1.buffer(buf);
  	if (buf[0] === 0x00 && buf[1] === 0x04) {
  		if (addZero)
  			{ return (buf); }
  		return (buf.slice(1));
  	} else if (buf[0] === 0x04) {
  		if (!addZero)
  			{ return (buf); }
  	} else {
  		while (buf[0] === 0x00)
  			{ buf = buf.slice(1); }
  		if (buf[0] === 0x02 || buf[0] === 0x03)
  			{ throw (new Error('Compressed elliptic curve points ' +
  			    'are not supported')); }
  		if (buf[0] !== 0x04)
  			{ throw (new Error('Not a valid elliptic curve point')); }
  		if (!addZero)
  			{ return (buf); }
  	}
  	var b = new Buffer(buf.length + 1);
  	b[0] = 0x0;
  	buf.copy(b, 1);
  	return (b);
  }

  function mpNormalize(buf) {
  	assert_1.buffer(buf);
  	while (buf.length > 1 && buf[0] === 0x00 && (buf[1] & 0x80) === 0x00)
  		{ buf = buf.slice(1); }
  	if ((buf[0] & 0x80) === 0x80) {
  		var b = new Buffer(buf.length + 1);
  		b[0] = 0x00;
  		buf.copy(b, 1);
  		buf = b;
  	}
  	return (buf);
  }

  function bigintToMpBuf(bigint) {
  	var buf = new Buffer(bigint.toByteArray());
  	buf = mpNormalize(buf);
  	return (buf);
  }

  function calculateDSAPublic(g, p, x) {
  	assert_1.buffer(g);
  	assert_1.buffer(p);
  	assert_1.buffer(x);
  	try {
  		var bigInt = jsbn.BigInteger;
  	} catch (e) {
  		throw (new Error('To load a PKCS#8 format DSA private key, ' +
  		    'the node jsbn library is required.'));
  	}
  	g = new bigInt(g);
  	p = new bigInt(p);
  	x = new bigInt(x);
  	var y = g.modPow(x, p);
  	var ybuf = bigintToMpBuf(y);
  	return (ybuf);
  }

  function addRSAMissing(key) {
  	assert_1.object(key);
  	assertCompatible(key, privateKey, [1, 1]);
  	try {
  		var bigInt = jsbn.BigInteger;
  	} catch (e) {
  		throw (new Error('To write a PEM private key from ' +
  		    'this source, the node jsbn lib is required.'));
  	}

  	var d = new bigInt(key.part.d.data);
  	var buf;

  	if (!key.part.dmodp) {
  		var p = new bigInt(key.part.p.data);
  		var dmodp = d.mod(p.subtract(1));

  		buf = bigintToMpBuf(dmodp);
  		key.part.dmodp = {name: 'dmodp', data: buf};
  		key.parts.push(key.part.dmodp);
  	}
  	if (!key.part.dmodq) {
  		var q = new bigInt(key.part.q.data);
  		var dmodq = d.mod(q.subtract(1));

  		buf = bigintToMpBuf(dmodq);
  		key.part.dmodq = {name: 'dmodq', data: buf};
  		key.parts.push(key.part.dmodq);
  	}
  }

  function opensshCipherInfo(cipher) {
  	var inf = {};
  	switch (cipher) {
  	case '3des-cbc':
  		inf.keySize = 24;
  		inf.blockSize = 8;
  		inf.opensslName = 'des-ede3-cbc';
  		break;
  	case 'blowfish-cbc':
  		inf.keySize = 16;
  		inf.blockSize = 8;
  		inf.opensslName = 'bf-cbc';
  		break;
  	case 'aes128-cbc':
  	case 'aes128-ctr':
  	case 'aes128-gcm@openssh.com':
  		inf.keySize = 16;
  		inf.blockSize = 16;
  		inf.opensslName = 'aes-128-' + cipher.slice(7, 10);
  		break;
  	case 'aes192-cbc':
  	case 'aes192-ctr':
  	case 'aes192-gcm@openssh.com':
  		inf.keySize = 24;
  		inf.blockSize = 16;
  		inf.opensslName = 'aes-192-' + cipher.slice(7, 10);
  		break;
  	case 'aes256-cbc':
  	case 'aes256-ctr':
  	case 'aes256-gcm@openssh.com':
  		inf.keySize = 32;
  		inf.blockSize = 16;
  		inf.opensslName = 'aes-256-' + cipher.slice(7, 10);
  		break;
  	default:
  		throw (new Error(
  		    'Unsupported openssl cipher "' + cipher + '"'));
  	}
  	return (inf);
  }

  // Copyright 2015 Joyent, Inc.

  var signature = Signature;









  var InvalidAlgorithmError$2 = errors$1.InvalidAlgorithmError;
  var SignatureParseError$1 = errors$1.SignatureParseError;

  function Signature(opts) {
  	assert_1.object(opts, 'options');
  	assert_1.arrayOfObject(opts.parts, 'options.parts');
  	assert_1.string(opts.type, 'options.type');

  	var partLookup = {};
  	for (var i = 0; i < opts.parts.length; ++i) {
  		var part = opts.parts[i];
  		partLookup[part.name] = part;
  	}

  	this.type = opts.type;
  	this.hashAlgorithm = opts.hashAlgo;
  	this.curve = opts.curve;
  	this.parts = opts.parts;
  	this.part = partLookup;
  }

  Signature.prototype.toBuffer = function (format) {
  	if (format === undefined)
  		{ format = 'asn1'; }
  	assert_1.string(format, 'format');

  	var buf;
  	var stype = 'ssh-' + this.type;

  	switch (this.type) {
  	case 'rsa':
  		switch (this.hashAlgorithm) {
  		case 'sha256':
  			stype = 'rsa-sha2-256';
  			break;
  		case 'sha512':
  			stype = 'rsa-sha2-512';
  			break;
  		case 'sha1':
  		case undefined:
  			break;
  		default:
  			throw (new Error('SSH signature ' +
  			    'format does not support hash ' +
  			    'algorithm ' + this.hashAlgorithm));
  		}
  		if (format === 'ssh') {
  			buf = new sshBuffer({});
  			buf.writeString(stype);
  			buf.writePart(this.part.sig);
  			return (buf.toBuffer());
  		} else {
  			return (this.part.sig.data);
  		}
  		break;

  	case 'ed25519':
  		if (format === 'ssh') {
  			buf = new sshBuffer({});
  			buf.writeString(stype);
  			buf.writePart(this.part.sig);
  			return (buf.toBuffer());
  		} else {
  			return (this.part.sig.data);
  		}
  		break;

  	case 'dsa':
  	case 'ecdsa':
  		var r, s;
  		if (format === 'asn1') {
  			var der = new lib$6.BerWriter();
  			der.startSequence();
  			r = utils$1.mpNormalize(this.part.r.data);
  			s = utils$1.mpNormalize(this.part.s.data);
  			der.writeBuffer(r, lib$6.Ber.Integer);
  			der.writeBuffer(s, lib$6.Ber.Integer);
  			der.endSequence();
  			return (der.buffer);
  		} else if (format === 'ssh' && this.type === 'dsa') {
  			buf = new sshBuffer({});
  			buf.writeString('ssh-dss');
  			r = this.part.r.data;
  			if (r.length > 20 && r[0] === 0x00)
  				{ r = r.slice(1); }
  			s = this.part.s.data;
  			if (s.length > 20 && s[0] === 0x00)
  				{ s = s.slice(1); }
  			if ((this.hashAlgorithm &&
  			    this.hashAlgorithm !== 'sha1') ||
  			    r.length + s.length !== 40) {
  				throw (new Error('OpenSSH only supports ' +
  				    'DSA signatures with SHA1 hash'));
  			}
  			buf.writeBuffer(Buffer.concat([r, s]));
  			return (buf.toBuffer());
  		} else if (format === 'ssh' && this.type === 'ecdsa') {
  			var inner = new sshBuffer({});
  			r = this.part.r.data;
  			inner.writeBuffer(r);
  			inner.writePart(this.part.s);

  			buf = new sshBuffer({});
  			/* XXX: find a more proper way to do this? */
  			var curve;
  			if (r[0] === 0x00)
  				{ r = r.slice(1); }
  			var sz = r.length * 8;
  			if (sz === 256)
  				{ curve = 'nistp256'; }
  			else if (sz === 384)
  				{ curve = 'nistp384'; }
  			else if (sz === 528)
  				{ curve = 'nistp521'; }
  			buf.writeString('ecdsa-sha2-' + curve);
  			buf.writeBuffer(inner.toBuffer());
  			return (buf.toBuffer());
  		}
  		throw (new Error('Invalid signature format'));
  	default:
  		throw (new Error('Invalid signature data'));
  	}
  };

  Signature.prototype.toString = function (format) {
  	assert_1.optionalString(format, 'format');
  	return (this.toBuffer(format).toString('base64'));
  };

  Signature.parse = function (data, type, format) {
  	if (typeof (data) === 'string')
  		{ data = new Buffer(data, 'base64'); }
  	assert_1.buffer(data, 'data');
  	assert_1.string(format, 'format');
  	assert_1.string(type, 'type');

  	var opts = {};
  	opts.type = type.toLowerCase();
  	opts.parts = [];

  	try {
  		assert_1.ok(data.length > 0, 'signature must not be empty');
  		switch (opts.type) {
  		case 'rsa':
  			return (parseOneNum(data, type, format, opts));
  		case 'ed25519':
  			return (parseOneNum(data, type, format, opts));

  		case 'dsa':
  		case 'ecdsa':
  			if (format === 'asn1')
  				{ return (parseDSAasn1(data, type, format, opts)); }
  			else if (opts.type === 'dsa')
  				{ return (parseDSA(data, type, format, opts)); }
  			else
  				{ return (parseECDSA(data, type, format, opts)); }

  		default:
  			throw (new InvalidAlgorithmError$2(type));
  		}

  	} catch (e) {
  		if (e instanceof InvalidAlgorithmError$2)
  			{ throw (e); }
  		throw (new SignatureParseError$1(type, format, e));
  	}
  };

  function parseOneNum(data, type, format, opts) {
  	if (format === 'ssh') {
  		try {
  			var buf = new sshBuffer({buffer: data});
  			var head = buf.readString();
  		} catch (e) {
  			/* fall through */
  		}
  		if (buf !== undefined) {
  			var msg = 'SSH signature does not match expected ' +
  			    'type (expected ' + type + ', got ' + head + ')';
  			switch (head) {
  			case 'ssh-rsa':
  				assert_1.strictEqual(type, 'rsa', msg);
  				opts.hashAlgo = 'sha1';
  				break;
  			case 'rsa-sha2-256':
  				assert_1.strictEqual(type, 'rsa', msg);
  				opts.hashAlgo = 'sha256';
  				break;
  			case 'rsa-sha2-512':
  				assert_1.strictEqual(type, 'rsa', msg);
  				opts.hashAlgo = 'sha512';
  				break;
  			case 'ssh-ed25519':
  				assert_1.strictEqual(type, 'ed25519', msg);
  				opts.hashAlgo = 'sha512';
  				break;
  			default:
  				throw (new Error('Unknown SSH signature ' +
  				    'type: ' + head));
  			}
  			var sig = buf.readPart();
  			assert_1.ok(buf.atEnd(), 'extra trailing bytes');
  			sig.name = 'sig';
  			opts.parts.push(sig);
  			return (new Signature(opts));
  		}
  	}
  	opts.parts.push({name: 'sig', data: data});
  	return (new Signature(opts));
  }

  function parseDSAasn1(data, type, format, opts) {
  	var der = new lib$6.BerReader(data);
  	der.readSequence();
  	var r = der.readString(lib$6.Ber.Integer, true);
  	var s = der.readString(lib$6.Ber.Integer, true);

  	opts.parts.push({name: 'r', data: utils$1.mpNormalize(r)});
  	opts.parts.push({name: 's', data: utils$1.mpNormalize(s)});

  	return (new Signature(opts));
  }

  function parseDSA(data, type, format, opts) {
  	if (data.length != 40) {
  		var buf = new sshBuffer({buffer: data});
  		var d = buf.readBuffer();
  		if (d.toString('ascii') === 'ssh-dss')
  			{ d = buf.readBuffer(); }
  		assert_1.ok(buf.atEnd(), 'extra trailing bytes');
  		assert_1.strictEqual(d.length, 40, 'invalid inner length');
  		data = d;
  	}
  	opts.parts.push({name: 'r', data: data.slice(0, 20)});
  	opts.parts.push({name: 's', data: data.slice(20, 40)});
  	return (new Signature(opts));
  }

  function parseECDSA(data, type, format, opts) {
  	var buf = new sshBuffer({buffer: data});

  	var r, s;
  	var inner = buf.readBuffer();
  	var stype = inner.toString('ascii');
  	if (stype.slice(0, 6) === 'ecdsa-') {
  		var parts = stype.split('-');
  		assert_1.strictEqual(parts[0], 'ecdsa');
  		assert_1.strictEqual(parts[1], 'sha2');
  		opts.curve = parts[2];
  		switch (opts.curve) {
  		case 'nistp256':
  			opts.hashAlgo = 'sha256';
  			break;
  		case 'nistp384':
  			opts.hashAlgo = 'sha384';
  			break;
  		case 'nistp521':
  			opts.hashAlgo = 'sha512';
  			break;
  		default:
  			throw (new Error('Unsupported ECDSA curve: ' +
  			    opts.curve));
  		}
  		inner = buf.readBuffer();
  		assert_1.ok(buf.atEnd(), 'extra trailing bytes on outer');
  		buf = new sshBuffer({buffer: inner});
  		r = buf.readPart();
  	} else {
  		r = {data: inner};
  	}

  	s = buf.readPart();
  	assert_1.ok(buf.atEnd(), 'extra trailing bytes');

  	r.name = 'r';
  	s.name = 's';

  	opts.parts.push(r);
  	opts.parts.push(s);
  	return (new Signature(opts));
  }

  Signature.isSignature = function (obj, ver) {
  	return (utils$1.isCompatible(obj, Signature, ver));
  };

  /*
   * API versions for Signature:
   * [1,0] -- initial ver
   * [2,0] -- support for rsa in full ssh format, compat with sshpk-agent
   *          hashAlgorithm property
   * [2,1] -- first tagged version
   */
  Signature.prototype._sshpkApiVersion = [2, 1];

  Signature._oldVersionDetect = function (obj) {
  	assert_1.func(obj.toBuffer);
  	if (obj.hasOwnProperty('hashAlgorithm'))
  		{ return ([2, 0]); }
  	return ([1, 0]);
  };

  // Copyright 2017 Joyent, Inc.

  var identity$1 = Identity;











  /*JSSTYLED*/
  var DNS_NAME_RE = /^([*]|[a-z0-9][a-z0-9\-]{0,62})(?:\.([*]|[a-z0-9][a-z0-9\-]{0,62}))*$/i;

  var oids = {};
  oids.cn = '2.5.4.3';
  oids.o = '2.5.4.10';
  oids.ou = '2.5.4.11';
  oids.l = '2.5.4.7';
  oids.s = '2.5.4.8';
  oids.c = '2.5.4.6';
  oids.sn = '2.5.4.4';
  oids.dc = '0.9.2342.19200300.100.1.25';
  oids.uid = '0.9.2342.19200300.100.1.1';
  oids.mail = '0.9.2342.19200300.100.1.3';

  var unoids = {};
  Object.keys(oids).forEach(function (k) {
  	unoids[oids[k]] = k;
  });

  function Identity(opts) {
  	var self = this;
  	assert_1.object(opts, 'options');
  	assert_1.arrayOfObject(opts.components, 'options.components');
  	this.components = opts.components;
  	this.componentLookup = {};
  	this.components.forEach(function (c) {
  		if (c.name && !c.oid)
  			{ c.oid = oids[c.name]; }
  		if (c.oid && !c.name)
  			{ c.name = unoids[c.oid]; }
  		if (self.componentLookup[c.name] === undefined)
  			{ self.componentLookup[c.name] = []; }
  		self.componentLookup[c.name].push(c);
  	});
  	if (this.componentLookup.cn && this.componentLookup.cn.length > 0) {
  		this.cn = this.componentLookup.cn[0].value;
  	}
  	assert_1.optionalString(opts.type, 'options.type');
  	if (opts.type === undefined) {
  		if (this.components.length === 1 &&
  		    this.componentLookup.cn &&
  		    this.componentLookup.cn.length === 1 &&
  		    this.componentLookup.cn[0].value.match(DNS_NAME_RE)) {
  			this.type = 'host';
  			this.hostname = this.componentLookup.cn[0].value;

  		} else if (this.componentLookup.dc &&
  		    this.components.length === this.componentLookup.dc.length) {
  			this.type = 'host';
  			this.hostname = this.componentLookup.dc.map(
  			    function (c) {
  				return (c.value);
  			}).join('.');

  		} else if (this.componentLookup.uid &&
  		    this.components.length ===
  		    this.componentLookup.uid.length) {
  			this.type = 'user';
  			this.uid = this.componentLookup.uid[0].value;

  		} else if (this.componentLookup.cn &&
  		    this.componentLookup.cn.length === 1 &&
  		    this.componentLookup.cn[0].value.match(DNS_NAME_RE)) {
  			this.type = 'host';
  			this.hostname = this.componentLookup.cn[0].value;

  		} else if (this.componentLookup.uid &&
  		    this.componentLookup.uid.length === 1) {
  			this.type = 'user';
  			this.uid = this.componentLookup.uid[0].value;

  		} else if (this.componentLookup.mail &&
  		    this.componentLookup.mail.length === 1) {
  			this.type = 'email';
  			this.email = this.componentLookup.mail[0].value;

  		} else if (this.componentLookup.cn &&
  		    this.componentLookup.cn.length === 1) {
  			this.type = 'user';
  			this.uid = this.componentLookup.cn[0].value;

  		} else {
  			this.type = 'unknown';
  		}
  	} else {
  		this.type = opts.type;
  		if (this.type === 'host')
  			{ this.hostname = opts.hostname; }
  		else if (this.type === 'user')
  			{ this.uid = opts.uid; }
  		else if (this.type === 'email')
  			{ this.email = opts.email; }
  		else
  			{ throw (new Error('Unknown type ' + this.type)); }
  	}
  }

  Identity.prototype.toString = function () {
  	return (this.components.map(function (c) {
  		return (c.name.toUpperCase() + '=' + c.value);
  	}).join(', '));
  };

  /*
   * These are from X.680 -- PrintableString allowed chars are in section 37.4
   * table 8. Spec for IA5Strings is "1,6 + SPACE + DEL" where 1 refers to
   * ISO IR #001 (standard ASCII control characters) and 6 refers to ISO IR #006
   * (the basic ASCII character set).
   */
  /* JSSTYLED */
  var NOT_PRINTABLE = /[^a-zA-Z0-9 '(),+.\/:=?-]/;
  /* JSSTYLED */
  var NOT_IA5 = /[^\x00-\x7f]/;

  Identity.prototype.toAsn1 = function (der, tag) {
  	der.startSequence(tag);
  	this.components.forEach(function (c) {
  		der.startSequence(lib$6.Ber.Constructor | lib$6.Ber.Set);
  		der.startSequence();
  		der.writeOID(c.oid);
  		/*
  		 * If we fit in a PrintableString, use that. Otherwise use an
  		 * IA5String or UTF8String.
  		 */
  		if (c.value.match(NOT_IA5)) {
  			var v = new Buffer(c.value, 'utf8');
  			der.writeBuffer(v, lib$6.Ber.Utf8String);
  		} else if (c.value.match(NOT_PRINTABLE)) {
  			der.writeString(c.value, lib$6.Ber.IA5String);
  		} else {
  			der.writeString(c.value, lib$6.Ber.PrintableString);
  		}
  		der.endSequence();
  		der.endSequence();
  	});
  	der.endSequence();
  };

  function globMatch(a, b) {
  	if (a === '**' || b === '**')
  		{ return (true); }
  	var aParts = a.split('.');
  	var bParts = b.split('.');
  	if (aParts.length !== bParts.length)
  		{ return (false); }
  	for (var i = 0; i < aParts.length; ++i) {
  		if (aParts[i] === '*' || bParts[i] === '*')
  			{ continue; }
  		if (aParts[i] !== bParts[i])
  			{ return (false); }
  	}
  	return (true);
  }

  Identity.prototype.equals = function (other) {
  	var this$1 = this;

  	if (!Identity.isIdentity(other, [1, 0]))
  		{ return (false); }
  	if (other.components.length !== this.components.length)
  		{ return (false); }
  	for (var i = 0; i < this.components.length; ++i) {
  		if (this$1.components[i].oid !== other.components[i].oid)
  			{ return (false); }
  		if (!globMatch(this$1.components[i].value,
  		    other.components[i].value)) {
  			return (false);
  		}
  	}
  	return (true);
  };

  Identity.forHost = function (hostname) {
  	assert_1.string(hostname, 'hostname');
  	return (new Identity({
  		type: 'host',
  		hostname: hostname,
  		components: [ { name: 'cn', value: hostname } ]
  	}));
  };

  Identity.forUser = function (uid) {
  	assert_1.string(uid, 'uid');
  	return (new Identity({
  		type: 'user',
  		uid: uid,
  		components: [ { name: 'uid', value: uid } ]
  	}));
  };

  Identity.forEmail = function (email) {
  	assert_1.string(email, 'email');
  	return (new Identity({
  		type: 'email',
  		email: email,
  		components: [ { name: 'mail', value: email } ]
  	}));
  };

  Identity.parseDN = function (dn) {
  	assert_1.string(dn, 'dn');
  	var parts = dn.split(',');
  	var cmps = parts.map(function (c) {
  		c = c.trim();
  		var eqPos = c.indexOf('=');
  		var name = c.slice(0, eqPos).toLowerCase();
  		var value = c.slice(eqPos + 1);
  		return ({ name: name, value: value });
  	});
  	return (new Identity({ components: cmps }));
  };

  Identity.parseAsn1 = function (der, top) {
  	var components = [];
  	der.readSequence(top);
  	var end = der.offset + der.length;
  	while (der.offset < end) {
  		der.readSequence(lib$6.Ber.Constructor | lib$6.Ber.Set);
  		var after = der.offset + der.length;
  		der.readSequence();
  		var oid = der.readOID();
  		var type = der.peek();
  		var value;
  		switch (type) {
  		case lib$6.Ber.PrintableString:
  		case lib$6.Ber.IA5String:
  		case lib$6.Ber.OctetString:
  		case lib$6.Ber.T61String:
  			value = der.readString(type);
  			break;
  		case lib$6.Ber.Utf8String:
  			value = der.readString(type, true);
  			value = value.toString('utf8');
  			break;
  		case lib$6.Ber.CharacterString:
  		case lib$6.Ber.BMPString:
  			value = der.readString(type, true);
  			value = value.toString('utf16le');
  			break;
  		default:
  			throw (new Error('Unknown asn1 type ' + type));
  		}
  		components.push({ oid: oid, value: value });
  		der._offset = after;
  	}
  	der._offset = end;
  	return (new Identity({
  		components: components
  	}));
  };

  Identity.isIdentity = function (obj, ver) {
  	return (utils$1.isCompatible(obj, Identity, ver));
  };

  /*
   * API versions for Identity:
   * [1,0] -- initial ver
   */
  Identity.prototype._sshpkApiVersion = [1, 0];

  Identity._oldVersionDetect = function (obj) {
  	return ([1, 0]);
  };

  // Copyright 2017 Joyent, Inc.

  var opensshCert = {
  	read: read$8,
  	verify: verify,
  	sign: sign$1,
  	signAsync: signAsync,
  	write: write$8,

  	/* Internal private API */
  	fromBuffer: fromBuffer,
  	toBuffer: toBuffer
  };













  function verify(cert, key$$1) {
  	/*
  	 * We always give an issuerKey, so if our verify() is being called then
  	 * there was no signature. Return false.
  	 */
  	return (false);
  }

  var TYPES = {
  	'user': 1,
  	'host': 2
  };
  Object.keys(TYPES).forEach(function (k) { TYPES[TYPES[k]] = k; });

  var ECDSA_ALGO = /^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;

  function read$8(buf, options) {
  	if (Buffer.isBuffer(buf))
  		{ buf = buf.toString('ascii'); }
  	var parts = buf.trim().split(/[ \t\n]+/g);
  	if (parts.length < 2 || parts.length > 3)
  		{ throw (new Error('Not a valid SSH certificate line')); }

  	var algo = parts[0];
  	var data = parts[1];

  	data = new Buffer(data, 'base64');
  	return (fromBuffer(data, algo));
  }

  function fromBuffer(data, algo, partial) {
  	var sshbuf = new sshBuffer({ buffer: data });
  	var innerAlgo = sshbuf.readString();
  	if (algo !== undefined && innerAlgo !== algo)
  		{ throw (new Error('SSH certificate algorithm mismatch')); }
  	if (algo === undefined)
  		{ algo = innerAlgo; }

  	var cert = {};
  	cert.signatures = {};
  	cert.signatures.openssh = {};

  	cert.signatures.openssh.nonce = sshbuf.readBuffer();

  	var key$$1 = {};
  	var parts = (key$$1.parts = []);
  	key$$1.type = getAlg(algo);

  	var partCount = algs.info[key$$1.type].parts.length;
  	while (parts.length < partCount)
  		{ parts.push(sshbuf.readPart()); }
  	assert_1.ok(parts.length >= 1, 'key must have at least one part');

  	var algInfo = algs.info[key$$1.type];
  	if (key$$1.type === 'ecdsa') {
  		var res = ECDSA_ALGO.exec(algo);
  		assert_1.ok(res !== null);
  		assert_1.strictEqual(res[1], parts[0].data.toString());
  	}

  	for (var i = 0; i < algInfo.parts.length; ++i) {
  		parts[i].name = algInfo.parts[i];
  		if (parts[i].name !== 'curve' &&
  		    algInfo.normalize !== false) {
  			var p = parts[i];
  			p.data = utils$1.mpNormalize(p.data);
  		}
  	}

  	cert.subjectKey = new key(key$$1);

  	cert.serial = sshbuf.readInt64();

  	var type = TYPES[sshbuf.readInt()];
  	assert_1.string(type, 'valid cert type');

  	cert.signatures.openssh.keyId = sshbuf.readString();

  	var principals = [];
  	var pbuf = sshbuf.readBuffer();
  	var psshbuf = new sshBuffer({ buffer: pbuf });
  	while (!psshbuf.atEnd())
  		{ principals.push(psshbuf.readString()); }
  	if (principals.length === 0)
  		{ principals = ['*']; }

  	cert.subjects = principals.map(function (pr) {
  		if (type === 'user')
  			{ return (identity$1.forUser(pr)); }
  		else if (type === 'host')
  			{ return (identity$1.forHost(pr)); }
  		throw (new Error('Unknown identity type ' + type));
  	});

  	cert.validFrom = int64ToDate(sshbuf.readInt64());
  	cert.validUntil = int64ToDate(sshbuf.readInt64());

  	cert.signatures.openssh.critical = sshbuf.readBuffer();
  	cert.signatures.openssh.exts = sshbuf.readBuffer();

  	/* reserved */
  	sshbuf.readBuffer();

  	var signingKeyBuf = sshbuf.readBuffer();
  	cert.issuerKey = rfc4253.read(signingKeyBuf);

  	/*
  	 * OpenSSH certs don't give the identity of the issuer, just their
  	 * public key. So, we use an Identity that matches anything. The
  	 * isSignedBy() function will later tell you if the key matches.
  	 */
  	cert.issuer = identity$1.forHost('**');

  	var sigBuf = sshbuf.readBuffer();
  	cert.signatures.openssh.signature =
  	    signature.parse(sigBuf, cert.issuerKey.type, 'ssh');

  	if (partial !== undefined) {
  		partial.remainder = sshbuf.remainder();
  		partial.consumed = sshbuf._offset;
  	}

  	return (new certificate(cert));
  }

  function int64ToDate(buf) {
  	var i = buf.readUInt32BE(0) * 4294967296;
  	i += buf.readUInt32BE(4);
  	var d = new Date();
  	d.setTime(i * 1000);
  	d.sourceInt64 = buf;
  	return (d);
  }

  function dateToInt64(date) {
  	if (date.sourceInt64 !== undefined)
  		{ return (date.sourceInt64); }
  	var i = Math.round(date.getTime() / 1000);
  	var upper = Math.floor(i / 4294967296);
  	var lower = Math.floor(i % 4294967296);
  	var buf = new Buffer(8);
  	buf.writeUInt32BE(upper, 0);
  	buf.writeUInt32BE(lower, 4);
  	return (buf);
  }

  function sign$1(cert, key$$1) {
  	if (cert.signatures.openssh === undefined)
  		{ cert.signatures.openssh = {}; }
  	try {
  		var blob = toBuffer(cert, true);
  	} catch (e) {
  		delete (cert.signatures.openssh);
  		return (false);
  	}
  	var sig = cert.signatures.openssh;
  	var hashAlgo = undefined;
  	if (key$$1.type === 'rsa' || key$$1.type === 'dsa')
  		{ hashAlgo = 'sha1'; }
  	var signer = key$$1.createSign(hashAlgo);
  	signer.write(blob);
  	sig.signature = signer.sign();
  	return (true);
  }

  function signAsync(cert, signer, done) {
  	if (cert.signatures.openssh === undefined)
  		{ cert.signatures.openssh = {}; }
  	try {
  		var blob = toBuffer(cert, true);
  	} catch (e) {
  		delete (cert.signatures.openssh);
  		done(e);
  		return;
  	}
  	var sig = cert.signatures.openssh;

  	signer(blob, function (err, signature$$1) {
  		if (err) {
  			done(err);
  			return;
  		}
  		try {
  			/*
  			 * This will throw if the signature isn't of a
  			 * type/algo that can be used for SSH.
  			 */
  			signature$$1.toBuffer('ssh');
  		} catch (e) {
  			done(e);
  			return;
  		}
  		sig.signature = signature$$1;
  		done();
  	});
  }

  function write$8(cert, options) {
  	if (options === undefined)
  		{ options = {}; }

  	var blob = toBuffer(cert);
  	var out = getCertType(cert.subjectKey) + ' ' + blob.toString('base64');
  	if (options.comment)
  		{ out = out + ' ' + options.comment; }
  	return (out);
  }


  function toBuffer(cert, noSig) {
  	assert_1.object(cert.signatures.openssh, 'signature for openssh format');
  	var sig = cert.signatures.openssh;

  	if (sig.nonce === undefined)
  		{ sig.nonce = tls.randomBytes(16); }
  	var buf = new sshBuffer({});
  	buf.writeString(getCertType(cert.subjectKey));
  	buf.writeBuffer(sig.nonce);

  	var key$$1 = cert.subjectKey;
  	var algInfo = algs.info[key$$1.type];
  	algInfo.parts.forEach(function (part) {
  		buf.writePart(key$$1.part[part]);
  	});

  	buf.writeInt64(cert.serial);

  	var type = cert.subjects[0].type;
  	assert_1.notStrictEqual(type, 'unknown');
  	cert.subjects.forEach(function (id) {
  		assert_1.strictEqual(id.type, type);
  	});
  	type = TYPES[type];
  	buf.writeInt(type);

  	if (sig.keyId === undefined) {
  		sig.keyId = cert.subjects[0].type + '_' +
  		    (cert.subjects[0].uid || cert.subjects[0].hostname);
  	}
  	buf.writeString(sig.keyId);

  	var sub = new sshBuffer({});
  	cert.subjects.forEach(function (id) {
  		if (type === TYPES.host)
  			{ sub.writeString(id.hostname); }
  		else if (type === TYPES.user)
  			{ sub.writeString(id.uid); }
  	});
  	buf.writeBuffer(sub.toBuffer());

  	buf.writeInt64(dateToInt64(cert.validFrom));
  	buf.writeInt64(dateToInt64(cert.validUntil));

  	if (sig.critical === undefined)
  		{ sig.critical = new Buffer(0); }
  	buf.writeBuffer(sig.critical);

  	if (sig.exts === undefined)
  		{ sig.exts = new Buffer(0); }
  	buf.writeBuffer(sig.exts);

  	/* reserved */
  	buf.writeBuffer(new Buffer(0));

  	sub = rfc4253.write(cert.issuerKey);
  	buf.writeBuffer(sub);

  	if (!noSig)
  		{ buf.writeBuffer(sig.signature.toBuffer('ssh')); }

  	return (buf.toBuffer());
  }

  function getAlg(certType) {
  	if (certType === 'ssh-rsa-cert-v01@openssh.com')
  		{ return ('rsa'); }
  	if (certType === 'ssh-dss-cert-v01@openssh.com')
  		{ return ('dsa'); }
  	if (certType.match(ECDSA_ALGO))
  		{ return ('ecdsa'); }
  	if (certType === 'ssh-ed25519-cert-v01@openssh.com')
  		{ return ('ed25519'); }
  	throw (new Error('Unsupported cert type ' + certType));
  }

  function getCertType(key$$1) {
  	if (key$$1.type === 'rsa')
  		{ return ('ssh-rsa-cert-v01@openssh.com'); }
  	if (key$$1.type === 'dsa')
  		{ return ('ssh-dss-cert-v01@openssh.com'); }
  	if (key$$1.type === 'ecdsa')
  		{ return ('ecdsa-sha2-' + key$$1.curve + '-cert-v01@openssh.com'); }
  	if (key$$1.type === 'ed25519')
  		{ return ('ssh-ed25519-cert-v01@openssh.com'); }
  	throw (new Error('Unsupported key type ' + key$$1.type));
  }

  // Copyright 2017 Joyent, Inc.

  var x509 = {
  	read: read$9,
  	verify: verify$1,
  	sign: sign$2,
  	signAsync: signAsync$1,
  	write: write$9
  };













  /*
   * This file is based on RFC5280 (X.509).
   */

  /* Helper to read in a single mpint */
  function readMPInt$2(der, nm) {
  	assert_1.strictEqual(der.peek(), lib$6.Ber.Integer,
  	    nm + ' is not an Integer');
  	return (utils$1.mpNormalize(der.readString(lib$6.Ber.Integer, true)));
  }

  function verify$1(cert, key$$1) {
  	var sig = cert.signatures.x509;
  	assert_1.object(sig, 'x509 signature');

  	var algParts = sig.algo.split('-');
  	if (algParts[0] !== key$$1.type)
  		{ return (false); }

  	var blob = sig.cache;
  	if (blob === undefined) {
  		var der = new lib$6.BerWriter();
  		writeTBSCert(cert, der);
  		blob = der.buffer;
  	}

  	var verifier = key$$1.createVerify(algParts[1]);
  	verifier.write(blob);
  	return (verifier.verify(sig.signature));
  }

  function Local(i) {
  	return (lib$6.Ber.Context | lib$6.Ber.Constructor | i);
  }

  function Context(i) {
  	return (lib$6.Ber.Context | i);
  }

  var SIGN_ALGS = {
  	'rsa-md5': '1.2.840.113549.1.1.4',
  	'rsa-sha1': '1.2.840.113549.1.1.5',
  	'rsa-sha256': '1.2.840.113549.1.1.11',
  	'rsa-sha384': '1.2.840.113549.1.1.12',
  	'rsa-sha512': '1.2.840.113549.1.1.13',
  	'dsa-sha1': '1.2.840.10040.4.3',
  	'dsa-sha256': '2.16.840.1.101.3.4.3.2',
  	'ecdsa-sha1': '1.2.840.10045.4.1',
  	'ecdsa-sha256': '1.2.840.10045.4.3.2',
  	'ecdsa-sha384': '1.2.840.10045.4.3.3',
  	'ecdsa-sha512': '1.2.840.10045.4.3.4'
  };
  Object.keys(SIGN_ALGS).forEach(function (k) {
  	SIGN_ALGS[SIGN_ALGS[k]] = k;
  });
  SIGN_ALGS['1.3.14.3.2.3'] = 'rsa-md5';
  SIGN_ALGS['1.3.14.3.2.29'] = 'rsa-sha1';

  var EXTS = {
  	'issuerKeyId': '2.5.29.35',
  	'altName': '2.5.29.17',
  	'basicConstraints': '2.5.29.19',
  	'keyUsage': '2.5.29.15',
  	'extKeyUsage': '2.5.29.37'
  };

  function read$9(buf, options) {
  	if (typeof (buf) === 'string') {
  		buf = new Buffer(buf, 'binary');
  	}
  	assert_1.buffer(buf, 'buf');

  	var der = new lib$6.BerReader(buf);

  	der.readSequence();
  	if (Math.abs(der.length - der.remain) > 1) {
  		throw (new Error('DER sequence does not contain whole byte ' +
  		    'stream'));
  	}

  	var tbsStart = der.offset;
  	der.readSequence();
  	var sigOffset = der.offset + der.length;
  	var tbsEnd = sigOffset;

  	if (der.peek() === Local(0)) {
  		der.readSequence(Local(0));
  		var version = der.readInt();
  		assert_1.ok(version <= 3,
  		    'only x.509 versions up to v3 supported');
  	}

  	var cert = {};
  	cert.signatures = {};
  	var sig = (cert.signatures.x509 = {});
  	sig.extras = {};

  	cert.serial = readMPInt$2(der, 'serial');

  	der.readSequence();
  	var after = der.offset + der.length;
  	var certAlgOid = der.readOID();
  	var certAlg = SIGN_ALGS[certAlgOid];
  	if (certAlg === undefined)
  		{ throw (new Error('unknown signature algorithm ' + certAlgOid)); }

  	der._offset = after;
  	cert.issuer = identity$1.parseAsn1(der);

  	der.readSequence();
  	cert.validFrom = readDate(der);
  	cert.validUntil = readDate(der);

  	cert.subjects = [identity$1.parseAsn1(der)];

  	der.readSequence();
  	after = der.offset + der.length;
  	cert.subjectKey = pkcs8.readPkcs8(undefined, 'public', der);
  	der._offset = after;

  	/* issuerUniqueID */
  	if (der.peek() === Local(1)) {
  		der.readSequence(Local(1));
  		sig.extras.issuerUniqueID =
  		    buf.slice(der.offset, der.offset + der.length);
  		der._offset += der.length;
  	}

  	/* subjectUniqueID */
  	if (der.peek() === Local(2)) {
  		der.readSequence(Local(2));
  		sig.extras.subjectUniqueID =
  		    buf.slice(der.offset, der.offset + der.length);
  		der._offset += der.length;
  	}

  	/* extensions */
  	if (der.peek() === Local(3)) {
  		der.readSequence(Local(3));
  		var extEnd = der.offset + der.length;
  		der.readSequence();

  		while (der.offset < extEnd)
  			{ readExtension(cert, buf, der); }

  		assert_1.strictEqual(der.offset, extEnd);
  	}

  	assert_1.strictEqual(der.offset, sigOffset);

  	der.readSequence();
  	after = der.offset + der.length;
  	var sigAlgOid = der.readOID();
  	var sigAlg = SIGN_ALGS[sigAlgOid];
  	if (sigAlg === undefined)
  		{ throw (new Error('unknown signature algorithm ' + sigAlgOid)); }
  	der._offset = after;

  	var sigData = der.readString(lib$6.Ber.BitString, true);
  	if (sigData[0] === 0)
  		{ sigData = sigData.slice(1); }
  	var algParts = sigAlg.split('-');

  	sig.signature = signature.parse(sigData, algParts[0], 'asn1');
  	sig.signature.hashAlgorithm = algParts[1];
  	sig.algo = sigAlg;
  	sig.cache = buf.slice(tbsStart, tbsEnd);

  	return (new certificate(cert));
  }

  function readDate(der) {
  	if (der.peek() === lib$6.Ber.UTCTime) {
  		return (utcTimeToDate(der.readString(lib$6.Ber.UTCTime)));
  	} else if (der.peek() === lib$6.Ber.GeneralizedTime) {
  		return (gTimeToDate(der.readString(lib$6.Ber.GeneralizedTime)));
  	} else {
  		throw (new Error('Unsupported date format'));
  	}
  }

  /* RFC5280, section 4.2.1.6 (GeneralName type) */
  var ALTNAME = {
  	OtherName: Local(0),
  	RFC822Name: Context(1),
  	DNSName: Context(2),
  	X400Address: Local(3),
  	DirectoryName: Local(4),
  	EDIPartyName: Local(5),
  	URI: Context(6),
  	IPAddress: Context(7),
  	OID: Context(8)
  };

  /* RFC5280, section 4.2.1.12 (KeyPurposeId) */
  var EXTPURPOSE = {
  	'serverAuth': '1.3.6.1.5.5.7.3.1',
  	'clientAuth': '1.3.6.1.5.5.7.3.2',
  	'codeSigning': '1.3.6.1.5.5.7.3.3',

  	/* See https://github.com/joyent/oid-docs/blob/master/root.md */
  	'joyentDocker': '1.3.6.1.4.1.38678.1.4.1',
  	'joyentCmon': '1.3.6.1.4.1.38678.1.4.2'
  };
  var EXTPURPOSE_REV = {};
  Object.keys(EXTPURPOSE).forEach(function (k) {
  	EXTPURPOSE_REV[EXTPURPOSE[k]] = k;
  });

  var KEYUSEBITS = [
  	'signature', 'identity', 'keyEncryption',
  	'encryption', 'keyAgreement', 'ca', 'crl'
  ];

  function readExtension(cert, buf, der) {
  	der.readSequence();
  	var after = der.offset + der.length;
  	var extId = der.readOID();
  	var id;
  	var sig = cert.signatures.x509;
  	sig.extras.exts = [];

  	var critical;
  	if (der.peek() === lib$6.Ber.Boolean)
  		{ critical = der.readBoolean(); }

  	switch (extId) {
  	case (EXTS.basicConstraints):
  		der.readSequence(lib$6.Ber.OctetString);
  		der.readSequence();
  		var bcEnd = der.offset + der.length;
  		var ca = false;
  		if (der.peek() === lib$6.Ber.Boolean)
  			{ ca = der.readBoolean(); }
  		if (cert.purposes === undefined)
  			{ cert.purposes = []; }
  		if (ca === true)
  			{ cert.purposes.push('ca'); }
  		var bc = { oid: extId, critical: critical };
  		if (der.offset < bcEnd && der.peek() === lib$6.Ber.Integer)
  			{ bc.pathLen = der.readInt(); }
  		sig.extras.exts.push(bc);
  		break;
  	case (EXTS.extKeyUsage):
  		der.readSequence(lib$6.Ber.OctetString);
  		der.readSequence();
  		if (cert.purposes === undefined)
  			{ cert.purposes = []; }
  		var ekEnd = der.offset + der.length;
  		while (der.offset < ekEnd) {
  			var oid = der.readOID();
  			cert.purposes.push(EXTPURPOSE_REV[oid] || oid);
  		}
  		/*
  		 * This is a bit of a hack: in the case where we have a cert
  		 * that's only allowed to do serverAuth or clientAuth (and not
  		 * the other), we want to make sure all our Subjects are of
  		 * the right type. But we already parsed our Subjects and
  		 * decided if they were hosts or users earlier (since it appears
  		 * first in the cert).
  		 *
  		 * So we go through and mutate them into the right kind here if
  		 * it doesn't match. This might not be hugely beneficial, as it
  		 * seems that single-purpose certs are not often seen in the
  		 * wild.
  		 */
  		if (cert.purposes.indexOf('serverAuth') !== -1 &&
  		    cert.purposes.indexOf('clientAuth') === -1) {
  			cert.subjects.forEach(function (ide) {
  				if (ide.type !== 'host') {
  					ide.type = 'host';
  					ide.hostname = ide.uid ||
  					    ide.email ||
  					    ide.components[0].value;
  				}
  			});
  		} else if (cert.purposes.indexOf('clientAuth') !== -1 &&
  		    cert.purposes.indexOf('serverAuth') === -1) {
  			cert.subjects.forEach(function (ide) {
  				if (ide.type !== 'user') {
  					ide.type = 'user';
  					ide.uid = ide.hostname ||
  					    ide.email ||
  					    ide.components[0].value;
  				}
  			});
  		}
  		sig.extras.exts.push({ oid: extId, critical: critical });
  		break;
  	case (EXTS.keyUsage):
  		der.readSequence(lib$6.Ber.OctetString);
  		var bits = der.readString(lib$6.Ber.BitString, true);
  		var setBits = readBitField(bits, KEYUSEBITS);
  		setBits.forEach(function (bit) {
  			if (cert.purposes === undefined)
  				{ cert.purposes = []; }
  			if (cert.purposes.indexOf(bit) === -1)
  				{ cert.purposes.push(bit); }
  		});
  		sig.extras.exts.push({ oid: extId, critical: critical,
  		    bits: bits });
  		break;
  	case (EXTS.altName):
  		der.readSequence(lib$6.Ber.OctetString);
  		der.readSequence();
  		var aeEnd = der.offset + der.length;
  		while (der.offset < aeEnd) {
  			switch (der.peek()) {
  			case ALTNAME.OtherName:
  			case ALTNAME.EDIPartyName:
  				der.readSequence();
  				der._offset += der.length;
  				break;
  			case ALTNAME.OID:
  				der.readOID(ALTNAME.OID);
  				break;
  			case ALTNAME.RFC822Name:
  				/* RFC822 specifies email addresses */
  				var email = der.readString(ALTNAME.RFC822Name);
  				id = identity$1.forEmail(email);
  				if (!cert.subjects[0].equals(id))
  					{ cert.subjects.push(id); }
  				break;
  			case ALTNAME.DirectoryName:
  				der.readSequence(ALTNAME.DirectoryName);
  				id = identity$1.parseAsn1(der);
  				if (!cert.subjects[0].equals(id))
  					{ cert.subjects.push(id); }
  				break;
  			case ALTNAME.DNSName:
  				var host = der.readString(
  				    ALTNAME.DNSName);
  				id = identity$1.forHost(host);
  				if (!cert.subjects[0].equals(id))
  					{ cert.subjects.push(id); }
  				break;
  			default:
  				der.readString(der.peek());
  				break;
  			}
  		}
  		sig.extras.exts.push({ oid: extId, critical: critical });
  		break;
  	default:
  		sig.extras.exts.push({
  			oid: extId,
  			critical: critical,
  			data: der.readString(lib$6.Ber.OctetString, true)
  		});
  		break;
  	}

  	der._offset = after;
  }

  var UTCTIME_RE =
      /^([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;
  function utcTimeToDate(t) {
  	var m = t.match(UTCTIME_RE);
  	assert_1.ok(m, 'timestamps must be in UTC');
  	var d = new Date();

  	var thisYear = d.getUTCFullYear();
  	var century = Math.floor(thisYear / 100) * 100;

  	var year = parseInt(m[1], 10);
  	if (thisYear % 100 < 50 && year >= 60)
  		{ year += (century - 1); }
  	else
  		{ year += century; }
  	d.setUTCFullYear(year, parseInt(m[2], 10) - 1, parseInt(m[3], 10));
  	d.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));
  	if (m[6] && m[6].length > 0)
  		{ d.setUTCSeconds(parseInt(m[6], 10)); }
  	return (d);
  }

  var GTIME_RE =
      /^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;
  function gTimeToDate(t) {
  	var m = t.match(GTIME_RE);
  	assert_1.ok(m);
  	var d = new Date();

  	d.setUTCFullYear(parseInt(m[1], 10), parseInt(m[2], 10) - 1,
  	    parseInt(m[3], 10));
  	d.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));
  	if (m[6] && m[6].length > 0)
  		{ d.setUTCSeconds(parseInt(m[6], 10)); }
  	return (d);
  }

  function zeroPad(n) {
  	var s = '' + n;
  	while (s.length < 2)
  		{ s = '0' + s; }
  	return (s);
  }

  function dateToUTCTime(d) {
  	var s = '';
  	s += zeroPad(d.getUTCFullYear() % 100);
  	s += zeroPad(d.getUTCMonth() + 1);
  	s += zeroPad(d.getUTCDate());
  	s += zeroPad(d.getUTCHours());
  	s += zeroPad(d.getUTCMinutes());
  	s += zeroPad(d.getUTCSeconds());
  	s += 'Z';
  	return (s);
  }

  function sign$2(cert, key$$1) {
  	if (cert.signatures.x509 === undefined)
  		{ cert.signatures.x509 = {}; }
  	var sig = cert.signatures.x509;

  	sig.algo = key$$1.type + '-' + key$$1.defaultHashAlgorithm();
  	if (SIGN_ALGS[sig.algo] === undefined)
  		{ return (false); }

  	var der = new lib$6.BerWriter();
  	writeTBSCert(cert, der);
  	var blob = der.buffer;
  	sig.cache = blob;

  	var signer = key$$1.createSign();
  	signer.write(blob);
  	cert.signatures.x509.signature = signer.sign();

  	return (true);
  }

  function signAsync$1(cert, signer, done) {
  	if (cert.signatures.x509 === undefined)
  		{ cert.signatures.x509 = {}; }
  	var sig = cert.signatures.x509;

  	var der = new lib$6.BerWriter();
  	writeTBSCert(cert, der);
  	var blob = der.buffer;
  	sig.cache = blob;

  	signer(blob, function (err, signature$$1) {
  		if (err) {
  			done(err);
  			return;
  		}
  		sig.algo = signature$$1.type + '-' + signature$$1.hashAlgorithm;
  		if (SIGN_ALGS[sig.algo] === undefined) {
  			done(new Error('Invalid signing algorithm "' +
  			    sig.algo + '"'));
  			return;
  		}
  		sig.signature = signature$$1;
  		done();
  	});
  }

  function write$9(cert, options) {
  	var sig = cert.signatures.x509;
  	assert_1.object(sig, 'x509 signature');

  	var der = new lib$6.BerWriter();
  	der.startSequence();
  	if (sig.cache) {
  		der._ensure(sig.cache.length);
  		sig.cache.copy(der._buf, der._offset);
  		der._offset += sig.cache.length;
  	} else {
  		writeTBSCert(cert, der);
  	}

  	der.startSequence();
  	der.writeOID(SIGN_ALGS[sig.algo]);
  	if (sig.algo.match(/^rsa-/))
  		{ der.writeNull(); }
  	der.endSequence();

  	var sigData = sig.signature.toBuffer('asn1');
  	var data = new Buffer(sigData.length + 1);
  	data[0] = 0;
  	sigData.copy(data, 1);
  	der.writeBuffer(data, lib$6.Ber.BitString);
  	der.endSequence();

  	return (der.buffer);
  }

  function writeTBSCert(cert, der) {
  	var sig = cert.signatures.x509;
  	assert_1.object(sig, 'x509 signature');

  	der.startSequence();

  	der.startSequence(Local(0));
  	der.writeInt(2);
  	der.endSequence();

  	der.writeBuffer(utils$1.mpNormalize(cert.serial), lib$6.Ber.Integer);

  	der.startSequence();
  	der.writeOID(SIGN_ALGS[sig.algo]);
  	der.endSequence();

  	cert.issuer.toAsn1(der);

  	der.startSequence();
  	der.writeString(dateToUTCTime(cert.validFrom), lib$6.Ber.UTCTime);
  	der.writeString(dateToUTCTime(cert.validUntil), lib$6.Ber.UTCTime);
  	der.endSequence();

  	var subject = cert.subjects[0];
  	var altNames = cert.subjects.slice(1);
  	subject.toAsn1(der);

  	pkcs8.writePkcs8(der, cert.subjectKey);

  	if (sig.extras && sig.extras.issuerUniqueID) {
  		der.writeBuffer(sig.extras.issuerUniqueID, Local(1));
  	}

  	if (sig.extras && sig.extras.subjectUniqueID) {
  		der.writeBuffer(sig.extras.subjectUniqueID, Local(2));
  	}

  	if (altNames.length > 0 || subject.type === 'host' ||
  	    (cert.purposes !== undefined && cert.purposes.length > 0) ||
  	    (sig.extras && sig.extras.exts)) {
  		der.startSequence(Local(3));
  		der.startSequence();

  		var exts = [];
  		if (cert.purposes !== undefined && cert.purposes.length > 0) {
  			exts.push({
  				oid: EXTS.basicConstraints,
  				critical: true
  			});
  			exts.push({
  				oid: EXTS.keyUsage,
  				critical: true
  			});
  			exts.push({
  				oid: EXTS.extKeyUsage,
  				critical: true
  			});
  		}
  		exts.push({ oid: EXTS.altName });
  		if (sig.extras && sig.extras.exts)
  			{ exts = sig.extras.exts; }

  		for (var i = 0; i < exts.length; ++i) {
  			der.startSequence();
  			der.writeOID(exts[i].oid);

  			if (exts[i].critical !== undefined)
  				{ der.writeBoolean(exts[i].critical); }

  			if (exts[i].oid === EXTS.altName) {
  				der.startSequence(lib$6.Ber.OctetString);
  				der.startSequence();
  				if (subject.type === 'host') {
  					der.writeString(subject.hostname,
  					    Context(2));
  				}
  				for (var j = 0; j < altNames.length; ++j) {
  					if (altNames[j].type === 'host') {
  						der.writeString(
  						    altNames[j].hostname,
  						    ALTNAME.DNSName);
  					} else if (altNames[j].type ===
  					    'email') {
  						der.writeString(
  						    altNames[j].email,
  						    ALTNAME.RFC822Name);
  					} else {
  						/*
  						 * Encode anything else as a
  						 * DN style name for now.
  						 */
  						der.startSequence(
  						    ALTNAME.DirectoryName);
  						altNames[j].toAsn1(der);
  						der.endSequence();
  					}
  				}
  				der.endSequence();
  				der.endSequence();
  			} else if (exts[i].oid === EXTS.basicConstraints) {
  				der.startSequence(lib$6.Ber.OctetString);
  				der.startSequence();
  				var ca = (cert.purposes.indexOf('ca') !== -1);
  				var pathLen = exts[i].pathLen;
  				der.writeBoolean(ca);
  				if (pathLen !== undefined)
  					{ der.writeInt(pathLen); }
  				der.endSequence();
  				der.endSequence();
  			} else if (exts[i].oid === EXTS.extKeyUsage) {
  				der.startSequence(lib$6.Ber.OctetString);
  				der.startSequence();
  				cert.purposes.forEach(function (purpose) {
  					if (purpose === 'ca')
  						{ return; }
  					if (KEYUSEBITS.indexOf(purpose) !== -1)
  						{ return; }
  					var oid = purpose;
  					if (EXTPURPOSE[purpose] !== undefined)
  						{ oid = EXTPURPOSE[purpose]; }
  					der.writeOID(oid);
  				});
  				der.endSequence();
  				der.endSequence();
  			} else if (exts[i].oid === EXTS.keyUsage) {
  				der.startSequence(lib$6.Ber.OctetString);
  				/*
  				 * If we parsed this certificate from a byte
  				 * stream (i.e. we didn't generate it in sshpk)
  				 * then we'll have a ".bits" property on the
  				 * ext with the original raw byte contents.
  				 *
  				 * If we have this, use it here instead of
  				 * regenerating it. This guarantees we output
  				 * the same data we parsed, so signatures still
  				 * validate.
  				 */
  				if (exts[i].bits !== undefined) {
  					der.writeBuffer(exts[i].bits,
  					    lib$6.Ber.BitString);
  				} else {
  					var bits = writeBitField(cert.purposes,
  					    KEYUSEBITS);
  					der.writeBuffer(bits,
  					    lib$6.Ber.BitString);
  				}
  				der.endSequence();
  			} else {
  				der.writeBuffer(exts[i].data,
  				    lib$6.Ber.OctetString);
  			}

  			der.endSequence();
  		}

  		der.endSequence();
  		der.endSequence();
  	}

  	der.endSequence();
  }

  /*
   * Reads an ASN.1 BER bitfield out of the Buffer produced by doing
   * `BerReader#readString(asn1.Ber.BitString)`. That function gives us the raw
   * contents of the BitString tag, which is a count of unused bits followed by
   * the bits as a right-padded byte string.
   *
   * `bits` is the Buffer, `bitIndex` should contain an array of string names
   * for the bits in the string, ordered starting with bit #0 in the ASN.1 spec.
   *
   * Returns an array of Strings, the names of the bits that were set to 1.
   */
  function readBitField(bits, bitIndex) {
  	var bitLen = 8 * (bits.length - 1) - bits[0];
  	var setBits = {};
  	for (var i = 0; i < bitLen; ++i) {
  		var byteN = 1 + Math.floor(i / 8);
  		var bit = 7 - (i % 8);
  		var mask = 1 << bit;
  		var bitVal = ((bits[byteN] & mask) !== 0);
  		var name = bitIndex[i];
  		if (bitVal && typeof (name) === 'string') {
  			setBits[name] = true;
  		}
  	}
  	return (Object.keys(setBits));
  }

  /*
   * `setBits` is an array of strings, containing the names for each bit that
   * sould be set to 1. `bitIndex` is same as in `readBitField()`.
   *
   * Returns a Buffer, ready to be written out with `BerWriter#writeString()`.
   */
  function writeBitField(setBits, bitIndex) {
  	var bitLen = bitIndex.length;
  	var blen = Math.ceil(bitLen / 8);
  	var unused = blen * 8 - bitLen;
  	var bits = new Buffer(1 + blen);
  	bits.fill(0);
  	bits[0] = unused;
  	for (var i = 0; i < bitLen; ++i) {
  		var byteN = 1 + Math.floor(i / 8);
  		var bit = 7 - (i % 8);
  		var mask = 1 << bit;
  		var name = bitIndex[i];
  		if (name === undefined)
  			{ continue; }
  		var bitVal = (setBits.indexOf(name) !== -1);
  		if (bitVal) {
  			bits[byteN] |= mask;
  		}
  	}
  	return (bits);
  }

  // Copyright 2016 Joyent, Inc.



  var x509Pem = {
  	read: read$10,
  	verify: x509.verify,
  	sign: x509.sign,
  	write: write$10
  };












  function read$10(buf, options) {
  	if (typeof (buf) !== 'string') {
  		assert_1.buffer(buf, 'buf');
  		buf = buf.toString('ascii');
  	}

  	var lines = buf.trim().split(/[\r\n]+/g);

  	var m = lines[0].match(/*JSSTYLED*/
  	    /[-]+[ ]*BEGIN CERTIFICATE[ ]*[-]+/);
  	assert_1.ok(m, 'invalid PEM header');

  	var m2 = lines[lines.length - 1].match(/*JSSTYLED*/
  	    /[-]+[ ]*END CERTIFICATE[ ]*[-]+/);
  	assert_1.ok(m2, 'invalid PEM footer');

  	var headers = {};
  	while (true) {
  		lines = lines.slice(1);
  		m = lines[0].match(/*JSSTYLED*/
  		    /^([A-Za-z0-9-]+): (.+)$/);
  		if (!m)
  			{ break; }
  		headers[m[1].toLowerCase()] = m[2];
  	}

  	/* Chop off the first and last lines */
  	lines = lines.slice(0, -1).join('');
  	buf = new Buffer(lines, 'base64');

  	return (x509.read(buf, options));
  }

  function write$10(cert, options) {
  	var dbuf = x509.write(cert, options);

  	var header = 'CERTIFICATE';
  	var tmp = dbuf.toString('base64');
  	var len = tmp.length + (tmp.length / 64) +
  	    18 + 16 + header.length*2 + 10;
  	var buf = new Buffer(len);
  	var o = 0;
  	o += buf.write('-----BEGIN ' + header + '-----\n', o);
  	for (var i = 0; i < tmp.length; ) {
  		var limit = i + 64;
  		if (limit > tmp.length)
  			{ limit = tmp.length; }
  		o += buf.write(tmp.slice(i, limit), o);
  		buf[o++] = 10;
  		i = limit;
  	}
  	o += buf.write('-----END ' + header + '-----\n', o);

  	return (buf.slice(0, o));
  }

  // Copyright 2016 Joyent, Inc.

  var certificate = Certificate;













  var formats$1 = {};
  formats$1['openssh'] = opensshCert;
  formats$1['x509'] = x509;
  formats$1['pem'] = x509Pem;

  var CertificateParseError$1 = errors$1.CertificateParseError;
  var InvalidAlgorithmError$3 = errors$1.InvalidAlgorithmError;

  function Certificate(opts) {
  	assert_1.object(opts, 'options');
  	assert_1.arrayOfObject(opts.subjects, 'options.subjects');
  	utils$1.assertCompatible(opts.subjects[0], identity$1, [1, 0],
  	    'options.subjects');
  	utils$1.assertCompatible(opts.subjectKey, key, [1, 0],
  	    'options.subjectKey');
  	utils$1.assertCompatible(opts.issuer, identity$1, [1, 0], 'options.issuer');
  	if (opts.issuerKey !== undefined) {
  		utils$1.assertCompatible(opts.issuerKey, key, [1, 0],
  		    'options.issuerKey');
  	}
  	assert_1.object(opts.signatures, 'options.signatures');
  	assert_1.buffer(opts.serial, 'options.serial');
  	assert_1.date(opts.validFrom, 'options.validFrom');
  	assert_1.date(opts.validUntil, 'optons.validUntil');

  	assert_1.optionalArrayOfString(opts.purposes, 'options.purposes');

  	this._hashCache = {};

  	this.subjects = opts.subjects;
  	this.issuer = opts.issuer;
  	this.subjectKey = opts.subjectKey;
  	this.issuerKey = opts.issuerKey;
  	this.signatures = opts.signatures;
  	this.serial = opts.serial;
  	this.validFrom = opts.validFrom;
  	this.validUntil = opts.validUntil;
  	this.purposes = opts.purposes;
  }

  Certificate.formats = formats$1;

  Certificate.prototype.toBuffer = function (format, options) {
  	if (format === undefined)
  		{ format = 'x509'; }
  	assert_1.string(format, 'format');
  	assert_1.object(formats$1[format], 'formats[format]');
  	assert_1.optionalObject(options, 'options');

  	return (formats$1[format].write(this, options));
  };

  Certificate.prototype.toString = function (format, options) {
  	if (format === undefined)
  		{ format = 'pem'; }
  	return (this.toBuffer(format, options).toString());
  };

  Certificate.prototype.fingerprint = function (algo) {
  	if (algo === undefined)
  		{ algo = 'sha256'; }
  	assert_1.string(algo, 'algorithm');
  	var opts = {
  		type: 'certificate',
  		hash: this.hash(algo),
  		algorithm: algo
  	};
  	return (new fingerprint(opts));
  };

  Certificate.prototype.hash = function (algo) {
  	assert_1.string(algo, 'algorithm');
  	algo = algo.toLowerCase();
  	if (algs.hashAlgs[algo] === undefined)
  		{ throw (new InvalidAlgorithmError$3(algo)); }

  	if (this._hashCache[algo])
  		{ return (this._hashCache[algo]); }

  	var hash = tls.createHash(algo).
  	    update(this.toBuffer('x509')).digest();
  	this._hashCache[algo] = hash;
  	return (hash);
  };

  Certificate.prototype.isExpired = function (when) {
  	if (when === undefined)
  		{ when = new Date(); }
  	return (!((when.getTime() >= this.validFrom.getTime()) &&
  		(when.getTime() < this.validUntil.getTime())));
  };

  Certificate.prototype.isSignedBy = function (issuerCert) {
  	utils$1.assertCompatible(issuerCert, Certificate, [1, 0], 'issuer');

  	if (!this.issuer.equals(issuerCert.subjects[0]))
  		{ return (false); }
  	if (this.issuer.purposes && this.issuer.purposes.length > 0 &&
  	    this.issuer.purposes.indexOf('ca') === -1) {
  		return (false);
  	}

  	return (this.isSignedByKey(issuerCert.subjectKey));
  };

  Certificate.prototype.isSignedByKey = function (issuerKey) {
  	utils$1.assertCompatible(issuerKey, key, [1, 2], 'issuerKey');

  	if (this.issuerKey !== undefined) {
  		return (this.issuerKey.
  		    fingerprint('sha512').matches(issuerKey));
  	}

  	var fmt = Object.keys(this.signatures)[0];
  	var valid = formats$1[fmt].verify(this, issuerKey);
  	if (valid)
  		{ this.issuerKey = issuerKey; }
  	return (valid);
  };

  Certificate.prototype.signWith = function (key$$1) {
  	var this$1 = this;

  	utils$1.assertCompatible(key$$1, privateKey, [1, 2], 'key');
  	var fmts = Object.keys(formats$1);
  	var didOne = false;
  	for (var i = 0; i < fmts.length; ++i) {
  		if (fmts[i] !== 'pem') {
  			var ret = formats$1[fmts[i]].sign(this$1, key$$1);
  			if (ret === true)
  				{ didOne = true; }
  		}
  	}
  	if (!didOne) {
  		throw (new Error('Failed to sign the certificate for any ' +
  		    'available certificate formats'));
  	}
  };

  Certificate.createSelfSigned = function (subjectOrSubjects, key$$1, options) {
  	var subjects;
  	if (Array.isArray(subjectOrSubjects))
  		{ subjects = subjectOrSubjects; }
  	else
  		{ subjects = [subjectOrSubjects]; }

  	assert_1.arrayOfObject(subjects);
  	subjects.forEach(function (subject) {
  		utils$1.assertCompatible(subject, identity$1, [1, 0], 'subject');
  	});

  	utils$1.assertCompatible(key$$1, privateKey, [1, 2], 'private key');

  	assert_1.optionalObject(options, 'options');
  	if (options === undefined)
  		{ options = {}; }
  	assert_1.optionalObject(options.validFrom, 'options.validFrom');
  	assert_1.optionalObject(options.validUntil, 'options.validUntil');
  	var validFrom = options.validFrom;
  	var validUntil = options.validUntil;
  	if (validFrom === undefined)
  		{ validFrom = new Date(); }
  	if (validUntil === undefined) {
  		assert_1.optionalNumber(options.lifetime, 'options.lifetime');
  		var lifetime = options.lifetime;
  		if (lifetime === undefined)
  			{ lifetime = 10*365*24*3600; }
  		validUntil = new Date();
  		validUntil.setTime(validUntil.getTime() + lifetime*1000);
  	}
  	assert_1.optionalBuffer(options.serial, 'options.serial');
  	var serial = options.serial;
  	if (serial === undefined)
  		{ serial = new Buffer('0000000000000001', 'hex'); }

  	var purposes = options.purposes;
  	if (purposes === undefined)
  		{ purposes = []; }

  	if (purposes.indexOf('signature') === -1)
  		{ purposes.push('signature'); }

  	/* Self-signed certs are always CAs. */
  	if (purposes.indexOf('ca') === -1)
  		{ purposes.push('ca'); }
  	if (purposes.indexOf('crl') === -1)
  		{ purposes.push('crl'); }

  	/*
  	 * If we weren't explicitly given any other purposes, do the sensible
  	 * thing and add some basic ones depending on the subject type.
  	 */
  	if (purposes.length <= 3) {
  		var hostSubjects = subjects.filter(function (subject) {
  			return (subject.type === 'host');
  		});
  		var userSubjects = subjects.filter(function (subject) {
  			return (subject.type === 'user');
  		});
  		if (hostSubjects.length > 0) {
  			if (purposes.indexOf('serverAuth') === -1)
  				{ purposes.push('serverAuth'); }
  		}
  		if (userSubjects.length > 0) {
  			if (purposes.indexOf('clientAuth') === -1)
  				{ purposes.push('clientAuth'); }
  		}
  		if (userSubjects.length > 0 || hostSubjects.length > 0) {
  			if (purposes.indexOf('keyAgreement') === -1)
  				{ purposes.push('keyAgreement'); }
  			if (key$$1.type === 'rsa' &&
  			    purposes.indexOf('encryption') === -1)
  				{ purposes.push('encryption'); }
  		}
  	}

  	var cert = new Certificate({
  		subjects: subjects,
  		issuer: subjects[0],
  		subjectKey: key$$1.toPublic(),
  		issuerKey: key$$1.toPublic(),
  		signatures: {},
  		serial: serial,
  		validFrom: validFrom,
  		validUntil: validUntil,
  		purposes: purposes
  	});
  	cert.signWith(key$$1);

  	return (cert);
  };

  Certificate.create =
      function (subjectOrSubjects, key$$1, issuer, issuerKey, options) {
  	var subjects;
  	if (Array.isArray(subjectOrSubjects))
  		{ subjects = subjectOrSubjects; }
  	else
  		{ subjects = [subjectOrSubjects]; }

  	assert_1.arrayOfObject(subjects);
  	subjects.forEach(function (subject) {
  		utils$1.assertCompatible(subject, identity$1, [1, 0], 'subject');
  	});

  	utils$1.assertCompatible(key$$1, key, [1, 0], 'key');
  	if (privateKey.isPrivateKey(key$$1))
  		{ key$$1 = key$$1.toPublic(); }
  	utils$1.assertCompatible(issuer, identity$1, [1, 0], 'issuer');
  	utils$1.assertCompatible(issuerKey, privateKey, [1, 2], 'issuer key');

  	assert_1.optionalObject(options, 'options');
  	if (options === undefined)
  		{ options = {}; }
  	assert_1.optionalObject(options.validFrom, 'options.validFrom');
  	assert_1.optionalObject(options.validUntil, 'options.validUntil');
  	var validFrom = options.validFrom;
  	var validUntil = options.validUntil;
  	if (validFrom === undefined)
  		{ validFrom = new Date(); }
  	if (validUntil === undefined) {
  		assert_1.optionalNumber(options.lifetime, 'options.lifetime');
  		var lifetime = options.lifetime;
  		if (lifetime === undefined)
  			{ lifetime = 10*365*24*3600; }
  		validUntil = new Date();
  		validUntil.setTime(validUntil.getTime() + lifetime*1000);
  	}
  	assert_1.optionalBuffer(options.serial, 'options.serial');
  	var serial = options.serial;
  	if (serial === undefined)
  		{ serial = new Buffer('0000000000000001', 'hex'); }

  	var purposes = options.purposes;
  	if (purposes === undefined)
  		{ purposes = []; }

  	if (purposes.indexOf('signature') === -1)
  		{ purposes.push('signature'); }

  	if (options.ca === true) {
  		if (purposes.indexOf('ca') === -1)
  			{ purposes.push('ca'); }
  		if (purposes.indexOf('crl') === -1)
  			{ purposes.push('crl'); }
  	}

  	var hostSubjects = subjects.filter(function (subject) {
  		return (subject.type === 'host');
  	});
  	var userSubjects = subjects.filter(function (subject) {
  		return (subject.type === 'user');
  	});
  	if (hostSubjects.length > 0) {
  		if (purposes.indexOf('serverAuth') === -1)
  			{ purposes.push('serverAuth'); }
  	}
  	if (userSubjects.length > 0) {
  		if (purposes.indexOf('clientAuth') === -1)
  			{ purposes.push('clientAuth'); }
  	}
  	if (userSubjects.length > 0 || hostSubjects.length > 0) {
  		if (purposes.indexOf('keyAgreement') === -1)
  			{ purposes.push('keyAgreement'); }
  		if (key$$1.type === 'rsa' &&
  		    purposes.indexOf('encryption') === -1)
  			{ purposes.push('encryption'); }
  	}

  	var cert = new Certificate({
  		subjects: subjects,
  		issuer: issuer,
  		subjectKey: key$$1,
  		issuerKey: issuerKey.toPublic(),
  		signatures: {},
  		serial: serial,
  		validFrom: validFrom,
  		validUntil: validUntil,
  		purposes: purposes
  	});
  	cert.signWith(issuerKey);

  	return (cert);
  };

  Certificate.parse = function (data, format, options) {
  	if (typeof (data) !== 'string')
  		{ assert_1.buffer(data, 'data'); }
  	if (format === undefined)
  		{ format = 'auto'; }
  	assert_1.string(format, 'format');
  	if (typeof (options) === 'string')
  		{ options = { filename: options }; }
  	assert_1.optionalObject(options, 'options');
  	if (options === undefined)
  		{ options = {}; }
  	assert_1.optionalString(options.filename, 'options.filename');
  	if (options.filename === undefined)
  		{ options.filename = '(unnamed)'; }

  	assert_1.object(formats$1[format], 'formats[format]');

  	try {
  		var k = formats$1[format].read(data, options);
  		return (k);
  	} catch (e) {
  		throw (new CertificateParseError$1(options.filename, format, e));
  	}
  };

  Certificate.isCertificate = function (obj, ver) {
  	return (utils$1.isCompatible(obj, Certificate, ver));
  };

  /*
   * API versions for Certificate:
   * [1,0] -- initial ver
   */
  Certificate.prototype._sshpkApiVersion = [1, 0];

  Certificate._oldVersionDetect = function (obj) {
  	return ([1, 0]);
  };

  // Copyright 2015 Joyent, Inc.

  var fingerprint = Fingerprint;









  var FingerprintFormatError$1 = errors$1.FingerprintFormatError;
  var InvalidAlgorithmError$4 = errors$1.InvalidAlgorithmError;

  function Fingerprint(opts) {
  	assert_1.object(opts, 'options');
  	assert_1.string(opts.type, 'options.type');
  	assert_1.buffer(opts.hash, 'options.hash');
  	assert_1.string(opts.algorithm, 'options.algorithm');

  	this.algorithm = opts.algorithm.toLowerCase();
  	if (algs.hashAlgs[this.algorithm] !== true)
  		{ throw (new InvalidAlgorithmError$4(this.algorithm)); }

  	this.hash = opts.hash;
  	this.type = opts.type;
  }

  Fingerprint.prototype.toString = function (format) {
  	if (format === undefined) {
  		if (this.algorithm === 'md5')
  			{ format = 'hex'; }
  		else
  			{ format = 'base64'; }
  	}
  	assert_1.string(format);

  	switch (format) {
  	case 'hex':
  		return (addColons(this.hash.toString('hex')));
  	case 'base64':
  		return (sshBase64Format(this.algorithm,
  		    this.hash.toString('base64')));
  	default:
  		throw (new FingerprintFormatError$1(undefined, format));
  	}
  };

  Fingerprint.prototype.matches = function (other) {
  	assert_1.object(other, 'key or certificate');
  	if (this.type === 'key') {
  		utils$1.assertCompatible(other, key, [1, 0], 'key');
  	} else {
  		utils$1.assertCompatible(other, certificate, [1, 0],
  		    'certificate');
  	}

  	var theirHash = other.hash(this.algorithm);
  	var theirHash2 = tls.createHash(this.algorithm).
  	    update(theirHash).digest('base64');

  	if (this.hash2 === undefined)
  		{ this.hash2 = tls.createHash(this.algorithm).
  		    update(this.hash).digest('base64'); }

  	return (this.hash2 === theirHash2);
  };

  Fingerprint.parse = function (fp, options) {
  	assert_1.string(fp, 'fingerprint');

  	var alg, hash, enAlgs;
  	if (Array.isArray(options)) {
  		enAlgs = options;
  		options = {};
  	}
  	assert_1.optionalObject(options, 'options');
  	if (options === undefined)
  		{ options = {}; }
  	if (options.enAlgs !== undefined)
  		{ enAlgs = options.enAlgs; }
  	assert_1.optionalArrayOfString(enAlgs, 'algorithms');

  	var parts = fp.split(':');
  	if (parts.length == 2) {
  		alg = parts[0].toLowerCase();
  		/*JSSTYLED*/
  		var base64RE = /^[A-Za-z0-9+\/=]+$/;
  		if (!base64RE.test(parts[1]))
  			{ throw (new FingerprintFormatError$1(fp)); }
  		try {
  			hash = new Buffer(parts[1], 'base64');
  		} catch (e) {
  			throw (new FingerprintFormatError$1(fp));
  		}
  	} else if (parts.length > 2) {
  		alg = 'md5';
  		if (parts[0].toLowerCase() === 'md5')
  			{ parts = parts.slice(1); }
  		parts = parts.join('');
  		/*JSSTYLED*/
  		var md5RE = /^[a-fA-F0-9]+$/;
  		if (!md5RE.test(parts))
  			{ throw (new FingerprintFormatError$1(fp)); }
  		try {
  			hash = new Buffer(parts, 'hex');
  		} catch (e) {
  			throw (new FingerprintFormatError$1(fp));
  		}
  	}

  	if (alg === undefined)
  		{ throw (new FingerprintFormatError$1(fp)); }

  	if (algs.hashAlgs[alg] === undefined)
  		{ throw (new InvalidAlgorithmError$4(alg)); }

  	if (enAlgs !== undefined) {
  		enAlgs = enAlgs.map(function (a) { return a.toLowerCase(); });
  		if (enAlgs.indexOf(alg) === -1)
  			{ throw (new InvalidAlgorithmError$4(alg)); }
  	}

  	return (new Fingerprint({
  		algorithm: alg,
  		hash: hash,
  		type: options.type || 'key'
  	}));
  };

  function addColons(s) {
  	/*JSSTYLED*/
  	return (s.replace(/(.{2})(?=.)/g, '$1:'));
  }

  function base64Strip(s) {
  	/*JSSTYLED*/
  	return (s.replace(/=*$/, ''));
  }

  function sshBase64Format(alg, h) {
  	return (alg.toUpperCase() + ':' + base64Strip(h));
  }

  Fingerprint.isFingerprint = function (obj, ver) {
  	return (utils$1.isCompatible(obj, Fingerprint, ver));
  };

  /*
   * API versions for Fingerprint:
   * [1,0] -- initial ver
   * [1,1] -- first tagged ver
   */
  Fingerprint.prototype._sshpkApiVersion = [1, 1];

  Fingerprint._oldVersionDetect = function (obj) {
  	assert_1.func(obj.toString);
  	assert_1.func(obj.matches);
  	return ([1, 0]);
  };

  // Copyright 2017 Joyent, Inc.

  var key = Key;






  var DiffieHellman$1 = dhe.DiffieHellman;



  var edCompat$2;

  try {
  	edCompat$2 = edCompat;
  } catch (e) {
  	/* Just continue through, and bail out if we try to use it. */
  }

  var InvalidAlgorithmError$5 = errors$1.InvalidAlgorithmError;
  var KeyParseError$2 = errors$1.KeyParseError;

  var formats$2 = {};
  formats$2['auto'] = auto;
  formats$2['pem'] = pem;
  formats$2['pkcs1'] = pkcs1;
  formats$2['pkcs8'] = pkcs8;
  formats$2['rfc4253'] = rfc4253;
  formats$2['ssh'] = ssh;
  formats$2['ssh-private'] = sshPrivate;
  formats$2['openssh'] = formats$2['ssh-private'];

  function Key(opts) {
  	assert_1.object(opts, 'options');
  	assert_1.arrayOfObject(opts.parts, 'options.parts');
  	assert_1.string(opts.type, 'options.type');
  	assert_1.optionalString(opts.comment, 'options.comment');

  	var algInfo = algs.info[opts.type];
  	if (typeof (algInfo) !== 'object')
  		{ throw (new InvalidAlgorithmError$5(opts.type)); }

  	var partLookup = {};
  	for (var i = 0; i < opts.parts.length; ++i) {
  		var part = opts.parts[i];
  		partLookup[part.name] = part;
  	}

  	this.type = opts.type;
  	this.parts = opts.parts;
  	this.part = partLookup;
  	this.comment = undefined;
  	this.source = opts.source;

  	/* for speeding up hashing/fingerprint operations */
  	this._rfc4253Cache = opts._rfc4253Cache;
  	this._hashCache = {};

  	var sz;
  	this.curve = undefined;
  	if (this.type === 'ecdsa') {
  		var curve = this.part.curve.data.toString();
  		this.curve = curve;
  		sz = algs.curves[curve].size;
  	} else if (this.type === 'ed25519' || this.type === 'curve25519') {
  		sz = 256;
  		this.curve = 'curve25519';
  	} else {
  		var szPart = this.part[algInfo.sizePart];
  		sz = szPart.data.length;
  		sz = sz * 8 - utils$1.countZeros(szPart.data);
  	}
  	this.size = sz;
  }

  Key.formats = formats$2;

  Key.prototype.toBuffer = function (format, options) {
  	if (format === undefined)
  		{ format = 'ssh'; }
  	assert_1.string(format, 'format');
  	assert_1.object(formats$2[format], 'formats[format]');
  	assert_1.optionalObject(options, 'options');

  	if (format === 'rfc4253') {
  		if (this._rfc4253Cache === undefined)
  			{ this._rfc4253Cache = formats$2['rfc4253'].write(this); }
  		return (this._rfc4253Cache);
  	}

  	return (formats$2[format].write(this, options));
  };

  Key.prototype.toString = function (format, options) {
  	return (this.toBuffer(format, options).toString());
  };

  Key.prototype.hash = function (algo) {
  	assert_1.string(algo, 'algorithm');
  	algo = algo.toLowerCase();
  	if (algs.hashAlgs[algo] === undefined)
  		{ throw (new InvalidAlgorithmError$5(algo)); }

  	if (this._hashCache[algo])
  		{ return (this._hashCache[algo]); }

  	var hash = tls.createHash(algo).
  	    update(this.toBuffer('rfc4253')).digest();
  	this._hashCache[algo] = hash;
  	return (hash);
  };

  Key.prototype.fingerprint = function (algo) {
  	if (algo === undefined)
  		{ algo = 'sha256'; }
  	assert_1.string(algo, 'algorithm');
  	var opts = {
  		type: 'key',
  		hash: this.hash(algo),
  		algorithm: algo
  	};
  	return (new fingerprint(opts));
  };

  Key.prototype.defaultHashAlgorithm = function () {
  	var hashAlgo = 'sha1';
  	if (this.type === 'rsa')
  		{ hashAlgo = 'sha256'; }
  	if (this.type === 'dsa' && this.size > 1024)
  		{ hashAlgo = 'sha256'; }
  	if (this.type === 'ed25519')
  		{ hashAlgo = 'sha512'; }
  	if (this.type === 'ecdsa') {
  		if (this.size <= 256)
  			{ hashAlgo = 'sha256'; }
  		else if (this.size <= 384)
  			{ hashAlgo = 'sha384'; }
  		else
  			{ hashAlgo = 'sha512'; }
  	}
  	return (hashAlgo);
  };

  Key.prototype.createVerify = function (hashAlgo) {
  	if (hashAlgo === undefined)
  		{ hashAlgo = this.defaultHashAlgorithm(); }
  	assert_1.string(hashAlgo, 'hash algorithm');

  	/* ED25519 is not supported by OpenSSL, use a javascript impl. */
  	if (this.type === 'ed25519' && edCompat$2 !== undefined)
  		{ return (new edCompat$2.Verifier(this, hashAlgo)); }
  	if (this.type === 'curve25519')
  		{ throw (new Error('Curve25519 keys are not suitable for ' +
  		    'signing or verification')); }

  	var v, nm, err;
  	try {
  		nm = hashAlgo.toUpperCase();
  		v = tls.createVerify(nm);
  	} catch (e) {
  		err = e;
  	}
  	if (v === undefined || (err instanceof Error &&
  	    err.message.match(/Unknown message digest/))) {
  		nm = 'RSA-';
  		nm += hashAlgo.toUpperCase();
  		v = tls.createVerify(nm);
  	}
  	assert_1.ok(v, 'failed to create verifier');
  	var oldVerify = v.verify.bind(v);
  	var key = this.toBuffer('pkcs8');
  	var curve = this.curve;
  	var self = this;
  	v.verify = function (signature$$1, fmt) {
  		if (signature.isSignature(signature$$1, [2, 0])) {
  			if (signature$$1.type !== self.type)
  				{ return (false); }
  			if (signature$$1.hashAlgorithm &&
  			    signature$$1.hashAlgorithm !== hashAlgo)
  				{ return (false); }
  			if (signature$$1.curve && self.type === 'ecdsa' &&
  			    signature$$1.curve !== curve)
  				{ return (false); }
  			return (oldVerify(key, signature$$1.toBuffer('asn1')));

  		} else if (typeof (signature$$1) === 'string' ||
  		    Buffer.isBuffer(signature$$1)) {
  			return (oldVerify(key, signature$$1, fmt));

  		/*
  		 * Avoid doing this on valid arguments, walking the prototype
  		 * chain can be quite slow.
  		 */
  		} else if (signature.isSignature(signature$$1, [1, 0])) {
  			throw (new Error('signature was created by too old ' +
  			    'a version of sshpk and cannot be verified'));

  		} else {
  			throw (new TypeError('signature must be a string, ' +
  			    'Buffer, or Signature object'));
  		}
  	};
  	return (v);
  };

  Key.prototype.createDiffieHellman = function () {
  	if (this.type === 'rsa')
  		{ throw (new Error('RSA keys do not support Diffie-Hellman')); }

  	return (new DiffieHellman$1(this));
  };
  Key.prototype.createDH = Key.prototype.createDiffieHellman;

  Key.parse = function (data, format, options) {
  	if (typeof (data) !== 'string')
  		{ assert_1.buffer(data, 'data'); }
  	if (format === undefined)
  		{ format = 'auto'; }
  	assert_1.string(format, 'format');
  	if (typeof (options) === 'string')
  		{ options = { filename: options }; }
  	assert_1.optionalObject(options, 'options');
  	if (options === undefined)
  		{ options = {}; }
  	assert_1.optionalString(options.filename, 'options.filename');
  	if (options.filename === undefined)
  		{ options.filename = '(unnamed)'; }

  	assert_1.object(formats$2[format], 'formats[format]');

  	try {
  		var k = formats$2[format].read(data, options);
  		if (k instanceof privateKey)
  			{ k = k.toPublic(); }
  		if (!k.comment)
  			{ k.comment = options.filename; }
  		return (k);
  	} catch (e) {
  		if (e.name === 'KeyEncryptedError')
  			{ throw (e); }
  		throw (new KeyParseError$2(options.filename, format, e));
  	}
  };

  Key.isKey = function (obj, ver) {
  	return (utils$1.isCompatible(obj, Key, ver));
  };

  /*
   * API versions for Key:
   * [1,0] -- initial ver, may take Signature for createVerify or may not
   * [1,1] -- added pkcs1, pkcs8 formats
   * [1,2] -- added auto, ssh-private, openssh formats
   * [1,3] -- added defaultHashAlgorithm
   * [1,4] -- added ed support, createDH
   * [1,5] -- first explicitly tagged version
   */
  Key.prototype._sshpkApiVersion = [1, 5];

  Key._oldVersionDetect = function (obj) {
  	assert_1.func(obj.toBuffer);
  	assert_1.func(obj.fingerprint);
  	if (obj.createDH)
  		{ return ([1, 4]); }
  	if (obj.defaultHashAlgorithm)
  		{ return ([1, 3]); }
  	if (obj.formats['auto'])
  		{ return ([1, 2]); }
  	if (obj.formats['pkcs1'])
  		{ return ([1, 1]); }
  	return ([1, 0]);
  };

  // Copyright 2015 Joyent, Inc.









  var lib$7 = {
  	/* top-level classes */
  	Key: key,
  	parseKey: key.parse,
  	Fingerprint: fingerprint,
  	parseFingerprint: fingerprint.parse,
  	Signature: signature,
  	parseSignature: signature.parse,
  	PrivateKey: privateKey,
  	parsePrivateKey: privateKey.parse,
  	generatePrivateKey: privateKey.generate,
  	Certificate: certificate,
  	parseCertificate: certificate.parse,
  	createSelfSignedCertificate: certificate.createSelfSigned,
  	createCertificate: certificate.create,
  	Identity: identity$1,
  	identityFromDN: identity$1.parseDN,
  	identityForHost: identity$1.forHost,
  	identityForUser: identity$1.forUser,
  	identityForEmail: identity$1.forEmail,

  	/* errors */
  	FingerprintFormatError: errors$1.FingerprintFormatError,
  	InvalidAlgorithmError: errors$1.InvalidAlgorithmError,
  	KeyParseError: errors$1.KeyParseError,
  	SignatureParseError: errors$1.SignatureParseError,
  	KeyEncryptedError: errors$1.KeyEncryptedError,
  	CertificateParseError: errors$1.CertificateParseError
  };

  // Copyright 2012 Joyent, Inc.  All rights reserved.





  var HASH_ALGOS = {
    'sha1': true,
    'sha256': true,
    'sha512': true
  };

  var PK_ALGOS = {
    'rsa': true,
    'dsa': true,
    'ecdsa': true
  };

  function HttpSignatureError(message, caller) {
    if (Error.captureStackTrace)
      { Error.captureStackTrace(this, caller || HttpSignatureError); }

    this.message = message;
    this.name = caller.name;
  }
  util$2.inherits(HttpSignatureError, Error);

  function InvalidAlgorithmError$6(message) {
    HttpSignatureError.call(this, message, InvalidAlgorithmError$6);
  }
  util$2.inherits(InvalidAlgorithmError$6, HttpSignatureError);

  function validateAlgorithm(algorithm) {
    var alg = algorithm.toLowerCase().split('-');

    if (alg.length !== 2) {
      throw (new InvalidAlgorithmError$6(alg[0].toUpperCase() + ' is not a ' +
        'valid algorithm'));
    }

    if (alg[0] !== 'hmac' && !PK_ALGOS[alg[0]]) {
      throw (new InvalidAlgorithmError$6(alg[0].toUpperCase() + ' type keys ' +
        'are not supported'));
    }

    if (!HASH_ALGOS[alg[1]]) {
      throw (new InvalidAlgorithmError$6(alg[1].toUpperCase() + ' is not a ' +
        'supported hash algorithm'));
    }

    return (alg);
  }

  ///--- API

  var utils$2 = {

    HASH_ALGOS: HASH_ALGOS,
    PK_ALGOS: PK_ALGOS,

    HttpSignatureError: HttpSignatureError,
    InvalidAlgorithmError: InvalidAlgorithmError$6,

    validateAlgorithm: validateAlgorithm,

    /**
     * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.
     *
     * The intent of this module is to interoperate with OpenSSL only,
     * specifically the node crypto module's `verify` method.
     *
     * @param {String} key an OpenSSH public key.
     * @return {String} PEM encoded form of the RSA public key.
     * @throws {TypeError} on bad input.
     * @throws {Error} on invalid ssh key formatted data.
     */
    sshKeyToPEM: function sshKeyToPEM(key) {
      assert_1.string(key, 'ssh_key');

      var k = lib$7.parseKey(key, 'ssh');
      return (k.toString('pem'));
    },


    /**
     * Generates an OpenSSH fingerprint from an ssh public key.
     *
     * @param {String} key an OpenSSH public key.
     * @return {String} key fingerprint.
     * @throws {TypeError} on bad input.
     * @throws {Error} if what you passed doesn't look like an ssh public key.
     */
    fingerprint: function fingerprint(key) {
      assert_1.string(key, 'ssh_key');

      var k = lib$7.parseKey(key, 'ssh');
      return (k.fingerprint('md5').toString('hex'));
    },

    /**
     * Converts a PKGCS#8 PEM file to an OpenSSH public key (rsa)
     *
     * The reverse of the above function.
     */
    pemToRsaSSHKey: function pemToRsaSSHKey(pem, comment) {
      assert_1.equal('string', typeof (pem), 'typeof pem');

      var k = lib$7.parseKey(pem, 'pem');
      k.comment = comment;
      return (k.toString('ssh'));
    }
  };

  var HttpSignatureError$1 = utils$2.HttpSignatureError;
  var InvalidAlgorithmError$7 = utils$2.InvalidAlgorithmError;
  var validateAlgorithm$1 = utils$2.validateAlgorithm;

  var State = {
    New: 0,
    Params: 1
  };

  var ParamsState = {
    Name: 0,
    Quote: 1,
    Value: 2,
    Comma: 3
  };


  ///--- Specific Errors


  function ExpiredRequestError(message) {
    HttpSignatureError$1.call(this, message, ExpiredRequestError);
  }
  util$2.inherits(ExpiredRequestError, HttpSignatureError$1);


  function InvalidHeaderError(message) {
    HttpSignatureError$1.call(this, message, InvalidHeaderError);
  }
  util$2.inherits(InvalidHeaderError, HttpSignatureError$1);


  function InvalidParamsError(message) {
    HttpSignatureError$1.call(this, message, InvalidParamsError);
  }
  util$2.inherits(InvalidParamsError, HttpSignatureError$1);


  function MissingHeaderError(message) {
    HttpSignatureError$1.call(this, message, MissingHeaderError);
  }
  util$2.inherits(MissingHeaderError, HttpSignatureError$1);

  function StrictParsingError(message) {
    HttpSignatureError$1.call(this, message, StrictParsingError);
  }
  util$2.inherits(StrictParsingError, HttpSignatureError$1);

  ///--- Exported API

  var parser = {

    /**
     * Parses the 'Authorization' header out of an http.ServerRequest object.
     *
     * Note that this API will fully validate the Authorization header, and throw
     * on any error.  It will not however check the signature, or the keyId format
     * as those are specific to your environment.  You can use the options object
     * to pass in extra constraints.
     *
     * As a response object you can expect this:
     *
     *     {
     *       "scheme": "Signature",
     *       "params": {
     *         "keyId": "foo",
     *         "algorithm": "rsa-sha256",
     *         "headers": [
     *           "date" or "x-date",
     *           "digest"
     *         ],
     *         "signature": "base64"
     *       },
     *       "signingString": "ready to be passed to crypto.verify()"
     *     }
     *
     * @param {Object} request an http.ServerRequest.
     * @param {Object} options an optional options object with:
     *                   - clockSkew: allowed clock skew in seconds (default 300).
     *                   - headers: required header names (def: date or x-date)
     *                   - algorithms: algorithms to support (default: all).
     *                   - strict: should enforce latest spec parsing
     *                             (default: false).
     * @return {Object} parsed out object (see above).
     * @throws {TypeError} on invalid input.
     * @throws {InvalidHeaderError} on an invalid Authorization header error.
     * @throws {InvalidParamsError} if the params in the scheme are invalid.
     * @throws {MissingHeaderError} if the params indicate a header not present,
     *                              either in the request headers from the params,
     *                              or not in the params from a required header
     *                              in options.
     * @throws {StrictParsingError} if old attributes are used in strict parsing
     *                              mode.
     * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
     */
    parseRequest: function parseRequest(request, options) {
      assert_1.object(request, 'request');
      assert_1.object(request.headers, 'request.headers');
      if (options === undefined) {
        options = {};
      }
      if (options.headers === undefined) {
        options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
      }
      assert_1.object(options, 'options');
      assert_1.arrayOfString(options.headers, 'options.headers');
      assert_1.optionalFinite(options.clockSkew, 'options.clockSkew');

      var authzHeaderName = options.authorizationHeaderName || 'authorization';

      if (!request.headers[authzHeaderName]) {
        throw new MissingHeaderError('no ' + authzHeaderName + ' header ' +
                                     'present in the request');
      }

      options.clockSkew = options.clockSkew || 300;


      var i = 0;
      var state = State.New;
      var substate = ParamsState.Name;
      var tmpName = '';
      var tmpValue = '';

      var parsed = {
        scheme: '',
        params: {},
        signingString: ''
      };

      var authz = request.headers[authzHeaderName];
      for (i = 0; i < authz.length; i++) {
        var c = authz.charAt(i);

        switch (Number(state)) {

        case State.New:
          if (c !== ' ') { parsed.scheme += c; }
          else { state = State.Params; }
          break;

        case State.Params:
          switch (Number(substate)) {

          case ParamsState.Name:
            var code = c.charCodeAt(0);
            // restricted name of A-Z / a-z
            if ((code >= 0x41 && code <= 0x5a) || // A-Z
                (code >= 0x61 && code <= 0x7a)) { // a-z
              tmpName += c;
            } else if (c === '=') {
              if (tmpName.length === 0)
                { throw new InvalidHeaderError('bad param format'); }
              substate = ParamsState.Quote;
            } else {
              throw new InvalidHeaderError('bad param format');
            }
            break;

          case ParamsState.Quote:
            if (c === '"') {
              tmpValue = '';
              substate = ParamsState.Value;
            } else {
              throw new InvalidHeaderError('bad param format');
            }
            break;

          case ParamsState.Value:
            if (c === '"') {
              parsed.params[tmpName] = tmpValue;
              substate = ParamsState.Comma;
            } else {
              tmpValue += c;
            }
            break;

          case ParamsState.Comma:
            if (c === ',') {
              tmpName = '';
              substate = ParamsState.Name;
            } else {
              throw new InvalidHeaderError('bad param format');
            }
            break;

          default:
            throw new Error('Invalid substate');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }

      }

      if (!parsed.params.headers || parsed.params.headers === '') {
        if (request.headers['x-date']) {
          parsed.params.headers = ['x-date'];
        } else {
          parsed.params.headers = ['date'];
        }
      } else {
        parsed.params.headers = parsed.params.headers.split(' ');
      }

      // Minimally validate the parsed object
      if (!parsed.scheme || parsed.scheme !== 'Signature')
        { throw new InvalidHeaderError('scheme was not "Signature"'); }

      if (!parsed.params.keyId)
        { throw new InvalidHeaderError('keyId was not specified'); }

      if (!parsed.params.algorithm)
        { throw new InvalidHeaderError('algorithm was not specified'); }

      if (!parsed.params.signature)
        { throw new InvalidHeaderError('signature was not specified'); }

      // Check the algorithm against the official list
      parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
      try {
        validateAlgorithm$1(parsed.params.algorithm);
      } catch (e) {
        if (e instanceof InvalidAlgorithmError$7)
          { throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +
            'supported')); }
        else
          { throw (e); }
      }

      // Build the signingString
      for (i = 0; i < parsed.params.headers.length; i++) {
        var h = parsed.params.headers[i].toLowerCase();
        parsed.params.headers[i] = h;

        if (h === 'request-line') {
          if (!options.strict) {
            /*
             * We allow headers from the older spec drafts if strict parsing isn't
             * specified in options.
             */
            parsed.signingString +=
              request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
          } else {
            /* Strict parsing doesn't allow older draft headers. */
            throw (new StrictParsingError('request-line is not a valid header ' +
              'with strict parsing enabled.'));
          }
        } else if (h === '(request-target)') {
          parsed.signingString +=
            '(request-target): ' + request.method.toLowerCase() + ' ' +
            request.url;
        } else {
          var value = request.headers[h];
          if (value === undefined)
            { throw new MissingHeaderError(h + ' was not in the request'); }
          parsed.signingString += h + ': ' + value;
        }

        if ((i + 1) < parsed.params.headers.length)
          { parsed.signingString += '\n'; }
      }

      // Check against the constraints
      var date;
      if (request.headers.date || request.headers['x-date']) {
          if (request.headers['x-date']) {
            date = new Date(request.headers['x-date']);
          } else {
            date = new Date(request.headers.date);
          }
        var now = new Date();
        var skew = Math.abs(now.getTime() - date.getTime());

        if (skew > options.clockSkew * 1000) {
          throw new ExpiredRequestError('clock skew of ' +
                                        (skew / 1000) +
                                        's was greater than ' +
                                        options.clockSkew + 's');
        }
      }

      options.headers.forEach(function (hdr) {
        // Remember that we already checked any headers in the params
        // were in the request, so if this passes we're good.
        if (parsed.params.headers.indexOf(hdr.toLowerCase()) < 0)
          { throw new MissingHeaderError(hdr + ' was not a signed header'); }
      });

      if (options.algorithms) {
        if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
          { throw new InvalidParamsError(parsed.params.algorithm +
                                       ' is not a supported algorithm'); }
      }

      parsed.algorithm = parsed.params.algorithm.toUpperCase();
      parsed.keyId = parsed.params.keyId;
      return parsed;
    }

  };

  /*
   * extsprintf.js: extended POSIX-style sprintf
   */




  /*
   * Public interface
   */
  var sprintf = jsSprintf;
  var printf = jsPrintf;
  var fprintf = jsFprintf;

  /*
   * Stripped down version of s[n]printf(3c).  We make a best effort to throw an
   * exception when given a format string we don't understand, rather than
   * ignoring it, so that we won't break existing programs if/when we go implement
   * the rest of this.
   *
   * This implementation currently supports specifying
   *	- field alignment ('-' flag),
   * 	- zero-pad ('0' flag)
   *	- always show numeric sign ('+' flag),
   *	- field width
   *	- conversions for strings, decimal integers, and floats (numbers).
   *	- argument size specifiers.  These are all accepted but ignored, since
   *	  Javascript has no notion of the physical size of an argument.
   *
   * Everything else is currently unsupported, most notably precision, unsigned
   * numbers, non-decimal numbers, and characters.
   */
  function jsSprintf(fmt)
  {
  	var regex = [
  	    '([^%]*)',				/* normal text */
  	    '%',				/* start of format */
  	    '([\'\\-+ #0]*?)',			/* flags (optional) */
  	    '([1-9]\\d*)?',			/* width (optional) */
  	    '(\\.([1-9]\\d*))?',		/* precision (optional) */
  	    '[lhjztL]*?',			/* length mods (ignored) */
  	    '([diouxXfFeEgGaAcCsSp%jr])'	/* conversion */
  	].join('');

  	var re = new RegExp(regex);
  	var args = Array.prototype.slice.call(arguments, 1);
  	var flags, width, precision, conversion;
  	var left, pad, sign, arg, match;
  	var ret = '';
  	var argn = 1;

  	assert$4.equal('string', typeof (fmt));

  	while ((match = re.exec(fmt)) !== null) {
  		ret += match[1];
  		fmt = fmt.substring(match[0].length);

  		flags = match[2] || '';
  		width = match[3] || 0;
  		precision = match[4] || '';
  		conversion = match[6];
  		left = false;
  		sign = false;
  		pad = ' ';

  		if (conversion == '%') {
  			ret += '%';
  			continue;
  		}

  		if (args.length === 0)
  			{ throw (new Error('too few args to sprintf')); }

  		arg = args.shift();
  		argn++;

  		if (flags.match(/[\' #]/))
  			{ throw (new Error(
  			    'unsupported flags: ' + flags)); }

  		if (precision.length > 0)
  			{ throw (new Error(
  			    'non-zero precision not supported')); }

  		if (flags.match(/-/))
  			{ left = true; }

  		if (flags.match(/0/))
  			{ pad = '0'; }

  		if (flags.match(/\+/))
  			{ sign = true; }

  		switch (conversion) {
  		case 's':
  			if (arg === undefined || arg === null)
  				{ throw (new Error('argument ' + argn +
  				    ': attempted to print undefined or null ' +
  				    'as a string')); }
  			ret += doPad(pad, width, left, arg.toString());
  			break;

  		case 'd':
  			arg = Math.floor(arg);
  			/*jsl:fallthru*/
  		case 'f':
  			sign = sign && arg > 0 ? '+' : '';
  			ret += sign + doPad(pad, width, left,
  			    arg.toString());
  			break;

  		case 'x':
  			ret += doPad(pad, width, left, arg.toString(16));
  			break;

  		case 'j': /* non-standard */
  			if (width === 0)
  				{ width = 10; }
  			ret += util$2.inspect(arg, false, width);
  			break;

  		case 'r': /* non-standard */
  			ret += dumpException(arg);
  			break;

  		default:
  			throw (new Error('unsupported conversion: ' +
  			    conversion));
  		}
  	}

  	ret += fmt;
  	return (ret);
  }

  function jsPrintf() {
  	var args = Array.prototype.slice.call(arguments);
  	args.unshift(process.stdout);
  	jsFprintf.apply(null, args);
  }

  function jsFprintf(stream) {
  	var args = Array.prototype.slice.call(arguments, 1);
  	return (stream.write(jsSprintf.apply(this, args)));
  }

  function doPad(chr, width, left, str)
  {
  	var ret = str;

  	while (ret.length < width) {
  		if (left)
  			{ ret += chr; }
  		else
  			{ ret = chr + ret; }
  	}

  	return (ret);
  }

  /*
   * This function dumps long stack traces for exceptions having a cause() method.
   * See node-verror for an example.
   */
  function dumpException(ex)
  {
  	var ret;

  	if (!(ex instanceof Error))
  		{ throw (new Error(jsSprintf('invalid type for %%r: %j', ex))); }

  	/* Note that V8 prepends "ex.stack" with ex.toString(). */
  	ret = 'EXCEPTION: ' + ex.constructor.name + ': ' + ex.stack;

  	if (ex.cause && typeof (ex.cause) === 'function') {
  		var cex = ex.cause();
  		if (cex) {
  			ret += '\nCaused by: ' + dumpException(cex);
  		}
  	}

  	return (ret);
  }

  var extsprintf = {
  	sprintf: sprintf,
  	printf: printf,
  	fprintf: fprintf
  };

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.

  function isArray$4(arg) {
    if (Array.isArray) {
      return Array.isArray(arg);
    }
    return objectToString$1(arg) === '[object Array]';
  }
  var isArray_1 = isArray$4;

  function isBoolean$1(arg) {
    return typeof arg === 'boolean';
  }
  var isBoolean_1 = isBoolean$1;

  function isNull$1(arg) {
    return arg === null;
  }
  var isNull_1 = isNull$1;

  function isNullOrUndefined$1(arg) {
    return arg == null;
  }
  var isNullOrUndefined_1 = isNullOrUndefined$1;

  function isNumber$1(arg) {
    return typeof arg === 'number';
  }
  var isNumber_1 = isNumber$1;

  function isString$1(arg) {
    return typeof arg === 'string';
  }
  var isString_1 = isString$1;

  function isSymbol$1(arg) {
    return typeof arg === 'symbol';
  }
  var isSymbol_1 = isSymbol$1;

  function isUndefined$1(arg) {
    return arg === void 0;
  }
  var isUndefined_1 = isUndefined$1;

  function isRegExp$2(re) {
    return objectToString$1(re) === '[object RegExp]';
  }
  var isRegExp_1 = isRegExp$2;

  function isObject$3(arg) {
    return typeof arg === 'object' && arg !== null;
  }
  var isObject_1 = isObject$3;

  function isDate$1(d) {
    return objectToString$1(d) === '[object Date]';
  }
  var isDate_1 = isDate$1;

  function isError$1(e) {
    return (objectToString$1(e) === '[object Error]' || e instanceof Error);
  }
  var isError_1 = isError$1;

  function isFunction$2(arg) {
    return typeof arg === 'function';
  }
  var isFunction_1 = isFunction$2;

  function isPrimitive$2(arg) {
    return arg === null ||
           typeof arg === 'boolean' ||
           typeof arg === 'number' ||
           typeof arg === 'string' ||
           typeof arg === 'symbol' ||  // ES6 symbol
           typeof arg === 'undefined';
  }
  var isPrimitive_1 = isPrimitive$2;

  var isBuffer$2 = Buffer.isBuffer;

  function objectToString$1(o) {
    return Object.prototype.toString.call(o);
  }

  var util$3 = {
  	isArray: isArray_1,
  	isBoolean: isBoolean_1,
  	isNull: isNull_1,
  	isNullOrUndefined: isNullOrUndefined_1,
  	isNumber: isNumber_1,
  	isString: isString_1,
  	isSymbol: isSymbol_1,
  	isUndefined: isUndefined_1,
  	isRegExp: isRegExp_1,
  	isObject: isObject_1,
  	isDate: isDate_1,
  	isError: isError_1,
  	isFunction: isFunction_1,
  	isPrimitive: isPrimitive_1,
  	isBuffer: isBuffer$2
  };

  /*
   * verror.js: richer JavaScript errors
   */





  var mod_isError = util$3.isError;
  var sprintf$1 = extsprintf.sprintf;

  /*
   * Public interface
   */

  /* So you can 'var VError = require('verror')' */
  var verror = VError;
  /* For compatibility */
  VError.VError = VError;
  /* Other exported classes */
  VError.SError = SError;
  VError.WError = WError;
  VError.MultiError = MultiError;

  /*
   * Common function used to parse constructor arguments for VError, WError, and
   * SError.  Named arguments to this function:
   *
   *     strict		force strict interpretation of sprintf arguments, even
   *     			if the options in "argv" don't say so
   *
   *     argv		error's constructor arguments, which are to be
   *     			interpreted as described in README.md.  For quick
   *     			reference, "argv" has one of the following forms:
   *
   *          [ sprintf_args... ]           (argv[0] is a string)
   *          [ cause, sprintf_args... ]    (argv[0] is an Error)
   *          [ options, sprintf_args... ]  (argv[0] is an object)
   *
   * This function normalizes these forms, producing an object with the following
   * properties:
   *
   *    options           equivalent to "options" in third form.  This will never
   *    			be a direct reference to what the caller passed in
   *    			(i.e., it may be a shallow copy), so it can be freely
   *    			modified.
   *
   *    shortmessage      result of sprintf(sprintf_args), taking options.strict
   *    			into account as described in README.md.
   */
  function parseConstructorArguments(args)
  {
  	var argv, options, sprintf_args, shortmessage, k;

  	assert_1.object(args, 'args');
  	assert_1.bool(args.strict, 'args.strict');
  	assert_1.array(args.argv, 'args.argv');
  	argv = args.argv;

  	/*
  	 * First, figure out which form of invocation we've been given.
  	 */
  	if (argv.length === 0) {
  		options = {};
  		sprintf_args = [];
  	} else if (mod_isError(argv[0])) {
  		options = { 'cause': argv[0] };
  		sprintf_args = argv.slice(1);
  	} else if (typeof (argv[0]) === 'object') {
  		options = {};
  		for (k in argv[0]) {
  			options[k] = argv[0][k];
  		}
  		sprintf_args = argv.slice(1);
  	} else {
  		assert_1.string(argv[0],
  		    'first argument to VError, SError, or WError ' +
  		    'constructor must be a string, object, or Error');
  		options = {};
  		sprintf_args = argv;
  	}

  	/*
  	 * Now construct the error's message.
  	 *
  	 * extsprintf (which we invoke here with our caller's arguments in order
  	 * to construct this Error's message) is strict in its interpretation of
  	 * values to be processed by the "%s" specifier.  The value passed to
  	 * extsprintf must actually be a string or something convertible to a
  	 * String using .toString().  Passing other values (notably "null" and
  	 * "undefined") is considered a programmer error.  The assumption is
  	 * that if you actually want to print the string "null" or "undefined",
  	 * then that's easy to do that when you're calling extsprintf; on the
  	 * other hand, if you did NOT want that (i.e., there's actually a bug
  	 * where the program assumes some variable is non-null and tries to
  	 * print it, which might happen when constructing a packet or file in
  	 * some specific format), then it's better to stop immediately than
  	 * produce bogus output.
  	 *
  	 * However, sometimes the bug is only in the code calling VError, and a
  	 * programmer might prefer to have the error message contain "null" or
  	 * "undefined" rather than have the bug in the error path crash the
  	 * program (making the first bug harder to identify).  For that reason,
  	 * by default VError converts "null" or "undefined" arguments to their
  	 * string representations and passes those to extsprintf.  Programmers
  	 * desiring the strict behavior can use the SError class or pass the
  	 * "strict" option to the VError constructor.
  	 */
  	assert_1.object(options);
  	if (!options.strict && !args.strict) {
  		sprintf_args = sprintf_args.map(function (a) {
  			return (a === null ? 'null' :
  			    a === undefined ? 'undefined' : a);
  		});
  	}

  	if (sprintf_args.length === 0) {
  		shortmessage = '';
  	} else {
  		shortmessage = sprintf$1.apply(null, sprintf_args);
  	}

  	return ({
  	    'options': options,
  	    'shortmessage': shortmessage
  	});
  }

  /*
   * See README.md for reference documentation.
   */
  function VError()
  {
  	var this$1 = this;

  	var args, obj, parsed, cause, ctor, message, k;

  	args = Array.prototype.slice.call(arguments, 0);

  	/*
  	 * This is a regrettable pattern, but JavaScript's built-in Error class
  	 * is defined to work this way, so we allow the constructor to be called
  	 * without "new".
  	 */
  	if (!(this instanceof VError)) {
  		obj = Object.create(VError.prototype);
  		VError.apply(obj, arguments);
  		return (obj);
  	}

  	/*
  	 * For convenience and backwards compatibility, we support several
  	 * different calling forms.  Normalize them here.
  	 */
  	parsed = parseConstructorArguments({
  	    'argv': args,
  	    'strict': false
  	});

  	/*
  	 * If we've been given a name, apply it now.
  	 */
  	if (parsed.options.name) {
  		assert_1.string(parsed.options.name,
  		    'error\'s "name" must be a string');
  		this.name = parsed.options.name;
  	}

  	/*
  	 * For debugging, we keep track of the original short message (attached
  	 * this Error particularly) separately from the complete message (which
  	 * includes the messages of our cause chain).
  	 */
  	this.jse_shortmsg = parsed.shortmessage;
  	message = parsed.shortmessage;

  	/*
  	 * If we've been given a cause, record a reference to it and update our
  	 * message appropriately.
  	 */
  	cause = parsed.options.cause;
  	if (cause) {
  		assert_1.ok(mod_isError(cause), 'cause is not an Error');
  		this.jse_cause = cause;

  		if (!parsed.options.skipCauseMessage) {
  			message += ': ' + cause.message;
  		}
  	}

  	/*
  	 * If we've been given an object with properties, shallow-copy that
  	 * here.  We don't want to use a deep copy in case there are non-plain
  	 * objects here, but we don't want to use the original object in case
  	 * the caller modifies it later.
  	 */
  	this.jse_info = {};
  	if (parsed.options.info) {
  		for (k in parsed.options.info) {
  			this$1.jse_info[k] = parsed.options.info[k];
  		}
  	}

  	this.message = message;
  	Error.call(this, message);

  	if (Error.captureStackTrace) {
  		ctor = parsed.options.constructorOpt || this.constructor;
  		Error.captureStackTrace(this, ctor);
  	}

  	return (this);
  }

  util$2.inherits(VError, Error);
  VError.prototype.name = 'VError';

  VError.prototype.toString = function ve_toString()
  {
  	var str = (this.hasOwnProperty('name') && this.name ||
  		this.constructor.name || this.constructor.prototype.name);
  	if (this.message)
  		{ str += ': ' + this.message; }

  	return (str);
  };

  /*
   * This method is provided for compatibility.  New callers should use
   * VError.cause() instead.  That method also uses the saner `null` return value
   * when there is no cause.
   */
  VError.prototype.cause = function ve_cause()
  {
  	var cause = VError.cause(this);
  	return (cause === null ? undefined : cause);
  };

  /*
   * Static methods
   *
   * These class-level methods are provided so that callers can use them on
   * instances of Errors that are not VErrors.  New interfaces should be provided
   * only using static methods to eliminate the class of programming mistake where
   * people fail to check whether the Error object has the corresponding methods.
   */

  VError.cause = function (err)
  {
  	assert_1.ok(mod_isError(err), 'err must be an Error');
  	return (mod_isError(err.jse_cause) ? err.jse_cause : null);
  };

  VError.info = function (err)
  {
  	var rv, cause, k;

  	assert_1.ok(mod_isError(err), 'err must be an Error');
  	cause = VError.cause(err);
  	if (cause !== null) {
  		rv = VError.info(cause);
  	} else {
  		rv = {};
  	}

  	if (typeof (err.jse_info) == 'object' && err.jse_info !== null) {
  		for (k in err.jse_info) {
  			rv[k] = err.jse_info[k];
  		}
  	}

  	return (rv);
  };

  VError.findCauseByName = function (err, name)
  {
  	var cause;

  	assert_1.ok(mod_isError(err), 'err must be an Error');
  	assert_1.string(name, 'name');
  	assert_1.ok(name.length > 0, 'name cannot be empty');

  	for (cause = err; cause !== null; cause = VError.cause(cause)) {
  		assert_1.ok(mod_isError(cause));
  		if (cause.name == name) {
  			return (cause);
  		}
  	}

  	return (null);
  };

  VError.hasCauseWithName = function (err, name)
  {
  	return (VError.findCauseByName(err, name) !== null);
  };

  VError.fullStack = function (err)
  {
  	assert_1.ok(mod_isError(err), 'err must be an Error');

  	var cause = VError.cause(err);

  	if (cause) {
  		return (err.stack + '\ncaused by: ' + VError.fullStack(cause));
  	}

  	return (err.stack);
  };

  VError.errorFromList = function (errors)
  {
  	assert_1.arrayOfObject(errors, 'errors');

  	if (errors.length === 0) {
  		return (null);
  	}

  	errors.forEach(function (e) {
  		assert_1.ok(mod_isError(e));
  	});

  	if (errors.length == 1) {
  		return (errors[0]);
  	}

  	return (new MultiError(errors));
  };

  VError.errorForEach = function (err, func)
  {
  	assert_1.ok(mod_isError(err), 'err must be an Error');
  	assert_1.func(func, 'func');

  	if (err instanceof MultiError) {
  		err.errors().forEach(function iterError(e) { func(e); });
  	} else {
  		func(err);
  	}
  };


  /*
   * SError is like VError, but stricter about types.  You cannot pass "null" or
   * "undefined" as string arguments to the formatter.
   */
  function SError()
  {
  	var args, obj, parsed, options;

  	args = Array.prototype.slice.call(arguments, 0);
  	if (!(this instanceof SError)) {
  		obj = Object.create(SError.prototype);
  		SError.apply(obj, arguments);
  		return (obj);
  	}

  	parsed = parseConstructorArguments({
  	    'argv': args,
  	    'strict': true
  	});

  	options = parsed.options;
  	VError.call(this, options, '%s', parsed.shortmessage);

  	return (this);
  }

  /*
   * We don't bother setting SError.prototype.name because once constructed,
   * SErrors are just like VErrors.
   */
  util$2.inherits(SError, VError);


  /*
   * Represents a collection of errors for the purpose of consumers that generally
   * only deal with one error.  Callers can extract the individual errors
   * contained in this object, but may also just treat it as a normal single
   * error, in which case a summary message will be printed.
   */
  function MultiError(errors)
  {
  	assert_1.array(errors, 'list of errors');
  	assert_1.ok(errors.length > 0, 'must be at least one error');
  	this.ase_errors = errors;

  	VError.call(this, {
  	    'cause': errors[0]
  	}, 'first of %d error%s', errors.length, errors.length == 1 ? '' : 's');
  }

  util$2.inherits(MultiError, VError);
  MultiError.prototype.name = 'MultiError';

  MultiError.prototype.errors = function me_errors()
  {
  	return (this.ase_errors.slice(0));
  };


  /*
   * See README.md for reference details.
   */
  function WError()
  {
  	var args, obj, parsed, options;

  	args = Array.prototype.slice.call(arguments, 0);
  	if (!(this instanceof WError)) {
  		obj = Object.create(WError.prototype);
  		WError.apply(obj, args);
  		return (obj);
  	}

  	parsed = parseConstructorArguments({
  	    'argv': args,
  	    'strict': false
  	});

  	options = parsed.options;
  	options['skipCauseMessage'] = true;
  	VError.call(this, options, '%s', parsed.shortmessage);

  	return (this);
  }

  util$2.inherits(WError, VError);
  WError.prototype.name = 'WError';

  WError.prototype.toString = function we_toString()
  {
  	var str = (this.hasOwnProperty('name') && this.name ||
  		this.constructor.name || this.constructor.prototype.name);
  	if (this.message)
  		{ str += ': ' + this.message; }
  	if (this.jse_cause && this.jse_cause.message)
  		{ str += '; caused by ' + this.jse_cause.toString(); }

  	return (str);
  };

  /*
   * For purely historical reasons, WError's cause() function allows you to set
   * the cause.
   */
  WError.prototype.cause = function we_cause(c)
  {
  	if (mod_isError(c))
  		{ this.jse_cause = c; }

  	return (this.jse_cause);
  };

  var validate = createCommonjsModule(function (module) {
  /**
   * JSONSchema Validator - Validates JavaScript objects using JSON Schemas
   *	(http://www.json.com/json-schema-proposal/)
   *
   * Copyright (c) 2007 Kris Zyp SitePen (www.sitepen.com)
   * Licensed under the MIT (MIT-LICENSE.txt) license.
  To use the validator call the validate function with an instance object and an optional schema object.
  If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),
  that schema will be used to validate and the schema parameter is not necessary (if both exist,
  both validations will occur).
  The validate method will return an array of validation errors. If there are no errors, then an
  empty list will be returned. A validation error will have two properties:
  "property" which indicates which property had the error
  "message" which indicates what the error was
   */
  (function (root, factory) {
      if (typeof undefined === 'function' && undefined.amd) {
          // AMD. Register as an anonymous module.
          undefined([], function () {
              return factory();
          });
      } else if ('object' === 'object' && module.exports) {
          // Node. Does not work with strict CommonJS, but
          // only CommonJS-like environments that support module.exports,
          // like Node.
          module.exports = factory();
      } else {
          // Browser globals
          root.jsonSchema = factory();
      }
  }(commonjsGlobal, function () {// setup primitive classes to be JSON Schema types
  var exports = validate;
  exports.Integer = {type:"integer"};
  var primitiveConstructors = {
  	String: String,
  	Boolean: Boolean,
  	Number: Number,
  	Object: Object,
  	Array: Array,
  	Date: Date
  };
  exports.validate = validate;
  function validate(/*Any*/instance,/*Object*/schema) {
  		// Summary:
  		//  	To use the validator call JSONSchema.validate with an instance object and an optional schema object.
  		// 		If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),
  		// 		that schema will be used to validate and the schema parameter is not necessary (if both exist,
  		// 		both validations will occur).
  		// 		The validate method will return an object with two properties:
  		// 			valid: A boolean indicating if the instance is valid by the schema
  		// 			errors: An array of validation errors. If there are no errors, then an
  		// 					empty list will be returned. A validation error will have two properties:
  		// 						property: which indicates which property had the error
  		// 						message: which indicates what the error was
  		//
  		return validate(instance, schema, {changing: false});//, coerce: false, existingOnly: false});
  	}exports.checkPropertyChange = function(/*Any*/value,/*Object*/schema, /*String*/property) {
  		// Summary:
  		// 		The checkPropertyChange method will check to see if an value can legally be in property with the given schema
  		// 		This is slightly different than the validate method in that it will fail if the schema is readonly and it will
  		// 		not check for self-validation, it is assumed that the passed in value is already internally valid.
  		// 		The checkPropertyChange method will return the same object type as validate, see JSONSchema.validate for
  		// 		information.
  		//
  		return validate(value, schema, {changing: property || "property"});
  	};
  var validate = exports._validate = function(/*Any*/instance,/*Object*/schema,/*Object*/options) {

  	if (!options) { options = {}; }
  	var _changing = options.changing;

  	function getType(schema){
  		return schema.type || (primitiveConstructors[schema.name] == schema && schema.name.toLowerCase());
  	}
  	var errors = [];
  	// validate a value against a property definition
  	function checkProp(value, schema, path,i){

  		var l;
  		path += path ? typeof i == 'number' ? '[' + i + ']' : typeof i == 'undefined' ? '' : '.' + i : i;
  		function addError(message){
  			errors.push({property:path,message:message});
  		}

  		if((typeof schema != 'object' || schema instanceof Array) && (path || typeof schema != 'function') && !(schema && getType(schema))){
  			if(typeof schema == 'function'){
  				if(!(value instanceof schema)){
  					addError("is not an instance of the class/constructor " + schema.name);
  				}
  			}else if(schema){
  				addError("Invalid schema/property definition " + schema);
  			}
  			return null;
  		}
  		if(_changing && schema.readonly){
  			addError("is a readonly field, it can not be changed");
  		}
  		if(schema['extends']){ // if it extends another schema, it must pass that schema as well
  			checkProp(value,schema['extends'],path,i);
  		}
  		// validate a value against a type definition
  		function checkType(type,value){
  			if(type){
  				if(typeof type == 'string' && type != 'any' &&
  						(type == 'null' ? value !== null : typeof value != type) &&
  						!(value instanceof Array && type == 'array') &&
  						!(value instanceof Date && type == 'date') &&
  						!(type == 'integer' && value%1===0)){
  					return [{property:path,message:(typeof value) + " value found, but a " + type + " is required"}];
  				}
  				if(type instanceof Array){
  					var unionErrors=[];
  					for(var j = 0; j < type.length; j++){ // a union type
  						if(!(unionErrors=checkType(type[j],value)).length){
  							break;
  						}
  					}
  					if(unionErrors.length){
  						return unionErrors;
  					}
  				}else if(typeof type == 'object'){
  					var priorErrors = errors;
  					errors = [];
  					checkProp(value,type,path);
  					var theseErrors = errors;
  					errors = priorErrors;
  					return theseErrors;
  				}
  			}
  			return [];
  		}
  		if(value === undefined){
  			if(schema.required){
  				addError("is missing and it is required");
  			}
  		}else{
  			errors = errors.concat(checkType(getType(schema),value));
  			if(schema.disallow && !checkType(schema.disallow,value).length){
  				addError(" disallowed value was matched");
  			}
  			if(value !== null){
  				if(value instanceof Array){
  					if(schema.items){
  						var itemsIsArray = schema.items instanceof Array;
  						var propDef = schema.items;
  						for (i = 0, l = value.length; i < l; i += 1) {
  							if (itemsIsArray)
  								{ propDef = schema.items[i]; }
  							if (options.coerce)
  								{ value[i] = options.coerce(value[i], propDef); }
  							errors.concat(checkProp(value[i],propDef,path,i));
  						}
  					}
  					if(schema.minItems && value.length < schema.minItems){
  						addError("There must be a minimum of " + schema.minItems + " in the array");
  					}
  					if(schema.maxItems && value.length > schema.maxItems){
  						addError("There must be a maximum of " + schema.maxItems + " in the array");
  					}
  				}else if(schema.properties || schema.additionalProperties){
  					errors.concat(checkObj(value, schema.properties, path, schema.additionalProperties));
  				}
  				if(schema.pattern && typeof value == 'string' && !value.match(schema.pattern)){
  					addError("does not match the regex pattern " + schema.pattern);
  				}
  				if(schema.maxLength && typeof value == 'string' && value.length > schema.maxLength){
  					addError("may only be " + schema.maxLength + " characters long");
  				}
  				if(schema.minLength && typeof value == 'string' && value.length < schema.minLength){
  					addError("must be at least " + schema.minLength + " characters long");
  				}
  				if(typeof schema.minimum !== undefined && typeof value == typeof schema.minimum &&
  						schema.minimum > value){
  					addError("must have a minimum value of " + schema.minimum);
  				}
  				if(typeof schema.maximum !== undefined && typeof value == typeof schema.maximum &&
  						schema.maximum < value){
  					addError("must have a maximum value of " + schema.maximum);
  				}
  				if(schema['enum']){
  					var enumer = schema['enum'];
  					l = enumer.length;
  					var found;
  					for(var j = 0; j < l; j++){
  						if(enumer[j]===value){
  							found=1;
  							break;
  						}
  					}
  					if(!found){
  						addError("does not have a value in the enumeration " + enumer.join(", "));
  					}
  				}
  				if(typeof schema.maxDecimal == 'number' &&
  					(value.toString().match(new RegExp("\\.[0-9]{" + (schema.maxDecimal + 1) + ",}")))){
  					addError("may only have " + schema.maxDecimal + " digits of decimal places");
  				}
  			}
  		}
  		return null;
  	}
  	// validate an object against a schema
  	function checkObj(instance,objTypeDef,path,additionalProp){

  		if(typeof objTypeDef =='object'){
  			if(typeof instance != 'object' || instance instanceof Array){
  				errors.push({property:path,message:"an object is required"});
  			}
  			
  			for(var i in objTypeDef){ 
  				if(objTypeDef.hasOwnProperty(i)){
  					var value = instance[i];
  					// skip _not_ specified properties
  					if (value === undefined && options.existingOnly) { continue; }
  					var propDef = objTypeDef[i];
  					// set default
  					if(value === undefined && propDef["default"]){
  						value = instance[i] = propDef["default"];
  					}
  					if(options.coerce && i in instance){
  						value = instance[i] = options.coerce(value, propDef);
  					}
  					checkProp(value,propDef,path,i);
  				}
  			}
  		}
  		for(i in instance){
  			if(instance.hasOwnProperty(i) && !(i.charAt(0) == '_' && i.charAt(1) == '_') && objTypeDef && !objTypeDef[i] && additionalProp===false){
  				if (options.filter) {
  					delete instance[i];
  					continue;
  				} else {
  					errors.push({property:path,message:(typeof value) + "The property " + i +
  						" is not defined in the schema and the schema does not allow additional properties"});
  				}
  			}
  			var requires = objTypeDef && objTypeDef[i] && objTypeDef[i].requires;
  			if(requires && !(requires in instance)){
  				errors.push({property:path,message:"the presence of the property " + i + " requires that " + requires + " also be present"});
  			}
  			value = instance[i];
  			if(additionalProp && (!(objTypeDef && typeof objTypeDef == 'object') || !(i in objTypeDef))){
  				if(options.coerce){
  					value = instance[i] = options.coerce(value, additionalProp);
  				}
  				checkProp(value,additionalProp,path,i);
  			}
  			if(!_changing && value && value.$schema){
  				errors = errors.concat(checkProp(value,value.$schema,path,i));
  			}
  		}
  		return errors;
  	}
  	if(schema){
  		checkProp(instance,schema,'',_changing || '');
  	}
  	if(!_changing && instance && instance.$schema){
  		checkProp(instance,instance.$schema,'','');
  	}
  	return {valid:!errors.length,errors:errors};
  };
  exports.mustBeValid = function(result){
  	//	summary:
  	//		This checks to ensure that the result is valid and will throw an appropriate error message if it is not
  	// result: the result returned from checkPropertyChange or validate
  	if(!result.valid){
  		throw new TypeError(result.errors.map(function(error){return "for property " + error.property + ': ' + error.message;}).join(", \n"));
  	}
  };

  return exports;
  }));
  });

  /*
   * lib/jsprim.js: utilities for primitive JavaScript types
   */








  /*
   * Public interface
   */
  var deepCopy_1 = deepCopy;
  var deepEqual_1 = deepEqual$1;
  var isEmpty_1 = isEmpty;
  var hasKey_1 = hasKey;
  var forEachKey_1 = forEachKey;
  var pluck_1 = pluck;
  var flattenObject_1 = flattenObject;
  var flattenIter_1 = flattenIter;
  var validateJsonObject = validateJsonObjectJS;
  var validateJsonObjectJS_1 = validateJsonObjectJS;
  var randElt_1 = randElt;
  var extraProperties_1 = extraProperties;
  var mergeObjects_1 = mergeObjects;

  var startsWith_1 = startsWith;
  var endsWith_1 = endsWith;

  var parseInteger_1 = parseInteger;

  var iso8601_1 = iso8601;
  var rfc1123_1 = rfc1123;
  var parseDateTime_1 = parseDateTime;

  var hrtimediff = hrtimeDiff;
  var hrtimeDiff_1 = hrtimeDiff;
  var hrtimeAccum_1 = hrtimeAccum;
  var hrtimeAdd_1 = hrtimeAdd;
  var hrtimeNanosec_1 = hrtimeNanosec;
  var hrtimeMicrosec_1 = hrtimeMicrosec;
  var hrtimeMillisec_1 = hrtimeMillisec;


  /*
   * Deep copy an acyclic *basic* Javascript object.  This only handles basic
   * scalars (strings, numbers, booleans) and arbitrarily deep arrays and objects
   * containing these.  This does *not* handle instances of other classes.
   */
  function deepCopy(obj)
  {
  	var ret, key;
  	var marker = '__deepCopy';

  	if (obj && obj[marker])
  		{ throw (new Error('attempted deep copy of cyclic object')); }

  	if (obj && obj.constructor == Object) {
  		ret = {};
  		obj[marker] = true;

  		for (key in obj) {
  			if (key == marker)
  				{ continue; }

  			ret[key] = deepCopy(obj[key]);
  		}

  		delete (obj[marker]);
  		return (ret);
  	}

  	if (obj && obj.constructor == Array) {
  		ret = [];
  		obj[marker] = true;

  		for (key = 0; key < obj.length; key++)
  			{ ret.push(deepCopy(obj[key])); }

  		delete (obj[marker]);
  		return (ret);
  	}

  	/*
  	 * It must be a primitive type -- just return it.
  	 */
  	return (obj);
  }

  function deepEqual$1(obj1, obj2)
  {
  	if (typeof (obj1) != typeof (obj2))
  		{ return (false); }

  	if (obj1 === null || obj2 === null || typeof (obj1) != 'object')
  		{ return (obj1 === obj2); }

  	if (obj1.constructor != obj2.constructor)
  		{ return (false); }

  	var k;
  	for (k in obj1) {
  		if (!obj2.hasOwnProperty(k))
  			{ return (false); }

  		if (!deepEqual$1(obj1[k], obj2[k]))
  			{ return (false); }
  	}

  	for (k in obj2) {
  		if (!obj1.hasOwnProperty(k))
  			{ return (false); }
  	}

  	return (true);
  }

  function isEmpty(obj)
  {
  	var key;
  	for (key in obj)
  		{ return (false); }
  	return (true);
  }

  function hasKey(obj, key)
  {
  	assert_1.equal(typeof (key), 'string');
  	return (Object.prototype.hasOwnProperty.call(obj, key));
  }

  function forEachKey(obj, callback)
  {
  	for (var key in obj) {
  		if (hasKey(obj, key)) {
  			callback(key, obj[key]);
  		}
  	}
  }

  function pluck(obj, key)
  {
  	assert_1.equal(typeof (key), 'string');
  	return (pluckv(obj, key));
  }

  function pluckv(obj, key)
  {
  	if (obj === null || typeof (obj) !== 'object')
  		{ return (undefined); }

  	if (obj.hasOwnProperty(key))
  		{ return (obj[key]); }

  	var i = key.indexOf('.');
  	if (i == -1)
  		{ return (undefined); }

  	var key1 = key.substr(0, i);
  	if (!obj.hasOwnProperty(key1))
  		{ return (undefined); }

  	return (pluckv(obj[key1], key.substr(i + 1)));
  }

  /*
   * Invoke callback(row) for each entry in the array that would be returned by
   * flattenObject(data, depth).  This is just like flattenObject(data,
   * depth).forEach(callback), except that the intermediate array is never
   * created.
   */
  function flattenIter(data, depth, callback)
  {
  	doFlattenIter(data, depth, [], callback);
  }

  function doFlattenIter(data, depth, accum, callback)
  {
  	var each;
  	var key;

  	if (depth === 0) {
  		each = accum.slice(0);
  		each.push(data);
  		callback(each);
  		return;
  	}

  	assert_1.ok(data !== null);
  	assert_1.equal(typeof (data), 'object');
  	assert_1.equal(typeof (depth), 'number');
  	assert_1.ok(depth >= 0);

  	for (key in data) {
  		each = accum.slice(0);
  		each.push(key);
  		doFlattenIter(data[key], depth - 1, each, callback);
  	}
  }

  function flattenObject(data, depth)
  {
  	if (depth === 0)
  		{ return ([ data ]); }

  	assert_1.ok(data !== null);
  	assert_1.equal(typeof (data), 'object');
  	assert_1.equal(typeof (depth), 'number');
  	assert_1.ok(depth >= 0);

  	var rv = [];
  	var key;

  	for (key in data) {
  		flattenObject(data[key], depth - 1).forEach(function (p) {
  			rv.push([ key ].concat(p));
  		});
  	}

  	return (rv);
  }

  function startsWith(str, prefix)
  {
  	return (str.substr(0, prefix.length) == prefix);
  }

  function endsWith(str, suffix)
  {
  	return (str.substr(
  	    str.length - suffix.length, suffix.length) == suffix);
  }

  function iso8601(d)
  {
  	if (typeof (d) == 'number')
  		{ d = new Date(d); }
  	assert_1.ok(d.constructor === Date);
  	return (extsprintf.sprintf('%4d-%02d-%02dT%02d:%02d:%02d.%03dZ',
  	    d.getUTCFullYear(), d.getUTCMonth() + 1, d.getUTCDate(),
  	    d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(),
  	    d.getUTCMilliseconds()));
  }

  var RFC1123_MONTHS = [
      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
      'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
  var RFC1123_DAYS = [
      'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

  function rfc1123(date) {
  	return (extsprintf.sprintf('%s, %02d %s %04d %02d:%02d:%02d GMT',
  	    RFC1123_DAYS[date.getUTCDay()], date.getUTCDate(),
  	    RFC1123_MONTHS[date.getUTCMonth()], date.getUTCFullYear(),
  	    date.getUTCHours(), date.getUTCMinutes(),
  	    date.getUTCSeconds()));
  }

  /*
   * Parses a date expressed as a string, as either a number of milliseconds since
   * the epoch or any string format that Date accepts, giving preference to the
   * former where these two sets overlap (e.g., small numbers).
   */
  function parseDateTime(str)
  {
  	/*
  	 * This is irritatingly implicit, but significantly more concise than
  	 * alternatives.  The "+str" will convert a string containing only a
  	 * number directly to a Number, or NaN for other strings.  Thus, if the
  	 * conversion succeeds, we use it (this is the milliseconds-since-epoch
  	 * case).  Otherwise, we pass the string directly to the Date
  	 * constructor to parse.
  	 */
  	var numeric = +str;
  	if (!isNaN(numeric)) {
  		return (new Date(numeric));
  	} else {
  		return (new Date(str));
  	}
  }


  /*
   * Number.*_SAFE_INTEGER isn't present before node v0.12, so we hardcode
   * the ES6 definitions here, while allowing for them to someday be higher.
   */
  var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
  var MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;


  /*
   * Default options for parseInteger().
   */
  var PI_DEFAULTS = {
  	base: 10,
  	allowSign: true,
  	allowPrefix: false,
  	allowTrailing: false,
  	allowImprecise: false,
  	trimWhitespace: false,
  	leadingZeroIsOctal: false
  };

  var CP_0 = 0x30;
  var CP_9 = 0x39;

  var CP_A = 0x41;
  var CP_B = 0x42;
  var CP_O = 0x4f;
  var CP_T = 0x54;
  var CP_X = 0x58;
  var CP_Z = 0x5a;

  var CP_a = 0x61;
  var CP_b = 0x62;
  var CP_o = 0x6f;
  var CP_t = 0x74;
  var CP_x = 0x78;
  var CP_z = 0x7a;

  var PI_CONV_DEC = 0x30;
  var PI_CONV_UC = 0x37;
  var PI_CONV_LC = 0x57;


  /*
   * A stricter version of parseInt() that provides options for changing what
   * is an acceptable string (for example, disallowing trailing characters).
   */
  function parseInteger(str, uopts)
  {
  	assert_1.string(str, 'str');
  	assert_1.optionalObject(uopts, 'options');

  	var baseOverride = false;
  	var options = PI_DEFAULTS;

  	if (uopts) {
  		baseOverride = hasKey(uopts, 'base');
  		options = mergeObjects(options, uopts);
  		assert_1.number(options.base, 'options.base');
  		assert_1.ok(options.base >= 2, 'options.base >= 2');
  		assert_1.ok(options.base <= 36, 'options.base <= 36');
  		assert_1.bool(options.allowSign, 'options.allowSign');
  		assert_1.bool(options.allowPrefix, 'options.allowPrefix');
  		assert_1.bool(options.allowTrailing,
  		    'options.allowTrailing');
  		assert_1.bool(options.allowImprecise,
  		    'options.allowImprecise');
  		assert_1.bool(options.trimWhitespace,
  		    'options.trimWhitespace');
  		assert_1.bool(options.leadingZeroIsOctal,
  		    'options.leadingZeroIsOctal');

  		if (options.leadingZeroIsOctal) {
  			assert_1.ok(!baseOverride,
  			    '"base" and "leadingZeroIsOctal" are ' +
  			    'mutually exclusive');
  		}
  	}

  	var c;
  	var pbase = -1;
  	var base = options.base;
  	var start;
  	var mult = 1;
  	var value = 0;
  	var idx = 0;
  	var len = str.length;

  	/* Trim any whitespace on the left side. */
  	if (options.trimWhitespace) {
  		while (idx < len && isSpace(str.charCodeAt(idx))) {
  			++idx;
  		}
  	}

  	/* Check the number for a leading sign. */
  	if (options.allowSign) {
  		if (str[idx] === '-') {
  			idx += 1;
  			mult = -1;
  		} else if (str[idx] === '+') {
  			idx += 1;
  		}
  	}

  	/* Parse the base-indicating prefix if there is one. */
  	if (str[idx] === '0') {
  		if (options.allowPrefix) {
  			pbase = prefixToBase(str.charCodeAt(idx + 1));
  			if (pbase !== -1 && (!baseOverride || pbase === base)) {
  				base = pbase;
  				idx += 2;
  			}
  		}

  		if (pbase === -1 && options.leadingZeroIsOctal) {
  			base = 8;
  		}
  	}

  	/* Parse the actual digits. */
  	for (start = idx; idx < len; ++idx) {
  		c = translateDigit(str.charCodeAt(idx));
  		if (c !== -1 && c < base) {
  			value *= base;
  			value += c;
  		} else {
  			break;
  		}
  	}

  	/* If we didn't parse any digits, we have an invalid number. */
  	if (start === idx) {
  		return (new Error('invalid number: ' + JSON.stringify(str)));
  	}

  	/* Trim any whitespace on the right side. */
  	if (options.trimWhitespace) {
  		while (idx < len && isSpace(str.charCodeAt(idx))) {
  			++idx;
  		}
  	}

  	/* Check for trailing characters. */
  	if (idx < len && !options.allowTrailing) {
  		return (new Error('trailing characters after number: ' +
  		    JSON.stringify(str.slice(idx))));
  	}

  	/* If our value is 0, we return now, to avoid returning -0. */
  	if (value === 0) {
  		return (0);
  	}

  	/* Calculate our final value. */
  	var result = value * mult;

  	/*
  	 * If the string represents a value that cannot be precisely represented
  	 * by JavaScript, then we want to check that:
  	 *
  	 * - We never increased the value past MAX_SAFE_INTEGER
  	 * - We don't make the result negative and below MIN_SAFE_INTEGER
  	 *
  	 * Because we only ever increment the value during parsing, there's no
  	 * chance of moving past MAX_SAFE_INTEGER and then dropping below it
  	 * again, losing precision in the process. This means that we only need
  	 * to do our checks here, at the end.
  	 */
  	if (!options.allowImprecise &&
  	    (value > MAX_SAFE_INTEGER || result < MIN_SAFE_INTEGER)) {
  		return (new Error('number is outside of the supported range: ' +
  		    JSON.stringify(str.slice(start, idx))));
  	}

  	return (result);
  }


  /*
   * Interpret a character code as a base-36 digit.
   */
  function translateDigit(d)
  {
  	if (d >= CP_0 && d <= CP_9) {
  		/* '0' to '9' -> 0 to 9 */
  		return (d - PI_CONV_DEC);
  	} else if (d >= CP_A && d <= CP_Z) {
  		/* 'A' - 'Z' -> 10 to 35 */
  		return (d - PI_CONV_UC);
  	} else if (d >= CP_a && d <= CP_z) {
  		/* 'a' - 'z' -> 10 to 35 */
  		return (d - PI_CONV_LC);
  	} else {
  		/* Invalid character code */
  		return (-1);
  	}
  }


  /*
   * Test if a value matches the ECMAScript definition of trimmable whitespace.
   */
  function isSpace(c)
  {
  	return (c === 0x20) ||
  	    (c >= 0x0009 && c <= 0x000d) ||
  	    (c === 0x00a0) ||
  	    (c === 0x1680) ||
  	    (c === 0x180e) ||
  	    (c >= 0x2000 && c <= 0x200a) ||
  	    (c === 0x2028) ||
  	    (c === 0x2029) ||
  	    (c === 0x202f) ||
  	    (c === 0x205f) ||
  	    (c === 0x3000) ||
  	    (c === 0xfeff);
  }


  /*
   * Determine which base a character indicates (e.g., 'x' indicates hex).
   */
  function prefixToBase(c)
  {
  	if (c === CP_b || c === CP_B) {
  		/* 0b/0B (binary) */
  		return (2);
  	} else if (c === CP_o || c === CP_O) {
  		/* 0o/0O (octal) */
  		return (8);
  	} else if (c === CP_t || c === CP_T) {
  		/* 0t/0T (decimal) */
  		return (10);
  	} else if (c === CP_x || c === CP_X) {
  		/* 0x/0X (hexadecimal) */
  		return (16);
  	} else {
  		/* Not a meaningful character */
  		return (-1);
  	}
  }


  function validateJsonObjectJS(schema, input)
  {
  	var report = validate.validate(input, schema);

  	if (report.errors.length === 0)
  		{ return (null); }

  	/* Currently, we only do anything useful with the first error. */
  	var error = report.errors[0];

  	/* The failed property is given by a URI with an irrelevant prefix. */
  	var propname = error['property'];
  	var reason = error['message'].toLowerCase();
  	var i, j;

  	/*
  	 * There's at least one case where the property error message is
  	 * confusing at best.  We work around this here.
  	 */
  	if ((i = reason.indexOf('the property ')) != -1 &&
  	    (j = reason.indexOf(' is not defined in the schema and the ' +
  	    'schema does not allow additional properties')) != -1) {
  		i += 'the property '.length;
  		if (propname === '')
  			{ propname = reason.substr(i, j - i); }
  		else
  			{ propname = propname + '.' + reason.substr(i, j - i); }

  		reason = 'unsupported property';
  	}

  	var rv = new verror.VError('property "%s": %s', propname, reason);
  	rv.jsv_details = error;
  	return (rv);
  }

  function randElt(arr)
  {
  	assert_1.ok(Array.isArray(arr) && arr.length > 0,
  	    'randElt argument must be a non-empty array');

  	return (arr[Math.floor(Math.random() * arr.length)]);
  }

  function assertHrtime(a)
  {
  	assert_1.ok(a[0] >= 0 && a[1] >= 0,
  	    'negative numbers not allowed in hrtimes');
  	assert_1.ok(a[1] < 1e9, 'nanoseconds column overflow');
  }

  /*
   * Compute the time elapsed between hrtime readings A and B, where A is later
   * than B.  hrtime readings come from Node's process.hrtime().  There is no
   * defined way to represent negative deltas, so it's illegal to diff B from A
   * where the time denoted by B is later than the time denoted by A.  If this
   * becomes valuable, we can define a representation and extend the
   * implementation to support it.
   */
  function hrtimeDiff(a, b)
  {
  	assertHrtime(a);
  	assertHrtime(b);
  	assert_1.ok(a[0] > b[0] || (a[0] == b[0] && a[1] >= b[1]),
  	    'negative differences not allowed');

  	var rv = [ a[0] - b[0], 0 ];

  	if (a[1] >= b[1]) {
  		rv[1] = a[1] - b[1];
  	} else {
  		rv[0]--;
  		rv[1] = 1e9 - (b[1] - a[1]);
  	}

  	return (rv);
  }

  /*
   * Convert a hrtime reading from the array format returned by Node's
   * process.hrtime() into a scalar number of nanoseconds.
   */
  function hrtimeNanosec(a)
  {
  	assertHrtime(a);

  	return (Math.floor(a[0] * 1e9 + a[1]));
  }

  /*
   * Convert a hrtime reading from the array format returned by Node's
   * process.hrtime() into a scalar number of microseconds.
   */
  function hrtimeMicrosec(a)
  {
  	assertHrtime(a);

  	return (Math.floor(a[0] * 1e6 + a[1] / 1e3));
  }

  /*
   * Convert a hrtime reading from the array format returned by Node's
   * process.hrtime() into a scalar number of milliseconds.
   */
  function hrtimeMillisec(a)
  {
  	assertHrtime(a);

  	return (Math.floor(a[0] * 1e3 + a[1] / 1e6));
  }

  /*
   * Add two hrtime readings A and B, overwriting A with the result of the
   * addition.  This function is useful for accumulating several hrtime intervals
   * into a counter.  Returns A.
   */
  function hrtimeAccum(a, b)
  {
  	assertHrtime(a);
  	assertHrtime(b);

  	/*
  	 * Accumulate the nanosecond component.
  	 */
  	a[1] += b[1];
  	if (a[1] >= 1e9) {
  		/*
  		 * The nanosecond component overflowed, so carry to the seconds
  		 * field.
  		 */
  		a[0]++;
  		a[1] -= 1e9;
  	}

  	/*
  	 * Accumulate the seconds component.
  	 */
  	a[0] += b[0];

  	return (a);
  }

  /*
   * Add two hrtime readings A and B, returning the result as a new hrtime array.
   * Does not modify either input argument.
   */
  function hrtimeAdd(a, b)
  {
  	assertHrtime(a);

  	var rv = [ a[0], a[1] ];

  	return (hrtimeAccum(rv, b));
  }


  /*
   * Check an object for unexpected properties.  Accepts the object to check, and
   * an array of allowed property names (strings).  Returns an array of key names
   * that were found on the object, but did not appear in the list of allowed
   * properties.  If no properties were found, the returned array will be of
   * zero length.
   */
  function extraProperties(obj, allowed)
  {
  	assert_1.ok(typeof (obj) === 'object' && obj !== null,
  	    'obj argument must be a non-null object');
  	assert_1.ok(Array.isArray(allowed),
  	    'allowed argument must be an array of strings');
  	for (var i = 0; i < allowed.length; i++) {
  		assert_1.ok(typeof (allowed[i]) === 'string',
  		    'allowed argument must be an array of strings');
  	}

  	return (Object.keys(obj).filter(function (key) {
  		return (allowed.indexOf(key) === -1);
  	}));
  }

  /*
   * Given three sets of properties "provided" (may be undefined), "overrides"
   * (required), and "defaults" (may be undefined), construct an object containing
   * the union of these sets with "overrides" overriding "provided", and
   * "provided" overriding "defaults".  None of the input objects are modified.
   */
  function mergeObjects(provided, overrides, defaults)
  {
  	var rv, k;

  	rv = {};
  	if (defaults) {
  		for (k in defaults)
  			{ rv[k] = defaults[k]; }
  	}

  	if (provided) {
  		for (k in provided)
  			{ rv[k] = provided[k]; }
  	}

  	if (overrides) {
  		for (k in overrides)
  			{ rv[k] = overrides[k]; }
  	}

  	return (rv);
  }

  var jsprim = {
  	deepCopy: deepCopy_1,
  	deepEqual: deepEqual_1,
  	isEmpty: isEmpty_1,
  	hasKey: hasKey_1,
  	forEachKey: forEachKey_1,
  	pluck: pluck_1,
  	flattenObject: flattenObject_1,
  	flattenIter: flattenIter_1,
  	validateJsonObject: validateJsonObject,
  	validateJsonObjectJS: validateJsonObjectJS_1,
  	randElt: randElt_1,
  	extraProperties: extraProperties_1,
  	mergeObjects: mergeObjects_1,
  	startsWith: startsWith_1,
  	endsWith: endsWith_1,
  	parseInteger: parseInteger_1,
  	iso8601: iso8601_1,
  	rfc1123: rfc1123_1,
  	parseDateTime: parseDateTime_1,
  	hrtimediff: hrtimediff,
  	hrtimeDiff: hrtimeDiff_1,
  	hrtimeAccum: hrtimeAccum_1,
  	hrtimeAdd: hrtimeAdd_1,
  	hrtimeNanosec: hrtimeNanosec_1,
  	hrtimeMicrosec: hrtimeMicrosec_1,
  	hrtimeMillisec: hrtimeMillisec_1
  };

  var http$2 = ( http$1 && http ) || http$1;

  // Copyright 2012 Joyent, Inc.  All rights reserved.









  var sprintf$2 = util$2.format;

  var HASH_ALGOS$2 = utils$2.HASH_ALGOS;
  var PK_ALGOS$2 = utils$2.PK_ALGOS;
  var InvalidAlgorithmError$8 = utils$2.InvalidAlgorithmError;
  var HttpSignatureError$2 = utils$2.HttpSignatureError;
  var validateAlgorithm$2 = utils$2.validateAlgorithm;

  ///--- Globals

  var AUTHZ_FMT =
    'Signature keyId="%s",algorithm="%s",headers="%s",signature="%s"';

  ///--- Specific Errors

  function MissingHeaderError$1(message) {
    HttpSignatureError$2.call(this, message, MissingHeaderError$1);
  }
  util$2.inherits(MissingHeaderError$1, HttpSignatureError$2);

  function StrictParsingError$1(message) {
    HttpSignatureError$2.call(this, message, StrictParsingError$1);
  }
  util$2.inherits(StrictParsingError$1, HttpSignatureError$2);

  /* See createSigner() */
  function RequestSigner(options) {
    assert_1.object(options, 'options');

    var alg = [];
    if (options.algorithm !== undefined) {
      assert_1.string(options.algorithm, 'options.algorithm');
      alg = validateAlgorithm$2(options.algorithm);
    }
    this.rs_alg = alg;

    /*
     * RequestSigners come in two varieties: ones with an rs_signFunc, and ones
     * with an rs_signer.
     *
     * rs_signFunc-based RequestSigners have to build up their entire signing
     * string within the rs_lines array and give it to rs_signFunc as a single
     * concat'd blob. rs_signer-based RequestSigners can add a line at a time to
     * their signing state by using rs_signer.update(), thus only needing to
     * buffer the hash function state and one line at a time.
     */
    if (options.sign !== undefined) {
      assert_1.func(options.sign, 'options.sign');
      this.rs_signFunc = options.sign;

    } else if (alg[0] === 'hmac' && options.key !== undefined) {
      assert_1.string(options.keyId, 'options.keyId');
      this.rs_keyId = options.keyId;

      if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))
        { throw (new TypeError('options.key for HMAC must be a string or Buffer')); }

      /*
       * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their
       * data in chunks rather than requiring it all to be given in one go
       * at the end, so they are more similar to signers than signFuncs.
       */
      this.rs_signer = tls.createHmac(alg[1].toUpperCase(), options.key);
      this.rs_signer.sign = function () {
        var digest = this.digest('base64');
        return ({
          hashAlgorithm: alg[1],
          toString: function () { return (digest); }
        });
      };

    } else if (options.key !== undefined) {
      var key = options.key;
      if (typeof (key) === 'string' || Buffer.isBuffer(key))
        { key = lib$7.parsePrivateKey(key); }

      assert_1.ok(lib$7.PrivateKey.isPrivateKey(key, [1, 2]),
        'options.key must be a sshpk.PrivateKey');
      this.rs_key = key;

      assert_1.string(options.keyId, 'options.keyId');
      this.rs_keyId = options.keyId;

      if (!PK_ALGOS$2[key.type]) {
        throw (new InvalidAlgorithmError$8(key.type.toUpperCase() + ' type ' +
          'keys are not supported'));
      }

      if (alg[0] !== undefined && key.type !== alg[0]) {
        throw (new InvalidAlgorithmError$8('options.key must be a ' +
          alg[0].toUpperCase() + ' key, was given a ' +
          key.type.toUpperCase() + ' key instead'));
      }

      this.rs_signer = key.createSign(alg[1]);

    } else {
      throw (new TypeError('options.sign (func) or options.key is required'));
    }

    this.rs_headers = [];
    this.rs_lines = [];
  }

  /**
   * Adds a header to be signed, with its value, into this signer.
   *
   * @param {String} header
   * @param {String} value
   * @return {String} value written
   */
  RequestSigner.prototype.writeHeader = function (header, value) {
    assert_1.string(header, 'header');
    header = header.toLowerCase();
    assert_1.string(value, 'value');

    this.rs_headers.push(header);

    if (this.rs_signFunc) {
      this.rs_lines.push(header + ': ' + value);

    } else {
      var line = header + ': ' + value;
      if (this.rs_headers.length > 0)
        { line = '\n' + line; }
      this.rs_signer.update(line);
    }

    return (value);
  };

  /**
   * Adds a default Date header, returning its value.
   *
   * @return {String}
   */
  RequestSigner.prototype.writeDateHeader = function () {
    return (this.writeHeader('date', jsprim.rfc1123(new Date())));
  };

  /**
   * Adds the request target line to be signed.
   *
   * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')
   * @param {String} path
   */
  RequestSigner.prototype.writeTarget = function (method, path) {
    assert_1.string(method, 'method');
    assert_1.string(path, 'path');
    method = method.toLowerCase();
    this.writeHeader('(request-target)', method + ' ' + path);
  };

  /**
   * Calculate the value for the Authorization header on this request
   * asynchronously.
   *
   * @param {Func} callback (err, authz)
   */
  RequestSigner.prototype.sign = function (cb) {
    assert_1.func(cb, 'callback');

    if (this.rs_headers.length < 1)
      { throw (new Error('At least one header must be signed')); }

    var alg, authz;
    if (this.rs_signFunc) {
      var data = this.rs_lines.join('\n');
      var self = this;
      this.rs_signFunc(data, function (err, sig) {
        if (err) {
          cb(err);
          return;
        }
        try {
          assert_1.object(sig, 'signature');
          assert_1.string(sig.keyId, 'signature.keyId');
          assert_1.string(sig.algorithm, 'signature.algorithm');
          assert_1.string(sig.signature, 'signature.signature');
          alg = validateAlgorithm$2(sig.algorithm);

          authz = sprintf$2(AUTHZ_FMT,
            sig.keyId,
            sig.algorithm,
            self.rs_headers.join(' '),
            sig.signature);
        } catch (e) {
          cb(e);
          return;
        }
        cb(null, authz);
      });

    } else {
      try {
        var sigObj = this.rs_signer.sign();
      } catch (e) {
        cb(e);
        return;
      }
      alg = (this.rs_alg[0] || this.rs_key.type) + '-' + sigObj.hashAlgorithm;
      var signature = sigObj.toString();
      authz = sprintf$2(AUTHZ_FMT,
        this.rs_keyId,
        alg,
        this.rs_headers.join(' '),
        signature);
      cb(null, authz);
    }
  };

  ///--- Exported API

  var signer = {
    /**
     * Identifies whether a given object is a request signer or not.
     *
     * @param {Object} object, the object to identify
     * @returns {Boolean}
     */
    isSigner: function (obj) {
      if (typeof (obj) === 'object' && obj instanceof RequestSigner)
        { return (true); }
      return (false);
    },

    /**
     * Creates a request signer, used to asynchronously build a signature
     * for a request (does not have to be an http.ClientRequest).
     *
     * @param {Object} options, either:
     *                   - {String} keyId
     *                   - {String|Buffer} key
     *                   - {String} algorithm (optional, required for HMAC)
     *                 or:
     *                   - {Func} sign (data, cb)
     * @return {RequestSigner}
     */
    createSigner: function createSigner(options) {
      return (new RequestSigner(options));
    },

    /**
     * Adds an 'Authorization' header to an http.ClientRequest object.
     *
     * Note that this API will add a Date header if it's not already set. Any
     * other headers in the options.headers array MUST be present, or this
     * will throw.
     *
     * You shouldn't need to check the return type; it's just there if you want
     * to be pedantic.
     *
     * The optional flag indicates whether parsing should use strict enforcement
     * of the version draft-cavage-http-signatures-04 of the spec or beyond.
     * The default is to be loose and support
     * older versions for compatibility.
     *
     * @param {Object} request an instance of http.ClientRequest.
     * @param {Object} options signing parameters object:
     *                   - {String} keyId required.
     *                   - {String} key required (either a PEM or HMAC key).
     *                   - {Array} headers optional; defaults to ['date'].
     *                   - {String} algorithm optional (unless key is HMAC);
     *                              default is the same as the sshpk default
     *                              signing algorithm for the type of key given
     *                   - {String} httpVersion optional; defaults to '1.1'.
     *                   - {Boolean} strict optional; defaults to 'false'.
     * @return {Boolean} true if Authorization (and optionally Date) were added.
     * @throws {TypeError} on bad parameter types (input).
     * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with
     *                                 the given key.
     * @throws {sshpk.KeyParseError} if key was bad.
     * @throws {MissingHeaderError} if a header to be signed was specified but
     *                              was not present.
     */
    signRequest: function signRequest(request, options) {
      assert_1.object(request, 'request');
      assert_1.object(options, 'options');
      assert_1.optionalString(options.algorithm, 'options.algorithm');
      assert_1.string(options.keyId, 'options.keyId');
      assert_1.optionalArrayOfString(options.headers, 'options.headers');
      assert_1.optionalString(options.httpVersion, 'options.httpVersion');

      if (!request.getHeader('Date'))
        { request.setHeader('Date', jsprim.rfc1123(new Date())); }
      if (!options.headers)
        { options.headers = ['date']; }
      if (!options.httpVersion)
        { options.httpVersion = '1.1'; }

      var alg = [];
      if (options.algorithm) {
        options.algorithm = options.algorithm.toLowerCase();
        alg = validateAlgorithm$2(options.algorithm);
      }

      var i;
      var stringToSign = '';
      for (i = 0; i < options.headers.length; i++) {
        if (typeof (options.headers[i]) !== 'string')
          { throw new TypeError('options.headers must be an array of Strings'); }

        var h = options.headers[i].toLowerCase();

        if (h === 'request-line') {
          if (!options.strict) {
            /**
             * We allow headers from the older spec drafts if strict parsing isn't
             * specified in options.
             */
            stringToSign +=
              request.method + ' ' + request.path + ' HTTP/' +
              options.httpVersion;
          } else {
            /* Strict parsing doesn't allow older draft headers. */
            throw (new StrictParsingError$1('request-line is not a valid header ' +
              'with strict parsing enabled.'));
          }
        } else if (h === '(request-target)') {
          stringToSign +=
            '(request-target): ' + request.method.toLowerCase() + ' ' +
            request.path;
        } else {
          var value = request.getHeader(h);
          if (value === undefined || value === '') {
            throw new MissingHeaderError$1(h + ' was not in the request');
          }
          stringToSign += h + ': ' + value;
        }

        if ((i + 1) < options.headers.length)
          { stringToSign += '\n'; }
      }

      /* This is just for unit tests. */
      if (request.hasOwnProperty('_stringToSign')) {
        request._stringToSign = stringToSign;
      }

      var signature;
      if (alg[0] === 'hmac') {
        if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))
          { throw (new TypeError('options.key must be a string or Buffer')); }

        var hmac = tls.createHmac(alg[1].toUpperCase(), options.key);
        hmac.update(stringToSign);
        signature = hmac.digest('base64');

      } else {
        var key = options.key;
        if (typeof (key) === 'string' || Buffer.isBuffer(key))
          { key = lib$7.parsePrivateKey(options.key); }

        assert_1.ok(lib$7.PrivateKey.isPrivateKey(key, [1, 2]),
          'options.key must be a sshpk.PrivateKey');

        if (!PK_ALGOS$2[key.type]) {
          throw (new InvalidAlgorithmError$8(key.type.toUpperCase() + ' type ' +
            'keys are not supported'));
        }

        if (alg[0] !== undefined && key.type !== alg[0]) {
          throw (new InvalidAlgorithmError$8('options.key must be a ' +
            alg[0].toUpperCase() + ' key, was given a ' +
            key.type.toUpperCase() + ' key instead'));
        }

        var signer = key.createSign(alg[1]);
        signer.update(stringToSign);
        var sigObj = signer.sign();
        if (!HASH_ALGOS$2[sigObj.hashAlgorithm]) {
          throw (new InvalidAlgorithmError$8(sigObj.hashAlgorithm.toUpperCase() +
            ' is not a supported hash algorithm'));
        }
        options.algorithm = key.type + '-' + sigObj.hashAlgorithm;
        signature = sigObj.toString();
        assert_1.notStrictEqual(signature, '', 'empty signature produced');
      }

      var authzHeaderName = options.authorizationHeaderName || 'Authorization';

      request.setHeader(authzHeaderName, sprintf$2(AUTHZ_FMT,
                                                 options.keyId,
                                                 options.algorithm,
                                                 options.headers.join(' '),
                                                 signature));

      return true;
    }

  };

  var validateAlgorithm$3 = utils$2.validateAlgorithm;

  ///--- Exported API

  var verify$2 = {
    /**
     * Verify RSA/DSA signature against public key.  You are expected to pass in
     * an object that was returned from `parse()`.
     *
     * @param {Object} parsedSignature the object you got from `parse`.
     * @param {String} pubkey RSA/DSA private key PEM.
     * @return {Boolean} true if valid, false otherwise.
     * @throws {TypeError} if you pass in bad arguments.
     * @throws {InvalidAlgorithmError}
     */
    verifySignature: function verifySignature(parsedSignature, pubkey) {
      assert_1.object(parsedSignature, 'parsedSignature');
      if (typeof (pubkey) === 'string' || Buffer.isBuffer(pubkey))
        { pubkey = lib$7.parseKey(pubkey); }
      assert_1.ok(lib$7.Key.isKey(pubkey, [1, 1]), 'pubkey must be a sshpk.Key');

      var alg = validateAlgorithm$3(parsedSignature.algorithm);
      if (alg[0] === 'hmac' || alg[0] !== pubkey.type)
        { return (false); }

      var v = pubkey.createVerify(alg[1]);
      v.update(parsedSignature.signingString);
      return (v.verify(parsedSignature.params.signature, 'base64'));
    },

    /**
     * Verify HMAC against shared secret.  You are expected to pass in an object
     * that was returned from `parse()`.
     *
     * @param {Object} parsedSignature the object you got from `parse`.
     * @param {String} secret HMAC shared secret.
     * @return {Boolean} true if valid, false otherwise.
     * @throws {TypeError} if you pass in bad arguments.
     * @throws {InvalidAlgorithmError}
     */
    verifyHMAC: function verifyHMAC(parsedSignature, secret) {
      assert_1.object(parsedSignature, 'parsedHMAC');
      assert_1.string(secret, 'secret');

      var alg = validateAlgorithm$3(parsedSignature.algorithm);
      if (alg[0] !== 'hmac')
        { return (false); }

      var hashAlg = alg[1].toUpperCase();

      var hmac = tls.createHmac(hashAlg, secret);
      hmac.update(parsedSignature.signingString);

      /*
       * Now double-hash to avoid leaking timing information - there's
       * no easy constant-time compare in JS, so we use this approach
       * instead. See for more info:
       * https://www.isecpartners.com/blog/2011/february/double-hmac-
       * verification.aspx
       */
      var h1 = tls.createHmac(hashAlg, secret);
      h1.update(hmac.digest());
      h1 = h1.digest();
      var h2 = tls.createHmac(hashAlg, secret);
      h2.update(new Buffer(parsedSignature.params.signature, 'base64'));
      h2 = h2.digest();

      /* Node 0.8 returns strings from .digest(). */
      if (typeof (h1) === 'string')
        { return (h1 === h2); }
      /* And node 0.10 lacks the .equals() method on Buffers. */
      if (Buffer.isBuffer(h1) && !h1.equals)
        { return (h1.toString('binary') === h2.toString('binary')); }

      return (h1.equals(h2));
    }
  };

  // Copyright 2015 Joyent, Inc.








  ///--- API

  var lib$8 = {

    parse: parser.parseRequest,
    parseRequest: parser.parseRequest,

    sign: signer.signRequest,
    signRequest: signer.signRequest,
    createSigner: signer.createSigner,
    isSigner: signer.isSigner,

    sshKeyToPEM: utils$2.sshKeyToPEM,
    sshKeyFingerprint: utils$2.fingerprint,
    pemToRsaSSHKey: utils$2.pemToRsaSSHKey,

    verify: verify$2.verifySignature,
    verifySignature: verify$2.verifySignature,
    verifyHMAC: verify$2.verifyHMAC
  };

  var db = {
  	"application/1d-interleaved-parityfec": {"source":"iana"},
  	"application/3gpdash-qoe-report+xml": {"source":"iana"},
  	"application/3gpp-ims+xml": {"source":"iana"},
  	"application/a2l": {"source":"iana"},
  	"application/activemessage": {"source":"iana"},
  	"application/alto-costmap+json": {"source":"iana","compressible":true},
  	"application/alto-costmapfilter+json": {"source":"iana","compressible":true},
  	"application/alto-directory+json": {"source":"iana","compressible":true},
  	"application/alto-endpointcost+json": {"source":"iana","compressible":true},
  	"application/alto-endpointcostparams+json": {"source":"iana","compressible":true},
  	"application/alto-endpointprop+json": {"source":"iana","compressible":true},
  	"application/alto-endpointpropparams+json": {"source":"iana","compressible":true},
  	"application/alto-error+json": {"source":"iana","compressible":true},
  	"application/alto-networkmap+json": {"source":"iana","compressible":true},
  	"application/alto-networkmapfilter+json": {"source":"iana","compressible":true},
  	"application/aml": {"source":"iana"},
  	"application/andrew-inset": {"source":"iana","extensions":["ez"]},
  	"application/applefile": {"source":"iana"},
  	"application/applixware": {"source":"apache","extensions":["aw"]},
  	"application/atf": {"source":"iana"},
  	"application/atfx": {"source":"iana"},
  	"application/atom+xml": {"source":"iana","compressible":true,"extensions":["atom"]},
  	"application/atomcat+xml": {"source":"iana","extensions":["atomcat"]},
  	"application/atomdeleted+xml": {"source":"iana"},
  	"application/atomicmail": {"source":"iana"},
  	"application/atomsvc+xml": {"source":"iana","extensions":["atomsvc"]},
  	"application/atxml": {"source":"iana"},
  	"application/auth-policy+xml": {"source":"iana"},
  	"application/bacnet-xdd+zip": {"source":"iana"},
  	"application/batch-smtp": {"source":"iana"},
  	"application/bdoc": {"compressible":false,"extensions":["bdoc"]},
  	"application/beep+xml": {"source":"iana"},
  	"application/calendar+json": {"source":"iana","compressible":true},
  	"application/calendar+xml": {"source":"iana"},
  	"application/call-completion": {"source":"iana"},
  	"application/cals-1840": {"source":"iana"},
  	"application/cbor": {"source":"iana"},
  	"application/cccex": {"source":"iana"},
  	"application/ccmp+xml": {"source":"iana"},
  	"application/ccxml+xml": {"source":"iana","extensions":["ccxml"]},
  	"application/cdfx+xml": {"source":"iana"},
  	"application/cdmi-capability": {"source":"iana","extensions":["cdmia"]},
  	"application/cdmi-container": {"source":"iana","extensions":["cdmic"]},
  	"application/cdmi-domain": {"source":"iana","extensions":["cdmid"]},
  	"application/cdmi-object": {"source":"iana","extensions":["cdmio"]},
  	"application/cdmi-queue": {"source":"iana","extensions":["cdmiq"]},
  	"application/cdni": {"source":"iana"},
  	"application/cea": {"source":"iana"},
  	"application/cea-2018+xml": {"source":"iana"},
  	"application/cellml+xml": {"source":"iana"},
  	"application/cfw": {"source":"iana"},
  	"application/clue_info+xml": {"source":"iana"},
  	"application/cms": {"source":"iana"},
  	"application/cnrp+xml": {"source":"iana"},
  	"application/coap-group+json": {"source":"iana","compressible":true},
  	"application/coap-payload": {"source":"iana"},
  	"application/commonground": {"source":"iana"},
  	"application/conference-info+xml": {"source":"iana"},
  	"application/cose": {"source":"iana"},
  	"application/cose-key": {"source":"iana"},
  	"application/cose-key-set": {"source":"iana"},
  	"application/cpl+xml": {"source":"iana"},
  	"application/csrattrs": {"source":"iana"},
  	"application/csta+xml": {"source":"iana"},
  	"application/cstadata+xml": {"source":"iana"},
  	"application/csvm+json": {"source":"iana","compressible":true},
  	"application/cu-seeme": {"source":"apache","extensions":["cu"]},
  	"application/cybercash": {"source":"iana"},
  	"application/dart": {"compressible":true},
  	"application/dash+xml": {"source":"iana","extensions":["mpd"]},
  	"application/dashdelta": {"source":"iana"},
  	"application/davmount+xml": {"source":"iana","extensions":["davmount"]},
  	"application/dca-rft": {"source":"iana"},
  	"application/dcd": {"source":"iana"},
  	"application/dec-dx": {"source":"iana"},
  	"application/dialog-info+xml": {"source":"iana"},
  	"application/dicom": {"source":"iana"},
  	"application/dicom+json": {"source":"iana","compressible":true},
  	"application/dicom+xml": {"source":"iana"},
  	"application/dii": {"source":"iana"},
  	"application/dit": {"source":"iana"},
  	"application/dns": {"source":"iana"},
  	"application/docbook+xml": {"source":"apache","extensions":["dbk"]},
  	"application/dskpp+xml": {"source":"iana"},
  	"application/dssc+der": {"source":"iana","extensions":["dssc"]},
  	"application/dssc+xml": {"source":"iana","extensions":["xdssc"]},
  	"application/dvcs": {"source":"iana"},
  	"application/ecmascript": {"source":"iana","compressible":true,"extensions":["ecma"]},
  	"application/edi-consent": {"source":"iana"},
  	"application/edi-x12": {"source":"iana","compressible":false},
  	"application/edifact": {"source":"iana","compressible":false},
  	"application/efi": {"source":"iana"},
  	"application/emergencycalldata.comment+xml": {"source":"iana"},
  	"application/emergencycalldata.control+xml": {"source":"iana"},
  	"application/emergencycalldata.deviceinfo+xml": {"source":"iana"},
  	"application/emergencycalldata.ecall.msd": {"source":"iana"},
  	"application/emergencycalldata.providerinfo+xml": {"source":"iana"},
  	"application/emergencycalldata.serviceinfo+xml": {"source":"iana"},
  	"application/emergencycalldata.subscriberinfo+xml": {"source":"iana"},
  	"application/emergencycalldata.veds+xml": {"source":"iana"},
  	"application/emma+xml": {"source":"iana","extensions":["emma"]},
  	"application/emotionml+xml": {"source":"iana"},
  	"application/encaprtp": {"source":"iana"},
  	"application/epp+xml": {"source":"iana"},
  	"application/epub+zip": {"source":"iana","extensions":["epub"]},
  	"application/eshop": {"source":"iana"},
  	"application/exi": {"source":"iana","extensions":["exi"]},
  	"application/fastinfoset": {"source":"iana"},
  	"application/fastsoap": {"source":"iana"},
  	"application/fdt+xml": {"source":"iana"},
  	"application/fhir+xml": {"source":"iana"},
  	"application/fido.trusted-apps+json": {"compressible":true},
  	"application/fits": {"source":"iana"},
  	"application/font-sfnt": {"source":"iana"},
  	"application/font-tdpfr": {"source":"iana","extensions":["pfr"]},
  	"application/font-woff": {"source":"iana","compressible":false,"extensions":["woff"]},
  	"application/framework-attributes+xml": {"source":"iana"},
  	"application/geo+json": {"source":"iana","compressible":true,"extensions":["geojson"]},
  	"application/geo+json-seq": {"source":"iana"},
  	"application/geoxacml+xml": {"source":"iana"},
  	"application/gml+xml": {"source":"iana","extensions":["gml"]},
  	"application/gpx+xml": {"source":"apache","extensions":["gpx"]},
  	"application/gxf": {"source":"apache","extensions":["gxf"]},
  	"application/gzip": {"source":"iana","compressible":false,"extensions":["gz"]},
  	"application/h224": {"source":"iana"},
  	"application/held+xml": {"source":"iana"},
  	"application/hjson": {"extensions":["hjson"]},
  	"application/http": {"source":"iana"},
  	"application/hyperstudio": {"source":"iana","extensions":["stk"]},
  	"application/ibe-key-request+xml": {"source":"iana"},
  	"application/ibe-pkg-reply+xml": {"source":"iana"},
  	"application/ibe-pp-data": {"source":"iana"},
  	"application/iges": {"source":"iana"},
  	"application/im-iscomposing+xml": {"source":"iana"},
  	"application/index": {"source":"iana"},
  	"application/index.cmd": {"source":"iana"},
  	"application/index.obj": {"source":"iana"},
  	"application/index.response": {"source":"iana"},
  	"application/index.vnd": {"source":"iana"},
  	"application/inkml+xml": {"source":"iana","extensions":["ink","inkml"]},
  	"application/iotp": {"source":"iana"},
  	"application/ipfix": {"source":"iana","extensions":["ipfix"]},
  	"application/ipp": {"source":"iana"},
  	"application/isup": {"source":"iana"},
  	"application/its+xml": {"source":"iana"},
  	"application/java-archive": {"source":"apache","compressible":false,"extensions":["jar","war","ear"]},
  	"application/java-serialized-object": {"source":"apache","compressible":false,"extensions":["ser"]},
  	"application/java-vm": {"source":"apache","compressible":false,"extensions":["class"]},
  	"application/javascript": {"source":"iana","charset":"UTF-8","compressible":true,"extensions":["js","mjs"]},
  	"application/jf2feed+json": {"source":"iana","compressible":true},
  	"application/jose": {"source":"iana"},
  	"application/jose+json": {"source":"iana","compressible":true},
  	"application/jrd+json": {"source":"iana","compressible":true},
  	"application/json": {"source":"iana","charset":"UTF-8","compressible":true,"extensions":["json","map"]},
  	"application/json-patch+json": {"source":"iana","compressible":true},
  	"application/json-seq": {"source":"iana"},
  	"application/json5": {"extensions":["json5"]},
  	"application/jsonml+json": {"source":"apache","compressible":true,"extensions":["jsonml"]},
  	"application/jwk+json": {"source":"iana","compressible":true},
  	"application/jwk-set+json": {"source":"iana","compressible":true},
  	"application/jwt": {"source":"iana"},
  	"application/kpml-request+xml": {"source":"iana"},
  	"application/kpml-response+xml": {"source":"iana"},
  	"application/ld+json": {"source":"iana","compressible":true,"extensions":["jsonld"]},
  	"application/lgr+xml": {"source":"iana"},
  	"application/link-format": {"source":"iana"},
  	"application/load-control+xml": {"source":"iana"},
  	"application/lost+xml": {"source":"iana","extensions":["lostxml"]},
  	"application/lostsync+xml": {"source":"iana"},
  	"application/lxf": {"source":"iana"},
  	"application/mac-binhex40": {"source":"iana","extensions":["hqx"]},
  	"application/mac-compactpro": {"source":"apache","extensions":["cpt"]},
  	"application/macwriteii": {"source":"iana"},
  	"application/mads+xml": {"source":"iana","extensions":["mads"]},
  	"application/manifest+json": {"charset":"UTF-8","compressible":true,"extensions":["webmanifest"]},
  	"application/marc": {"source":"iana","extensions":["mrc"]},
  	"application/marcxml+xml": {"source":"iana","extensions":["mrcx"]},
  	"application/mathematica": {"source":"iana","extensions":["ma","nb","mb"]},
  	"application/mathml+xml": {"source":"iana","extensions":["mathml"]},
  	"application/mathml-content+xml": {"source":"iana"},
  	"application/mathml-presentation+xml": {"source":"iana"},
  	"application/mbms-associated-procedure-description+xml": {"source":"iana"},
  	"application/mbms-deregister+xml": {"source":"iana"},
  	"application/mbms-envelope+xml": {"source":"iana"},
  	"application/mbms-msk+xml": {"source":"iana"},
  	"application/mbms-msk-response+xml": {"source":"iana"},
  	"application/mbms-protection-description+xml": {"source":"iana"},
  	"application/mbms-reception-report+xml": {"source":"iana"},
  	"application/mbms-register+xml": {"source":"iana"},
  	"application/mbms-register-response+xml": {"source":"iana"},
  	"application/mbms-schedule+xml": {"source":"iana"},
  	"application/mbms-user-service-description+xml": {"source":"iana"},
  	"application/mbox": {"source":"iana","extensions":["mbox"]},
  	"application/media-policy-dataset+xml": {"source":"iana"},
  	"application/media_control+xml": {"source":"iana"},
  	"application/mediaservercontrol+xml": {"source":"iana","extensions":["mscml"]},
  	"application/merge-patch+json": {"source":"iana","compressible":true},
  	"application/metalink+xml": {"source":"apache","extensions":["metalink"]},
  	"application/metalink4+xml": {"source":"iana","extensions":["meta4"]},
  	"application/mets+xml": {"source":"iana","extensions":["mets"]},
  	"application/mf4": {"source":"iana"},
  	"application/mikey": {"source":"iana"},
  	"application/mmt-usd+xml": {"source":"iana"},
  	"application/mods+xml": {"source":"iana","extensions":["mods"]},
  	"application/moss-keys": {"source":"iana"},
  	"application/moss-signature": {"source":"iana"},
  	"application/mosskey-data": {"source":"iana"},
  	"application/mosskey-request": {"source":"iana"},
  	"application/mp21": {"source":"iana","extensions":["m21","mp21"]},
  	"application/mp4": {"source":"iana","extensions":["mp4s","m4p"]},
  	"application/mpeg4-generic": {"source":"iana"},
  	"application/mpeg4-iod": {"source":"iana"},
  	"application/mpeg4-iod-xmt": {"source":"iana"},
  	"application/mrb-consumer+xml": {"source":"iana"},
  	"application/mrb-publish+xml": {"source":"iana"},
  	"application/msc-ivr+xml": {"source":"iana"},
  	"application/msc-mixer+xml": {"source":"iana"},
  	"application/msword": {"source":"iana","compressible":false,"extensions":["doc","dot"]},
  	"application/mud+json": {"source":"iana","compressible":true},
  	"application/mxf": {"source":"iana","extensions":["mxf"]},
  	"application/n-quads": {"source":"iana"},
  	"application/n-triples": {"source":"iana"},
  	"application/nasdata": {"source":"iana"},
  	"application/news-checkgroups": {"source":"iana"},
  	"application/news-groupinfo": {"source":"iana"},
  	"application/news-transmission": {"source":"iana"},
  	"application/nlsml+xml": {"source":"iana"},
  	"application/node": {"source":"iana"},
  	"application/nss": {"source":"iana"},
  	"application/ocsp-request": {"source":"iana"},
  	"application/ocsp-response": {"source":"iana"},
  	"application/octet-stream": {"source":"iana","compressible":false,"extensions":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},
  	"application/oda": {"source":"iana","extensions":["oda"]},
  	"application/odx": {"source":"iana"},
  	"application/oebps-package+xml": {"source":"iana","extensions":["opf"]},
  	"application/ogg": {"source":"iana","compressible":false,"extensions":["ogx"]},
  	"application/omdoc+xml": {"source":"apache","extensions":["omdoc"]},
  	"application/onenote": {"source":"apache","extensions":["onetoc","onetoc2","onetmp","onepkg"]},
  	"application/oxps": {"source":"iana","extensions":["oxps"]},
  	"application/p2p-overlay+xml": {"source":"iana"},
  	"application/parityfec": {"source":"iana"},
  	"application/passport": {"source":"iana"},
  	"application/patch-ops-error+xml": {"source":"iana","extensions":["xer"]},
  	"application/pdf": {"source":"iana","compressible":false,"extensions":["pdf"]},
  	"application/pdx": {"source":"iana"},
  	"application/pgp-encrypted": {"source":"iana","compressible":false,"extensions":["pgp"]},
  	"application/pgp-keys": {"source":"iana"},
  	"application/pgp-signature": {"source":"iana","extensions":["asc","sig"]},
  	"application/pics-rules": {"source":"apache","extensions":["prf"]},
  	"application/pidf+xml": {"source":"iana"},
  	"application/pidf-diff+xml": {"source":"iana"},
  	"application/pkcs10": {"source":"iana","extensions":["p10"]},
  	"application/pkcs12": {"source":"iana"},
  	"application/pkcs7-mime": {"source":"iana","extensions":["p7m","p7c"]},
  	"application/pkcs7-signature": {"source":"iana","extensions":["p7s"]},
  	"application/pkcs8": {"source":"iana","extensions":["p8"]},
  	"application/pkcs8-encrypted": {"source":"iana"},
  	"application/pkix-attr-cert": {"source":"iana","extensions":["ac"]},
  	"application/pkix-cert": {"source":"iana","extensions":["cer"]},
  	"application/pkix-crl": {"source":"iana","extensions":["crl"]},
  	"application/pkix-pkipath": {"source":"iana","extensions":["pkipath"]},
  	"application/pkixcmp": {"source":"iana","extensions":["pki"]},
  	"application/pls+xml": {"source":"iana","extensions":["pls"]},
  	"application/poc-settings+xml": {"source":"iana"},
  	"application/postscript": {"source":"iana","compressible":true,"extensions":["ai","eps","ps"]},
  	"application/ppsp-tracker+json": {"source":"iana","compressible":true},
  	"application/problem+json": {"source":"iana","compressible":true},
  	"application/problem+xml": {"source":"iana"},
  	"application/provenance+xml": {"source":"iana"},
  	"application/prs.alvestrand.titrax-sheet": {"source":"iana"},
  	"application/prs.cww": {"source":"iana","extensions":["cww"]},
  	"application/prs.hpub+zip": {"source":"iana"},
  	"application/prs.nprend": {"source":"iana"},
  	"application/prs.plucker": {"source":"iana"},
  	"application/prs.rdf-xml-crypt": {"source":"iana"},
  	"application/prs.xsf+xml": {"source":"iana"},
  	"application/pskc+xml": {"source":"iana","extensions":["pskcxml"]},
  	"application/qsig": {"source":"iana"},
  	"application/raml+yaml": {"compressible":true,"extensions":["raml"]},
  	"application/raptorfec": {"source":"iana"},
  	"application/rdap+json": {"source":"iana","compressible":true},
  	"application/rdf+xml": {"source":"iana","compressible":true,"extensions":["rdf"]},
  	"application/reginfo+xml": {"source":"iana","extensions":["rif"]},
  	"application/relax-ng-compact-syntax": {"source":"iana","extensions":["rnc"]},
  	"application/remote-printing": {"source":"iana"},
  	"application/reputon+json": {"source":"iana","compressible":true},
  	"application/resource-lists+xml": {"source":"iana","extensions":["rl"]},
  	"application/resource-lists-diff+xml": {"source":"iana","extensions":["rld"]},
  	"application/rfc+xml": {"source":"iana"},
  	"application/riscos": {"source":"iana"},
  	"application/rlmi+xml": {"source":"iana"},
  	"application/rls-services+xml": {"source":"iana","extensions":["rs"]},
  	"application/route-apd+xml": {"source":"iana"},
  	"application/route-s-tsid+xml": {"source":"iana"},
  	"application/route-usd+xml": {"source":"iana"},
  	"application/rpki-ghostbusters": {"source":"iana","extensions":["gbr"]},
  	"application/rpki-manifest": {"source":"iana","extensions":["mft"]},
  	"application/rpki-publication": {"source":"iana"},
  	"application/rpki-roa": {"source":"iana","extensions":["roa"]},
  	"application/rpki-updown": {"source":"iana"},
  	"application/rsd+xml": {"source":"apache","extensions":["rsd"]},
  	"application/rss+xml": {"source":"apache","compressible":true,"extensions":["rss"]},
  	"application/rtf": {"source":"iana","compressible":true,"extensions":["rtf"]},
  	"application/rtploopback": {"source":"iana"},
  	"application/rtx": {"source":"iana"},
  	"application/samlassertion+xml": {"source":"iana"},
  	"application/samlmetadata+xml": {"source":"iana"},
  	"application/sbml+xml": {"source":"iana","extensions":["sbml"]},
  	"application/scaip+xml": {"source":"iana"},
  	"application/scim+json": {"source":"iana","compressible":true},
  	"application/scvp-cv-request": {"source":"iana","extensions":["scq"]},
  	"application/scvp-cv-response": {"source":"iana","extensions":["scs"]},
  	"application/scvp-vp-request": {"source":"iana","extensions":["spq"]},
  	"application/scvp-vp-response": {"source":"iana","extensions":["spp"]},
  	"application/sdp": {"source":"iana","extensions":["sdp"]},
  	"application/sep+xml": {"source":"iana"},
  	"application/sep-exi": {"source":"iana"},
  	"application/session-info": {"source":"iana"},
  	"application/set-payment": {"source":"iana"},
  	"application/set-payment-initiation": {"source":"iana","extensions":["setpay"]},
  	"application/set-registration": {"source":"iana"},
  	"application/set-registration-initiation": {"source":"iana","extensions":["setreg"]},
  	"application/sgml": {"source":"iana"},
  	"application/sgml-open-catalog": {"source":"iana"},
  	"application/shf+xml": {"source":"iana","extensions":["shf"]},
  	"application/sieve": {"source":"iana"},
  	"application/simple-filter+xml": {"source":"iana"},
  	"application/simple-message-summary": {"source":"iana"},
  	"application/simplesymbolcontainer": {"source":"iana"},
  	"application/slate": {"source":"iana"},
  	"application/smil": {"source":"iana"},
  	"application/smil+xml": {"source":"iana","extensions":["smi","smil"]},
  	"application/smpte336m": {"source":"iana"},
  	"application/soap+fastinfoset": {"source":"iana"},
  	"application/soap+xml": {"source":"iana","compressible":true},
  	"application/sparql-query": {"source":"iana","extensions":["rq"]},
  	"application/sparql-results+xml": {"source":"iana","extensions":["srx"]},
  	"application/spirits-event+xml": {"source":"iana"},
  	"application/sql": {"source":"iana"},
  	"application/srgs": {"source":"iana","extensions":["gram"]},
  	"application/srgs+xml": {"source":"iana","extensions":["grxml"]},
  	"application/sru+xml": {"source":"iana","extensions":["sru"]},
  	"application/ssdl+xml": {"source":"apache","extensions":["ssdl"]},
  	"application/ssml+xml": {"source":"iana","extensions":["ssml"]},
  	"application/tamp-apex-update": {"source":"iana"},
  	"application/tamp-apex-update-confirm": {"source":"iana"},
  	"application/tamp-community-update": {"source":"iana"},
  	"application/tamp-community-update-confirm": {"source":"iana"},
  	"application/tamp-error": {"source":"iana"},
  	"application/tamp-sequence-adjust": {"source":"iana"},
  	"application/tamp-sequence-adjust-confirm": {"source":"iana"},
  	"application/tamp-status-query": {"source":"iana"},
  	"application/tamp-status-response": {"source":"iana"},
  	"application/tamp-update": {"source":"iana"},
  	"application/tamp-update-confirm": {"source":"iana"},
  	"application/tar": {"compressible":true},
  	"application/tei+xml": {"source":"iana","extensions":["tei","teicorpus"]},
  	"application/thraud+xml": {"source":"iana","extensions":["tfi"]},
  	"application/timestamp-query": {"source":"iana"},
  	"application/timestamp-reply": {"source":"iana"},
  	"application/timestamped-data": {"source":"iana","extensions":["tsd"]},
  	"application/tnauthlist": {"source":"iana"},
  	"application/trig": {"source":"iana"},
  	"application/ttml+xml": {"source":"iana"},
  	"application/tve-trigger": {"source":"iana"},
  	"application/ulpfec": {"source":"iana"},
  	"application/urc-grpsheet+xml": {"source":"iana"},
  	"application/urc-ressheet+xml": {"source":"iana"},
  	"application/urc-targetdesc+xml": {"source":"iana"},
  	"application/urc-uisocketdesc+xml": {"source":"iana"},
  	"application/vcard+json": {"source":"iana","compressible":true},
  	"application/vcard+xml": {"source":"iana"},
  	"application/vemmi": {"source":"iana"},
  	"application/vividence.scriptfile": {"source":"apache"},
  	"application/vnd.1000minds.decision-model+xml": {"source":"iana"},
  	"application/vnd.3gpp-prose+xml": {"source":"iana"},
  	"application/vnd.3gpp-prose-pc3ch+xml": {"source":"iana"},
  	"application/vnd.3gpp-v2x-local-service-information": {"source":"iana"},
  	"application/vnd.3gpp.access-transfer-events+xml": {"source":"iana"},
  	"application/vnd.3gpp.bsf+xml": {"source":"iana"},
  	"application/vnd.3gpp.gmop+xml": {"source":"iana"},
  	"application/vnd.3gpp.mcptt-affiliation-command+xml": {"source":"iana"},
  	"application/vnd.3gpp.mcptt-floor-request+xml": {"source":"iana"},
  	"application/vnd.3gpp.mcptt-info+xml": {"source":"iana"},
  	"application/vnd.3gpp.mcptt-location-info+xml": {"source":"iana"},
  	"application/vnd.3gpp.mcptt-mbms-usage-info+xml": {"source":"iana"},
  	"application/vnd.3gpp.mcptt-signed+xml": {"source":"iana"},
  	"application/vnd.3gpp.mid-call+xml": {"source":"iana"},
  	"application/vnd.3gpp.pic-bw-large": {"source":"iana","extensions":["plb"]},
  	"application/vnd.3gpp.pic-bw-small": {"source":"iana","extensions":["psb"]},
  	"application/vnd.3gpp.pic-bw-var": {"source":"iana","extensions":["pvb"]},
  	"application/vnd.3gpp.sms": {"source":"iana"},
  	"application/vnd.3gpp.sms+xml": {"source":"iana"},
  	"application/vnd.3gpp.srvcc-ext+xml": {"source":"iana"},
  	"application/vnd.3gpp.srvcc-info+xml": {"source":"iana"},
  	"application/vnd.3gpp.state-and-event-info+xml": {"source":"iana"},
  	"application/vnd.3gpp.ussd+xml": {"source":"iana"},
  	"application/vnd.3gpp2.bcmcsinfo+xml": {"source":"iana"},
  	"application/vnd.3gpp2.sms": {"source":"iana"},
  	"application/vnd.3gpp2.tcap": {"source":"iana","extensions":["tcap"]},
  	"application/vnd.3lightssoftware.imagescal": {"source":"iana"},
  	"application/vnd.3m.post-it-notes": {"source":"iana","extensions":["pwn"]},
  	"application/vnd.accpac.simply.aso": {"source":"iana","extensions":["aso"]},
  	"application/vnd.accpac.simply.imp": {"source":"iana","extensions":["imp"]},
  	"application/vnd.acucobol": {"source":"iana","extensions":["acu"]},
  	"application/vnd.acucorp": {"source":"iana","extensions":["atc","acutc"]},
  	"application/vnd.adobe.air-application-installer-package+zip": {"source":"apache","extensions":["air"]},
  	"application/vnd.adobe.flash.movie": {"source":"iana"},
  	"application/vnd.adobe.formscentral.fcdt": {"source":"iana","extensions":["fcdt"]},
  	"application/vnd.adobe.fxp": {"source":"iana","extensions":["fxp","fxpl"]},
  	"application/vnd.adobe.partial-upload": {"source":"iana"},
  	"application/vnd.adobe.xdp+xml": {"source":"iana","extensions":["xdp"]},
  	"application/vnd.adobe.xfdf": {"source":"iana","extensions":["xfdf"]},
  	"application/vnd.aether.imp": {"source":"iana"},
  	"application/vnd.ah-barcode": {"source":"iana"},
  	"application/vnd.ahead.space": {"source":"iana","extensions":["ahead"]},
  	"application/vnd.airzip.filesecure.azf": {"source":"iana","extensions":["azf"]},
  	"application/vnd.airzip.filesecure.azs": {"source":"iana","extensions":["azs"]},
  	"application/vnd.amadeus+json": {"source":"iana","compressible":true},
  	"application/vnd.amazon.ebook": {"source":"apache","extensions":["azw"]},
  	"application/vnd.amazon.mobi8-ebook": {"source":"iana"},
  	"application/vnd.americandynamics.acc": {"source":"iana","extensions":["acc"]},
  	"application/vnd.amiga.ami": {"source":"iana","extensions":["ami"]},
  	"application/vnd.amundsen.maze+xml": {"source":"iana"},
  	"application/vnd.android.package-archive": {"source":"apache","compressible":false,"extensions":["apk"]},
  	"application/vnd.anki": {"source":"iana"},
  	"application/vnd.anser-web-certificate-issue-initiation": {"source":"iana","extensions":["cii"]},
  	"application/vnd.anser-web-funds-transfer-initiation": {"source":"apache","extensions":["fti"]},
  	"application/vnd.antix.game-component": {"source":"iana","extensions":["atx"]},
  	"application/vnd.apache.thrift.binary": {"source":"iana"},
  	"application/vnd.apache.thrift.compact": {"source":"iana"},
  	"application/vnd.apache.thrift.json": {"source":"iana"},
  	"application/vnd.api+json": {"source":"iana","compressible":true},
  	"application/vnd.apothekende.reservation+json": {"source":"iana","compressible":true},
  	"application/vnd.apple.installer+xml": {"source":"iana","extensions":["mpkg"]},
  	"application/vnd.apple.mpegurl": {"source":"iana","extensions":["m3u8"]},
  	"application/vnd.apple.pkpass": {"compressible":false,"extensions":["pkpass"]},
  	"application/vnd.arastra.swi": {"source":"iana"},
  	"application/vnd.aristanetworks.swi": {"source":"iana","extensions":["swi"]},
  	"application/vnd.artsquare": {"source":"iana"},
  	"application/vnd.astraea-software.iota": {"source":"iana","extensions":["iota"]},
  	"application/vnd.audiograph": {"source":"iana","extensions":["aep"]},
  	"application/vnd.autopackage": {"source":"iana"},
  	"application/vnd.avalon+json": {"source":"iana","compressible":true},
  	"application/vnd.avistar+xml": {"source":"iana"},
  	"application/vnd.balsamiq.bmml+xml": {"source":"iana"},
  	"application/vnd.balsamiq.bmpr": {"source":"iana"},
  	"application/vnd.bbf.usp.msg": {"source":"iana"},
  	"application/vnd.bbf.usp.msg+json": {"source":"iana","compressible":true},
  	"application/vnd.bekitzur-stech+json": {"source":"iana","compressible":true},
  	"application/vnd.bint.med-content": {"source":"iana"},
  	"application/vnd.biopax.rdf+xml": {"source":"iana"},
  	"application/vnd.blink-idb-value-wrapper": {"source":"iana"},
  	"application/vnd.blueice.multipass": {"source":"iana","extensions":["mpm"]},
  	"application/vnd.bluetooth.ep.oob": {"source":"iana"},
  	"application/vnd.bluetooth.le.oob": {"source":"iana"},
  	"application/vnd.bmi": {"source":"iana","extensions":["bmi"]},
  	"application/vnd.businessobjects": {"source":"iana","extensions":["rep"]},
  	"application/vnd.cab-jscript": {"source":"iana"},
  	"application/vnd.canon-cpdl": {"source":"iana"},
  	"application/vnd.canon-lips": {"source":"iana"},
  	"application/vnd.capasystems-pg+json": {"source":"iana","compressible":true},
  	"application/vnd.cendio.thinlinc.clientconf": {"source":"iana"},
  	"application/vnd.century-systems.tcp_stream": {"source":"iana"},
  	"application/vnd.chemdraw+xml": {"source":"iana","extensions":["cdxml"]},
  	"application/vnd.chess-pgn": {"source":"iana"},
  	"application/vnd.chipnuts.karaoke-mmd": {"source":"iana","extensions":["mmd"]},
  	"application/vnd.cinderella": {"source":"iana","extensions":["cdy"]},
  	"application/vnd.cirpack.isdn-ext": {"source":"iana"},
  	"application/vnd.citationstyles.style+xml": {"source":"iana"},
  	"application/vnd.claymore": {"source":"iana","extensions":["cla"]},
  	"application/vnd.cloanto.rp9": {"source":"iana","extensions":["rp9"]},
  	"application/vnd.clonk.c4group": {"source":"iana","extensions":["c4g","c4d","c4f","c4p","c4u"]},
  	"application/vnd.cluetrust.cartomobile-config": {"source":"iana","extensions":["c11amc"]},
  	"application/vnd.cluetrust.cartomobile-config-pkg": {"source":"iana","extensions":["c11amz"]},
  	"application/vnd.coffeescript": {"source":"iana"},
  	"application/vnd.collabio.xodocuments.document": {"source":"iana"},
  	"application/vnd.collabio.xodocuments.document-template": {"source":"iana"},
  	"application/vnd.collabio.xodocuments.presentation": {"source":"iana"},
  	"application/vnd.collabio.xodocuments.presentation-template": {"source":"iana"},
  	"application/vnd.collabio.xodocuments.spreadsheet": {"source":"iana"},
  	"application/vnd.collabio.xodocuments.spreadsheet-template": {"source":"iana"},
  	"application/vnd.collection+json": {"source":"iana","compressible":true},
  	"application/vnd.collection.doc+json": {"source":"iana","compressible":true},
  	"application/vnd.collection.next+json": {"source":"iana","compressible":true},
  	"application/vnd.comicbook+zip": {"source":"iana"},
  	"application/vnd.comicbook-rar": {"source":"iana"},
  	"application/vnd.commerce-battelle": {"source":"iana"},
  	"application/vnd.commonspace": {"source":"iana","extensions":["csp"]},
  	"application/vnd.contact.cmsg": {"source":"iana","extensions":["cdbcmsg"]},
  	"application/vnd.coreos.ignition+json": {"source":"iana","compressible":true},
  	"application/vnd.cosmocaller": {"source":"iana","extensions":["cmc"]},
  	"application/vnd.crick.clicker": {"source":"iana","extensions":["clkx"]},
  	"application/vnd.crick.clicker.keyboard": {"source":"iana","extensions":["clkk"]},
  	"application/vnd.crick.clicker.palette": {"source":"iana","extensions":["clkp"]},
  	"application/vnd.crick.clicker.template": {"source":"iana","extensions":["clkt"]},
  	"application/vnd.crick.clicker.wordbank": {"source":"iana","extensions":["clkw"]},
  	"application/vnd.criticaltools.wbs+xml": {"source":"iana","extensions":["wbs"]},
  	"application/vnd.ctc-posml": {"source":"iana","extensions":["pml"]},
  	"application/vnd.ctct.ws+xml": {"source":"iana"},
  	"application/vnd.cups-pdf": {"source":"iana"},
  	"application/vnd.cups-postscript": {"source":"iana"},
  	"application/vnd.cups-ppd": {"source":"iana","extensions":["ppd"]},
  	"application/vnd.cups-raster": {"source":"iana"},
  	"application/vnd.cups-raw": {"source":"iana"},
  	"application/vnd.curl": {"source":"iana"},
  	"application/vnd.curl.car": {"source":"apache","extensions":["car"]},
  	"application/vnd.curl.pcurl": {"source":"apache","extensions":["pcurl"]},
  	"application/vnd.cyan.dean.root+xml": {"source":"iana"},
  	"application/vnd.cybank": {"source":"iana"},
  	"application/vnd.d2l.coursepackage1p0+zip": {"source":"iana"},
  	"application/vnd.dart": {"source":"iana","compressible":true,"extensions":["dart"]},
  	"application/vnd.data-vision.rdz": {"source":"iana","extensions":["rdz"]},
  	"application/vnd.datapackage+json": {"source":"iana","compressible":true},
  	"application/vnd.dataresource+json": {"source":"iana","compressible":true},
  	"application/vnd.debian.binary-package": {"source":"iana"},
  	"application/vnd.dece.data": {"source":"iana","extensions":["uvf","uvvf","uvd","uvvd"]},
  	"application/vnd.dece.ttml+xml": {"source":"iana","extensions":["uvt","uvvt"]},
  	"application/vnd.dece.unspecified": {"source":"iana","extensions":["uvx","uvvx"]},
  	"application/vnd.dece.zip": {"source":"iana","extensions":["uvz","uvvz"]},
  	"application/vnd.denovo.fcselayout-link": {"source":"iana","extensions":["fe_launch"]},
  	"application/vnd.desmume-movie": {"source":"iana"},
  	"application/vnd.desmume.movie": {"source":"apache"},
  	"application/vnd.dir-bi.plate-dl-nosuffix": {"source":"iana"},
  	"application/vnd.dm.delegation+xml": {"source":"iana"},
  	"application/vnd.dna": {"source":"iana","extensions":["dna"]},
  	"application/vnd.document+json": {"source":"iana","compressible":true},
  	"application/vnd.dolby.mlp": {"source":"apache","extensions":["mlp"]},
  	"application/vnd.dolby.mobile.1": {"source":"iana"},
  	"application/vnd.dolby.mobile.2": {"source":"iana"},
  	"application/vnd.doremir.scorecloud-binary-document": {"source":"iana"},
  	"application/vnd.dpgraph": {"source":"iana","extensions":["dpg"]},
  	"application/vnd.dreamfactory": {"source":"iana","extensions":["dfac"]},
  	"application/vnd.drive+json": {"source":"iana","compressible":true},
  	"application/vnd.ds-keypoint": {"source":"apache","extensions":["kpxx"]},
  	"application/vnd.dtg.local": {"source":"iana"},
  	"application/vnd.dtg.local.flash": {"source":"iana"},
  	"application/vnd.dtg.local.html": {"source":"iana"},
  	"application/vnd.dvb.ait": {"source":"iana","extensions":["ait"]},
  	"application/vnd.dvb.dvbj": {"source":"iana"},
  	"application/vnd.dvb.esgcontainer": {"source":"iana"},
  	"application/vnd.dvb.ipdcdftnotifaccess": {"source":"iana"},
  	"application/vnd.dvb.ipdcesgaccess": {"source":"iana"},
  	"application/vnd.dvb.ipdcesgaccess2": {"source":"iana"},
  	"application/vnd.dvb.ipdcesgpdd": {"source":"iana"},
  	"application/vnd.dvb.ipdcroaming": {"source":"iana"},
  	"application/vnd.dvb.iptv.alfec-base": {"source":"iana"},
  	"application/vnd.dvb.iptv.alfec-enhancement": {"source":"iana"},
  	"application/vnd.dvb.notif-aggregate-root+xml": {"source":"iana"},
  	"application/vnd.dvb.notif-container+xml": {"source":"iana"},
  	"application/vnd.dvb.notif-generic+xml": {"source":"iana"},
  	"application/vnd.dvb.notif-ia-msglist+xml": {"source":"iana"},
  	"application/vnd.dvb.notif-ia-registration-request+xml": {"source":"iana"},
  	"application/vnd.dvb.notif-ia-registration-response+xml": {"source":"iana"},
  	"application/vnd.dvb.notif-init+xml": {"source":"iana"},
  	"application/vnd.dvb.pfr": {"source":"iana"},
  	"application/vnd.dvb.service": {"source":"iana","extensions":["svc"]},
  	"application/vnd.dxr": {"source":"iana"},
  	"application/vnd.dynageo": {"source":"iana","extensions":["geo"]},
  	"application/vnd.dzr": {"source":"iana"},
  	"application/vnd.easykaraoke.cdgdownload": {"source":"iana"},
  	"application/vnd.ecdis-update": {"source":"iana"},
  	"application/vnd.ecip.rlp": {"source":"iana"},
  	"application/vnd.ecowin.chart": {"source":"iana","extensions":["mag"]},
  	"application/vnd.ecowin.filerequest": {"source":"iana"},
  	"application/vnd.ecowin.fileupdate": {"source":"iana"},
  	"application/vnd.ecowin.series": {"source":"iana"},
  	"application/vnd.ecowin.seriesrequest": {"source":"iana"},
  	"application/vnd.ecowin.seriesupdate": {"source":"iana"},
  	"application/vnd.efi.img": {"source":"iana"},
  	"application/vnd.efi.iso": {"source":"iana"},
  	"application/vnd.emclient.accessrequest+xml": {"source":"iana"},
  	"application/vnd.enliven": {"source":"iana","extensions":["nml"]},
  	"application/vnd.enphase.envoy": {"source":"iana"},
  	"application/vnd.eprints.data+xml": {"source":"iana"},
  	"application/vnd.epson.esf": {"source":"iana","extensions":["esf"]},
  	"application/vnd.epson.msf": {"source":"iana","extensions":["msf"]},
  	"application/vnd.epson.quickanime": {"source":"iana","extensions":["qam"]},
  	"application/vnd.epson.salt": {"source":"iana","extensions":["slt"]},
  	"application/vnd.epson.ssf": {"source":"iana","extensions":["ssf"]},
  	"application/vnd.ericsson.quickcall": {"source":"iana"},
  	"application/vnd.espass-espass+zip": {"source":"iana"},
  	"application/vnd.eszigno3+xml": {"source":"iana","extensions":["es3","et3"]},
  	"application/vnd.etsi.aoc+xml": {"source":"iana"},
  	"application/vnd.etsi.asic-e+zip": {"source":"iana"},
  	"application/vnd.etsi.asic-s+zip": {"source":"iana"},
  	"application/vnd.etsi.cug+xml": {"source":"iana"},
  	"application/vnd.etsi.iptvcommand+xml": {"source":"iana"},
  	"application/vnd.etsi.iptvdiscovery+xml": {"source":"iana"},
  	"application/vnd.etsi.iptvprofile+xml": {"source":"iana"},
  	"application/vnd.etsi.iptvsad-bc+xml": {"source":"iana"},
  	"application/vnd.etsi.iptvsad-cod+xml": {"source":"iana"},
  	"application/vnd.etsi.iptvsad-npvr+xml": {"source":"iana"},
  	"application/vnd.etsi.iptvservice+xml": {"source":"iana"},
  	"application/vnd.etsi.iptvsync+xml": {"source":"iana"},
  	"application/vnd.etsi.iptvueprofile+xml": {"source":"iana"},
  	"application/vnd.etsi.mcid+xml": {"source":"iana"},
  	"application/vnd.etsi.mheg5": {"source":"iana"},
  	"application/vnd.etsi.overload-control-policy-dataset+xml": {"source":"iana"},
  	"application/vnd.etsi.pstn+xml": {"source":"iana"},
  	"application/vnd.etsi.sci+xml": {"source":"iana"},
  	"application/vnd.etsi.simservs+xml": {"source":"iana"},
  	"application/vnd.etsi.timestamp-token": {"source":"iana"},
  	"application/vnd.etsi.tsl+xml": {"source":"iana"},
  	"application/vnd.etsi.tsl.der": {"source":"iana"},
  	"application/vnd.eudora.data": {"source":"iana"},
  	"application/vnd.evolv.ecig.profile": {"source":"iana"},
  	"application/vnd.evolv.ecig.settings": {"source":"iana"},
  	"application/vnd.evolv.ecig.theme": {"source":"iana"},
  	"application/vnd.ezpix-album": {"source":"iana","extensions":["ez2"]},
  	"application/vnd.ezpix-package": {"source":"iana","extensions":["ez3"]},
  	"application/vnd.f-secure.mobile": {"source":"iana"},
  	"application/vnd.fastcopy-disk-image": {"source":"iana"},
  	"application/vnd.fdf": {"source":"iana","extensions":["fdf"]},
  	"application/vnd.fdsn.mseed": {"source":"iana","extensions":["mseed"]},
  	"application/vnd.fdsn.seed": {"source":"iana","extensions":["seed","dataless"]},
  	"application/vnd.ffsns": {"source":"iana"},
  	"application/vnd.filmit.zfc": {"source":"iana"},
  	"application/vnd.fints": {"source":"iana"},
  	"application/vnd.firemonkeys.cloudcell": {"source":"iana"},
  	"application/vnd.flographit": {"source":"iana","extensions":["gph"]},
  	"application/vnd.fluxtime.clip": {"source":"iana","extensions":["ftc"]},
  	"application/vnd.font-fontforge-sfd": {"source":"iana"},
  	"application/vnd.framemaker": {"source":"iana","extensions":["fm","frame","maker","book"]},
  	"application/vnd.frogans.fnc": {"source":"iana","extensions":["fnc"]},
  	"application/vnd.frogans.ltf": {"source":"iana","extensions":["ltf"]},
  	"application/vnd.fsc.weblaunch": {"source":"iana","extensions":["fsc"]},
  	"application/vnd.fujitsu.oasys": {"source":"iana","extensions":["oas"]},
  	"application/vnd.fujitsu.oasys2": {"source":"iana","extensions":["oa2"]},
  	"application/vnd.fujitsu.oasys3": {"source":"iana","extensions":["oa3"]},
  	"application/vnd.fujitsu.oasysgp": {"source":"iana","extensions":["fg5"]},
  	"application/vnd.fujitsu.oasysprs": {"source":"iana","extensions":["bh2"]},
  	"application/vnd.fujixerox.art-ex": {"source":"iana"},
  	"application/vnd.fujixerox.art4": {"source":"iana"},
  	"application/vnd.fujixerox.ddd": {"source":"iana","extensions":["ddd"]},
  	"application/vnd.fujixerox.docuworks": {"source":"iana","extensions":["xdw"]},
  	"application/vnd.fujixerox.docuworks.binder": {"source":"iana","extensions":["xbd"]},
  	"application/vnd.fujixerox.docuworks.container": {"source":"iana"},
  	"application/vnd.fujixerox.hbpl": {"source":"iana"},
  	"application/vnd.fut-misnet": {"source":"iana"},
  	"application/vnd.fuzzysheet": {"source":"iana","extensions":["fzs"]},
  	"application/vnd.genomatix.tuxedo": {"source":"iana","extensions":["txd"]},
  	"application/vnd.geo+json": {"source":"iana","compressible":true},
  	"application/vnd.geocube+xml": {"source":"iana"},
  	"application/vnd.geogebra.file": {"source":"iana","extensions":["ggb"]},
  	"application/vnd.geogebra.tool": {"source":"iana","extensions":["ggt"]},
  	"application/vnd.geometry-explorer": {"source":"iana","extensions":["gex","gre"]},
  	"application/vnd.geonext": {"source":"iana","extensions":["gxt"]},
  	"application/vnd.geoplan": {"source":"iana","extensions":["g2w"]},
  	"application/vnd.geospace": {"source":"iana","extensions":["g3w"]},
  	"application/vnd.gerber": {"source":"iana"},
  	"application/vnd.globalplatform.card-content-mgt": {"source":"iana"},
  	"application/vnd.globalplatform.card-content-mgt-response": {"source":"iana"},
  	"application/vnd.gmx": {"source":"iana","extensions":["gmx"]},
  	"application/vnd.google-apps.document": {"compressible":false,"extensions":["gdoc"]},
  	"application/vnd.google-apps.presentation": {"compressible":false,"extensions":["gslides"]},
  	"application/vnd.google-apps.spreadsheet": {"compressible":false,"extensions":["gsheet"]},
  	"application/vnd.google-earth.kml+xml": {"source":"iana","compressible":true,"extensions":["kml"]},
  	"application/vnd.google-earth.kmz": {"source":"iana","compressible":false,"extensions":["kmz"]},
  	"application/vnd.gov.sk.e-form+xml": {"source":"iana"},
  	"application/vnd.gov.sk.e-form+zip": {"source":"iana"},
  	"application/vnd.gov.sk.xmldatacontainer+xml": {"source":"iana"},
  	"application/vnd.grafeq": {"source":"iana","extensions":["gqf","gqs"]},
  	"application/vnd.gridmp": {"source":"iana"},
  	"application/vnd.groove-account": {"source":"iana","extensions":["gac"]},
  	"application/vnd.groove-help": {"source":"iana","extensions":["ghf"]},
  	"application/vnd.groove-identity-message": {"source":"iana","extensions":["gim"]},
  	"application/vnd.groove-injector": {"source":"iana","extensions":["grv"]},
  	"application/vnd.groove-tool-message": {"source":"iana","extensions":["gtm"]},
  	"application/vnd.groove-tool-template": {"source":"iana","extensions":["tpl"]},
  	"application/vnd.groove-vcard": {"source":"iana","extensions":["vcg"]},
  	"application/vnd.hal+json": {"source":"iana","compressible":true},
  	"application/vnd.hal+xml": {"source":"iana","extensions":["hal"]},
  	"application/vnd.handheld-entertainment+xml": {"source":"iana","extensions":["zmm"]},
  	"application/vnd.hbci": {"source":"iana","extensions":["hbci"]},
  	"application/vnd.hc+json": {"source":"iana","compressible":true},
  	"application/vnd.hcl-bireports": {"source":"iana"},
  	"application/vnd.hdt": {"source":"iana"},
  	"application/vnd.heroku+json": {"source":"iana","compressible":true},
  	"application/vnd.hhe.lesson-player": {"source":"iana","extensions":["les"]},
  	"application/vnd.hp-hpgl": {"source":"iana","extensions":["hpgl"]},
  	"application/vnd.hp-hpid": {"source":"iana","extensions":["hpid"]},
  	"application/vnd.hp-hps": {"source":"iana","extensions":["hps"]},
  	"application/vnd.hp-jlyt": {"source":"iana","extensions":["jlt"]},
  	"application/vnd.hp-pcl": {"source":"iana","extensions":["pcl"]},
  	"application/vnd.hp-pclxl": {"source":"iana","extensions":["pclxl"]},
  	"application/vnd.httphone": {"source":"iana"},
  	"application/vnd.hydrostatix.sof-data": {"source":"iana","extensions":["sfd-hdstx"]},
  	"application/vnd.hyper-item+json": {"source":"iana","compressible":true},
  	"application/vnd.hyperdrive+json": {"source":"iana","compressible":true},
  	"application/vnd.hzn-3d-crossword": {"source":"iana"},
  	"application/vnd.ibm.afplinedata": {"source":"iana"},
  	"application/vnd.ibm.electronic-media": {"source":"iana"},
  	"application/vnd.ibm.minipay": {"source":"iana","extensions":["mpy"]},
  	"application/vnd.ibm.modcap": {"source":"iana","extensions":["afp","listafp","list3820"]},
  	"application/vnd.ibm.rights-management": {"source":"iana","extensions":["irm"]},
  	"application/vnd.ibm.secure-container": {"source":"iana","extensions":["sc"]},
  	"application/vnd.iccprofile": {"source":"iana","extensions":["icc","icm"]},
  	"application/vnd.ieee.1905": {"source":"iana"},
  	"application/vnd.igloader": {"source":"iana","extensions":["igl"]},
  	"application/vnd.imagemeter.folder+zip": {"source":"iana"},
  	"application/vnd.imagemeter.image+zip": {"source":"iana"},
  	"application/vnd.immervision-ivp": {"source":"iana","extensions":["ivp"]},
  	"application/vnd.immervision-ivu": {"source":"iana","extensions":["ivu"]},
  	"application/vnd.ims.imsccv1p1": {"source":"iana"},
  	"application/vnd.ims.imsccv1p2": {"source":"iana"},
  	"application/vnd.ims.imsccv1p3": {"source":"iana"},
  	"application/vnd.ims.lis.v2.result+json": {"source":"iana","compressible":true},
  	"application/vnd.ims.lti.v2.toolconsumerprofile+json": {"source":"iana","compressible":true},
  	"application/vnd.ims.lti.v2.toolproxy+json": {"source":"iana","compressible":true},
  	"application/vnd.ims.lti.v2.toolproxy.id+json": {"source":"iana","compressible":true},
  	"application/vnd.ims.lti.v2.toolsettings+json": {"source":"iana","compressible":true},
  	"application/vnd.ims.lti.v2.toolsettings.simple+json": {"source":"iana","compressible":true},
  	"application/vnd.informedcontrol.rms+xml": {"source":"iana"},
  	"application/vnd.informix-visionary": {"source":"iana"},
  	"application/vnd.infotech.project": {"source":"iana"},
  	"application/vnd.infotech.project+xml": {"source":"iana"},
  	"application/vnd.innopath.wamp.notification": {"source":"iana"},
  	"application/vnd.insors.igm": {"source":"iana","extensions":["igm"]},
  	"application/vnd.intercon.formnet": {"source":"iana","extensions":["xpw","xpx"]},
  	"application/vnd.intergeo": {"source":"iana","extensions":["i2g"]},
  	"application/vnd.intertrust.digibox": {"source":"iana"},
  	"application/vnd.intertrust.nncp": {"source":"iana"},
  	"application/vnd.intu.qbo": {"source":"iana","extensions":["qbo"]},
  	"application/vnd.intu.qfx": {"source":"iana","extensions":["qfx"]},
  	"application/vnd.iptc.g2.catalogitem+xml": {"source":"iana"},
  	"application/vnd.iptc.g2.conceptitem+xml": {"source":"iana"},
  	"application/vnd.iptc.g2.knowledgeitem+xml": {"source":"iana"},
  	"application/vnd.iptc.g2.newsitem+xml": {"source":"iana"},
  	"application/vnd.iptc.g2.newsmessage+xml": {"source":"iana"},
  	"application/vnd.iptc.g2.packageitem+xml": {"source":"iana"},
  	"application/vnd.iptc.g2.planningitem+xml": {"source":"iana"},
  	"application/vnd.ipunplugged.rcprofile": {"source":"iana","extensions":["rcprofile"]},
  	"application/vnd.irepository.package+xml": {"source":"iana","extensions":["irp"]},
  	"application/vnd.is-xpr": {"source":"iana","extensions":["xpr"]},
  	"application/vnd.isac.fcs": {"source":"iana","extensions":["fcs"]},
  	"application/vnd.jam": {"source":"iana","extensions":["jam"]},
  	"application/vnd.japannet-directory-service": {"source":"iana"},
  	"application/vnd.japannet-jpnstore-wakeup": {"source":"iana"},
  	"application/vnd.japannet-payment-wakeup": {"source":"iana"},
  	"application/vnd.japannet-registration": {"source":"iana"},
  	"application/vnd.japannet-registration-wakeup": {"source":"iana"},
  	"application/vnd.japannet-setstore-wakeup": {"source":"iana"},
  	"application/vnd.japannet-verification": {"source":"iana"},
  	"application/vnd.japannet-verification-wakeup": {"source":"iana"},
  	"application/vnd.jcp.javame.midlet-rms": {"source":"iana","extensions":["rms"]},
  	"application/vnd.jisp": {"source":"iana","extensions":["jisp"]},
  	"application/vnd.joost.joda-archive": {"source":"iana","extensions":["joda"]},
  	"application/vnd.jsk.isdn-ngn": {"source":"iana"},
  	"application/vnd.kahootz": {"source":"iana","extensions":["ktz","ktr"]},
  	"application/vnd.kde.karbon": {"source":"iana","extensions":["karbon"]},
  	"application/vnd.kde.kchart": {"source":"iana","extensions":["chrt"]},
  	"application/vnd.kde.kformula": {"source":"iana","extensions":["kfo"]},
  	"application/vnd.kde.kivio": {"source":"iana","extensions":["flw"]},
  	"application/vnd.kde.kontour": {"source":"iana","extensions":["kon"]},
  	"application/vnd.kde.kpresenter": {"source":"iana","extensions":["kpr","kpt"]},
  	"application/vnd.kde.kspread": {"source":"iana","extensions":["ksp"]},
  	"application/vnd.kde.kword": {"source":"iana","extensions":["kwd","kwt"]},
  	"application/vnd.kenameaapp": {"source":"iana","extensions":["htke"]},
  	"application/vnd.kidspiration": {"source":"iana","extensions":["kia"]},
  	"application/vnd.kinar": {"source":"iana","extensions":["kne","knp"]},
  	"application/vnd.koan": {"source":"iana","extensions":["skp","skd","skt","skm"]},
  	"application/vnd.kodak-descriptor": {"source":"iana","extensions":["sse"]},
  	"application/vnd.las.las+json": {"source":"iana","compressible":true},
  	"application/vnd.las.las+xml": {"source":"iana","extensions":["lasxml"]},
  	"application/vnd.liberty-request+xml": {"source":"iana"},
  	"application/vnd.llamagraphics.life-balance.desktop": {"source":"iana","extensions":["lbd"]},
  	"application/vnd.llamagraphics.life-balance.exchange+xml": {"source":"iana","extensions":["lbe"]},
  	"application/vnd.lotus-1-2-3": {"source":"iana","extensions":["123"]},
  	"application/vnd.lotus-approach": {"source":"iana","extensions":["apr"]},
  	"application/vnd.lotus-freelance": {"source":"iana","extensions":["pre"]},
  	"application/vnd.lotus-notes": {"source":"iana","extensions":["nsf"]},
  	"application/vnd.lotus-organizer": {"source":"iana","extensions":["org"]},
  	"application/vnd.lotus-screencam": {"source":"iana","extensions":["scm"]},
  	"application/vnd.lotus-wordpro": {"source":"iana","extensions":["lwp"]},
  	"application/vnd.macports.portpkg": {"source":"iana","extensions":["portpkg"]},
  	"application/vnd.mapbox-vector-tile": {"source":"iana"},
  	"application/vnd.marlin.drm.actiontoken+xml": {"source":"iana"},
  	"application/vnd.marlin.drm.conftoken+xml": {"source":"iana"},
  	"application/vnd.marlin.drm.license+xml": {"source":"iana"},
  	"application/vnd.marlin.drm.mdcf": {"source":"iana"},
  	"application/vnd.mason+json": {"source":"iana","compressible":true},
  	"application/vnd.maxmind.maxmind-db": {"source":"iana"},
  	"application/vnd.mcd": {"source":"iana","extensions":["mcd"]},
  	"application/vnd.medcalcdata": {"source":"iana","extensions":["mc1"]},
  	"application/vnd.mediastation.cdkey": {"source":"iana","extensions":["cdkey"]},
  	"application/vnd.meridian-slingshot": {"source":"iana"},
  	"application/vnd.mfer": {"source":"iana","extensions":["mwf"]},
  	"application/vnd.mfmp": {"source":"iana","extensions":["mfm"]},
  	"application/vnd.micro+json": {"source":"iana","compressible":true},
  	"application/vnd.micrografx.flo": {"source":"iana","extensions":["flo"]},
  	"application/vnd.micrografx.igx": {"source":"iana","extensions":["igx"]},
  	"application/vnd.microsoft.portable-executable": {"source":"iana"},
  	"application/vnd.microsoft.windows.thumbnail-cache": {"source":"iana"},
  	"application/vnd.miele+json": {"source":"iana","compressible":true},
  	"application/vnd.mif": {"source":"iana","extensions":["mif"]},
  	"application/vnd.minisoft-hp3000-save": {"source":"iana"},
  	"application/vnd.mitsubishi.misty-guard.trustweb": {"source":"iana"},
  	"application/vnd.mobius.daf": {"source":"iana","extensions":["daf"]},
  	"application/vnd.mobius.dis": {"source":"iana","extensions":["dis"]},
  	"application/vnd.mobius.mbk": {"source":"iana","extensions":["mbk"]},
  	"application/vnd.mobius.mqy": {"source":"iana","extensions":["mqy"]},
  	"application/vnd.mobius.msl": {"source":"iana","extensions":["msl"]},
  	"application/vnd.mobius.plc": {"source":"iana","extensions":["plc"]},
  	"application/vnd.mobius.txf": {"source":"iana","extensions":["txf"]},
  	"application/vnd.mophun.application": {"source":"iana","extensions":["mpn"]},
  	"application/vnd.mophun.certificate": {"source":"iana","extensions":["mpc"]},
  	"application/vnd.motorola.flexsuite": {"source":"iana"},
  	"application/vnd.motorola.flexsuite.adsi": {"source":"iana"},
  	"application/vnd.motorola.flexsuite.fis": {"source":"iana"},
  	"application/vnd.motorola.flexsuite.gotap": {"source":"iana"},
  	"application/vnd.motorola.flexsuite.kmr": {"source":"iana"},
  	"application/vnd.motorola.flexsuite.ttc": {"source":"iana"},
  	"application/vnd.motorola.flexsuite.wem": {"source":"iana"},
  	"application/vnd.motorola.iprm": {"source":"iana"},
  	"application/vnd.mozilla.xul+xml": {"source":"iana","compressible":true,"extensions":["xul"]},
  	"application/vnd.ms-3mfdocument": {"source":"iana"},
  	"application/vnd.ms-artgalry": {"source":"iana","extensions":["cil"]},
  	"application/vnd.ms-asf": {"source":"iana"},
  	"application/vnd.ms-cab-compressed": {"source":"iana","extensions":["cab"]},
  	"application/vnd.ms-color.iccprofile": {"source":"apache"},
  	"application/vnd.ms-excel": {"source":"iana","compressible":false,"extensions":["xls","xlm","xla","xlc","xlt","xlw"]},
  	"application/vnd.ms-excel.addin.macroenabled.12": {"source":"iana","extensions":["xlam"]},
  	"application/vnd.ms-excel.sheet.binary.macroenabled.12": {"source":"iana","extensions":["xlsb"]},
  	"application/vnd.ms-excel.sheet.macroenabled.12": {"source":"iana","extensions":["xlsm"]},
  	"application/vnd.ms-excel.template.macroenabled.12": {"source":"iana","extensions":["xltm"]},
  	"application/vnd.ms-fontobject": {"source":"iana","compressible":true,"extensions":["eot"]},
  	"application/vnd.ms-htmlhelp": {"source":"iana","extensions":["chm"]},
  	"application/vnd.ms-ims": {"source":"iana","extensions":["ims"]},
  	"application/vnd.ms-lrm": {"source":"iana","extensions":["lrm"]},
  	"application/vnd.ms-office.activex+xml": {"source":"iana"},
  	"application/vnd.ms-officetheme": {"source":"iana","extensions":["thmx"]},
  	"application/vnd.ms-opentype": {"source":"apache","compressible":true},
  	"application/vnd.ms-outlook": {"compressible":false,"extensions":["msg"]},
  	"application/vnd.ms-package.obfuscated-opentype": {"source":"apache"},
  	"application/vnd.ms-pki.seccat": {"source":"apache","extensions":["cat"]},
  	"application/vnd.ms-pki.stl": {"source":"apache","extensions":["stl"]},
  	"application/vnd.ms-playready.initiator+xml": {"source":"iana"},
  	"application/vnd.ms-powerpoint": {"source":"iana","compressible":false,"extensions":["ppt","pps","pot"]},
  	"application/vnd.ms-powerpoint.addin.macroenabled.12": {"source":"iana","extensions":["ppam"]},
  	"application/vnd.ms-powerpoint.presentation.macroenabled.12": {"source":"iana","extensions":["pptm"]},
  	"application/vnd.ms-powerpoint.slide.macroenabled.12": {"source":"iana","extensions":["sldm"]},
  	"application/vnd.ms-powerpoint.slideshow.macroenabled.12": {"source":"iana","extensions":["ppsm"]},
  	"application/vnd.ms-powerpoint.template.macroenabled.12": {"source":"iana","extensions":["potm"]},
  	"application/vnd.ms-printdevicecapabilities+xml": {"source":"iana"},
  	"application/vnd.ms-printing.printticket+xml": {"source":"apache"},
  	"application/vnd.ms-printschematicket+xml": {"source":"iana"},
  	"application/vnd.ms-project": {"source":"iana","extensions":["mpp","mpt"]},
  	"application/vnd.ms-tnef": {"source":"iana"},
  	"application/vnd.ms-windows.devicepairing": {"source":"iana"},
  	"application/vnd.ms-windows.nwprinting.oob": {"source":"iana"},
  	"application/vnd.ms-windows.printerpairing": {"source":"iana"},
  	"application/vnd.ms-windows.wsd.oob": {"source":"iana"},
  	"application/vnd.ms-wmdrm.lic-chlg-req": {"source":"iana"},
  	"application/vnd.ms-wmdrm.lic-resp": {"source":"iana"},
  	"application/vnd.ms-wmdrm.meter-chlg-req": {"source":"iana"},
  	"application/vnd.ms-wmdrm.meter-resp": {"source":"iana"},
  	"application/vnd.ms-word.document.macroenabled.12": {"source":"iana","extensions":["docm"]},
  	"application/vnd.ms-word.template.macroenabled.12": {"source":"iana","extensions":["dotm"]},
  	"application/vnd.ms-works": {"source":"iana","extensions":["wps","wks","wcm","wdb"]},
  	"application/vnd.ms-wpl": {"source":"iana","extensions":["wpl"]},
  	"application/vnd.ms-xpsdocument": {"source":"iana","compressible":false,"extensions":["xps"]},
  	"application/vnd.msa-disk-image": {"source":"iana"},
  	"application/vnd.mseq": {"source":"iana","extensions":["mseq"]},
  	"application/vnd.msign": {"source":"iana"},
  	"application/vnd.multiad.creator": {"source":"iana"},
  	"application/vnd.multiad.creator.cif": {"source":"iana"},
  	"application/vnd.music-niff": {"source":"iana"},
  	"application/vnd.musician": {"source":"iana","extensions":["mus"]},
  	"application/vnd.muvee.style": {"source":"iana","extensions":["msty"]},
  	"application/vnd.mynfc": {"source":"iana","extensions":["taglet"]},
  	"application/vnd.ncd.control": {"source":"iana"},
  	"application/vnd.ncd.reference": {"source":"iana"},
  	"application/vnd.nearst.inv+json": {"source":"iana","compressible":true},
  	"application/vnd.nervana": {"source":"iana"},
  	"application/vnd.netfpx": {"source":"iana"},
  	"application/vnd.neurolanguage.nlu": {"source":"iana","extensions":["nlu"]},
  	"application/vnd.nintendo.nitro.rom": {"source":"iana"},
  	"application/vnd.nintendo.snes.rom": {"source":"iana"},
  	"application/vnd.nitf": {"source":"iana","extensions":["ntf","nitf"]},
  	"application/vnd.noblenet-directory": {"source":"iana","extensions":["nnd"]},
  	"application/vnd.noblenet-sealer": {"source":"iana","extensions":["nns"]},
  	"application/vnd.noblenet-web": {"source":"iana","extensions":["nnw"]},
  	"application/vnd.nokia.catalogs": {"source":"iana"},
  	"application/vnd.nokia.conml+wbxml": {"source":"iana"},
  	"application/vnd.nokia.conml+xml": {"source":"iana"},
  	"application/vnd.nokia.iptv.config+xml": {"source":"iana"},
  	"application/vnd.nokia.isds-radio-presets": {"source":"iana"},
  	"application/vnd.nokia.landmark+wbxml": {"source":"iana"},
  	"application/vnd.nokia.landmark+xml": {"source":"iana"},
  	"application/vnd.nokia.landmarkcollection+xml": {"source":"iana"},
  	"application/vnd.nokia.n-gage.ac+xml": {"source":"iana"},
  	"application/vnd.nokia.n-gage.data": {"source":"iana","extensions":["ngdat"]},
  	"application/vnd.nokia.n-gage.symbian.install": {"source":"iana","extensions":["n-gage"]},
  	"application/vnd.nokia.ncd": {"source":"iana"},
  	"application/vnd.nokia.pcd+wbxml": {"source":"iana"},
  	"application/vnd.nokia.pcd+xml": {"source":"iana"},
  	"application/vnd.nokia.radio-preset": {"source":"iana","extensions":["rpst"]},
  	"application/vnd.nokia.radio-presets": {"source":"iana","extensions":["rpss"]},
  	"application/vnd.novadigm.edm": {"source":"iana","extensions":["edm"]},
  	"application/vnd.novadigm.edx": {"source":"iana","extensions":["edx"]},
  	"application/vnd.novadigm.ext": {"source":"iana","extensions":["ext"]},
  	"application/vnd.ntt-local.content-share": {"source":"iana"},
  	"application/vnd.ntt-local.file-transfer": {"source":"iana"},
  	"application/vnd.ntt-local.ogw_remote-access": {"source":"iana"},
  	"application/vnd.ntt-local.sip-ta_remote": {"source":"iana"},
  	"application/vnd.ntt-local.sip-ta_tcp_stream": {"source":"iana"},
  	"application/vnd.oasis.opendocument.chart": {"source":"iana","extensions":["odc"]},
  	"application/vnd.oasis.opendocument.chart-template": {"source":"iana","extensions":["otc"]},
  	"application/vnd.oasis.opendocument.database": {"source":"iana","extensions":["odb"]},
  	"application/vnd.oasis.opendocument.formula": {"source":"iana","extensions":["odf"]},
  	"application/vnd.oasis.opendocument.formula-template": {"source":"iana","extensions":["odft"]},
  	"application/vnd.oasis.opendocument.graphics": {"source":"iana","compressible":false,"extensions":["odg"]},
  	"application/vnd.oasis.opendocument.graphics-template": {"source":"iana","extensions":["otg"]},
  	"application/vnd.oasis.opendocument.image": {"source":"iana","extensions":["odi"]},
  	"application/vnd.oasis.opendocument.image-template": {"source":"iana","extensions":["oti"]},
  	"application/vnd.oasis.opendocument.presentation": {"source":"iana","compressible":false,"extensions":["odp"]},
  	"application/vnd.oasis.opendocument.presentation-template": {"source":"iana","extensions":["otp"]},
  	"application/vnd.oasis.opendocument.spreadsheet": {"source":"iana","compressible":false,"extensions":["ods"]},
  	"application/vnd.oasis.opendocument.spreadsheet-template": {"source":"iana","extensions":["ots"]},
  	"application/vnd.oasis.opendocument.text": {"source":"iana","compressible":false,"extensions":["odt"]},
  	"application/vnd.oasis.opendocument.text-master": {"source":"iana","extensions":["odm"]},
  	"application/vnd.oasis.opendocument.text-template": {"source":"iana","extensions":["ott"]},
  	"application/vnd.oasis.opendocument.text-web": {"source":"iana","extensions":["oth"]},
  	"application/vnd.obn": {"source":"iana"},
  	"application/vnd.ocf+cbor": {"source":"iana"},
  	"application/vnd.oftn.l10n+json": {"source":"iana","compressible":true},
  	"application/vnd.oipf.contentaccessdownload+xml": {"source":"iana"},
  	"application/vnd.oipf.contentaccessstreaming+xml": {"source":"iana"},
  	"application/vnd.oipf.cspg-hexbinary": {"source":"iana"},
  	"application/vnd.oipf.dae.svg+xml": {"source":"iana"},
  	"application/vnd.oipf.dae.xhtml+xml": {"source":"iana"},
  	"application/vnd.oipf.mippvcontrolmessage+xml": {"source":"iana"},
  	"application/vnd.oipf.pae.gem": {"source":"iana"},
  	"application/vnd.oipf.spdiscovery+xml": {"source":"iana"},
  	"application/vnd.oipf.spdlist+xml": {"source":"iana"},
  	"application/vnd.oipf.ueprofile+xml": {"source":"iana"},
  	"application/vnd.oipf.userprofile+xml": {"source":"iana"},
  	"application/vnd.olpc-sugar": {"source":"iana","extensions":["xo"]},
  	"application/vnd.oma-scws-config": {"source":"iana"},
  	"application/vnd.oma-scws-http-request": {"source":"iana"},
  	"application/vnd.oma-scws-http-response": {"source":"iana"},
  	"application/vnd.oma.bcast.associated-procedure-parameter+xml": {"source":"iana"},
  	"application/vnd.oma.bcast.drm-trigger+xml": {"source":"iana"},
  	"application/vnd.oma.bcast.imd+xml": {"source":"iana"},
  	"application/vnd.oma.bcast.ltkm": {"source":"iana"},
  	"application/vnd.oma.bcast.notification+xml": {"source":"iana"},
  	"application/vnd.oma.bcast.provisioningtrigger": {"source":"iana"},
  	"application/vnd.oma.bcast.sgboot": {"source":"iana"},
  	"application/vnd.oma.bcast.sgdd+xml": {"source":"iana"},
  	"application/vnd.oma.bcast.sgdu": {"source":"iana"},
  	"application/vnd.oma.bcast.simple-symbol-container": {"source":"iana"},
  	"application/vnd.oma.bcast.smartcard-trigger+xml": {"source":"iana"},
  	"application/vnd.oma.bcast.sprov+xml": {"source":"iana"},
  	"application/vnd.oma.bcast.stkm": {"source":"iana"},
  	"application/vnd.oma.cab-address-book+xml": {"source":"iana"},
  	"application/vnd.oma.cab-feature-handler+xml": {"source":"iana"},
  	"application/vnd.oma.cab-pcc+xml": {"source":"iana"},
  	"application/vnd.oma.cab-subs-invite+xml": {"source":"iana"},
  	"application/vnd.oma.cab-user-prefs+xml": {"source":"iana"},
  	"application/vnd.oma.dcd": {"source":"iana"},
  	"application/vnd.oma.dcdc": {"source":"iana"},
  	"application/vnd.oma.dd2+xml": {"source":"iana","extensions":["dd2"]},
  	"application/vnd.oma.drm.risd+xml": {"source":"iana"},
  	"application/vnd.oma.group-usage-list+xml": {"source":"iana"},
  	"application/vnd.oma.lwm2m+json": {"source":"iana","compressible":true},
  	"application/vnd.oma.lwm2m+tlv": {"source":"iana"},
  	"application/vnd.oma.pal+xml": {"source":"iana"},
  	"application/vnd.oma.poc.detailed-progress-report+xml": {"source":"iana"},
  	"application/vnd.oma.poc.final-report+xml": {"source":"iana"},
  	"application/vnd.oma.poc.groups+xml": {"source":"iana"},
  	"application/vnd.oma.poc.invocation-descriptor+xml": {"source":"iana"},
  	"application/vnd.oma.poc.optimized-progress-report+xml": {"source":"iana"},
  	"application/vnd.oma.push": {"source":"iana"},
  	"application/vnd.oma.scidm.messages+xml": {"source":"iana"},
  	"application/vnd.oma.xcap-directory+xml": {"source":"iana"},
  	"application/vnd.omads-email+xml": {"source":"iana"},
  	"application/vnd.omads-file+xml": {"source":"iana"},
  	"application/vnd.omads-folder+xml": {"source":"iana"},
  	"application/vnd.omaloc-supl-init": {"source":"iana"},
  	"application/vnd.onepager": {"source":"iana"},
  	"application/vnd.onepagertamp": {"source":"iana"},
  	"application/vnd.onepagertamx": {"source":"iana"},
  	"application/vnd.onepagertat": {"source":"iana"},
  	"application/vnd.onepagertatp": {"source":"iana"},
  	"application/vnd.onepagertatx": {"source":"iana"},
  	"application/vnd.openblox.game+xml": {"source":"iana"},
  	"application/vnd.openblox.game-binary": {"source":"iana"},
  	"application/vnd.openeye.oeb": {"source":"iana"},
  	"application/vnd.openofficeorg.extension": {"source":"apache","extensions":["oxt"]},
  	"application/vnd.openstreetmap.data+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.custom-properties+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.drawing+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.extended-properties+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.presentation": {"source":"iana","compressible":false,"extensions":["pptx"]},
  	"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.slide": {"source":"iana","extensions":["sldx"]},
  	"application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.slideshow": {"source":"iana","extensions":["ppsx"]},
  	"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.template": {"source":"iana","extensions":["potx"]},
  	"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {"source":"iana","compressible":false,"extensions":["xlsx"]},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.template": {"source":"iana","extensions":["xltx"]},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.theme+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.themeoverride+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.vmldrawing": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.document": {"source":"iana","compressible":false,"extensions":["docx"]},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.template": {"source":"iana","extensions":["dotx"]},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-package.core-properties+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-package.relationships+xml": {"source":"iana"},
  	"application/vnd.oracle.resource+json": {"source":"iana","compressible":true},
  	"application/vnd.orange.indata": {"source":"iana"},
  	"application/vnd.osa.netdeploy": {"source":"iana"},
  	"application/vnd.osgeo.mapguide.package": {"source":"iana","extensions":["mgp"]},
  	"application/vnd.osgi.bundle": {"source":"iana"},
  	"application/vnd.osgi.dp": {"source":"iana","extensions":["dp"]},
  	"application/vnd.osgi.subsystem": {"source":"iana","extensions":["esa"]},
  	"application/vnd.otps.ct-kip+xml": {"source":"iana"},
  	"application/vnd.oxli.countgraph": {"source":"iana"},
  	"application/vnd.pagerduty+json": {"source":"iana","compressible":true},
  	"application/vnd.palm": {"source":"iana","extensions":["pdb","pqa","oprc"]},
  	"application/vnd.panoply": {"source":"iana"},
  	"application/vnd.paos+xml": {"source":"iana"},
  	"application/vnd.paos.xml": {"source":"apache"},
  	"application/vnd.patentdive": {"source":"iana"},
  	"application/vnd.pawaafile": {"source":"iana","extensions":["paw"]},
  	"application/vnd.pcos": {"source":"iana"},
  	"application/vnd.pg.format": {"source":"iana","extensions":["str"]},
  	"application/vnd.pg.osasli": {"source":"iana","extensions":["ei6"]},
  	"application/vnd.piaccess.application-licence": {"source":"iana"},
  	"application/vnd.picsel": {"source":"iana","extensions":["efif"]},
  	"application/vnd.pmi.widget": {"source":"iana","extensions":["wg"]},
  	"application/vnd.poc.group-advertisement+xml": {"source":"iana"},
  	"application/vnd.pocketlearn": {"source":"iana","extensions":["plf"]},
  	"application/vnd.powerbuilder6": {"source":"iana","extensions":["pbd"]},
  	"application/vnd.powerbuilder6-s": {"source":"iana"},
  	"application/vnd.powerbuilder7": {"source":"iana"},
  	"application/vnd.powerbuilder7-s": {"source":"iana"},
  	"application/vnd.powerbuilder75": {"source":"iana"},
  	"application/vnd.powerbuilder75-s": {"source":"iana"},
  	"application/vnd.preminet": {"source":"iana"},
  	"application/vnd.previewsystems.box": {"source":"iana","extensions":["box"]},
  	"application/vnd.proteus.magazine": {"source":"iana","extensions":["mgz"]},
  	"application/vnd.publishare-delta-tree": {"source":"iana","extensions":["qps"]},
  	"application/vnd.pvi.ptid1": {"source":"iana","extensions":["ptid"]},
  	"application/vnd.pwg-multiplexed": {"source":"iana"},
  	"application/vnd.pwg-xhtml-print+xml": {"source":"iana"},
  	"application/vnd.qualcomm.brew-app-res": {"source":"iana"},
  	"application/vnd.quarantainenet": {"source":"iana"},
  	"application/vnd.quark.quarkxpress": {"source":"iana","extensions":["qxd","qxt","qwd","qwt","qxl","qxb"]},
  	"application/vnd.quobject-quoxdocument": {"source":"iana"},
  	"application/vnd.radisys.moml+xml": {"source":"iana"},
  	"application/vnd.radisys.msml+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-audit+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-audit-conf+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-audit-conn+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-audit-dialog+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-audit-stream+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-conf+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-dialog+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-dialog-base+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-dialog-fax-detect+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-dialog-group+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-dialog-speech+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-dialog-transform+xml": {"source":"iana"},
  	"application/vnd.rainstor.data": {"source":"iana"},
  	"application/vnd.rapid": {"source":"iana"},
  	"application/vnd.rar": {"source":"iana"},
  	"application/vnd.realvnc.bed": {"source":"iana","extensions":["bed"]},
  	"application/vnd.recordare.musicxml": {"source":"iana","extensions":["mxl"]},
  	"application/vnd.recordare.musicxml+xml": {"source":"iana","extensions":["musicxml"]},
  	"application/vnd.renlearn.rlprint": {"source":"iana"},
  	"application/vnd.restful+json": {"source":"iana","compressible":true},
  	"application/vnd.rig.cryptonote": {"source":"iana","extensions":["cryptonote"]},
  	"application/vnd.rim.cod": {"source":"apache","extensions":["cod"]},
  	"application/vnd.rn-realmedia": {"source":"apache","extensions":["rm"]},
  	"application/vnd.rn-realmedia-vbr": {"source":"apache","extensions":["rmvb"]},
  	"application/vnd.route66.link66+xml": {"source":"iana","extensions":["link66"]},
  	"application/vnd.rs-274x": {"source":"iana"},
  	"application/vnd.ruckus.download": {"source":"iana"},
  	"application/vnd.s3sms": {"source":"iana"},
  	"application/vnd.sailingtracker.track": {"source":"iana","extensions":["st"]},
  	"application/vnd.sbm.cid": {"source":"iana"},
  	"application/vnd.sbm.mid2": {"source":"iana"},
  	"application/vnd.scribus": {"source":"iana"},
  	"application/vnd.sealed.3df": {"source":"iana"},
  	"application/vnd.sealed.csf": {"source":"iana"},
  	"application/vnd.sealed.doc": {"source":"iana"},
  	"application/vnd.sealed.eml": {"source":"iana"},
  	"application/vnd.sealed.mht": {"source":"iana"},
  	"application/vnd.sealed.net": {"source":"iana"},
  	"application/vnd.sealed.ppt": {"source":"iana"},
  	"application/vnd.sealed.tiff": {"source":"iana"},
  	"application/vnd.sealed.xls": {"source":"iana"},
  	"application/vnd.sealedmedia.softseal.html": {"source":"iana"},
  	"application/vnd.sealedmedia.softseal.pdf": {"source":"iana"},
  	"application/vnd.seemail": {"source":"iana","extensions":["see"]},
  	"application/vnd.sema": {"source":"iana","extensions":["sema"]},
  	"application/vnd.semd": {"source":"iana","extensions":["semd"]},
  	"application/vnd.semf": {"source":"iana","extensions":["semf"]},
  	"application/vnd.shana.informed.formdata": {"source":"iana","extensions":["ifm"]},
  	"application/vnd.shana.informed.formtemplate": {"source":"iana","extensions":["itp"]},
  	"application/vnd.shana.informed.interchange": {"source":"iana","extensions":["iif"]},
  	"application/vnd.shana.informed.package": {"source":"iana","extensions":["ipk"]},
  	"application/vnd.sigrok.session": {"source":"iana"},
  	"application/vnd.simtech-mindmapper": {"source":"iana","extensions":["twd","twds"]},
  	"application/vnd.siren+json": {"source":"iana","compressible":true},
  	"application/vnd.smaf": {"source":"iana","extensions":["mmf"]},
  	"application/vnd.smart.notebook": {"source":"iana"},
  	"application/vnd.smart.teacher": {"source":"iana","extensions":["teacher"]},
  	"application/vnd.software602.filler.form+xml": {"source":"iana"},
  	"application/vnd.software602.filler.form-xml-zip": {"source":"iana"},
  	"application/vnd.solent.sdkm+xml": {"source":"iana","extensions":["sdkm","sdkd"]},
  	"application/vnd.spotfire.dxp": {"source":"iana","extensions":["dxp"]},
  	"application/vnd.spotfire.sfs": {"source":"iana","extensions":["sfs"]},
  	"application/vnd.sqlite3": {"source":"iana"},
  	"application/vnd.sss-cod": {"source":"iana"},
  	"application/vnd.sss-dtf": {"source":"iana"},
  	"application/vnd.sss-ntf": {"source":"iana"},
  	"application/vnd.stardivision.calc": {"source":"apache","extensions":["sdc"]},
  	"application/vnd.stardivision.draw": {"source":"apache","extensions":["sda"]},
  	"application/vnd.stardivision.impress": {"source":"apache","extensions":["sdd"]},
  	"application/vnd.stardivision.math": {"source":"apache","extensions":["smf"]},
  	"application/vnd.stardivision.writer": {"source":"apache","extensions":["sdw","vor"]},
  	"application/vnd.stardivision.writer-global": {"source":"apache","extensions":["sgl"]},
  	"application/vnd.stepmania.package": {"source":"iana","extensions":["smzip"]},
  	"application/vnd.stepmania.stepchart": {"source":"iana","extensions":["sm"]},
  	"application/vnd.street-stream": {"source":"iana"},
  	"application/vnd.sun.wadl+xml": {"source":"iana","compressible":true,"extensions":["wadl"]},
  	"application/vnd.sun.xml.calc": {"source":"apache","extensions":["sxc"]},
  	"application/vnd.sun.xml.calc.template": {"source":"apache","extensions":["stc"]},
  	"application/vnd.sun.xml.draw": {"source":"apache","extensions":["sxd"]},
  	"application/vnd.sun.xml.draw.template": {"source":"apache","extensions":["std"]},
  	"application/vnd.sun.xml.impress": {"source":"apache","extensions":["sxi"]},
  	"application/vnd.sun.xml.impress.template": {"source":"apache","extensions":["sti"]},
  	"application/vnd.sun.xml.math": {"source":"apache","extensions":["sxm"]},
  	"application/vnd.sun.xml.writer": {"source":"apache","extensions":["sxw"]},
  	"application/vnd.sun.xml.writer.global": {"source":"apache","extensions":["sxg"]},
  	"application/vnd.sun.xml.writer.template": {"source":"apache","extensions":["stw"]},
  	"application/vnd.sus-calendar": {"source":"iana","extensions":["sus","susp"]},
  	"application/vnd.svd": {"source":"iana","extensions":["svd"]},
  	"application/vnd.swiftview-ics": {"source":"iana"},
  	"application/vnd.symbian.install": {"source":"apache","extensions":["sis","sisx"]},
  	"application/vnd.syncml+xml": {"source":"iana","extensions":["xsm"]},
  	"application/vnd.syncml.dm+wbxml": {"source":"iana","extensions":["bdm"]},
  	"application/vnd.syncml.dm+xml": {"source":"iana","extensions":["xdm"]},
  	"application/vnd.syncml.dm.notification": {"source":"iana"},
  	"application/vnd.syncml.dmddf+wbxml": {"source":"iana"},
  	"application/vnd.syncml.dmddf+xml": {"source":"iana"},
  	"application/vnd.syncml.dmtnds+wbxml": {"source":"iana"},
  	"application/vnd.syncml.dmtnds+xml": {"source":"iana"},
  	"application/vnd.syncml.ds.notification": {"source":"iana"},
  	"application/vnd.tableschema+json": {"source":"iana","compressible":true},
  	"application/vnd.tao.intent-module-archive": {"source":"iana","extensions":["tao"]},
  	"application/vnd.tcpdump.pcap": {"source":"iana","extensions":["pcap","cap","dmp"]},
  	"application/vnd.tmd.mediaflex.api+xml": {"source":"iana"},
  	"application/vnd.tml": {"source":"iana"},
  	"application/vnd.tmobile-livetv": {"source":"iana","extensions":["tmo"]},
  	"application/vnd.tri.onesource": {"source":"iana"},
  	"application/vnd.trid.tpt": {"source":"iana","extensions":["tpt"]},
  	"application/vnd.triscape.mxs": {"source":"iana","extensions":["mxs"]},
  	"application/vnd.trueapp": {"source":"iana","extensions":["tra"]},
  	"application/vnd.truedoc": {"source":"iana"},
  	"application/vnd.ubisoft.webplayer": {"source":"iana"},
  	"application/vnd.ufdl": {"source":"iana","extensions":["ufd","ufdl"]},
  	"application/vnd.uiq.theme": {"source":"iana","extensions":["utz"]},
  	"application/vnd.umajin": {"source":"iana","extensions":["umj"]},
  	"application/vnd.unity": {"source":"iana","extensions":["unityweb"]},
  	"application/vnd.uoml+xml": {"source":"iana","extensions":["uoml"]},
  	"application/vnd.uplanet.alert": {"source":"iana"},
  	"application/vnd.uplanet.alert-wbxml": {"source":"iana"},
  	"application/vnd.uplanet.bearer-choice": {"source":"iana"},
  	"application/vnd.uplanet.bearer-choice-wbxml": {"source":"iana"},
  	"application/vnd.uplanet.cacheop": {"source":"iana"},
  	"application/vnd.uplanet.cacheop-wbxml": {"source":"iana"},
  	"application/vnd.uplanet.channel": {"source":"iana"},
  	"application/vnd.uplanet.channel-wbxml": {"source":"iana"},
  	"application/vnd.uplanet.list": {"source":"iana"},
  	"application/vnd.uplanet.list-wbxml": {"source":"iana"},
  	"application/vnd.uplanet.listcmd": {"source":"iana"},
  	"application/vnd.uplanet.listcmd-wbxml": {"source":"iana"},
  	"application/vnd.uplanet.signal": {"source":"iana"},
  	"application/vnd.uri-map": {"source":"iana"},
  	"application/vnd.valve.source.material": {"source":"iana"},
  	"application/vnd.vcx": {"source":"iana","extensions":["vcx"]},
  	"application/vnd.vd-study": {"source":"iana"},
  	"application/vnd.vectorworks": {"source":"iana"},
  	"application/vnd.vel+json": {"source":"iana","compressible":true},
  	"application/vnd.verimatrix.vcas": {"source":"iana"},
  	"application/vnd.vidsoft.vidconference": {"source":"iana"},
  	"application/vnd.visio": {"source":"iana","extensions":["vsd","vst","vss","vsw"]},
  	"application/vnd.visionary": {"source":"iana","extensions":["vis"]},
  	"application/vnd.vividence.scriptfile": {"source":"iana"},
  	"application/vnd.vsf": {"source":"iana","extensions":["vsf"]},
  	"application/vnd.wap.sic": {"source":"iana"},
  	"application/vnd.wap.slc": {"source":"iana"},
  	"application/vnd.wap.wbxml": {"source":"iana","extensions":["wbxml"]},
  	"application/vnd.wap.wmlc": {"source":"iana","extensions":["wmlc"]},
  	"application/vnd.wap.wmlscriptc": {"source":"iana","extensions":["wmlsc"]},
  	"application/vnd.webturbo": {"source":"iana","extensions":["wtb"]},
  	"application/vnd.wfa.p2p": {"source":"iana"},
  	"application/vnd.wfa.wsc": {"source":"iana"},
  	"application/vnd.windows.devicepairing": {"source":"iana"},
  	"application/vnd.wmc": {"source":"iana"},
  	"application/vnd.wmf.bootstrap": {"source":"iana"},
  	"application/vnd.wolfram.mathematica": {"source":"iana"},
  	"application/vnd.wolfram.mathematica.package": {"source":"iana"},
  	"application/vnd.wolfram.player": {"source":"iana","extensions":["nbp"]},
  	"application/vnd.wordperfect": {"source":"iana","extensions":["wpd"]},
  	"application/vnd.wqd": {"source":"iana","extensions":["wqd"]},
  	"application/vnd.wrq-hp3000-labelled": {"source":"iana"},
  	"application/vnd.wt.stf": {"source":"iana","extensions":["stf"]},
  	"application/vnd.wv.csp+wbxml": {"source":"iana"},
  	"application/vnd.wv.csp+xml": {"source":"iana"},
  	"application/vnd.wv.ssp+xml": {"source":"iana"},
  	"application/vnd.xacml+json": {"source":"iana","compressible":true},
  	"application/vnd.xara": {"source":"iana","extensions":["xar"]},
  	"application/vnd.xfdl": {"source":"iana","extensions":["xfdl"]},
  	"application/vnd.xfdl.webform": {"source":"iana"},
  	"application/vnd.xmi+xml": {"source":"iana"},
  	"application/vnd.xmpie.cpkg": {"source":"iana"},
  	"application/vnd.xmpie.dpkg": {"source":"iana"},
  	"application/vnd.xmpie.plan": {"source":"iana"},
  	"application/vnd.xmpie.ppkg": {"source":"iana"},
  	"application/vnd.xmpie.xlim": {"source":"iana"},
  	"application/vnd.yamaha.hv-dic": {"source":"iana","extensions":["hvd"]},
  	"application/vnd.yamaha.hv-script": {"source":"iana","extensions":["hvs"]},
  	"application/vnd.yamaha.hv-voice": {"source":"iana","extensions":["hvp"]},
  	"application/vnd.yamaha.openscoreformat": {"source":"iana","extensions":["osf"]},
  	"application/vnd.yamaha.openscoreformat.osfpvg+xml": {"source":"iana","extensions":["osfpvg"]},
  	"application/vnd.yamaha.remote-setup": {"source":"iana"},
  	"application/vnd.yamaha.smaf-audio": {"source":"iana","extensions":["saf"]},
  	"application/vnd.yamaha.smaf-phrase": {"source":"iana","extensions":["spf"]},
  	"application/vnd.yamaha.through-ngn": {"source":"iana"},
  	"application/vnd.yamaha.tunnel-udpencap": {"source":"iana"},
  	"application/vnd.yaoweme": {"source":"iana"},
  	"application/vnd.yellowriver-custom-menu": {"source":"iana","extensions":["cmp"]},
  	"application/vnd.youtube.yt": {"source":"iana"},
  	"application/vnd.zul": {"source":"iana","extensions":["zir","zirz"]},
  	"application/vnd.zzazz.deck+xml": {"source":"iana","extensions":["zaz"]},
  	"application/voicexml+xml": {"source":"iana","extensions":["vxml"]},
  	"application/voucher-cms+json": {"source":"iana","compressible":true},
  	"application/vq-rtcpxr": {"source":"iana"},
  	"application/wasm": {"compressible":true,"extensions":["wasm"]},
  	"application/watcherinfo+xml": {"source":"iana"},
  	"application/webpush-options+json": {"source":"iana","compressible":true},
  	"application/whoispp-query": {"source":"iana"},
  	"application/whoispp-response": {"source":"iana"},
  	"application/widget": {"source":"iana","extensions":["wgt"]},
  	"application/winhlp": {"source":"apache","extensions":["hlp"]},
  	"application/wita": {"source":"iana"},
  	"application/wordperfect5.1": {"source":"iana"},
  	"application/wsdl+xml": {"source":"iana","extensions":["wsdl"]},
  	"application/wspolicy+xml": {"source":"iana","extensions":["wspolicy"]},
  	"application/x-7z-compressed": {"source":"apache","compressible":false,"extensions":["7z"]},
  	"application/x-abiword": {"source":"apache","extensions":["abw"]},
  	"application/x-ace-compressed": {"source":"apache","extensions":["ace"]},
  	"application/x-amf": {"source":"apache"},
  	"application/x-apple-diskimage": {"source":"apache","extensions":["dmg"]},
  	"application/x-arj": {"compressible":false,"extensions":["arj"]},
  	"application/x-authorware-bin": {"source":"apache","extensions":["aab","x32","u32","vox"]},
  	"application/x-authorware-map": {"source":"apache","extensions":["aam"]},
  	"application/x-authorware-seg": {"source":"apache","extensions":["aas"]},
  	"application/x-bcpio": {"source":"apache","extensions":["bcpio"]},
  	"application/x-bdoc": {"compressible":false,"extensions":["bdoc"]},
  	"application/x-bittorrent": {"source":"apache","extensions":["torrent"]},
  	"application/x-blorb": {"source":"apache","extensions":["blb","blorb"]},
  	"application/x-bzip": {"source":"apache","compressible":false,"extensions":["bz"]},
  	"application/x-bzip2": {"source":"apache","compressible":false,"extensions":["bz2","boz"]},
  	"application/x-cbr": {"source":"apache","extensions":["cbr","cba","cbt","cbz","cb7"]},
  	"application/x-cdlink": {"source":"apache","extensions":["vcd"]},
  	"application/x-cfs-compressed": {"source":"apache","extensions":["cfs"]},
  	"application/x-chat": {"source":"apache","extensions":["chat"]},
  	"application/x-chess-pgn": {"source":"apache","extensions":["pgn"]},
  	"application/x-chrome-extension": {"extensions":["crx"]},
  	"application/x-cocoa": {"source":"nginx","extensions":["cco"]},
  	"application/x-compress": {"source":"apache"},
  	"application/x-conference": {"source":"apache","extensions":["nsc"]},
  	"application/x-cpio": {"source":"apache","extensions":["cpio"]},
  	"application/x-csh": {"source":"apache","extensions":["csh"]},
  	"application/x-deb": {"compressible":false},
  	"application/x-debian-package": {"source":"apache","extensions":["deb","udeb"]},
  	"application/x-dgc-compressed": {"source":"apache","extensions":["dgc"]},
  	"application/x-director": {"source":"apache","extensions":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},
  	"application/x-doom": {"source":"apache","extensions":["wad"]},
  	"application/x-dtbncx+xml": {"source":"apache","extensions":["ncx"]},
  	"application/x-dtbook+xml": {"source":"apache","extensions":["dtb"]},
  	"application/x-dtbresource+xml": {"source":"apache","extensions":["res"]},
  	"application/x-dvi": {"source":"apache","compressible":false,"extensions":["dvi"]},
  	"application/x-envoy": {"source":"apache","extensions":["evy"]},
  	"application/x-eva": {"source":"apache","extensions":["eva"]},
  	"application/x-font-bdf": {"source":"apache","extensions":["bdf"]},
  	"application/x-font-dos": {"source":"apache"},
  	"application/x-font-framemaker": {"source":"apache"},
  	"application/x-font-ghostscript": {"source":"apache","extensions":["gsf"]},
  	"application/x-font-libgrx": {"source":"apache"},
  	"application/x-font-linux-psf": {"source":"apache","extensions":["psf"]},
  	"application/x-font-pcf": {"source":"apache","extensions":["pcf"]},
  	"application/x-font-snf": {"source":"apache","extensions":["snf"]},
  	"application/x-font-speedo": {"source":"apache"},
  	"application/x-font-sunos-news": {"source":"apache"},
  	"application/x-font-type1": {"source":"apache","extensions":["pfa","pfb","pfm","afm"]},
  	"application/x-font-vfont": {"source":"apache"},
  	"application/x-freearc": {"source":"apache","extensions":["arc"]},
  	"application/x-futuresplash": {"source":"apache","extensions":["spl"]},
  	"application/x-gca-compressed": {"source":"apache","extensions":["gca"]},
  	"application/x-glulx": {"source":"apache","extensions":["ulx"]},
  	"application/x-gnumeric": {"source":"apache","extensions":["gnumeric"]},
  	"application/x-gramps-xml": {"source":"apache","extensions":["gramps"]},
  	"application/x-gtar": {"source":"apache","extensions":["gtar"]},
  	"application/x-gzip": {"source":"apache"},
  	"application/x-hdf": {"source":"apache","extensions":["hdf"]},
  	"application/x-httpd-php": {"compressible":true,"extensions":["php"]},
  	"application/x-install-instructions": {"source":"apache","extensions":["install"]},
  	"application/x-iso9660-image": {"source":"apache","extensions":["iso"]},
  	"application/x-java-archive-diff": {"source":"nginx","extensions":["jardiff"]},
  	"application/x-java-jnlp-file": {"source":"apache","compressible":false,"extensions":["jnlp"]},
  	"application/x-javascript": {"compressible":true},
  	"application/x-latex": {"source":"apache","compressible":false,"extensions":["latex"]},
  	"application/x-lua-bytecode": {"extensions":["luac"]},
  	"application/x-lzh-compressed": {"source":"apache","extensions":["lzh","lha"]},
  	"application/x-makeself": {"source":"nginx","extensions":["run"]},
  	"application/x-mie": {"source":"apache","extensions":["mie"]},
  	"application/x-mobipocket-ebook": {"source":"apache","extensions":["prc","mobi"]},
  	"application/x-mpegurl": {"compressible":false},
  	"application/x-ms-application": {"source":"apache","extensions":["application"]},
  	"application/x-ms-shortcut": {"source":"apache","extensions":["lnk"]},
  	"application/x-ms-wmd": {"source":"apache","extensions":["wmd"]},
  	"application/x-ms-wmz": {"source":"apache","extensions":["wmz"]},
  	"application/x-ms-xbap": {"source":"apache","extensions":["xbap"]},
  	"application/x-msaccess": {"source":"apache","extensions":["mdb"]},
  	"application/x-msbinder": {"source":"apache","extensions":["obd"]},
  	"application/x-mscardfile": {"source":"apache","extensions":["crd"]},
  	"application/x-msclip": {"source":"apache","extensions":["clp"]},
  	"application/x-msdos-program": {"extensions":["exe"]},
  	"application/x-msdownload": {"source":"apache","extensions":["exe","dll","com","bat","msi"]},
  	"application/x-msmediaview": {"source":"apache","extensions":["mvb","m13","m14"]},
  	"application/x-msmetafile": {"source":"apache","extensions":["wmf","wmz","emf","emz"]},
  	"application/x-msmoney": {"source":"apache","extensions":["mny"]},
  	"application/x-mspublisher": {"source":"apache","extensions":["pub"]},
  	"application/x-msschedule": {"source":"apache","extensions":["scd"]},
  	"application/x-msterminal": {"source":"apache","extensions":["trm"]},
  	"application/x-mswrite": {"source":"apache","extensions":["wri"]},
  	"application/x-netcdf": {"source":"apache","extensions":["nc","cdf"]},
  	"application/x-ns-proxy-autoconfig": {"compressible":true,"extensions":["pac"]},
  	"application/x-nzb": {"source":"apache","extensions":["nzb"]},
  	"application/x-perl": {"source":"nginx","extensions":["pl","pm"]},
  	"application/x-pilot": {"source":"nginx","extensions":["prc","pdb"]},
  	"application/x-pkcs12": {"source":"apache","compressible":false,"extensions":["p12","pfx"]},
  	"application/x-pkcs7-certificates": {"source":"apache","extensions":["p7b","spc"]},
  	"application/x-pkcs7-certreqresp": {"source":"apache","extensions":["p7r"]},
  	"application/x-rar-compressed": {"source":"apache","compressible":false,"extensions":["rar"]},
  	"application/x-redhat-package-manager": {"source":"nginx","extensions":["rpm"]},
  	"application/x-research-info-systems": {"source":"apache","extensions":["ris"]},
  	"application/x-sea": {"source":"nginx","extensions":["sea"]},
  	"application/x-sh": {"source":"apache","compressible":true,"extensions":["sh"]},
  	"application/x-shar": {"source":"apache","extensions":["shar"]},
  	"application/x-shockwave-flash": {"source":"apache","compressible":false,"extensions":["swf"]},
  	"application/x-silverlight-app": {"source":"apache","extensions":["xap"]},
  	"application/x-sql": {"source":"apache","extensions":["sql"]},
  	"application/x-stuffit": {"source":"apache","compressible":false,"extensions":["sit"]},
  	"application/x-stuffitx": {"source":"apache","extensions":["sitx"]},
  	"application/x-subrip": {"source":"apache","extensions":["srt"]},
  	"application/x-sv4cpio": {"source":"apache","extensions":["sv4cpio"]},
  	"application/x-sv4crc": {"source":"apache","extensions":["sv4crc"]},
  	"application/x-t3vm-image": {"source":"apache","extensions":["t3"]},
  	"application/x-tads": {"source":"apache","extensions":["gam"]},
  	"application/x-tar": {"source":"apache","compressible":true,"extensions":["tar"]},
  	"application/x-tcl": {"source":"apache","extensions":["tcl","tk"]},
  	"application/x-tex": {"source":"apache","extensions":["tex"]},
  	"application/x-tex-tfm": {"source":"apache","extensions":["tfm"]},
  	"application/x-texinfo": {"source":"apache","extensions":["texinfo","texi"]},
  	"application/x-tgif": {"source":"apache","extensions":["obj"]},
  	"application/x-ustar": {"source":"apache","extensions":["ustar"]},
  	"application/x-virtualbox-hdd": {"compressible":true,"extensions":["hdd"]},
  	"application/x-virtualbox-ova": {"compressible":true,"extensions":["ova"]},
  	"application/x-virtualbox-ovf": {"compressible":true,"extensions":["ovf"]},
  	"application/x-virtualbox-vbox": {"compressible":true,"extensions":["vbox"]},
  	"application/x-virtualbox-vbox-extpack": {"compressible":false,"extensions":["vbox-extpack"]},
  	"application/x-virtualbox-vdi": {"compressible":true,"extensions":["vdi"]},
  	"application/x-virtualbox-vhd": {"compressible":true,"extensions":["vhd"]},
  	"application/x-virtualbox-vmdk": {"compressible":true,"extensions":["vmdk"]},
  	"application/x-wais-source": {"source":"apache","extensions":["src"]},
  	"application/x-web-app-manifest+json": {"compressible":true,"extensions":["webapp"]},
  	"application/x-www-form-urlencoded": {"source":"iana","compressible":true},
  	"application/x-x509-ca-cert": {"source":"apache","extensions":["der","crt","pem"]},
  	"application/x-xfig": {"source":"apache","extensions":["fig"]},
  	"application/x-xliff+xml": {"source":"apache","extensions":["xlf"]},
  	"application/x-xpinstall": {"source":"apache","compressible":false,"extensions":["xpi"]},
  	"application/x-xz": {"source":"apache","extensions":["xz"]},
  	"application/x-zmachine": {"source":"apache","extensions":["z1","z2","z3","z4","z5","z6","z7","z8"]},
  	"application/x400-bp": {"source":"iana"},
  	"application/xacml+xml": {"source":"iana"},
  	"application/xaml+xml": {"source":"apache","extensions":["xaml"]},
  	"application/xcap-att+xml": {"source":"iana"},
  	"application/xcap-caps+xml": {"source":"iana"},
  	"application/xcap-diff+xml": {"source":"iana","extensions":["xdf"]},
  	"application/xcap-el+xml": {"source":"iana"},
  	"application/xcap-error+xml": {"source":"iana"},
  	"application/xcap-ns+xml": {"source":"iana"},
  	"application/xcon-conference-info+xml": {"source":"iana"},
  	"application/xcon-conference-info-diff+xml": {"source":"iana"},
  	"application/xenc+xml": {"source":"iana","extensions":["xenc"]},
  	"application/xhtml+xml": {"source":"iana","compressible":true,"extensions":["xhtml","xht"]},
  	"application/xhtml-voice+xml": {"source":"apache"},
  	"application/xml": {"source":"iana","compressible":true,"extensions":["xml","xsl","xsd","rng"]},
  	"application/xml-dtd": {"source":"iana","compressible":true,"extensions":["dtd"]},
  	"application/xml-external-parsed-entity": {"source":"iana"},
  	"application/xml-patch+xml": {"source":"iana"},
  	"application/xmpp+xml": {"source":"iana"},
  	"application/xop+xml": {"source":"iana","compressible":true,"extensions":["xop"]},
  	"application/xproc+xml": {"source":"apache","extensions":["xpl"]},
  	"application/xslt+xml": {"source":"iana","extensions":["xslt"]},
  	"application/xspf+xml": {"source":"apache","extensions":["xspf"]},
  	"application/xv+xml": {"source":"iana","extensions":["mxml","xhvml","xvml","xvm"]},
  	"application/yang": {"source":"iana","extensions":["yang"]},
  	"application/yang-data+json": {"source":"iana","compressible":true},
  	"application/yang-data+xml": {"source":"iana"},
  	"application/yang-patch+json": {"source":"iana","compressible":true},
  	"application/yang-patch+xml": {"source":"iana"},
  	"application/yin+xml": {"source":"iana","extensions":["yin"]},
  	"application/zip": {"source":"iana","compressible":false,"extensions":["zip"]},
  	"application/zlib": {"source":"iana"},
  	"audio/1d-interleaved-parityfec": {"source":"iana"},
  	"audio/32kadpcm": {"source":"iana"},
  	"audio/3gpp": {"source":"iana","compressible":false,"extensions":["3gpp"]},
  	"audio/3gpp2": {"source":"iana"},
  	"audio/ac3": {"source":"iana"},
  	"audio/adpcm": {"source":"apache","extensions":["adp"]},
  	"audio/amr": {"source":"iana"},
  	"audio/amr-wb": {"source":"iana"},
  	"audio/amr-wb+": {"source":"iana"},
  	"audio/aptx": {"source":"iana"},
  	"audio/asc": {"source":"iana"},
  	"audio/atrac-advanced-lossless": {"source":"iana"},
  	"audio/atrac-x": {"source":"iana"},
  	"audio/atrac3": {"source":"iana"},
  	"audio/basic": {"source":"iana","compressible":false,"extensions":["au","snd"]},
  	"audio/bv16": {"source":"iana"},
  	"audio/bv32": {"source":"iana"},
  	"audio/clearmode": {"source":"iana"},
  	"audio/cn": {"source":"iana"},
  	"audio/dat12": {"source":"iana"},
  	"audio/dls": {"source":"iana"},
  	"audio/dsr-es201108": {"source":"iana"},
  	"audio/dsr-es202050": {"source":"iana"},
  	"audio/dsr-es202211": {"source":"iana"},
  	"audio/dsr-es202212": {"source":"iana"},
  	"audio/dv": {"source":"iana"},
  	"audio/dvi4": {"source":"iana"},
  	"audio/eac3": {"source":"iana"},
  	"audio/encaprtp": {"source":"iana"},
  	"audio/evrc": {"source":"iana"},
  	"audio/evrc-qcp": {"source":"iana"},
  	"audio/evrc0": {"source":"iana"},
  	"audio/evrc1": {"source":"iana"},
  	"audio/evrcb": {"source":"iana"},
  	"audio/evrcb0": {"source":"iana"},
  	"audio/evrcb1": {"source":"iana"},
  	"audio/evrcnw": {"source":"iana"},
  	"audio/evrcnw0": {"source":"iana"},
  	"audio/evrcnw1": {"source":"iana"},
  	"audio/evrcwb": {"source":"iana"},
  	"audio/evrcwb0": {"source":"iana"},
  	"audio/evrcwb1": {"source":"iana"},
  	"audio/evs": {"source":"iana"},
  	"audio/fwdred": {"source":"iana"},
  	"audio/g711-0": {"source":"iana"},
  	"audio/g719": {"source":"iana"},
  	"audio/g722": {"source":"iana"},
  	"audio/g7221": {"source":"iana"},
  	"audio/g723": {"source":"iana"},
  	"audio/g726-16": {"source":"iana"},
  	"audio/g726-24": {"source":"iana"},
  	"audio/g726-32": {"source":"iana"},
  	"audio/g726-40": {"source":"iana"},
  	"audio/g728": {"source":"iana"},
  	"audio/g729": {"source":"iana"},
  	"audio/g7291": {"source":"iana"},
  	"audio/g729d": {"source":"iana"},
  	"audio/g729e": {"source":"iana"},
  	"audio/gsm": {"source":"iana"},
  	"audio/gsm-efr": {"source":"iana"},
  	"audio/gsm-hr-08": {"source":"iana"},
  	"audio/ilbc": {"source":"iana"},
  	"audio/ip-mr_v2.5": {"source":"iana"},
  	"audio/isac": {"source":"apache"},
  	"audio/l16": {"source":"iana"},
  	"audio/l20": {"source":"iana"},
  	"audio/l24": {"source":"iana","compressible":false},
  	"audio/l8": {"source":"iana"},
  	"audio/lpc": {"source":"iana"},
  	"audio/melp": {"source":"iana"},
  	"audio/melp1200": {"source":"iana"},
  	"audio/melp2400": {"source":"iana"},
  	"audio/melp600": {"source":"iana"},
  	"audio/midi": {"source":"apache","extensions":["mid","midi","kar","rmi"]},
  	"audio/mobile-xmf": {"source":"iana"},
  	"audio/mp3": {"compressible":false,"extensions":["mp3"]},
  	"audio/mp4": {"source":"iana","compressible":false,"extensions":["m4a","mp4a"]},
  	"audio/mp4a-latm": {"source":"iana"},
  	"audio/mpa": {"source":"iana"},
  	"audio/mpa-robust": {"source":"iana"},
  	"audio/mpeg": {"source":"iana","compressible":false,"extensions":["mpga","mp2","mp2a","mp3","m2a","m3a"]},
  	"audio/mpeg4-generic": {"source":"iana"},
  	"audio/musepack": {"source":"apache"},
  	"audio/ogg": {"source":"iana","compressible":false,"extensions":["oga","ogg","spx"]},
  	"audio/opus": {"source":"iana"},
  	"audio/parityfec": {"source":"iana"},
  	"audio/pcma": {"source":"iana"},
  	"audio/pcma-wb": {"source":"iana"},
  	"audio/pcmu": {"source":"iana"},
  	"audio/pcmu-wb": {"source":"iana"},
  	"audio/prs.sid": {"source":"iana"},
  	"audio/qcelp": {"source":"iana"},
  	"audio/raptorfec": {"source":"iana"},
  	"audio/red": {"source":"iana"},
  	"audio/rtp-enc-aescm128": {"source":"iana"},
  	"audio/rtp-midi": {"source":"iana"},
  	"audio/rtploopback": {"source":"iana"},
  	"audio/rtx": {"source":"iana"},
  	"audio/s3m": {"source":"apache","extensions":["s3m"]},
  	"audio/silk": {"source":"apache","extensions":["sil"]},
  	"audio/smv": {"source":"iana"},
  	"audio/smv-qcp": {"source":"iana"},
  	"audio/smv0": {"source":"iana"},
  	"audio/sp-midi": {"source":"iana"},
  	"audio/speex": {"source":"iana"},
  	"audio/t140c": {"source":"iana"},
  	"audio/t38": {"source":"iana"},
  	"audio/telephone-event": {"source":"iana"},
  	"audio/tone": {"source":"iana"},
  	"audio/uemclip": {"source":"iana"},
  	"audio/ulpfec": {"source":"iana"},
  	"audio/vdvi": {"source":"iana"},
  	"audio/vmr-wb": {"source":"iana"},
  	"audio/vnd.3gpp.iufp": {"source":"iana"},
  	"audio/vnd.4sb": {"source":"iana"},
  	"audio/vnd.audiokoz": {"source":"iana"},
  	"audio/vnd.celp": {"source":"iana"},
  	"audio/vnd.cisco.nse": {"source":"iana"},
  	"audio/vnd.cmles.radio-events": {"source":"iana"},
  	"audio/vnd.cns.anp1": {"source":"iana"},
  	"audio/vnd.cns.inf1": {"source":"iana"},
  	"audio/vnd.dece.audio": {"source":"iana","extensions":["uva","uvva"]},
  	"audio/vnd.digital-winds": {"source":"iana","extensions":["eol"]},
  	"audio/vnd.dlna.adts": {"source":"iana"},
  	"audio/vnd.dolby.heaac.1": {"source":"iana"},
  	"audio/vnd.dolby.heaac.2": {"source":"iana"},
  	"audio/vnd.dolby.mlp": {"source":"iana"},
  	"audio/vnd.dolby.mps": {"source":"iana"},
  	"audio/vnd.dolby.pl2": {"source":"iana"},
  	"audio/vnd.dolby.pl2x": {"source":"iana"},
  	"audio/vnd.dolby.pl2z": {"source":"iana"},
  	"audio/vnd.dolby.pulse.1": {"source":"iana"},
  	"audio/vnd.dra": {"source":"iana","extensions":["dra"]},
  	"audio/vnd.dts": {"source":"iana","extensions":["dts"]},
  	"audio/vnd.dts.hd": {"source":"iana","extensions":["dtshd"]},
  	"audio/vnd.dvb.file": {"source":"iana"},
  	"audio/vnd.everad.plj": {"source":"iana"},
  	"audio/vnd.hns.audio": {"source":"iana"},
  	"audio/vnd.lucent.voice": {"source":"iana","extensions":["lvp"]},
  	"audio/vnd.ms-playready.media.pya": {"source":"iana","extensions":["pya"]},
  	"audio/vnd.nokia.mobile-xmf": {"source":"iana"},
  	"audio/vnd.nortel.vbk": {"source":"iana"},
  	"audio/vnd.nuera.ecelp4800": {"source":"iana","extensions":["ecelp4800"]},
  	"audio/vnd.nuera.ecelp7470": {"source":"iana","extensions":["ecelp7470"]},
  	"audio/vnd.nuera.ecelp9600": {"source":"iana","extensions":["ecelp9600"]},
  	"audio/vnd.octel.sbc": {"source":"iana"},
  	"audio/vnd.presonus.multitrack": {"source":"iana"},
  	"audio/vnd.qcelp": {"source":"iana"},
  	"audio/vnd.rhetorex.32kadpcm": {"source":"iana"},
  	"audio/vnd.rip": {"source":"iana","extensions":["rip"]},
  	"audio/vnd.rn-realaudio": {"compressible":false},
  	"audio/vnd.sealedmedia.softseal.mpeg": {"source":"iana"},
  	"audio/vnd.vmx.cvsd": {"source":"iana"},
  	"audio/vnd.wave": {"compressible":false},
  	"audio/vorbis": {"source":"iana","compressible":false},
  	"audio/vorbis-config": {"source":"iana"},
  	"audio/wav": {"compressible":false,"extensions":["wav"]},
  	"audio/wave": {"compressible":false,"extensions":["wav"]},
  	"audio/webm": {"source":"apache","compressible":false,"extensions":["weba"]},
  	"audio/x-aac": {"source":"apache","compressible":false,"extensions":["aac"]},
  	"audio/x-aiff": {"source":"apache","extensions":["aif","aiff","aifc"]},
  	"audio/x-caf": {"source":"apache","compressible":false,"extensions":["caf"]},
  	"audio/x-flac": {"source":"apache","extensions":["flac"]},
  	"audio/x-m4a": {"source":"nginx","extensions":["m4a"]},
  	"audio/x-matroska": {"source":"apache","extensions":["mka"]},
  	"audio/x-mpegurl": {"source":"apache","extensions":["m3u"]},
  	"audio/x-ms-wax": {"source":"apache","extensions":["wax"]},
  	"audio/x-ms-wma": {"source":"apache","extensions":["wma"]},
  	"audio/x-pn-realaudio": {"source":"apache","extensions":["ram","ra"]},
  	"audio/x-pn-realaudio-plugin": {"source":"apache","extensions":["rmp"]},
  	"audio/x-realaudio": {"source":"nginx","extensions":["ra"]},
  	"audio/x-tta": {"source":"apache"},
  	"audio/x-wav": {"source":"apache","extensions":["wav"]},
  	"audio/xm": {"source":"apache","extensions":["xm"]},
  	"chemical/x-cdx": {"source":"apache","extensions":["cdx"]},
  	"chemical/x-cif": {"source":"apache","extensions":["cif"]},
  	"chemical/x-cmdf": {"source":"apache","extensions":["cmdf"]},
  	"chemical/x-cml": {"source":"apache","extensions":["cml"]},
  	"chemical/x-csml": {"source":"apache","extensions":["csml"]},
  	"chemical/x-pdb": {"source":"apache"},
  	"chemical/x-xyz": {"source":"apache","extensions":["xyz"]},
  	"font/collection": {"source":"iana","extensions":["ttc"]},
  	"font/otf": {"source":"iana","compressible":true,"extensions":["otf"]},
  	"font/sfnt": {"source":"iana"},
  	"font/ttf": {"source":"iana","extensions":["ttf"]},
  	"font/woff": {"source":"iana","extensions":["woff"]},
  	"font/woff2": {"source":"iana","extensions":["woff2"]},
  	"image/aces": {"source":"iana"},
  	"image/apng": {"compressible":false,"extensions":["apng"]},
  	"image/bmp": {"source":"iana","compressible":true,"extensions":["bmp"]},
  	"image/cgm": {"source":"iana","extensions":["cgm"]},
  	"image/dicom-rle": {"source":"iana"},
  	"image/emf": {"source":"iana"},
  	"image/fits": {"source":"iana"},
  	"image/g3fax": {"source":"iana","extensions":["g3"]},
  	"image/gif": {"source":"iana","compressible":false,"extensions":["gif"]},
  	"image/ief": {"source":"iana","extensions":["ief"]},
  	"image/jls": {"source":"iana"},
  	"image/jp2": {"source":"iana","compressible":false,"extensions":["jp2","jpg2"]},
  	"image/jpeg": {"source":"iana","compressible":false,"extensions":["jpeg","jpg","jpe"]},
  	"image/jpm": {"source":"iana","compressible":false,"extensions":["jpm"]},
  	"image/jpx": {"source":"iana","compressible":false,"extensions":["jpx","jpf"]},
  	"image/ktx": {"source":"iana","extensions":["ktx"]},
  	"image/naplps": {"source":"iana"},
  	"image/pjpeg": {"compressible":false},
  	"image/png": {"source":"iana","compressible":false,"extensions":["png"]},
  	"image/prs.btif": {"source":"iana","extensions":["btif"]},
  	"image/prs.pti": {"source":"iana"},
  	"image/pwg-raster": {"source":"iana"},
  	"image/sgi": {"source":"apache","extensions":["sgi"]},
  	"image/svg+xml": {"source":"iana","compressible":true,"extensions":["svg","svgz"]},
  	"image/t38": {"source":"iana"},
  	"image/tiff": {"source":"iana","compressible":false,"extensions":["tiff","tif"]},
  	"image/tiff-fx": {"source":"iana"},
  	"image/vnd.adobe.photoshop": {"source":"iana","compressible":true,"extensions":["psd"]},
  	"image/vnd.airzip.accelerator.azv": {"source":"iana"},
  	"image/vnd.cns.inf2": {"source":"iana"},
  	"image/vnd.dece.graphic": {"source":"iana","extensions":["uvi","uvvi","uvg","uvvg"]},
  	"image/vnd.djvu": {"source":"iana","extensions":["djvu","djv"]},
  	"image/vnd.dvb.subtitle": {"source":"iana","extensions":["sub"]},
  	"image/vnd.dwg": {"source":"iana","extensions":["dwg"]},
  	"image/vnd.dxf": {"source":"iana","extensions":["dxf"]},
  	"image/vnd.fastbidsheet": {"source":"iana","extensions":["fbs"]},
  	"image/vnd.fpx": {"source":"iana","extensions":["fpx"]},
  	"image/vnd.fst": {"source":"iana","extensions":["fst"]},
  	"image/vnd.fujixerox.edmics-mmr": {"source":"iana","extensions":["mmr"]},
  	"image/vnd.fujixerox.edmics-rlc": {"source":"iana","extensions":["rlc"]},
  	"image/vnd.globalgraphics.pgb": {"source":"iana"},
  	"image/vnd.microsoft.icon": {"source":"iana"},
  	"image/vnd.mix": {"source":"iana"},
  	"image/vnd.mozilla.apng": {"source":"iana"},
  	"image/vnd.ms-modi": {"source":"iana","extensions":["mdi"]},
  	"image/vnd.ms-photo": {"source":"apache","extensions":["wdp"]},
  	"image/vnd.net-fpx": {"source":"iana","extensions":["npx"]},
  	"image/vnd.radiance": {"source":"iana"},
  	"image/vnd.sealed.png": {"source":"iana"},
  	"image/vnd.sealedmedia.softseal.gif": {"source":"iana"},
  	"image/vnd.sealedmedia.softseal.jpg": {"source":"iana"},
  	"image/vnd.svf": {"source":"iana"},
  	"image/vnd.tencent.tap": {"source":"iana"},
  	"image/vnd.valve.source.texture": {"source":"iana"},
  	"image/vnd.wap.wbmp": {"source":"iana","extensions":["wbmp"]},
  	"image/vnd.xiff": {"source":"iana","extensions":["xif"]},
  	"image/vnd.zbrush.pcx": {"source":"iana"},
  	"image/webp": {"source":"apache","extensions":["webp"]},
  	"image/wmf": {"source":"iana"},
  	"image/x-3ds": {"source":"apache","extensions":["3ds"]},
  	"image/x-cmu-raster": {"source":"apache","extensions":["ras"]},
  	"image/x-cmx": {"source":"apache","extensions":["cmx"]},
  	"image/x-freehand": {"source":"apache","extensions":["fh","fhc","fh4","fh5","fh7"]},
  	"image/x-icon": {"source":"apache","compressible":true,"extensions":["ico"]},
  	"image/x-jng": {"source":"nginx","extensions":["jng"]},
  	"image/x-mrsid-image": {"source":"apache","extensions":["sid"]},
  	"image/x-ms-bmp": {"source":"nginx","compressible":true,"extensions":["bmp"]},
  	"image/x-pcx": {"source":"apache","extensions":["pcx"]},
  	"image/x-pict": {"source":"apache","extensions":["pic","pct"]},
  	"image/x-portable-anymap": {"source":"apache","extensions":["pnm"]},
  	"image/x-portable-bitmap": {"source":"apache","extensions":["pbm"]},
  	"image/x-portable-graymap": {"source":"apache","extensions":["pgm"]},
  	"image/x-portable-pixmap": {"source":"apache","extensions":["ppm"]},
  	"image/x-rgb": {"source":"apache","extensions":["rgb"]},
  	"image/x-tga": {"source":"apache","extensions":["tga"]},
  	"image/x-xbitmap": {"source":"apache","extensions":["xbm"]},
  	"image/x-xcf": {"compressible":false},
  	"image/x-xpixmap": {"source":"apache","extensions":["xpm"]},
  	"image/x-xwindowdump": {"source":"apache","extensions":["xwd"]},
  	"message/cpim": {"source":"iana"},
  	"message/delivery-status": {"source":"iana"},
  	"message/disposition-notification": {"source":"iana","extensions":["disposition-notification"]},
  	"message/external-body": {"source":"iana"},
  	"message/feedback-report": {"source":"iana"},
  	"message/global": {"source":"iana","extensions":["u8msg"]},
  	"message/global-delivery-status": {"source":"iana","extensions":["u8dsn"]},
  	"message/global-disposition-notification": {"source":"iana","extensions":["u8mdn"]},
  	"message/global-headers": {"source":"iana","extensions":["u8hdr"]},
  	"message/http": {"source":"iana","compressible":false},
  	"message/imdn+xml": {"source":"iana","compressible":true},
  	"message/news": {"source":"iana"},
  	"message/partial": {"source":"iana","compressible":false},
  	"message/rfc822": {"source":"iana","compressible":true,"extensions":["eml","mime"]},
  	"message/s-http": {"source":"iana"},
  	"message/sip": {"source":"iana"},
  	"message/sipfrag": {"source":"iana"},
  	"message/tracking-status": {"source":"iana"},
  	"message/vnd.si.simp": {"source":"iana"},
  	"message/vnd.wfa.wsc": {"source":"iana","extensions":["wsc"]},
  	"model/3mf": {"source":"iana"},
  	"model/gltf+json": {"source":"iana","compressible":true,"extensions":["gltf"]},
  	"model/gltf-binary": {"source":"iana","compressible":true,"extensions":["glb"]},
  	"model/iges": {"source":"iana","compressible":false,"extensions":["igs","iges"]},
  	"model/mesh": {"source":"iana","compressible":false,"extensions":["msh","mesh","silo"]},
  	"model/vnd.collada+xml": {"source":"iana","extensions":["dae"]},
  	"model/vnd.dwf": {"source":"iana","extensions":["dwf"]},
  	"model/vnd.flatland.3dml": {"source":"iana"},
  	"model/vnd.gdl": {"source":"iana","extensions":["gdl"]},
  	"model/vnd.gs-gdl": {"source":"apache"},
  	"model/vnd.gs.gdl": {"source":"iana"},
  	"model/vnd.gtw": {"source":"iana","extensions":["gtw"]},
  	"model/vnd.moml+xml": {"source":"iana"},
  	"model/vnd.mts": {"source":"iana","extensions":["mts"]},
  	"model/vnd.opengex": {"source":"iana"},
  	"model/vnd.parasolid.transmit.binary": {"source":"iana"},
  	"model/vnd.parasolid.transmit.text": {"source":"iana"},
  	"model/vnd.rosette.annotated-data-model": {"source":"iana"},
  	"model/vnd.valve.source.compiled-map": {"source":"iana"},
  	"model/vnd.vtu": {"source":"iana","extensions":["vtu"]},
  	"model/vrml": {"source":"iana","compressible":false,"extensions":["wrl","vrml"]},
  	"model/x3d+binary": {"source":"apache","compressible":false,"extensions":["x3db","x3dbz"]},
  	"model/x3d+fastinfoset": {"source":"iana"},
  	"model/x3d+vrml": {"source":"apache","compressible":false,"extensions":["x3dv","x3dvz"]},
  	"model/x3d+xml": {"source":"iana","compressible":true,"extensions":["x3d","x3dz"]},
  	"model/x3d-vrml": {"source":"iana"},
  	"multipart/alternative": {"source":"iana","compressible":false},
  	"multipart/appledouble": {"source":"iana"},
  	"multipart/byteranges": {"source":"iana"},
  	"multipart/digest": {"source":"iana"},
  	"multipart/encrypted": {"source":"iana","compressible":false},
  	"multipart/form-data": {"source":"iana","compressible":false},
  	"multipart/header-set": {"source":"iana"},
  	"multipart/mixed": {"source":"iana","compressible":false},
  	"multipart/multilingual": {"source":"iana"},
  	"multipart/parallel": {"source":"iana"},
  	"multipart/related": {"source":"iana","compressible":false},
  	"multipart/report": {"source":"iana"},
  	"multipart/signed": {"source":"iana","compressible":false},
  	"multipart/vnd.bint.med-plus": {"source":"iana"},
  	"multipart/voice-message": {"source":"iana"},
  	"multipart/x-mixed-replace": {"source":"iana"},
  	"text/1d-interleaved-parityfec": {"source":"iana"},
  	"text/cache-manifest": {"source":"iana","compressible":true,"extensions":["appcache","manifest"]},
  	"text/calendar": {"source":"iana","extensions":["ics","ifb"]},
  	"text/calender": {"compressible":true},
  	"text/cmd": {"compressible":true},
  	"text/coffeescript": {"extensions":["coffee","litcoffee"]},
  	"text/css": {"source":"iana","charset":"UTF-8","compressible":true,"extensions":["css"]},
  	"text/csv": {"source":"iana","compressible":true,"extensions":["csv"]},
  	"text/csv-schema": {"source":"iana"},
  	"text/directory": {"source":"iana"},
  	"text/dns": {"source":"iana"},
  	"text/ecmascript": {"source":"iana"},
  	"text/encaprtp": {"source":"iana"},
  	"text/enriched": {"source":"iana"},
  	"text/fwdred": {"source":"iana"},
  	"text/grammar-ref-list": {"source":"iana"},
  	"text/html": {"source":"iana","compressible":true,"extensions":["html","htm","shtml"]},
  	"text/jade": {"extensions":["jade"]},
  	"text/javascript": {"source":"iana","compressible":true},
  	"text/jcr-cnd": {"source":"iana"},
  	"text/jsx": {"compressible":true,"extensions":["jsx"]},
  	"text/less": {"extensions":["less"]},
  	"text/markdown": {"source":"iana","compressible":true,"extensions":["markdown","md"]},
  	"text/mathml": {"source":"nginx","extensions":["mml"]},
  	"text/mizar": {"source":"iana"},
  	"text/n3": {"source":"iana","compressible":true,"extensions":["n3"]},
  	"text/parameters": {"source":"iana"},
  	"text/parityfec": {"source":"iana"},
  	"text/plain": {"source":"iana","compressible":true,"extensions":["txt","text","conf","def","list","log","in","ini"]},
  	"text/provenance-notation": {"source":"iana"},
  	"text/prs.fallenstein.rst": {"source":"iana"},
  	"text/prs.lines.tag": {"source":"iana","extensions":["dsc"]},
  	"text/prs.prop.logic": {"source":"iana"},
  	"text/raptorfec": {"source":"iana"},
  	"text/red": {"source":"iana"},
  	"text/rfc822-headers": {"source":"iana"},
  	"text/richtext": {"source":"iana","compressible":true,"extensions":["rtx"]},
  	"text/rtf": {"source":"iana","compressible":true,"extensions":["rtf"]},
  	"text/rtp-enc-aescm128": {"source":"iana"},
  	"text/rtploopback": {"source":"iana"},
  	"text/rtx": {"source":"iana"},
  	"text/sgml": {"source":"iana","extensions":["sgml","sgm"]},
  	"text/shex": {"extensions":["shex"]},
  	"text/slim": {"extensions":["slim","slm"]},
  	"text/strings": {"source":"iana"},
  	"text/stylus": {"extensions":["stylus","styl"]},
  	"text/t140": {"source":"iana"},
  	"text/tab-separated-values": {"source":"iana","compressible":true,"extensions":["tsv"]},
  	"text/troff": {"source":"iana","extensions":["t","tr","roff","man","me","ms"]},
  	"text/turtle": {"source":"iana","extensions":["ttl"]},
  	"text/ulpfec": {"source":"iana"},
  	"text/uri-list": {"source":"iana","compressible":true,"extensions":["uri","uris","urls"]},
  	"text/vcard": {"source":"iana","compressible":true,"extensions":["vcard"]},
  	"text/vnd.a": {"source":"iana"},
  	"text/vnd.abc": {"source":"iana"},
  	"text/vnd.ascii-art": {"source":"iana"},
  	"text/vnd.curl": {"source":"iana","extensions":["curl"]},
  	"text/vnd.curl.dcurl": {"source":"apache","extensions":["dcurl"]},
  	"text/vnd.curl.mcurl": {"source":"apache","extensions":["mcurl"]},
  	"text/vnd.curl.scurl": {"source":"apache","extensions":["scurl"]},
  	"text/vnd.debian.copyright": {"source":"iana"},
  	"text/vnd.dmclientscript": {"source":"iana"},
  	"text/vnd.dvb.subtitle": {"source":"iana","extensions":["sub"]},
  	"text/vnd.esmertec.theme-descriptor": {"source":"iana"},
  	"text/vnd.fly": {"source":"iana","extensions":["fly"]},
  	"text/vnd.fmi.flexstor": {"source":"iana","extensions":["flx"]},
  	"text/vnd.graphviz": {"source":"iana","extensions":["gv"]},
  	"text/vnd.in3d.3dml": {"source":"iana","extensions":["3dml"]},
  	"text/vnd.in3d.spot": {"source":"iana","extensions":["spot"]},
  	"text/vnd.iptc.newsml": {"source":"iana"},
  	"text/vnd.iptc.nitf": {"source":"iana"},
  	"text/vnd.latex-z": {"source":"iana"},
  	"text/vnd.motorola.reflex": {"source":"iana"},
  	"text/vnd.ms-mediapackage": {"source":"iana"},
  	"text/vnd.net2phone.commcenter.command": {"source":"iana"},
  	"text/vnd.radisys.msml-basic-layout": {"source":"iana"},
  	"text/vnd.si.uricatalogue": {"source":"iana"},
  	"text/vnd.sun.j2me.app-descriptor": {"source":"iana","extensions":["jad"]},
  	"text/vnd.trolltech.linguist": {"source":"iana"},
  	"text/vnd.wap.si": {"source":"iana"},
  	"text/vnd.wap.sl": {"source":"iana"},
  	"text/vnd.wap.wml": {"source":"iana","extensions":["wml"]},
  	"text/vnd.wap.wmlscript": {"source":"iana","extensions":["wmls"]},
  	"text/vtt": {"charset":"UTF-8","compressible":true,"extensions":["vtt"]},
  	"text/x-asm": {"source":"apache","extensions":["s","asm"]},
  	"text/x-c": {"source":"apache","extensions":["c","cc","cxx","cpp","h","hh","dic"]},
  	"text/x-component": {"source":"nginx","extensions":["htc"]},
  	"text/x-fortran": {"source":"apache","extensions":["f","for","f77","f90"]},
  	"text/x-gwt-rpc": {"compressible":true},
  	"text/x-handlebars-template": {"extensions":["hbs"]},
  	"text/x-java-source": {"source":"apache","extensions":["java"]},
  	"text/x-jquery-tmpl": {"compressible":true},
  	"text/x-lua": {"extensions":["lua"]},
  	"text/x-markdown": {"compressible":true,"extensions":["mkd"]},
  	"text/x-nfo": {"source":"apache","extensions":["nfo"]},
  	"text/x-opml": {"source":"apache","extensions":["opml"]},
  	"text/x-org": {"compressible":true,"extensions":["org"]},
  	"text/x-pascal": {"source":"apache","extensions":["p","pas"]},
  	"text/x-processing": {"compressible":true,"extensions":["pde"]},
  	"text/x-sass": {"extensions":["sass"]},
  	"text/x-scss": {"extensions":["scss"]},
  	"text/x-setext": {"source":"apache","extensions":["etx"]},
  	"text/x-sfv": {"source":"apache","extensions":["sfv"]},
  	"text/x-suse-ymp": {"compressible":true,"extensions":["ymp"]},
  	"text/x-uuencode": {"source":"apache","extensions":["uu"]},
  	"text/x-vcalendar": {"source":"apache","extensions":["vcs"]},
  	"text/x-vcard": {"source":"apache","extensions":["vcf"]},
  	"text/xml": {"source":"iana","compressible":true,"extensions":["xml"]},
  	"text/xml-external-parsed-entity": {"source":"iana"},
  	"text/yaml": {"extensions":["yaml","yml"]},
  	"video/1d-interleaved-parityfec": {"source":"iana"},
  	"video/3gpp": {"source":"iana","extensions":["3gp","3gpp"]},
  	"video/3gpp-tt": {"source":"iana"},
  	"video/3gpp2": {"source":"iana","extensions":["3g2"]},
  	"video/bmpeg": {"source":"iana"},
  	"video/bt656": {"source":"iana"},
  	"video/celb": {"source":"iana"},
  	"video/dv": {"source":"iana"},
  	"video/encaprtp": {"source":"iana"},
  	"video/h261": {"source":"iana","extensions":["h261"]},
  	"video/h263": {"source":"iana","extensions":["h263"]},
  	"video/h263-1998": {"source":"iana"},
  	"video/h263-2000": {"source":"iana"},
  	"video/h264": {"source":"iana","extensions":["h264"]},
  	"video/h264-rcdo": {"source":"iana"},
  	"video/h264-svc": {"source":"iana"},
  	"video/h265": {"source":"iana"},
  	"video/iso.segment": {"source":"iana"},
  	"video/jpeg": {"source":"iana","extensions":["jpgv"]},
  	"video/jpeg2000": {"source":"iana"},
  	"video/jpm": {"source":"apache","extensions":["jpm","jpgm"]},
  	"video/mj2": {"source":"iana","extensions":["mj2","mjp2"]},
  	"video/mp1s": {"source":"iana"},
  	"video/mp2p": {"source":"iana"},
  	"video/mp2t": {"source":"iana","extensions":["ts"]},
  	"video/mp4": {"source":"iana","compressible":false,"extensions":["mp4","mp4v","mpg4"]},
  	"video/mp4v-es": {"source":"iana"},
  	"video/mpeg": {"source":"iana","compressible":false,"extensions":["mpeg","mpg","mpe","m1v","m2v"]},
  	"video/mpeg4-generic": {"source":"iana"},
  	"video/mpv": {"source":"iana"},
  	"video/nv": {"source":"iana"},
  	"video/ogg": {"source":"iana","compressible":false,"extensions":["ogv"]},
  	"video/parityfec": {"source":"iana"},
  	"video/pointer": {"source":"iana"},
  	"video/quicktime": {"source":"iana","compressible":false,"extensions":["qt","mov"]},
  	"video/raptorfec": {"source":"iana"},
  	"video/raw": {"source":"iana"},
  	"video/rtp-enc-aescm128": {"source":"iana"},
  	"video/rtploopback": {"source":"iana"},
  	"video/rtx": {"source":"iana"},
  	"video/smpte291": {"source":"iana"},
  	"video/smpte292m": {"source":"iana"},
  	"video/ulpfec": {"source":"iana"},
  	"video/vc1": {"source":"iana"},
  	"video/vnd.cctv": {"source":"iana"},
  	"video/vnd.dece.hd": {"source":"iana","extensions":["uvh","uvvh"]},
  	"video/vnd.dece.mobile": {"source":"iana","extensions":["uvm","uvvm"]},
  	"video/vnd.dece.mp4": {"source":"iana"},
  	"video/vnd.dece.pd": {"source":"iana","extensions":["uvp","uvvp"]},
  	"video/vnd.dece.sd": {"source":"iana","extensions":["uvs","uvvs"]},
  	"video/vnd.dece.video": {"source":"iana","extensions":["uvv","uvvv"]},
  	"video/vnd.directv.mpeg": {"source":"iana"},
  	"video/vnd.directv.mpeg-tts": {"source":"iana"},
  	"video/vnd.dlna.mpeg-tts": {"source":"iana"},
  	"video/vnd.dvb.file": {"source":"iana","extensions":["dvb"]},
  	"video/vnd.fvt": {"source":"iana","extensions":["fvt"]},
  	"video/vnd.hns.video": {"source":"iana"},
  	"video/vnd.iptvforum.1dparityfec-1010": {"source":"iana"},
  	"video/vnd.iptvforum.1dparityfec-2005": {"source":"iana"},
  	"video/vnd.iptvforum.2dparityfec-1010": {"source":"iana"},
  	"video/vnd.iptvforum.2dparityfec-2005": {"source":"iana"},
  	"video/vnd.iptvforum.ttsavc": {"source":"iana"},
  	"video/vnd.iptvforum.ttsmpeg2": {"source":"iana"},
  	"video/vnd.motorola.video": {"source":"iana"},
  	"video/vnd.motorola.videop": {"source":"iana"},
  	"video/vnd.mpegurl": {"source":"iana","extensions":["mxu","m4u"]},
  	"video/vnd.ms-playready.media.pyv": {"source":"iana","extensions":["pyv"]},
  	"video/vnd.nokia.interleaved-multimedia": {"source":"iana"},
  	"video/vnd.nokia.mp4vr": {"source":"iana"},
  	"video/vnd.nokia.videovoip": {"source":"iana"},
  	"video/vnd.objectvideo": {"source":"iana"},
  	"video/vnd.radgamettools.bink": {"source":"iana"},
  	"video/vnd.radgamettools.smacker": {"source":"iana"},
  	"video/vnd.sealed.mpeg1": {"source":"iana"},
  	"video/vnd.sealed.mpeg4": {"source":"iana"},
  	"video/vnd.sealed.swf": {"source":"iana"},
  	"video/vnd.sealedmedia.softseal.mov": {"source":"iana"},
  	"video/vnd.uvvu.mp4": {"source":"iana","extensions":["uvu","uvvu"]},
  	"video/vnd.vivo": {"source":"iana","extensions":["viv"]},
  	"video/vp8": {"source":"iana"},
  	"video/webm": {"source":"apache","compressible":false,"extensions":["webm"]},
  	"video/x-f4v": {"source":"apache","extensions":["f4v"]},
  	"video/x-fli": {"source":"apache","extensions":["fli"]},
  	"video/x-flv": {"source":"apache","compressible":false,"extensions":["flv"]},
  	"video/x-m4v": {"source":"apache","extensions":["m4v"]},
  	"video/x-matroska": {"source":"apache","compressible":false,"extensions":["mkv","mk3d","mks"]},
  	"video/x-mng": {"source":"apache","extensions":["mng"]},
  	"video/x-ms-asf": {"source":"apache","extensions":["asf","asx"]},
  	"video/x-ms-vob": {"source":"apache","extensions":["vob"]},
  	"video/x-ms-wm": {"source":"apache","extensions":["wm"]},
  	"video/x-ms-wmv": {"source":"apache","compressible":false,"extensions":["wmv"]},
  	"video/x-ms-wmx": {"source":"apache","extensions":["wmx"]},
  	"video/x-ms-wvx": {"source":"apache","extensions":["wvx"]},
  	"video/x-msvideo": {"source":"apache","extensions":["avi"]},
  	"video/x-sgi-movie": {"source":"apache","extensions":["movie"]},
  	"video/x-smv": {"source":"apache","extensions":["smv"]},
  	"x-conference/x-cooltalk": {"source":"apache","extensions":["ice"]},
  	"x-shader/x-fragment": {"compressible":true},
  	"x-shader/x-vertex": {"compressible":true}
  };

  var db$1 = /*#__PURE__*/Object.freeze({
    default: db
  });

  var require$$0$1 = ( db$1 && db ) || db$1;

  /*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * MIT Licensed
   */

  /**
   * Module exports.
   */

  var mimeDb = require$$0$1;

  var mimeTypes = createCommonjsModule(function (module, exports) {

  /**
   * Module dependencies.
   * @private
   */


  var extname = path$2.extname;

  /**
   * Module variables.
   * @private
   */

  var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
  var TEXT_TYPE_REGEXP = /^text\//i;

  /**
   * Module exports.
   * @public
   */

  exports.charset = charset;
  exports.charsets = { lookup: charset };
  exports.contentType = contentType;
  exports.extension = extension;
  exports.extensions = Object.create(null);
  exports.lookup = lookup;
  exports.types = Object.create(null);

  // Populate the extensions/types maps
  populateMaps(exports.extensions, exports.types);

  /**
   * Get the default charset for a MIME type.
   *
   * @param {string} type
   * @return {boolean|string}
   */

  function charset (type) {
    if (!type || typeof type !== 'string') {
      return false
    }

    // TODO: use media-typer
    var match = EXTRACT_TYPE_REGEXP.exec(type);
    var mime = match && mimeDb[match[1].toLowerCase()];

    if (mime && mime.charset) {
      return mime.charset
    }

    // default text/* to utf-8
    if (match && TEXT_TYPE_REGEXP.test(match[1])) {
      return 'UTF-8'
    }

    return false
  }

  /**
   * Create a full Content-Type header given a MIME type or extension.
   *
   * @param {string} str
   * @return {boolean|string}
   */

  function contentType (str) {
    // TODO: should this even be in this module?
    if (!str || typeof str !== 'string') {
      return false
    }

    var mime = str.indexOf('/') === -1
      ? exports.lookup(str)
      : str;

    if (!mime) {
      return false
    }

    // TODO: use content-type or other module
    if (mime.indexOf('charset') === -1) {
      var charset = exports.charset(mime);
      if (charset) { mime += '; charset=' + charset.toLowerCase(); }
    }

    return mime
  }

  /**
   * Get the default extension for a MIME type.
   *
   * @param {string} type
   * @return {boolean|string}
   */

  function extension (type) {
    if (!type || typeof type !== 'string') {
      return false
    }

    // TODO: use media-typer
    var match = EXTRACT_TYPE_REGEXP.exec(type);

    // get extensions
    var exts = match && exports.extensions[match[1].toLowerCase()];

    if (!exts || !exts.length) {
      return false
    }

    return exts[0]
  }

  /**
   * Lookup the MIME type for a file path/extension.
   *
   * @param {string} path
   * @return {boolean|string}
   */

  function lookup (path) {
    if (!path || typeof path !== 'string') {
      return false
    }

    // get the extension ("ext" or ".ext" or full path)
    var extension = extname('x.' + path)
      .toLowerCase()
      .substr(1);

    if (!extension) {
      return false
    }

    return exports.types[extension] || false
  }

  /**
   * Populate the extensions and types maps.
   * @private
   */

  function populateMaps (extensions, types) {
    // source preference (least -> most)
    var preference = ['nginx', 'apache', undefined, 'iana'];

    Object.keys(mimeDb).forEach(function forEachMimeType (type) {
      var mime = mimeDb[type];
      var exts = mime.extensions;

      if (!exts || !exts.length) {
        return
      }

      // mime -> extensions
      extensions[type] = exts;

      // extension -> mime
      for (var i = 0; i < exts.length; i++) {
        var extension = exts[i];

        if (types[extension]) {
          var from = preference.indexOf(mimeDb[types[extension]].source);
          var to = preference.indexOf(mime.source);

          if (types[extension] !== 'application/octet-stream' &&
            (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {
            // skip the remapping
            continue
          }
        }

        // set the extension -> mime
        types[extension] = type;
      }
    });
  }
  });
  var mimeTypes_1 = mimeTypes.charset;
  var mimeTypes_2 = mimeTypes.charsets;
  var mimeTypes_3 = mimeTypes.contentType;
  var mimeTypes_4 = mimeTypes.extension;
  var mimeTypes_5 = mimeTypes.extensions;
  var mimeTypes_6 = mimeTypes.lookup;
  var mimeTypes_7 = mimeTypes.types;

  var StringDecoder$1 = stringDecoder.StringDecoder;

  var stringstream = StringStream;
  var AlignedStringDecoder_1 = AlignedStringDecoder;

  function StringStream(from, to) {
    if (!(this instanceof StringStream)) { return new StringStream(from, to) }

    stream$1.call(this);

    if (from == null) { from = 'utf8'; }

    this.readable = this.writable = true;
    this.paused = false;
    this.toEncoding = (to == null ? from : to);
    this.fromEncoding = (to == null ? '' : from);
    this.decoder = new AlignedStringDecoder(this.toEncoding);
  }
  util$2.inherits(StringStream, stream$1);

  StringStream.prototype.write = function(data) {
    if (!this.writable) {
      var err = new Error('stream not writable');
      err.code = 'EPIPE';
      this.emit('error', err);
      return false
    }
    if (this.fromEncoding) {
      if (Buffer.isBuffer(data)) { data = data.toString(); }
      data = new Buffer(data, this.fromEncoding);
    }
    var string = this.decoder.write(data);
    if (string.length) { this.emit('data', string); }
    return !this.paused
  };

  StringStream.prototype.flush = function() {
    if (this.decoder.flush) {
      var string = this.decoder.flush();
      if (string.length) { this.emit('data', string); }
    }
  };

  StringStream.prototype.end = function() {
    if (!this.writable && !this.readable) { return }
    this.flush();
    this.emit('end');
    this.writable = this.readable = false;
    this.destroy();
  };

  StringStream.prototype.destroy = function() {
    this.decoder = null;
    this.writable = this.readable = false;
    this.emit('close');
  };

  StringStream.prototype.pause = function() {
    this.paused = true;
  };

  StringStream.prototype.resume = function () {
    if (this.paused) { this.emit('drain'); }
    this.paused = false;
  };

  function AlignedStringDecoder(encoding) {
    StringDecoder$1.call(this, encoding);

    switch (this.encoding) {
      case 'base64':
        this.write = alignedWrite;
        this.alignedBuffer = new Buffer(3);
        this.alignedBytes = 0;
        break
    }
  }
  util$2.inherits(AlignedStringDecoder, StringDecoder$1);

  AlignedStringDecoder.prototype.flush = function() {
    if (!this.alignedBuffer || !this.alignedBytes) { return '' }
    var leftover = this.alignedBuffer.toString(this.encoding, 0, this.alignedBytes);
    this.alignedBytes = 0;
    return leftover
  };

  function alignedWrite(buffer) {
    var rem = (this.alignedBytes + buffer.length) % this.alignedBuffer.length;
    if (!rem && !this.alignedBytes) { return buffer.toString(this.encoding) }

    var returnBuffer = new Buffer(this.alignedBytes + buffer.length - rem);

    this.alignedBuffer.copy(returnBuffer, 0, 0, this.alignedBytes);
    buffer.copy(returnBuffer, this.alignedBytes, 0, buffer.length - rem);

    buffer.copy(this.alignedBuffer, 0, buffer.length - rem, buffer.length);
    this.alignedBytes = rem;

    return returnBuffer.toString(this.encoding)
  }
  stringstream.AlignedStringDecoder = AlignedStringDecoder_1;

  function Caseless (dict) {
    this.dict = dict || {};
  }
  Caseless.prototype.set = function (name, value, clobber) {
    var this$1 = this;

    if (typeof name === 'object') {
      for (var i in name) {
        this$1.set(i, name[i], value);
      }
    } else {
      if (typeof clobber === 'undefined') { clobber = true; }
      var has = this.has(name);

      if (!clobber && has) { this.dict[has] = this.dict[has] + ',' + value; }
      else { this.dict[has || name] = value; }
      return has
    }
  };
  Caseless.prototype.has = function (name) {
    var keys = Object.keys(this.dict)
      , name = name.toLowerCase()
      ;
    for (var i=0;i<keys.length;i++) {
      if (keys[i].toLowerCase() === name) { return keys[i] }
    }
    return false
  };
  Caseless.prototype.get = function (name) {
    name = name.toLowerCase();
    var result, _key;
    var headers = this.dict;
    Object.keys(headers).forEach(function (key) {
      _key = key.toLowerCase();
      if (name === _key) { result = headers[key]; }
    });
    return result
  };
  Caseless.prototype.swap = function (name) {
    var has = this.has(name);
    if (has === name) { return }
    if (!has) { throw new Error('There is no header than matches "'+name+'"') }
    this.dict[name] = this.dict[has];
    delete this.dict[has];
  };
  Caseless.prototype.del = function (name) {
    var has = this.has(name);
    return delete this.dict[has || name]
  };

  var caseless = function (dict) {return new Caseless(dict)};
  var httpify = function (resp, headers) {
    var c = new Caseless(headers);
    resp.setHeader = function (key, value, clobber) {
      if (typeof value === 'undefined') { return }
      return c.set(key, value, clobber)
    };
    resp.hasHeader = function (key) {
      return c.has(key)
    };
    resp.getHeader = function (key) {
      return c.get(key)
    };
    resp.removeHeader = function (key) {
      return c.del(key)
    };
    resp.headers = c.dict;
    return c
  };
  caseless.httpify = httpify;

  var foreverAgent = ForeverAgent;
  ForeverAgent.SSL = ForeverAgentSSL;

  var Agent$1 = http$2.Agent
    , AgentSSL = http$2.Agent;
    
  function getConnectionName(host, port) {  
    var name = '';
    if (typeof host === 'string') {
      name = host + ':' + port;
    } else {
      // For node.js v012.0 and iojs-v1.5.1, host is an object. And any existing localAddress is part of the connection name.
      name = host.host + ':' + host.port + ':' + (host.localAddress ? (host.localAddress + ':') : ':');
    }
    return name
  }    

  function ForeverAgent(options) {
    var self = this;
    self.options = options || {};
    self.requests = {};
    self.sockets = {};
    self.freeSockets = {};
    self.maxSockets = self.options.maxSockets || Agent$1.defaultMaxSockets;
    self.minSockets = self.options.minSockets || ForeverAgent.defaultMinSockets;
    self.on('free', function(socket, host, port) {
      var name = getConnectionName(host, port);

      if (self.requests[name] && self.requests[name].length) {
        self.requests[name].shift().onSocket(socket);
      } else if (self.sockets[name].length < self.minSockets) {
        if (!self.freeSockets[name]) { self.freeSockets[name] = []; }
        self.freeSockets[name].push(socket);
        
        // if an error happens while we don't use the socket anyway, meh, throw the socket away
        var onIdleError = function() {
          socket.destroy();
        };
        socket._onIdleError = onIdleError;
        socket.on('error', onIdleError);
      } else {
        // If there are no pending requests just destroy the
        // socket and it will get removed from the pool. This
        // gets us out of timeout issues and allows us to
        // default to Connection:keep-alive.
        socket.destroy();
      }
    });

  }
  util$2.inherits(ForeverAgent, Agent$1);

  ForeverAgent.defaultMinSockets = 5;


  ForeverAgent.prototype.createConnection = tls.createConnection;
  ForeverAgent.prototype.addRequestNoreuse = Agent$1.prototype.addRequest;
  ForeverAgent.prototype.addRequest = function(req, host, port) {
    var name = getConnectionName(host, port);
    
    if (typeof host !== 'string') {
      var options = host;
      port = options.port;
      host = options.host;
    }

    if (this.freeSockets[name] && this.freeSockets[name].length > 0 && !req.useChunkedEncodingByDefault) {
      var idleSocket = this.freeSockets[name].pop();
      idleSocket.removeListener('error', idleSocket._onIdleError);
      delete idleSocket._onIdleError;
      req._reusedSocket = true;
      req.onSocket(idleSocket);
    } else {
      this.addRequestNoreuse(req, host, port);
    }
  };

  ForeverAgent.prototype.removeSocket = function(s, name, host, port) {
    if (this.sockets[name]) {
      var index = this.sockets[name].indexOf(s);
      if (index !== -1) {
        this.sockets[name].splice(index, 1);
      }
    } else if (this.sockets[name] && this.sockets[name].length === 0) {
      // don't leak
      delete this.sockets[name];
      delete this.requests[name];
    }
    
    if (this.freeSockets[name]) {
      var index = this.freeSockets[name].indexOf(s);
      if (index !== -1) {
        this.freeSockets[name].splice(index, 1);
        if (this.freeSockets[name].length === 0) {
          delete this.freeSockets[name];
        }
      }
    }

    if (this.requests[name] && this.requests[name].length) {
      // If we have pending requests and a socket gets closed a new one
      // needs to be created to take over in the pool for the one that closed.
      this.createSocket(name, host, port).emit('free');
    }
  };

  function ForeverAgentSSL (options) {
    ForeverAgent.call(this, options);
  }
  util$2.inherits(ForeverAgentSSL, ForeverAgent);

  ForeverAgentSSL.prototype.createConnection = createConnectionSSL;
  ForeverAgentSSL.prototype.addRequestNoreuse = AgentSSL.prototype.addRequest;

  function createConnectionSSL (port, host, options) {
    if (typeof port === 'object') {
      options = port;
    } else if (typeof host === 'object') {
      options = host;
    } else if (typeof options === 'object') {
      options = options;
    } else {
      options = {};
    }

    if (typeof port === 'number') {
      options.port = port;
    }

    if (typeof host === 'string') {
      options.host = host;
    }

    return tls.connect(options);
  }

  var Stream$2 = stream$1.Stream;


  var delayed_stream = DelayedStream;
  function DelayedStream() {
    this.source = null;
    this.dataSize = 0;
    this.maxDataSize = 1024 * 1024;
    this.pauseStream = true;

    this._maxDataSizeExceeded = false;
    this._released = false;
    this._bufferedEvents = [];
  }
  util$2.inherits(DelayedStream, Stream$2);

  DelayedStream.create = function(source, options) {
    var delayedStream = new this();

    options = options || {};
    for (var option in options) {
      delayedStream[option] = options[option];
    }

    delayedStream.source = source;

    var realEmit = source.emit;
    source.emit = function() {
      delayedStream._handleEmit(arguments);
      return realEmit.apply(source, arguments);
    };

    source.on('error', function() {});
    if (delayedStream.pauseStream) {
      source.pause();
    }

    return delayedStream;
  };

  Object.defineProperty(DelayedStream.prototype, 'readable', {
    configurable: true,
    enumerable: true,
    get: function() {
      return this.source.readable;
    }
  });

  DelayedStream.prototype.setEncoding = function() {
    return this.source.setEncoding.apply(this.source, arguments);
  };

  DelayedStream.prototype.resume = function() {
    if (!this._released) {
      this.release();
    }

    this.source.resume();
  };

  DelayedStream.prototype.pause = function() {
    this.source.pause();
  };

  DelayedStream.prototype.release = function() {
    this._released = true;

    this._bufferedEvents.forEach(function(args) {
      this.emit.apply(this, args);
    }.bind(this));
    this._bufferedEvents = [];
  };

  DelayedStream.prototype.pipe = function() {
    var r = Stream$2.prototype.pipe.apply(this, arguments);
    this.resume();
    return r;
  };

  DelayedStream.prototype._handleEmit = function(args) {
    if (this._released) {
      this.emit.apply(this, args);
      return;
    }

    if (args[0] === 'data') {
      this.dataSize += args[1].length;
      this._checkIfMaxDataSizeExceeded();
    }

    this._bufferedEvents.push(args);
  };

  DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
    if (this._maxDataSizeExceeded) {
      return;
    }

    if (this.dataSize <= this.maxDataSize) {
      return;
    }

    this._maxDataSizeExceeded = true;
    var message =
      'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
    this.emit('error', new Error(message));
  };

  var defer_1$1 = defer$1;

  /**
   * Runs provided function on next iteration of the event loop
   *
   * @param {function} fn - function to run
   */
  function defer$1(fn)
  {
    var nextTick = typeof setImmediate == 'function'
      ? setImmediate
      : (
        typeof process == 'object' && typeof process.nextTick == 'function'
        ? process.nextTick
        : null
      );

    if (nextTick)
    {
      nextTick(fn);
    }
    else
    {
      setTimeout(fn, 0);
    }
  }

  var Stream$3 = stream$1.Stream;



  var combined_stream = CombinedStream;
  function CombinedStream() {
    this.writable = false;
    this.readable = true;
    this.dataSize = 0;
    this.maxDataSize = 2 * 1024 * 1024;
    this.pauseStreams = true;

    this._released = false;
    this._streams = [];
    this._currentStream = null;
  }
  util$2.inherits(CombinedStream, Stream$3);

  CombinedStream.create = function(options) {
    var combinedStream = new this();

    options = options || {};
    for (var option in options) {
      combinedStream[option] = options[option];
    }

    return combinedStream;
  };

  CombinedStream.isStreamLike = function(stream) {
    return (typeof stream !== 'function')
      && (typeof stream !== 'string')
      && (typeof stream !== 'boolean')
      && (typeof stream !== 'number')
      && (!Buffer.isBuffer(stream));
  };

  CombinedStream.prototype.append = function(stream) {
    var isStreamLike = CombinedStream.isStreamLike(stream);

    if (isStreamLike) {
      if (!(stream instanceof delayed_stream)) {
        var newStream = delayed_stream.create(stream, {
          maxDataSize: Infinity,
          pauseStream: this.pauseStreams,
        });
        stream.on('data', this._checkDataSize.bind(this));
        stream = newStream;
      }

      this._handleErrors(stream);

      if (this.pauseStreams) {
        stream.pause();
      }
    }

    this._streams.push(stream);
    return this;
  };

  CombinedStream.prototype.pipe = function(dest, options) {
    Stream$3.prototype.pipe.call(this, dest, options);
    this.resume();
    return dest;
  };

  CombinedStream.prototype._getNext = function() {
    this._currentStream = null;
    var stream = this._streams.shift();


    if (typeof stream == 'undefined') {
      this.end();
      return;
    }

    if (typeof stream !== 'function') {
      this._pipeNext(stream);
      return;
    }

    var getStream = stream;
    getStream(function(stream) {
      var isStreamLike = CombinedStream.isStreamLike(stream);
      if (isStreamLike) {
        stream.on('data', this._checkDataSize.bind(this));
        this._handleErrors(stream);
      }

      defer_1$1(this._pipeNext.bind(this, stream));
    }.bind(this));
  };

  CombinedStream.prototype._pipeNext = function(stream) {
    this._currentStream = stream;

    var isStreamLike = CombinedStream.isStreamLike(stream);
    if (isStreamLike) {
      stream.on('end', this._getNext.bind(this));
      stream.pipe(this, {end: false});
      return;
    }

    var value = stream;
    this.write(value);
    this._getNext();
  };

  CombinedStream.prototype._handleErrors = function(stream) {
    var self = this;
    stream.on('error', function(err) {
      self._emitError(err);
    });
  };

  CombinedStream.prototype.write = function(data) {
    this.emit('data', data);
  };

  CombinedStream.prototype.pause = function() {
    if (!this.pauseStreams) {
      return;
    }

    if(this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function') { this._currentStream.pause(); }
    this.emit('pause');
  };

  CombinedStream.prototype.resume = function() {
    if (!this._released) {
      this._released = true;
      this.writable = true;
      this._getNext();
    }

    if(this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function') { this._currentStream.resume(); }
    this.emit('resume');
  };

  CombinedStream.prototype.end = function() {
    this._reset();
    this.emit('end');
  };

  CombinedStream.prototype.destroy = function() {
    this._reset();
    this.emit('close');
  };

  CombinedStream.prototype._reset = function() {
    this.writable = false;
    this._streams = [];
    this._currentStream = null;
  };

  CombinedStream.prototype._checkDataSize = function() {
    this._updateDataSize();
    if (this.dataSize <= this.maxDataSize) {
      return;
    }

    var message =
      'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
    this._emitError(new Error(message));
  };

  CombinedStream.prototype._updateDataSize = function() {
    this.dataSize = 0;

    var self = this;
    this._streams.forEach(function(stream) {
      if (!stream.dataSize) {
        return;
      }

      self.dataSize += stream.dataSize;
    });

    if (this._currentStream && this._currentStream.dataSize) {
      this.dataSize += this._currentStream.dataSize;
    }
  };

  CombinedStream.prototype._emitError = function(err) {
    this._reset();
    this.emit('error', err);
  };

  var defer_1$2 = defer$2;

  /**
   * Runs provided function on next iteration of the event loop
   *
   * @param {function} fn - function to run
   */
  function defer$2(fn)
  {
    var nextTick = typeof setImmediate == 'function'
      ? setImmediate
      : (
        typeof process == 'object' && typeof process.nextTick == 'function'
        ? process.nextTick
        : null
      );

    if (nextTick)
    {
      nextTick(fn);
    }
    else
    {
      setTimeout(fn, 0);
    }
  }

  // API
  var async_1 = async;

  /**
   * Runs provided callback asynchronously
   * even if callback itself is not
   *
   * @param   {function} callback - callback to invoke
   * @returns {function} - augmented callback
   */
  function async(callback)
  {
    var isAsync = false;

    // check if async happened
    defer_1$2(function() { isAsync = true; });

    return function async_callback(err, result)
    {
      if (isAsync)
      {
        callback(err, result);
      }
      else
      {
        defer_1$2(function nextTick_callback()
        {
          callback(err, result);
        });
      }
    };
  }

  // API
  var abort_1 = abort;

  /**
   * Aborts leftover active jobs
   *
   * @param {object} state - current state object
   */
  function abort(state)
  {
    Object.keys(state.jobs).forEach(clean.bind(state));

    // reset leftover jobs
    state.jobs = {};
  }

  /**
   * Cleans up leftover job by invoking abort function for the provided job id
   *
   * @this  state
   * @param {string|number} key - job id to abort
   */
  function clean(key)
  {
    if (typeof this.jobs[key] == 'function')
    {
      this.jobs[key]();
    }
  }

  // API
  var iterate_1 = iterate;

  /**
   * Iterates over each job object
   *
   * @param {array|object} list - array or object (named list) to iterate over
   * @param {function} iterator - iterator to run
   * @param {object} state - current job status
   * @param {function} callback - invoked when all elements processed
   */
  function iterate(list, iterator, state, callback)
  {
    // store current index
    var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;

    state.jobs[key] = runJob(iterator, key, list[key], function(error, output)
    {
      // don't repeat yourself
      // skip secondary callbacks
      if (!(key in state.jobs))
      {
        return;
      }

      // clean up jobs
      delete state.jobs[key];

      if (error)
      {
        // don't process rest of the results
        // stop still active jobs
        // and reset the list
        abort_1(state);
      }
      else
      {
        state.results[key] = output;
      }

      // return salvaged results
      callback(error, state.results);
    });
  }

  /**
   * Runs iterator over provided job element
   *
   * @param   {function} iterator - iterator to invoke
   * @param   {string|number} key - key/index of the element in the list of jobs
   * @param   {mixed} item - job description
   * @param   {function} callback - invoked after iterator is done with the job
   * @returns {function|mixed} - job abort function or something else
   */
  function runJob(iterator, key, item, callback)
  {
    var aborter;

    // allow shortcut if iterator expects only two arguments
    if (iterator.length == 2)
    {
      aborter = iterator(item, async_1(callback));
    }
    // otherwise go with full three arguments
    else
    {
      aborter = iterator(item, key, async_1(callback));
    }

    return aborter;
  }

  // API
  var state_1 = state;

  /**
   * Creates initial state object
   * for iteration over list
   *
   * @param   {array|object} list - list to iterate over
   * @param   {function|null} sortMethod - function to use for keys sort,
   *                                     or `null` to keep them as is
   * @returns {object} - initial state object
   */
  function state(list, sortMethod)
  {
    var isNamedList = !Array.isArray(list)
      , initState =
      {
        index    : 0,
        keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
        jobs     : {},
        results  : isNamedList ? {} : [],
        size     : isNamedList ? Object.keys(list).length : list.length
      }
      ;

    if (sortMethod)
    {
      // sort array keys based on it's values
      // sort object's keys just on own merit
      initState.keyedList.sort(isNamedList ? sortMethod : function(a, b)
      {
        return sortMethod(list[a], list[b]);
      });
    }

    return initState;
  }

  // API
  var terminator_1 = terminator;

  /**
   * Terminates jobs in the attached state context
   *
   * @this  AsyncKitState#
   * @param {function} callback - final callback to invoke after termination
   */
  function terminator(callback)
  {
    if (!Object.keys(this.jobs).length)
    {
      return;
    }

    // fast forward iteration index
    this.index = this.size;

    // abort jobs
    abort_1(this);

    // send back results we have so far
    async_1(callback)(null, this.results);
  }

  // Public API
  var parallel_1 = parallel;

  /**
   * Runs iterator over provided array elements in parallel
   *
   * @param   {array|object} list - array or object (named list) to iterate over
   * @param   {function} iterator - iterator to run
   * @param   {function} callback - invoked when all elements processed
   * @returns {function} - jobs terminator
   */
  function parallel(list, iterator, callback)
  {
    var state = state_1(list);

    while (state.index < (state['keyedList'] || list).length)
    {
      iterate_1(list, iterator, state, function(error, result)
      {
        if (error)
        {
          callback(error, result);
          return;
        }

        // looks like it's the last one
        if (Object.keys(state.jobs).length === 0)
        {
          callback(null, state.results);
          return;
        }
      });

      state.index++;
    }

    return terminator_1.bind(state, callback);
  }

  // Public API
  var serialOrdered_1 = serialOrdered;
  // sorting helpers
  var ascending_1  = ascending;
  var descending_1 = descending;

  /**
   * Runs iterator over provided sorted array elements in series
   *
   * @param   {array|object} list - array or object (named list) to iterate over
   * @param   {function} iterator - iterator to run
   * @param   {function} sortMethod - custom sort function
   * @param   {function} callback - invoked when all elements processed
   * @returns {function} - jobs terminator
   */
  function serialOrdered(list, iterator, sortMethod, callback)
  {
    var state = state_1(list, sortMethod);

    iterate_1(list, iterator, state, function iteratorHandler(error, result)
    {
      if (error)
      {
        callback(error, result);
        return;
      }

      state.index++;

      // are we there yet?
      if (state.index < (state['keyedList'] || list).length)
      {
        iterate_1(list, iterator, state, iteratorHandler);
        return;
      }

      // done here
      callback(null, state.results);
    });

    return terminator_1.bind(state, callback);
  }

  /*
   * -- Sort methods
   */

  /**
   * sort helper to sort array elements in ascending order
   *
   * @param   {mixed} a - an item to compare
   * @param   {mixed} b - an item to compare
   * @returns {number} - comparison result
   */
  function ascending(a, b)
  {
    return a < b ? -1 : a > b ? 1 : 0;
  }

  /**
   * sort helper to sort array elements in descending order
   *
   * @param   {mixed} a - an item to compare
   * @param   {mixed} b - an item to compare
   * @returns {number} - comparison result
   */
  function descending(a, b)
  {
    return -1 * ascending(a, b);
  }
  serialOrdered_1.ascending = ascending_1;
  serialOrdered_1.descending = descending_1;

  // Public API
  var serial_1 = serial;

  /**
   * Runs iterator over provided array elements in series
   *
   * @param   {array|object} list - array or object (named list) to iterate over
   * @param   {function} iterator - iterator to run
   * @param   {function} callback - invoked when all elements processed
   * @returns {function} - jobs terminator
   */
  function serial(list, iterator, callback)
  {
    return serialOrdered_1(list, iterator, null, callback);
  }

  var asynckit =
  {
    parallel      : parallel_1,
    serial        : serial_1,
    serialOrdered : serialOrdered_1
  };

  // populates missing values
  var populate = function(dst, src) {

    Object.keys(src).forEach(function(prop)
    {
      dst[prop] = dst[prop] || src[prop];
    });

    return dst;
  };

  var parseUrl = url$2.parse;





  // Public API
  var form_data = FormData;

  // make it a Stream
  util$2.inherits(FormData, combined_stream);

  /**
   * Create readable "multipart/form-data" streams.
   * Can be used to submit forms
   * and file uploads to other web applications.
   *
   * @constructor
   * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream
   */
  function FormData(options) {
    var this$1 = this;

    if (!(this instanceof FormData)) {
      return new FormData();
    }

    this._overheadLength = 0;
    this._valueLength = 0;
    this._valuesToMeasure = [];

    combined_stream.call(this);

    options = options || {};
    for (var option in options) {
      this$1[option] = options[option];
    }
  }

  FormData.LINE_BREAK = '\r\n';
  FormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';

  FormData.prototype.append = function(field, value, options) {

    options = options || {};

    // allow filename as single option
    if (typeof options == 'string') {
      options = {filename: options};
    }

    var append = combined_stream.prototype.append.bind(this);

    // all that streamy business can't handle numbers
    if (typeof value == 'number') {
      value = '' + value;
    }

    // https://github.com/felixge/node-form-data/issues/38
    if (util$2.isArray(value)) {
      // Please convert your array into string
      // the way web server expects it
      this._error(new Error('Arrays are not supported.'));
      return;
    }

    var header = this._multiPartHeader(field, value, options);
    var footer = this._multiPartFooter();

    append(header);
    append(value);
    append(footer);

    // pass along options.knownLength
    this._trackLength(header, value, options);
  };

  FormData.prototype._trackLength = function(header, value, options) {
    var valueLength = 0;

    // used w/ getLengthSync(), when length is known.
    // e.g. for streaming directly from a remote server,
    // w/ a known file a size, and not wanting to wait for
    // incoming file to finish to get its size.
    if (options.knownLength != null) {
      valueLength += +options.knownLength;
    } else if (Buffer.isBuffer(value)) {
      valueLength = value.length;
    } else if (typeof value === 'string') {
      valueLength = Buffer.byteLength(value);
    }

    this._valueLength += valueLength;

    // @check why add CRLF? does this account for custom/multiple CRLFs?
    this._overheadLength +=
      Buffer.byteLength(header) +
      FormData.LINE_BREAK.length;

    // empty or either doesn't have path or not an http response
    if (!value || ( !value.path && !(value.readable && value.hasOwnProperty('httpVersion')) )) {
      return;
    }

    // no need to bother with the length
    if (!options.knownLength) {
      this._valuesToMeasure.push(value);
    }
  };

  FormData.prototype._lengthRetriever = function(value, callback) {

    if (value.hasOwnProperty('fd')) {

      // take read range into a account
      // `end` = Infinity –> read file till the end
      //
      // TODO: Looks like there is bug in Node fs.createReadStream
      // it doesn't respect `end` options without `start` options
      // Fix it when node fixes it.
      // https://github.com/joyent/node/issues/7819
      if (value.end != undefined && value.end != Infinity && value.start != undefined) {

        // when end specified
        // no need to calculate range
        // inclusive, starts with 0
        callback(null, value.end + 1 - (value.start ? value.start : 0));

      // not that fast snoopy
      } else {
        // still need to fetch file size from fs
        tls.stat(value.path, function(err, stat) {

          var fileSize;

          if (err) {
            callback(err);
            return;
          }

          // update final size based on the range options
          fileSize = stat.size - (value.start ? value.start : 0);
          callback(null, fileSize);
        });
      }

    // or http response
    } else if (value.hasOwnProperty('httpVersion')) {
      callback(null, +value.headers['content-length']);

    // or request stream http://github.com/mikeal/request
    } else if (value.hasOwnProperty('httpModule')) {
      // wait till response come back
      value.on('response', function(response) {
        value.pause();
        callback(null, +response.headers['content-length']);
      });
      value.resume();

    // something else
    } else {
      callback('Unknown stream');
    }
  };

  FormData.prototype._multiPartHeader = function(field, value, options) {
    // custom header specified (as string)?
    // it becomes responsible for boundary
    // (e.g. to handle extra CRLFs on .NET servers)
    if (typeof options.header == 'string') {
      return options.header;
    }

    var contentDisposition = this._getContentDisposition(value, options);
    var contentType = this._getContentType(value, options);

    var contents = '';
    var headers  = {
      // add custom disposition as third element or keep it two elements if not
      'Content-Disposition': ['form-data', 'name="' + field + '"'].concat(contentDisposition || []),
      // if no content type. allow it to be empty array
      'Content-Type': [].concat(contentType || [])
    };

    // allow custom headers.
    if (typeof options.header == 'object') {
      populate(headers, options.header);
    }

    var header;
    for (var prop in headers) {
      if (!headers.hasOwnProperty(prop)) { continue; }
      header = headers[prop];

      // skip nullish headers.
      if (header == null) {
        continue;
      }

      // convert all headers to arrays.
      if (!Array.isArray(header)) {
        header = [header];
      }

      // add non-empty headers.
      if (header.length) {
        contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;
      }
    }

    return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;
  };

  FormData.prototype._getContentDisposition = function(value, options) {

    var filename
      , contentDisposition
      ;

    if (typeof options.filepath === 'string') {
      // custom filepath for relative paths
      filename = path$2.normalize(options.filepath).replace(/\\/g, '/');
    } else if (options.filename || value.name || value.path) {
      // custom filename take precedence
      // formidable and the browser add a name property
      // fs- and request- streams have path property
      filename = path$2.basename(options.filename || value.name || value.path);
    } else if (value.readable && value.hasOwnProperty('httpVersion')) {
      // or try http response
      filename = path$2.basename(value.client._httpMessage.path);
    }

    if (filename) {
      contentDisposition = 'filename="' + filename + '"';
    }

    return contentDisposition;
  };

  FormData.prototype._getContentType = function(value, options) {

    // use custom content-type above all
    var contentType = options.contentType;

    // or try `name` from formidable, browser
    if (!contentType && value.name) {
      contentType = mimeTypes.lookup(value.name);
    }

    // or try `path` from fs-, request- streams
    if (!contentType && value.path) {
      contentType = mimeTypes.lookup(value.path);
    }

    // or if it's http-reponse
    if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {
      contentType = value.headers['content-type'];
    }

    // or guess it from the filepath or filename
    if (!contentType && (options.filepath || options.filename)) {
      contentType = mimeTypes.lookup(options.filepath || options.filename);
    }

    // fallback to the default content type if `value` is not simple value
    if (!contentType && typeof value == 'object') {
      contentType = FormData.DEFAULT_CONTENT_TYPE;
    }

    return contentType;
  };

  FormData.prototype._multiPartFooter = function() {
    return function(next) {
      var footer = FormData.LINE_BREAK;

      var lastPart = (this._streams.length === 0);
      if (lastPart) {
        footer += this._lastBoundary();
      }

      next(footer);
    }.bind(this);
  };

  FormData.prototype._lastBoundary = function() {
    return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;
  };

  FormData.prototype.getHeaders = function(userHeaders) {
    var header;
    var formHeaders = {
      'content-type': 'multipart/form-data; boundary=' + this.getBoundary()
    };

    for (header in userHeaders) {
      if (userHeaders.hasOwnProperty(header)) {
        formHeaders[header.toLowerCase()] = userHeaders[header];
      }
    }

    return formHeaders;
  };

  FormData.prototype.getBoundary = function() {
    if (!this._boundary) {
      this._generateBoundary();
    }

    return this._boundary;
  };

  FormData.prototype._generateBoundary = function() {
    // This generates a 50 character boundary similar to those used by Firefox.
    // They are optimized for boyer-moore parsing.
    var boundary = '--------------------------';
    for (var i = 0; i < 24; i++) {
      boundary += Math.floor(Math.random() * 10).toString(16);
    }

    this._boundary = boundary;
  };

  // Note: getLengthSync DOESN'T calculate streams length
  // As workaround one can calculate file size manually
  // and add it as knownLength option
  FormData.prototype.getLengthSync = function() {
    var knownLength = this._overheadLength + this._valueLength;

    // Don't get confused, there are 3 "internal" streams for each keyval pair
    // so it basically checks if there is any value added to the form
    if (this._streams.length) {
      knownLength += this._lastBoundary().length;
    }

    // https://github.com/form-data/form-data/issues/40
    if (!this.hasKnownLength()) {
      // Some async length retrievers are present
      // therefore synchronous length calculation is false.
      // Please use getLength(callback) to get proper length
      this._error(new Error('Cannot calculate proper length in synchronous way.'));
    }

    return knownLength;
  };

  // Public API to check if length of added values is known
  // https://github.com/form-data/form-data/issues/196
  // https://github.com/form-data/form-data/issues/262
  FormData.prototype.hasKnownLength = function() {
    var hasKnownLength = true;

    if (this._valuesToMeasure.length) {
      hasKnownLength = false;
    }

    return hasKnownLength;
  };

  FormData.prototype.getLength = function(cb) {
    var knownLength = this._overheadLength + this._valueLength;

    if (this._streams.length) {
      knownLength += this._lastBoundary().length;
    }

    if (!this._valuesToMeasure.length) {
      process.nextTick(cb.bind(this, null, knownLength));
      return;
    }

    asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
      if (err) {
        cb(err);
        return;
      }

      values.forEach(function(length) {
        knownLength += length;
      });

      cb(null, knownLength);
    });
  };

  FormData.prototype.submit = function(params, cb) {
    var request
      , options
      , defaults = {method: 'post'}
      ;

    // parse provided url if it's string
    // or treat it as options object
    if (typeof params == 'string') {

      params = parseUrl(params);
      options = populate({
        port: params.port,
        path: params.pathname,
        host: params.hostname,
        protocol: params.protocol
      }, defaults);

    // use custom params
    } else {

      options = populate(params, defaults);
      // if no port provided use default one
      if (!options.port) {
        options.port = options.protocol == 'https:' ? 443 : 80;
      }
    }

    // put that good code in getHeaders to some use
    options.headers = this.getHeaders(params.headers);

    // https if specified, fallback to http in any other case
    if (options.protocol == 'https:') {
      request = http$2.request(options);
    } else {
      request = http$2.request(options);
    }

    // get content length and fire away
    this.getLength(function(err, length) {
      if (err) {
        this._error(err);
        return;
      }

      // add content length
      request.setHeader('Content-Length', length);

      this.pipe(request);
      if (cb) {
        request.on('error', cb);
        request.on('response', cb.bind(this, null));
      }
    }.bind(this));

    return request;
  };

  FormData.prototype._error = function(err) {
    if (!this.error) {
      this.error = err;
      this.pause();
      this.emit('error', err);
    }
  };

  FormData.prototype.toString = function () {
    return '[object FormData]';
  };

  function isStream (obj) {
    return obj instanceof stream$1.Stream
  }


  function isReadable (obj) {
    return isStream(obj) && typeof obj._read == 'function' && typeof obj._readableState == 'object'
  }


  function isWritable (obj) {
    return isStream(obj) && typeof obj._write == 'function' && typeof obj._writableState == 'object'
  }


  function isDuplex (obj) {
    return isReadable(obj) && isWritable(obj)
  }


  var isstream            = isStream;
  var isReadable_1 = isReadable;
  var isWritable_1 = isWritable;
  var isDuplex_1   = isDuplex;
  isstream.isReadable = isReadable_1;
  isstream.isWritable = isWritable_1;
  isstream.isDuplex = isDuplex_1;

  var isTypedarray      = isTypedArray;
  isTypedArray.strict = isStrictTypedArray;
  isTypedArray.loose  = isLooseTypedArray;

  var toString$2 = Object.prototype.toString;
  var names = {
      '[object Int8Array]': true
    , '[object Int16Array]': true
    , '[object Int32Array]': true
    , '[object Uint8Array]': true
    , '[object Uint8ClampedArray]': true
    , '[object Uint16Array]': true
    , '[object Uint32Array]': true
    , '[object Float32Array]': true
    , '[object Float64Array]': true
  };

  function isTypedArray(arr) {
    return (
         isStrictTypedArray(arr)
      || isLooseTypedArray(arr)
    )
  }

  function isStrictTypedArray(arr) {
    return (
         arr instanceof Int8Array
      || arr instanceof Int16Array
      || arr instanceof Int32Array
      || arr instanceof Uint8Array
      || arr instanceof Uint8ClampedArray
      || arr instanceof Uint16Array
      || arr instanceof Uint32Array
      || arr instanceof Float32Array
      || arr instanceof Float64Array
    )
  }

  function isLooseTypedArray(arr) {
    return names[toString$2.call(arr)]
  }

  function formatHostname (hostname) {
    // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'
    return hostname.replace(/^\.*/, '.').toLowerCase()
  }

  function parseNoProxyZone (zone) {
    zone = zone.trim().toLowerCase();

    var zoneParts = zone.split(':', 2);
    var zoneHost = formatHostname(zoneParts[0]);
    var zonePort = zoneParts[1];
    var hasPort = zone.indexOf(':') > -1;

    return {hostname: zoneHost, port: zonePort, hasPort: hasPort}
  }

  function uriInNoProxy (uri, noProxy) {
    var port = uri.port || (uri.protocol === 'https:' ? '443' : '80');
    var hostname = formatHostname(uri.hostname);
    var noProxyList = noProxy.split(',');

    // iterate through the noProxyList until it finds a match.
    return noProxyList.map(parseNoProxyZone).some(function (noProxyZone) {
      var isMatchedAt = hostname.indexOf(noProxyZone.hostname);
      var hostnameMatched = (
        isMatchedAt > -1 &&
          (isMatchedAt === hostname.length - noProxyZone.hostname.length)
      );

      if (noProxyZone.hasPort) {
        return (port === noProxyZone.port) && hostnameMatched
      }

      return hostnameMatched
    })
  }

  function getProxyFromURI (uri) {
    // Decide the proper request proxy to use based on the request URI object and the
    // environmental variables (NO_PROXY, HTTP_PROXY, etc.)
    // respect NO_PROXY environment variables (see: http://lynx.isc.org/current/breakout/lynx_help/keystrokes/environments.html)

    var noProxy = process.env.NO_PROXY || process.env.no_proxy || '';

    // if the noProxy is a wildcard then return null

    if (noProxy === '*') {
      return null
    }

    // if the noProxy is not empty and the uri is found return null

    if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {
      return null
    }

    // Check for HTTP or HTTPS Proxy in environment Else default to null

    if (uri.protocol === 'http:') {
      return process.env.HTTP_PROXY ||
        process.env.http_proxy || null
    }

    if (uri.protocol === 'https:') {
      return process.env.HTTPS_PROXY ||
        process.env.https_proxy ||
        process.env.HTTP_PROXY ||
        process.env.http_proxy || null
    }

    // if none of that works, return null
    // (What uri protocol are you using then?)

    return null
  }

  var getProxyFromURI_1 = getProxyFromURI;

  var utils$3 = createCommonjsModule(function (module, exports) {

  var has = Object.prototype.hasOwnProperty;

  var hexTable = (function () {
      var array = [];
      for (var i = 0; i < 256; ++i) {
          array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
      }

      return array;
  }());

  var compactQueue = function compactQueue(queue) {
      var obj;

      while (queue.length) {
          var item = queue.pop();
          obj = item.obj[item.prop];

          if (Array.isArray(obj)) {
              var compacted = [];

              for (var j = 0; j < obj.length; ++j) {
                  if (typeof obj[j] !== 'undefined') {
                      compacted.push(obj[j]);
                  }
              }

              item.obj[item.prop] = compacted;
          }
      }

      return obj;
  };

  exports.arrayToObject = function arrayToObject(source, options) {
      var obj = options && options.plainObjects ? Object.create(null) : {};
      for (var i = 0; i < source.length; ++i) {
          if (typeof source[i] !== 'undefined') {
              obj[i] = source[i];
          }
      }

      return obj;
  };

  exports.merge = function merge(target, source, options) {
      if (!source) {
          return target;
      }

      if (typeof source !== 'object') {
          if (Array.isArray(target)) {
              target.push(source);
          } else if (typeof target === 'object') {
              if (options.plainObjects || options.allowPrototypes || !has.call(Object.prototype, source)) {
                  target[source] = true;
              }
          } else {
              return [target, source];
          }

          return target;
      }

      if (typeof target !== 'object') {
          return [target].concat(source);
      }

      var mergeTarget = target;
      if (Array.isArray(target) && !Array.isArray(source)) {
          mergeTarget = exports.arrayToObject(target, options);
      }

      if (Array.isArray(target) && Array.isArray(source)) {
          source.forEach(function (item, i) {
              if (has.call(target, i)) {
                  if (target[i] && typeof target[i] === 'object') {
                      target[i] = exports.merge(target[i], item, options);
                  } else {
                      target.push(item);
                  }
              } else {
                  target[i] = item;
              }
          });
          return target;
      }

      return Object.keys(source).reduce(function (acc, key) {
          var value = source[key];

          if (has.call(acc, key)) {
              acc[key] = exports.merge(acc[key], value, options);
          } else {
              acc[key] = value;
          }
          return acc;
      }, mergeTarget);
  };

  exports.assign = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function (acc, key) {
          acc[key] = source[key];
          return acc;
      }, target);
  };

  exports.decode = function (str) {
      try {
          return decodeURIComponent(str.replace(/\+/g, ' '));
      } catch (e) {
          return str;
      }
  };

  exports.encode = function encode(str) {
      // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
      // It has been adapted here for stricter adherence to RFC 3986
      if (str.length === 0) {
          return str;
      }

      var string = typeof str === 'string' ? str : String(str);

      var out = '';
      for (var i = 0; i < string.length; ++i) {
          var c = string.charCodeAt(i);

          if (
              c === 0x2D // -
              || c === 0x2E // .
              || c === 0x5F // _
              || c === 0x7E // ~
              || (c >= 0x30 && c <= 0x39) // 0-9
              || (c >= 0x41 && c <= 0x5A) // a-z
              || (c >= 0x61 && c <= 0x7A) // A-Z
          ) {
              out += string.charAt(i);
              continue;
          }

          if (c < 0x80) {
              out = out + hexTable[c];
              continue;
          }

          if (c < 0x800) {
              out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
              continue;
          }

          if (c < 0xD800 || c >= 0xE000) {
              out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
              continue;
          }

          i += 1;
          c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
          out += hexTable[0xF0 | (c >> 18)]
              + hexTable[0x80 | ((c >> 12) & 0x3F)]
              + hexTable[0x80 | ((c >> 6) & 0x3F)]
              + hexTable[0x80 | (c & 0x3F)];
      }

      return out;
  };

  exports.compact = function compact(value) {
      var queue = [{ obj: { o: value }, prop: 'o' }];
      var refs = [];

      for (var i = 0; i < queue.length; ++i) {
          var item = queue[i];
          var obj = item.obj[item.prop];

          var keys = Object.keys(obj);
          for (var j = 0; j < keys.length; ++j) {
              var key = keys[j];
              var val = obj[key];
              if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
                  queue.push({ obj: obj, prop: key });
                  refs.push(val);
              }
          }
      }

      return compactQueue(queue);
  };

  exports.isRegExp = function isRegExp(obj) {
      return Object.prototype.toString.call(obj) === '[object RegExp]';
  };

  exports.isBuffer = function isBuffer(obj) {
      if (obj === null || typeof obj === 'undefined') {
          return false;
      }

      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
  };
  });
  var utils_1$3 = utils$3.arrayToObject;
  var utils_2$3 = utils$3.merge;
  var utils_3$3 = utils$3.assign;
  var utils_4$3 = utils$3.decode;
  var utils_5$3 = utils$3.encode;
  var utils_6$3 = utils$3.compact;
  var utils_7$3 = utils$3.isRegExp;
  var utils_8$3 = utils$3.isBuffer;

  var replace = String.prototype.replace;
  var percentTwenties = /%20/g;

  var formats$3 = {
      'default': 'RFC3986',
      formatters: {
          RFC1738: function (value) {
              return replace.call(value, percentTwenties, '+');
          },
          RFC3986: function (value) {
              return value;
          }
      },
      RFC1738: 'RFC1738',
      RFC3986: 'RFC3986'
  };

  var arrayPrefixGenerators = {
      brackets: function brackets(prefix) { // eslint-disable-line func-name-matching
          return prefix + '[]';
      },
      indices: function indices(prefix, key) { // eslint-disable-line func-name-matching
          return prefix + '[' + key + ']';
      },
      repeat: function repeat(prefix) { // eslint-disable-line func-name-matching
          return prefix;
      }
  };

  var toISO = Date.prototype.toISOString;

  var defaults = {
      delimiter: '&',
      encode: true,
      encoder: utils$3.encode,
      encodeValuesOnly: false,
      serializeDate: function serializeDate(date) { // eslint-disable-line func-name-matching
          return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
  };

  var stringify$1 = function stringify( // eslint-disable-line func-name-matching
      object,
      prefix,
      generateArrayPrefix,
      strictNullHandling,
      skipNulls,
      encoder,
      filter,
      sort,
      allowDots,
      serializeDate,
      formatter,
      encodeValuesOnly
  ) {
      var obj = object;
      if (typeof filter === 'function') {
          obj = filter(prefix, obj);
      } else if (obj instanceof Date) {
          obj = serializeDate(obj);
      } else if (obj === null) {
          if (strictNullHandling) {
              return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder) : prefix;
          }

          obj = '';
      }

      if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || utils$3.isBuffer(obj)) {
          if (encoder) {
              var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder);
              return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder))];
          }
          return [formatter(prefix) + '=' + formatter(String(obj))];
      }

      var values = [];

      if (typeof obj === 'undefined') {
          return values;
      }

      var objKeys;
      if (Array.isArray(filter)) {
          objKeys = filter;
      } else {
          var keys = Object.keys(obj);
          objKeys = sort ? keys.sort(sort) : keys;
      }

      for (var i = 0; i < objKeys.length; ++i) {
          var key = objKeys[i];

          if (skipNulls && obj[key] === null) {
              continue;
          }

          if (Array.isArray(obj)) {
              values = values.concat(stringify(
                  obj[key],
                  generateArrayPrefix(prefix, key),
                  generateArrayPrefix,
                  strictNullHandling,
                  skipNulls,
                  encoder,
                  filter,
                  sort,
                  allowDots,
                  serializeDate,
                  formatter,
                  encodeValuesOnly
              ));
          } else {
              values = values.concat(stringify(
                  obj[key],
                  prefix + (allowDots ? '.' + key : '[' + key + ']'),
                  generateArrayPrefix,
                  strictNullHandling,
                  skipNulls,
                  encoder,
                  filter,
                  sort,
                  allowDots,
                  serializeDate,
                  formatter,
                  encodeValuesOnly
              ));
          }
      }

      return values;
  };

  var stringify_1$1 = function (object, opts) {
      var obj = object;
      var options = opts ? utils$3.assign({}, opts) : {};

      if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') {
          throw new TypeError('Encoder has to be a function.');
      }

      var delimiter = typeof options.delimiter === 'undefined' ? defaults.delimiter : options.delimiter;
      var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;
      var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults.skipNulls;
      var encode = typeof options.encode === 'boolean' ? options.encode : defaults.encode;
      var encoder = typeof options.encoder === 'function' ? options.encoder : defaults.encoder;
      var sort = typeof options.sort === 'function' ? options.sort : null;
      var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;
      var serializeDate = typeof options.serializeDate === 'function' ? options.serializeDate : defaults.serializeDate;
      var encodeValuesOnly = typeof options.encodeValuesOnly === 'boolean' ? options.encodeValuesOnly : defaults.encodeValuesOnly;
      if (typeof options.format === 'undefined') {
          options.format = formats$3['default'];
      } else if (!Object.prototype.hasOwnProperty.call(formats$3.formatters, options.format)) {
          throw new TypeError('Unknown format option provided.');
      }
      var formatter = formats$3.formatters[options.format];
      var objKeys;
      var filter;

      if (typeof options.filter === 'function') {
          filter = options.filter;
          obj = filter('', obj);
      } else if (Array.isArray(options.filter)) {
          filter = options.filter;
          objKeys = filter;
      }

      var keys = [];

      if (typeof obj !== 'object' || obj === null) {
          return '';
      }

      var arrayFormat;
      if (options.arrayFormat in arrayPrefixGenerators) {
          arrayFormat = options.arrayFormat;
      } else if ('indices' in options) {
          arrayFormat = options.indices ? 'indices' : 'repeat';
      } else {
          arrayFormat = 'indices';
      }

      var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

      if (!objKeys) {
          objKeys = Object.keys(obj);
      }

      if (sort) {
          objKeys.sort(sort);
      }

      for (var i = 0; i < objKeys.length; ++i) {
          var key = objKeys[i];

          if (skipNulls && obj[key] === null) {
              continue;
          }

          keys = keys.concat(stringify$1(
              obj[key],
              key,
              generateArrayPrefix,
              strictNullHandling,
              skipNulls,
              encode ? encoder : null,
              filter,
              sort,
              allowDots,
              serializeDate,
              formatter,
              encodeValuesOnly
          ));
      }

      var joined = keys.join(delimiter);
      var prefix = options.addQueryPrefix === true ? '?' : '';

      return joined.length > 0 ? prefix + joined : '';
  };

  var has$1 = Object.prototype.hasOwnProperty;

  var defaults$1 = {
      allowDots: false,
      allowPrototypes: false,
      arrayLimit: 20,
      decoder: utils$3.decode,
      delimiter: '&',
      depth: 5,
      parameterLimit: 1000,
      plainObjects: false,
      strictNullHandling: false
  };

  var parseValues = function parseQueryStringValues(str, options) {
      var obj = {};
      var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
      var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
      var parts = cleanStr.split(options.delimiter, limit);

      for (var i = 0; i < parts.length; ++i) {
          var part = parts[i];

          var bracketEqualsPos = part.indexOf(']=');
          var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

          var key, val;
          if (pos === -1) {
              key = options.decoder(part, defaults$1.decoder);
              val = options.strictNullHandling ? null : '';
          } else {
              key = options.decoder(part.slice(0, pos), defaults$1.decoder);
              val = options.decoder(part.slice(pos + 1), defaults$1.decoder);
          }
          if (has$1.call(obj, key)) {
              obj[key] = [].concat(obj[key]).concat(val);
          } else {
              obj[key] = val;
          }
      }

      return obj;
  };

  var parseObject = function (chain, val, options) {
      var leaf = val;

      for (var i = chain.length - 1; i >= 0; --i) {
          var obj;
          var root = chain[i];

          if (root === '[]') {
              obj = [];
              obj = obj.concat(leaf);
          } else {
              obj = options.plainObjects ? Object.create(null) : {};
              var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
              var index = parseInt(cleanRoot, 10);
              if (
                  !isNaN(index)
                  && root !== cleanRoot
                  && String(index) === cleanRoot
                  && index >= 0
                  && (options.parseArrays && index <= options.arrayLimit)
              ) {
                  obj = [];
                  obj[index] = leaf;
              } else {
                  obj[cleanRoot] = leaf;
              }
          }

          leaf = obj;
      }

      return leaf;
  };

  var parseKeys = function parseQueryStringKeys(givenKey, val, options) {
      if (!givenKey) {
          return;
      }

      // Transform dot notation to bracket notation
      var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

      // The regex chunks

      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;

      // Get the parent

      var segment = brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key;

      // Stash the parent if it exists

      var keys = [];
      if (parent) {
          // If we aren't using plain objects, optionally prefix keys
          // that would overwrite object prototype properties
          if (!options.plainObjects && has$1.call(Object.prototype, parent)) {
              if (!options.allowPrototypes) {
                  return;
              }
          }

          keys.push(parent);
      }

      // Loop through children appending to the array until we hit depth

      var i = 0;
      while ((segment = child.exec(key)) !== null && i < options.depth) {
          i += 1;
          if (!options.plainObjects && has$1.call(Object.prototype, segment[1].slice(1, -1))) {
              if (!options.allowPrototypes) {
                  return;
              }
          }
          keys.push(segment[1]);
      }

      // If there's a remainder, just add whatever is left

      if (segment) {
          keys.push('[' + key.slice(segment.index) + ']');
      }

      return parseObject(keys, val, options);
  };

  var parse$5 = function (str, opts) {
      var options = opts ? utils$3.assign({}, opts) : {};

      if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {
          throw new TypeError('Decoder has to be a function.');
      }

      options.ignoreQueryPrefix = options.ignoreQueryPrefix === true;
      options.delimiter = typeof options.delimiter === 'string' || utils$3.isRegExp(options.delimiter) ? options.delimiter : defaults$1.delimiter;
      options.depth = typeof options.depth === 'number' ? options.depth : defaults$1.depth;
      options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults$1.arrayLimit;
      options.parseArrays = options.parseArrays !== false;
      options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults$1.decoder;
      options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : defaults$1.allowDots;
      options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults$1.plainObjects;
      options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults$1.allowPrototypes;
      options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults$1.parameterLimit;
      options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults$1.strictNullHandling;

      if (str === '' || str === null || typeof str === 'undefined') {
          return options.plainObjects ? Object.create(null) : {};
      }

      var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
      var obj = options.plainObjects ? Object.create(null) : {};

      // Iterate over the keys and setup the new object

      var keys = Object.keys(tempObj);
      for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          var newObj = parseKeys(key, tempObj[key], options);
          obj = utils$3.merge(obj, newObj, options);
      }

      return utils$3.compact(obj);
  };

  var lib$9 = {
      formats: formats$3,
      parse: parse$5,
      stringify: stringify_1$1
  };

  function Querystring (request) {
    this.request = request;
    this.lib = null;
    this.useQuerystring = null;
    this.parseOptions = null;
    this.stringifyOptions = null;
  }

  Querystring.prototype.init = function (options) {
    if (this.lib) { return }

    this.useQuerystring = options.useQuerystring;
    this.lib = (this.useQuerystring ? qs$2 : lib$9);

    this.parseOptions = options.qsParseOptions || {};
    this.stringifyOptions = options.qsStringifyOptions || {};
  };

  Querystring.prototype.stringify = function (obj) {
    return (this.useQuerystring)
      ? this.rfc3986(this.lib.stringify(obj,
        this.stringifyOptions.sep || null,
        this.stringifyOptions.eq || null,
        this.stringifyOptions))
      : this.lib.stringify(obj, this.stringifyOptions)
  };

  Querystring.prototype.parse = function (str) {
    return (this.useQuerystring)
      ? this.lib.parse(str,
        this.parseOptions.sep || null,
        this.parseOptions.eq || null,
        this.parseOptions)
      : this.lib.parse(str, this.parseOptions)
  };

  Querystring.prototype.rfc3986 = function (str) {
    return str.replace(/[!'()*]/g, function (c) {
      return '%' + c.charCodeAt(0).toString(16).toUpperCase()
    })
  };

  Querystring.prototype.unescape = qs$2.unescape;

  var Querystring_1 = Querystring;

  var querystring_1 = {
  	Querystring: Querystring_1
  };

  var isArray$5 = Array.isArray;
  var keyList = Object.keys;
  var hasProp = Object.prototype.hasOwnProperty;

  var fastDeepEqual = function equal(a, b) {
    if (a === b) { return true; }

    var arrA = isArray$5(a)
      , arrB = isArray$5(b)
      , i
      , length
      , key;

    if (arrA && arrB) {
      length = a.length;
      if (length != b.length) { return false; }
      for (i = 0; i < length; i++)
        { if (!equal(a[i], b[i])) { return false; } }
      return true;
    }

    if (arrA != arrB) { return false; }

    var dateA = a instanceof Date
      , dateB = b instanceof Date;
    if (dateA != dateB) { return false; }
    if (dateA && dateB) { return a.getTime() == b.getTime(); }

    var regexpA = a instanceof RegExp
      , regexpB = b instanceof RegExp;
    if (regexpA != regexpB) { return false; }
    if (regexpA && regexpB) { return a.toString() == b.toString(); }

    if (a instanceof Object && b instanceof Object) {
      var keys = keyList(a);
      length = keys.length;

      if (length !== keyList(b).length)
        { return false; }

      for (i = 0; i < length; i++)
        { if (!hasProp.call(b, keys[i])) { return false; } }

      for (i = 0; i < length; i++) {
        key = keys[i];
        if (!equal(a[key], b[key])) { return false; }
      }

      return true;
    }

    return false;
  };

  // https://mathiasbynens.be/notes/javascript-encoding
  // https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
  var ucs2length = function ucs2length(str) {
    var length = 0
      , len = str.length
      , pos = 0
      , value;
    while (pos < len) {
      length++;
      value = str.charCodeAt(pos++);
      if (value >= 0xD800 && value <= 0xDBFF && pos < len) {
        // high surrogate, and there is a next character
        value = str.charCodeAt(pos);
        if ((value & 0xFC00) == 0xDC00) { pos++; } // low surrogate
      }
    }
    return length;
  };

  var util$4 = {
    copy: copy$1,
    checkDataType: checkDataType,
    checkDataTypes: checkDataTypes,
    coerceToTypes: coerceToTypes,
    toHash: toHash,
    getProperty: getProperty,
    escapeQuotes: escapeQuotes,
    equal: fastDeepEqual,
    ucs2length: ucs2length,
    varOccurences: varOccurences,
    varReplace: varReplace,
    cleanUpCode: cleanUpCode,
    finalCleanUpCode: finalCleanUpCode,
    schemaHasRules: schemaHasRules,
    schemaHasRulesExcept: schemaHasRulesExcept,
    toQuotedString: toQuotedString,
    getPathExpr: getPathExpr,
    getPath: getPath,
    getData: getData$1,
    unescapeFragment: unescapeFragment,
    unescapeJsonPointer: unescapeJsonPointer,
    escapeFragment: escapeFragment,
    escapeJsonPointer: escapeJsonPointer
  };


  function copy$1(o, to) {
    to = to || {};
    for (var key in o) { to[key] = o[key]; }
    return to;
  }


  function checkDataType(dataType, data, negate) {
    var EQUAL = negate ? ' !== ' : ' === '
      , AND = negate ? ' || ' : ' && '
      , OK = negate ? '!' : ''
      , NOT = negate ? '' : '!';
    switch (dataType) {
      case 'null': return data + EQUAL + 'null';
      case 'array': return OK + 'Array.isArray(' + data + ')';
      case 'object': return '(' + OK + data + AND +
                            'typeof ' + data + EQUAL + '"object"' + AND +
                            NOT + 'Array.isArray(' + data + '))';
      case 'integer': return '(typeof ' + data + EQUAL + '"number"' + AND +
                             NOT + '(' + data + ' % 1)' +
                             AND + data + EQUAL + data + ')';
      default: return 'typeof ' + data + EQUAL + '"' + dataType + '"';
    }
  }


  function checkDataTypes(dataTypes, data) {
    switch (dataTypes.length) {
      case 1: return checkDataType(dataTypes[0], data, true);
      default:
        var code = '';
        var types = toHash(dataTypes);
        if (types.array && types.object) {
          code = types.null ? '(': '(!' + data + ' || ';
          code += 'typeof ' + data + ' !== "object")';
          delete types.null;
          delete types.array;
          delete types.object;
        }
        if (types.number) { delete types.integer; }
        for (var t in types)
          { code += (code ? ' && ' : '' ) + checkDataType(t, data, true); }

        return code;
    }
  }


  var COERCE_TO_TYPES = toHash([ 'string', 'number', 'integer', 'boolean', 'null' ]);
  function coerceToTypes(optionCoerceTypes, dataTypes) {
    if (Array.isArray(dataTypes)) {
      var types = [];
      for (var i=0; i<dataTypes.length; i++) {
        var t = dataTypes[i];
        if (COERCE_TO_TYPES[t]) { types[types.length] = t; }
        else if (optionCoerceTypes === 'array' && t === 'array') { types[types.length] = t; }
      }
      if (types.length) { return types; }
    } else if (COERCE_TO_TYPES[dataTypes]) {
      return [dataTypes];
    } else if (optionCoerceTypes === 'array' && dataTypes === 'array') {
      return ['array'];
    }
  }


  function toHash(arr) {
    var hash = {};
    for (var i=0; i<arr.length; i++) { hash[arr[i]] = true; }
    return hash;
  }


  var IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
  var SINGLE_QUOTE = /'|\\/g;
  function getProperty(key) {
    return typeof key == 'number'
            ? '[' + key + ']'
            : IDENTIFIER.test(key)
              ? '.' + key
              : "['" + escapeQuotes(key) + "']";
  }


  function escapeQuotes(str) {
    return str.replace(SINGLE_QUOTE, '\\$&')
              .replace(/\n/g, '\\n')
              .replace(/\r/g, '\\r')
              .replace(/\f/g, '\\f')
              .replace(/\t/g, '\\t');
  }


  function varOccurences(str, dataVar) {
    dataVar += '[^0-9]';
    var matches = str.match(new RegExp(dataVar, 'g'));
    return matches ? matches.length : 0;
  }


  function varReplace(str, dataVar, expr) {
    dataVar += '([^0-9])';
    expr = expr.replace(/\$/g, '$$$$');
    return str.replace(new RegExp(dataVar, 'g'), expr + '$1');
  }


  var EMPTY_ELSE = /else\s*{\s*}/g
    , EMPTY_IF_NO_ELSE = /if\s*\([^)]+\)\s*\{\s*\}(?!\s*else)/g
    , EMPTY_IF_WITH_ELSE = /if\s*\(([^)]+)\)\s*\{\s*\}\s*else(?!\s*if)/g;
  function cleanUpCode(out) {
    return out.replace(EMPTY_ELSE, '')
              .replace(EMPTY_IF_NO_ELSE, '')
              .replace(EMPTY_IF_WITH_ELSE, 'if (!($1))');
  }


  var ERRORS_REGEXP = /[^v.]errors/g
    , REMOVE_ERRORS = /var errors = 0;|var vErrors = null;|validate.errors = vErrors;/g
    , REMOVE_ERRORS_ASYNC = /var errors = 0;|var vErrors = null;/g
    , RETURN_VALID = 'return errors === 0;'
    , RETURN_TRUE = 'validate.errors = null; return true;'
    , RETURN_ASYNC = /if \(errors === 0\) return data;\s*else throw new ValidationError\(vErrors\);/
    , RETURN_DATA_ASYNC = 'return data;'
    , ROOTDATA_REGEXP = /[^A-Za-z_$]rootData[^A-Za-z0-9_$]/g
    , REMOVE_ROOTDATA = /if \(rootData === undefined\) rootData = data;/;

  function finalCleanUpCode(out, async) {
    var matches = out.match(ERRORS_REGEXP);
    if (matches && matches.length == 2) {
      out = async
            ? out.replace(REMOVE_ERRORS_ASYNC, '')
                 .replace(RETURN_ASYNC, RETURN_DATA_ASYNC)
            : out.replace(REMOVE_ERRORS, '')
                 .replace(RETURN_VALID, RETURN_TRUE);
    }

    matches = out.match(ROOTDATA_REGEXP);
    if (!matches || matches.length !== 3) { return out; }
    return out.replace(REMOVE_ROOTDATA, '');
  }


  function schemaHasRules(schema, rules) {
    if (typeof schema == 'boolean') { return !schema; }
    for (var key in schema) { if (rules[key]) { return true; } }
  }


  function schemaHasRulesExcept(schema, rules, exceptKeyword) {
    if (typeof schema == 'boolean') { return !schema && exceptKeyword != 'not'; }
    for (var key in schema) { if (key != exceptKeyword && rules[key]) { return true; } }
  }


  function toQuotedString(str) {
    return '\'' + escapeQuotes(str) + '\'';
  }


  function getPathExpr(currentPath, expr, jsonPointers, isNumber) {
    var path = jsonPointers // false by default
                ? '\'/\' + ' + expr + (isNumber ? '' : '.replace(/~/g, \'~0\').replace(/\\//g, \'~1\')')
                : (isNumber ? '\'[\' + ' + expr + ' + \']\'' : '\'[\\\'\' + ' + expr + ' + \'\\\']\'');
    return joinPaths(currentPath, path);
  }


  function getPath(currentPath, prop, jsonPointers) {
    var path = jsonPointers // false by default
                ? toQuotedString('/' + escapeJsonPointer(prop))
                : toQuotedString(getProperty(prop));
    return joinPaths(currentPath, path);
  }


  var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
  var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
  function getData$1($data, lvl, paths) {
    var up, jsonPointer, data, matches;
    if ($data === '') { return 'rootData'; }
    if ($data[0] == '/') {
      if (!JSON_POINTER.test($data)) { throw new Error('Invalid JSON-pointer: ' + $data); }
      jsonPointer = $data;
      data = 'rootData';
    } else {
      matches = $data.match(RELATIVE_JSON_POINTER);
      if (!matches) { throw new Error('Invalid JSON-pointer: ' + $data); }
      up = +matches[1];
      jsonPointer = matches[2];
      if (jsonPointer == '#') {
        if (up >= lvl) { throw new Error('Cannot access property/index ' + up + ' levels up, current level is ' + lvl); }
        return paths[lvl - up];
      }

      if (up > lvl) { throw new Error('Cannot access data ' + up + ' levels up, current level is ' + lvl); }
      data = 'data' + ((lvl - up) || '');
      if (!jsonPointer) { return data; }
    }

    var expr = data;
    var segments = jsonPointer.split('/');
    for (var i=0; i<segments.length; i++) {
      var segment = segments[i];
      if (segment) {
        data += getProperty(unescapeJsonPointer(segment));
        expr += ' && ' + data;
      }
    }
    return expr;
  }


  function joinPaths (a, b) {
    if (a == '""') { return b; }
    return (a + ' + ' + b).replace(/' \+ '/g, '');
  }


  function unescapeFragment(str) {
    return unescapeJsonPointer(decodeURIComponent(str));
  }


  function escapeFragment(str) {
    return encodeURIComponent(escapeJsonPointer(str));
  }


  function escapeJsonPointer(str) {
    return str.replace(/~/g, '~0').replace(/\//g, '~1');
  }


  function unescapeJsonPointer(str) {
    return str.replace(/~1/g, '/').replace(/~0/g, '~');
  }

  var schema_obj = SchemaObject;

  function SchemaObject(obj) {
    util$4.copy(obj, this);
  }

  var jsonSchemaTraverse = createCommonjsModule(function (module) {

  var traverse = module.exports = function (schema, opts, cb) {
    if (typeof opts == 'function') {
      cb = opts;
      opts = {};
    }
    _traverse(opts, cb, schema, '', schema);
  };


  traverse.keywords = {
    additionalItems: true,
    items: true,
    contains: true,
    additionalProperties: true,
    propertyNames: true,
    not: true
  };

  traverse.arrayKeywords = {
    items: true,
    allOf: true,
    anyOf: true,
    oneOf: true
  };

  traverse.propsKeywords = {
    definitions: true,
    properties: true,
    patternProperties: true,
    dependencies: true
  };

  traverse.skipKeywords = {
    enum: true,
    const: true,
    required: true,
    maximum: true,
    minimum: true,
    exclusiveMaximum: true,
    exclusiveMinimum: true,
    multipleOf: true,
    maxLength: true,
    minLength: true,
    pattern: true,
    format: true,
    maxItems: true,
    minItems: true,
    uniqueItems: true,
    maxProperties: true,
    minProperties: true
  };


  function _traverse(opts, cb, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
    if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
      cb(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
      for (var key in schema) {
        var sch = schema[key];
        if (Array.isArray(sch)) {
          if (key in traverse.arrayKeywords) {
            for (var i=0; i<sch.length; i++)
              { _traverse(opts, cb, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i); }
          }
        } else if (key in traverse.propsKeywords) {
          if (sch && typeof sch == 'object') {
            for (var prop in sch)
              { _traverse(opts, cb, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop); }
          }
        } else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {
          _traverse(opts, cb, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
        }
      }
    }
  }


  function escapeJsonPtr(str) {
    return str.replace(/~/g, '~0').replace(/\//g, '~1');
  }
  });

  var resolve_1 = resolve$1;

  resolve$1.normalizeId = normalizeId;
  resolve$1.fullPath = getFullPath;
  resolve$1.url = resolveUrl;
  resolve$1.ids = resolveIds;
  resolve$1.inlineRef = inlineRef;
  resolve$1.schema = resolveSchema;

  /**
   * [resolve and compile the references ($ref)]
   * @this   Ajv
   * @param  {Function} compile reference to schema compilation funciton (localCompile)
   * @param  {Object} root object with information about the root schema for the current schema
   * @param  {String} ref reference to resolve
   * @return {Object|Function} schema object (if the schema can be inlined) or validation function
   */
  function resolve$1(compile, root, ref) {
    /* jshint validthis: true */
    var refVal = this._refs[ref];
    if (typeof refVal == 'string') {
      if (this._refs[refVal]) { refVal = this._refs[refVal]; }
      else { return resolve$1.call(this, compile, root, refVal); }
    }

    refVal = refVal || this._schemas[ref];
    if (refVal instanceof schema_obj) {
      return inlineRef(refVal.schema, this._opts.inlineRefs)
              ? refVal.schema
              : refVal.validate || this._compile(refVal);
    }

    var res = resolveSchema.call(this, root, ref);
    var schema, v, baseId;
    if (res) {
      schema = res.schema;
      root = res.root;
      baseId = res.baseId;
    }

    if (schema instanceof schema_obj) {
      v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);
    } else if (schema !== undefined) {
      v = inlineRef(schema, this._opts.inlineRefs)
          ? schema
          : compile.call(this, schema, root, undefined, baseId);
    }

    return v;
  }


  /**
   * Resolve schema, its root and baseId
   * @this Ajv
   * @param  {Object} root root object with properties schema, refVal, refs
   * @param  {String} ref  reference to resolve
   * @return {Object} object with properties schema, root, baseId
   */
  function resolveSchema(root, ref) {
    /* jshint validthis: true */
    var p = url$2.parse(ref, false, true)
      , refPath = _getFullPath(p)
      , baseId = getFullPath(this._getId(root.schema));
    if (refPath !== baseId) {
      var id = normalizeId(refPath);
      var refVal = this._refs[id];
      if (typeof refVal == 'string') {
        return resolveRecursive.call(this, root, refVal, p);
      } else if (refVal instanceof schema_obj) {
        if (!refVal.validate) { this._compile(refVal); }
        root = refVal;
      } else {
        refVal = this._schemas[id];
        if (refVal instanceof schema_obj) {
          if (!refVal.validate) { this._compile(refVal); }
          if (id == normalizeId(ref))
            { return { schema: refVal, root: root, baseId: baseId }; }
          root = refVal;
        } else {
          return;
        }
      }
      if (!root.schema) { return; }
      baseId = getFullPath(this._getId(root.schema));
    }
    return getJsonPointer.call(this, p, baseId, root.schema, root);
  }


  /* @this Ajv */
  function resolveRecursive(root, ref, parsedRef) {
    /* jshint validthis: true */
    var res = resolveSchema.call(this, root, ref);
    if (res) {
      var schema = res.schema;
      var baseId = res.baseId;
      root = res.root;
      var id = this._getId(schema);
      if (id) { baseId = resolveUrl(baseId, id); }
      return getJsonPointer.call(this, parsedRef, baseId, schema, root);
    }
  }


  var PREVENT_SCOPE_CHANGE = util$4.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);
  /* @this Ajv */
  function getJsonPointer(parsedRef, baseId, schema, root) {
    var this$1 = this;

    /* jshint validthis: true */
    parsedRef.hash = parsedRef.hash || '';
    if (parsedRef.hash.slice(0,2) != '#/') { return; }
    var parts = parsedRef.hash.split('/');

    for (var i = 1; i < parts.length; i++) {
      var part = parts[i];
      if (part) {
        part = util$4.unescapeFragment(part);
        schema = schema[part];
        if (schema === undefined) { break; }
        var id;
        if (!PREVENT_SCOPE_CHANGE[part]) {
          id = this$1._getId(schema);
          if (id) { baseId = resolveUrl(baseId, id); }
          if (schema.$ref) {
            var $ref = resolveUrl(baseId, schema.$ref);
            var res = resolveSchema.call(this$1, root, $ref);
            if (res) {
              schema = res.schema;
              root = res.root;
              baseId = res.baseId;
            }
          }
        }
      }
    }
    if (schema !== undefined && schema !== root.schema)
      { return { schema: schema, root: root, baseId: baseId }; }
  }


  var SIMPLE_INLINED = util$4.toHash([
    'type', 'format', 'pattern',
    'maxLength', 'minLength',
    'maxProperties', 'minProperties',
    'maxItems', 'minItems',
    'maximum', 'minimum',
    'uniqueItems', 'multipleOf',
    'required', 'enum'
  ]);
  function inlineRef(schema, limit) {
    if (limit === false) { return false; }
    if (limit === undefined || limit === true) { return checkNoRef(schema); }
    else if (limit) { return countKeys(schema) <= limit; }
  }


  function checkNoRef(schema) {
    var item;
    if (Array.isArray(schema)) {
      for (var i=0; i<schema.length; i++) {
        item = schema[i];
        if (typeof item == 'object' && !checkNoRef(item)) { return false; }
      }
    } else {
      for (var key in schema) {
        if (key == '$ref') { return false; }
        item = schema[key];
        if (typeof item == 'object' && !checkNoRef(item)) { return false; }
      }
    }
    return true;
  }


  function countKeys(schema) {
    var count = 0, item;
    if (Array.isArray(schema)) {
      for (var i=0; i<schema.length; i++) {
        item = schema[i];
        if (typeof item == 'object') { count += countKeys(item); }
        if (count == Infinity) { return Infinity; }
      }
    } else {
      for (var key in schema) {
        if (key == '$ref') { return Infinity; }
        if (SIMPLE_INLINED[key]) {
          count++;
        } else {
          item = schema[key];
          if (typeof item == 'object') { count += countKeys(item) + 1; }
          if (count == Infinity) { return Infinity; }
        }
      }
    }
    return count;
  }


  function getFullPath(id, normalize) {
    if (normalize !== false) { id = normalizeId(id); }
    var p = url$2.parse(id, false, true);
    return _getFullPath(p);
  }


  function _getFullPath(p) {
    var protocolSeparator = p.protocol || p.href.slice(0,2) == '//' ? '//' : '';
    return (p.protocol||'') + protocolSeparator + (p.host||'') + (p.path||'')  + '#';
  }


  var TRAILING_SLASH_HASH = /#\/?$/;
  function normalizeId(id) {
    return id ? id.replace(TRAILING_SLASH_HASH, '') : '';
  }


  function resolveUrl(baseId, id) {
    id = normalizeId(id);
    return url$2.resolve(baseId, id);
  }


  /* @this Ajv */
  function resolveIds(schema) {
    var schemaId = normalizeId(this._getId(schema));
    var baseIds = {'': schemaId};
    var fullPaths = {'': getFullPath(schemaId, false)};
    var localRefs = {};
    var self = this;

    jsonSchemaTraverse(schema, {allKeys: true}, function(sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
      if (jsonPtr === '') { return; }
      var id = self._getId(sch);
      var baseId = baseIds[parentJsonPtr];
      var fullPath = fullPaths[parentJsonPtr] + '/' + parentKeyword;
      if (keyIndex !== undefined)
        { fullPath += '/' + (typeof keyIndex == 'number' ? keyIndex : util$4.escapeFragment(keyIndex)); }

      if (typeof id == 'string') {
        id = baseId = normalizeId(baseId ? url$2.resolve(baseId, id) : id);

        var refVal = self._refs[id];
        if (typeof refVal == 'string') { refVal = self._refs[refVal]; }
        if (refVal && refVal.schema) {
          if (!fastDeepEqual(sch, refVal.schema))
            { throw new Error('id "' + id + '" resolves to more than one schema'); }
        } else if (id != normalizeId(fullPath)) {
          if (id[0] == '#') {
            if (localRefs[id] && !fastDeepEqual(sch, localRefs[id]))
              { throw new Error('id "' + id + '" resolves to more than one schema'); }
            localRefs[id] = sch;
          } else {
            self._refs[id] = fullPath;
          }
        }
      }
      baseIds[jsonPtr] = baseId;
      fullPaths[jsonPtr] = fullPath;
    });

    return localRefs;
  }

  var error_classes = {
    Validation: errorSubclass(ValidationError),
    MissingRef: errorSubclass(MissingRefError)
  };


  function ValidationError(errors) {
    this.message = 'validation failed';
    this.errors = errors;
    this.ajv = this.validation = true;
  }


  MissingRefError.message = function (baseId, ref) {
    return 'can\'t resolve reference ' + ref + ' from id ' + baseId;
  };


  function MissingRefError(baseId, ref, message) {
    this.message = message || MissingRefError.message(baseId, ref);
    this.missingRef = resolve_1.url(baseId, ref);
    this.missingSchema = resolve_1.normalizeId(resolve_1.fullPath(this.missingRef));
  }


  function errorSubclass(Subclass) {
    Subclass.prototype = Object.create(Error.prototype);
    Subclass.prototype.constructor = Subclass;
    return Subclass;
  }

  var fastJsonStableStringify = function (data, opts) {
      if (!opts) { opts = {}; }
      if (typeof opts === 'function') { opts = { cmp: opts }; }
      var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;

      var cmp = opts.cmp && (function (f) {
          return function (node) {
              return function (a, b) {
                  var aobj = { key: a, value: node[a] };
                  var bobj = { key: b, value: node[b] };
                  return f(aobj, bobj);
              };
          };
      })(opts.cmp);

      var seen = [];
      return (function stringify (node) {
          if (node && node.toJSON && typeof node.toJSON === 'function') {
              node = node.toJSON();
          }

          if (node === undefined) { return; }
          if (typeof node == 'number') { return isFinite(node) ? '' + node : 'null'; }
          if (typeof node !== 'object') { return JSON.stringify(node); }

          var i, out;
          if (Array.isArray(node)) {
              out = '[';
              for (i = 0; i < node.length; i++) {
                  if (i) { out += ','; }
                  out += stringify(node[i]) || 'null';
              }
              return out + ']';
          }

          if (node === null) { return 'null'; }

          if (seen.indexOf(node) !== -1) {
              if (cycles) { return JSON.stringify('__cycle__'); }
              throw new TypeError('Converting circular structure to JSON');
          }

          var seenIndex = seen.push(node) - 1;
          var keys = Object.keys(node).sort(cmp && cmp(node));
          out = '';
          for (i = 0; i < keys.length; i++) {
              var key = keys[i];
              var value = stringify(node[key]);

              if (!value) { continue; }
              if (out) { out += ','; }
              out += JSON.stringify(key) + ':' + value;
          }
          seen.splice(seenIndex, 1);
          return '{' + out + '}';
      })(data);
  };

  var validate$1 = function generate_validate(it, $keyword, $ruleType) {
    var out = '';
    var $async = it.schema.$async === true,
      $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'),
      $id = it.self._getId(it.schema);
    if (it.isTop) {
      if ($async) {
        it.async = true;
        var $es7 = it.opts.async == 'es7';
        it.yieldAwait = $es7 ? 'await' : 'yield';
      }
      out += ' var validate = ';
      if ($async) {
        if ($es7) {
          out += ' (async function ';
        } else {
          if (it.opts.async != '*') {
            out += 'co.wrap';
          }
          out += '(function* ';
        }
      } else {
        out += ' (function ';
      }
      out += ' (data, dataPath, parentData, parentDataProperty, rootData) { \'use strict\'; ';
      if ($id && (it.opts.sourceCode || it.opts.processCode)) {
        out += ' ' + ('/\*# sourceURL=' + $id + ' */') + ' ';
      }
    }
    if (typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref)) {
      var $keyword = 'false schema';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $errorKeyword;
      var $data = 'data' + ($dataLvl || '');
      var $valid = 'valid' + $lvl;
      if (it.schema === false) {
        if (it.isTop) {
          $breakOnError = true;
        } else {
          out += ' var ' + ($valid) + ' = false; ';
        }
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ($errorKeyword || 'false schema') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
          if (it.opts.messages !== false) {
            out += ' , message: \'boolean schema is false\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + (__err) + ']); ';
          } else {
            out += ' validate.errors = [' + (__err) + ']; return false; ';
          }
        } else {
          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
      } else {
        if (it.isTop) {
          if ($async) {
            out += ' return data; ';
          } else {
            out += ' validate.errors = null; return true; ';
          }
        } else {
          out += ' var ' + ($valid) + ' = true; ';
        }
      }
      if (it.isTop) {
        out += ' }); return validate; ';
      }
      return out;
    }
    if (it.isTop) {
      var $top = it.isTop,
        $lvl = it.level = 0,
        $dataLvl = it.dataLevel = 0,
        $data = 'data';
      it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));
      it.baseId = it.baseId || it.rootId;
      delete it.isTop;
      it.dataPathArr = [undefined];
      out += ' var vErrors = null; ';
      out += ' var errors = 0;     ';
      out += ' if (rootData === undefined) rootData = data; ';
    } else {
      var $lvl = it.level,
        $dataLvl = it.dataLevel,
        $data = 'data' + ($dataLvl || '');
      if ($id) { it.baseId = it.resolve.url(it.baseId, $id); }
      if ($async && !it.async) { throw new Error('async schema in sync schema'); }
      out += ' var errs_' + ($lvl) + ' = errors;';
    }
    var $valid = 'valid' + $lvl,
      $breakOnError = !it.opts.allErrors,
      $closingBraces1 = '',
      $closingBraces2 = '';
    var $errorKeyword;
    var $typeSchema = it.schema.type,
      $typeIsArray = Array.isArray($typeSchema);
    if ($typeIsArray && $typeSchema.length == 1) {
      $typeSchema = $typeSchema[0];
      $typeIsArray = false;
    }
    if (it.schema.$ref && $refKeywords) {
      if (it.opts.extendRefs == 'fail') {
        throw new Error('$ref: validation keywords used in schema at path "' + it.errSchemaPath + '" (see option extendRefs)');
      } else if (it.opts.extendRefs !== true) {
        $refKeywords = false;
        it.logger.warn('$ref: keywords ignored in schema at path "' + it.errSchemaPath + '"');
      }
    }
    if ($typeSchema) {
      if (it.opts.coerceTypes) {
        var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);
      }
      var $rulesGroup = it.RULES.types[$typeSchema];
      if ($coerceToTypes || $typeIsArray || $rulesGroup === true || ($rulesGroup && !$shouldUseGroup($rulesGroup))) {
        var $schemaPath = it.schemaPath + '.type',
          $errSchemaPath = it.errSchemaPath + '/type';
        var $schemaPath = it.schemaPath + '.type',
          $errSchemaPath = it.errSchemaPath + '/type',
          $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';
        out += ' if (' + (it.util[$method]($typeSchema, $data, true)) + ') { ';
        if ($coerceToTypes) {
          var $dataType = 'dataType' + $lvl,
            $coerced = 'coerced' + $lvl;
          out += ' var ' + ($dataType) + ' = typeof ' + ($data) + '; ';
          if (it.opts.coerceTypes == 'array') {
            out += ' if (' + ($dataType) + ' == \'object\' && Array.isArray(' + ($data) + ')) ' + ($dataType) + ' = \'array\'; ';
          }
          out += ' var ' + ($coerced) + ' = undefined; ';
          var $bracesCoercion = '';
          var arr1 = $coerceToTypes;
          if (arr1) {
            var $type, $i = -1,
              l1 = arr1.length - 1;
            while ($i < l1) {
              $type = arr1[$i += 1];
              if ($i) {
                out += ' if (' + ($coerced) + ' === undefined) { ';
                $bracesCoercion += '}';
              }
              if (it.opts.coerceTypes == 'array' && $type != 'array') {
                out += ' if (' + ($dataType) + ' == \'array\' && ' + ($data) + '.length == 1) { ' + ($coerced) + ' = ' + ($data) + ' = ' + ($data) + '[0]; ' + ($dataType) + ' = typeof ' + ($data) + ';  } ';
              }
              if ($type == 'string') {
                out += ' if (' + ($dataType) + ' == \'number\' || ' + ($dataType) + ' == \'boolean\') ' + ($coerced) + ' = \'\' + ' + ($data) + '; else if (' + ($data) + ' === null) ' + ($coerced) + ' = \'\'; ';
              } else if ($type == 'number' || $type == 'integer') {
                out += ' if (' + ($dataType) + ' == \'boolean\' || ' + ($data) + ' === null || (' + ($dataType) + ' == \'string\' && ' + ($data) + ' && ' + ($data) + ' == +' + ($data) + ' ';
                if ($type == 'integer') {
                  out += ' && !(' + ($data) + ' % 1)';
                }
                out += ')) ' + ($coerced) + ' = +' + ($data) + '; ';
              } else if ($type == 'boolean') {
                out += ' if (' + ($data) + ' === \'false\' || ' + ($data) + ' === 0 || ' + ($data) + ' === null) ' + ($coerced) + ' = false; else if (' + ($data) + ' === \'true\' || ' + ($data) + ' === 1) ' + ($coerced) + ' = true; ';
              } else if ($type == 'null') {
                out += ' if (' + ($data) + ' === \'\' || ' + ($data) + ' === 0 || ' + ($data) + ' === false) ' + ($coerced) + ' = null; ';
              } else if (it.opts.coerceTypes == 'array' && $type == 'array') {
                out += ' if (' + ($dataType) + ' == \'string\' || ' + ($dataType) + ' == \'number\' || ' + ($dataType) + ' == \'boolean\' || ' + ($data) + ' == null) ' + ($coerced) + ' = [' + ($data) + ']; ';
              }
            }
          }
          out += ' ' + ($bracesCoercion) + ' if (' + ($coerced) + ' === undefined) {   ';
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = ''; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \'';
            if ($typeIsArray) {
              out += '' + ($typeSchema.join(","));
            } else {
              out += '' + ($typeSchema);
            }
            out += '\' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \'should be ';
              if ($typeIsArray) {
                out += '' + ($typeSchema.join(","));
              } else {
                out += '' + ($typeSchema);
              }
              out += '\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
            if (it.async) {
              out += ' throw new ValidationError([' + (__err) + ']); ';
            } else {
              out += ' validate.errors = [' + (__err) + ']; return false; ';
            }
          } else {
            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
          out += ' } else {  ';
          var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
            $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
          out += ' ' + ($data) + ' = ' + ($coerced) + '; ';
          if (!$dataLvl) {
            out += 'if (' + ($parentData) + ' !== undefined)';
          }
          out += ' ' + ($parentData) + '[' + ($parentDataProperty) + '] = ' + ($coerced) + '; } ';
        } else {
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = ''; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \'';
            if ($typeIsArray) {
              out += '' + ($typeSchema.join(","));
            } else {
              out += '' + ($typeSchema);
            }
            out += '\' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \'should be ';
              if ($typeIsArray) {
                out += '' + ($typeSchema.join(","));
              } else {
                out += '' + ($typeSchema);
              }
              out += '\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
            if (it.async) {
              out += ' throw new ValidationError([' + (__err) + ']); ';
            } else {
              out += ' validate.errors = [' + (__err) + ']; return false; ';
            }
          } else {
            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
        }
        out += ' } ';
      }
    }
    if (it.schema.$ref && !$refKeywords) {
      out += ' ' + (it.RULES.all.$ref.code(it, '$ref')) + ' ';
      if ($breakOnError) {
        out += ' } if (errors === ';
        if ($top) {
          out += '0';
        } else {
          out += 'errs_' + ($lvl);
        }
        out += ') { ';
        $closingBraces2 += '}';
      }
    } else {
      if (it.opts.v5 && it.schema.patternGroups) {
        it.logger.warn('keyword "patternGroups" is deprecated and disabled. Use option patternGroups: true to enable.');
      }
      var arr2 = it.RULES;
      if (arr2) {
        var $rulesGroup, i2 = -1,
          l2 = arr2.length - 1;
        while (i2 < l2) {
          $rulesGroup = arr2[i2 += 1];
          if ($shouldUseGroup($rulesGroup)) {
            if ($rulesGroup.type) {
              out += ' if (' + (it.util.checkDataType($rulesGroup.type, $data)) + ') { ';
            }
            if (it.opts.useDefaults && !it.compositeRule) {
              if ($rulesGroup.type == 'object' && it.schema.properties) {
                var $schema = it.schema.properties,
                  $schemaKeys = Object.keys($schema);
                var arr3 = $schemaKeys;
                if (arr3) {
                  var $propertyKey, i3 = -1,
                    l3 = arr3.length - 1;
                  while (i3 < l3) {
                    $propertyKey = arr3[i3 += 1];
                    var $sch = $schema[$propertyKey];
                    if ($sch.default !== undefined) {
                      var $passData = $data + it.util.getProperty($propertyKey);
                      out += '  if (' + ($passData) + ' === undefined) ' + ($passData) + ' = ';
                      if (it.opts.useDefaults == 'shared') {
                        out += ' ' + (it.useDefault($sch.default)) + ' ';
                      } else {
                        out += ' ' + (JSON.stringify($sch.default)) + ' ';
                      }
                      out += '; ';
                    }
                  }
                }
              } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {
                var arr4 = it.schema.items;
                if (arr4) {
                  var $sch, $i = -1,
                    l4 = arr4.length - 1;
                  while ($i < l4) {
                    $sch = arr4[$i += 1];
                    if ($sch.default !== undefined) {
                      var $passData = $data + '[' + $i + ']';
                      out += '  if (' + ($passData) + ' === undefined) ' + ($passData) + ' = ';
                      if (it.opts.useDefaults == 'shared') {
                        out += ' ' + (it.useDefault($sch.default)) + ' ';
                      } else {
                        out += ' ' + (JSON.stringify($sch.default)) + ' ';
                      }
                      out += '; ';
                    }
                  }
                }
              }
            }
            var arr5 = $rulesGroup.rules;
            if (arr5) {
              var $rule, i5 = -1,
                l5 = arr5.length - 1;
              while (i5 < l5) {
                $rule = arr5[i5 += 1];
                if ($shouldUseRule($rule)) {
                  var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);
                  if ($code) {
                    out += ' ' + ($code) + ' ';
                    if ($breakOnError) {
                      $closingBraces1 += '}';
                    }
                  }
                }
              }
            }
            if ($breakOnError) {
              out += ' ' + ($closingBraces1) + ' ';
              $closingBraces1 = '';
            }
            if ($rulesGroup.type) {
              out += ' } ';
              if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {
                out += ' else { ';
                var $schemaPath = it.schemaPath + '.type',
                  $errSchemaPath = it.errSchemaPath + '/type';
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \'';
                  if ($typeIsArray) {
                    out += '' + ($typeSchema.join(","));
                  } else {
                    out += '' + ($typeSchema);
                  }
                  out += '\' } ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should be ';
                    if ($typeIsArray) {
                      out += '' + ($typeSchema.join(","));
                    } else {
                      out += '' + ($typeSchema);
                    }
                    out += '\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError([' + (__err) + ']); ';
                  } else {
                    out += ' validate.errors = [' + (__err) + ']; return false; ';
                  }
                } else {
                  out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                out += ' } ';
              }
            }
            if ($breakOnError) {
              out += ' if (errors === ';
              if ($top) {
                out += '0';
              } else {
                out += 'errs_' + ($lvl);
              }
              out += ') { ';
              $closingBraces2 += '}';
            }
          }
        }
      }
    }
    if ($breakOnError) {
      out += ' ' + ($closingBraces2) + ' ';
    }
    if ($top) {
      if ($async) {
        out += ' if (errors === 0) return data;           ';
        out += ' else throw new ValidationError(vErrors); ';
      } else {
        out += ' validate.errors = vErrors; ';
        out += ' return errors === 0;       ';
      }
      out += ' }); return validate;';
    } else {
      out += ' var ' + ($valid) + ' = errors === errs_' + ($lvl) + ';';
    }
    out = it.util.cleanUpCode(out);
    if ($top) {
      out = it.util.finalCleanUpCode(out, $async);
    }

    function $shouldUseGroup($rulesGroup) {
      var rules = $rulesGroup.rules;
      for (var i = 0; i < rules.length; i++)
        { if ($shouldUseRule(rules[i])) { return true; } }
    }

    function $shouldUseRule($rule) {
      return it.schema[$rule.keyword] !== undefined || ($rule.implements && $ruleImplementsSomeKeyword($rule));
    }

    function $ruleImplementsSomeKeyword($rule) {
      var impl = $rule.implements;
      for (var i = 0; i < impl.length; i++)
        { if (it.schema[impl[i]] !== undefined) { return true; } }
    }
    return out;
  };

  /**
   * slice() reference.
   */

  var slice = Array.prototype.slice;

  /**
   * Expose `co`.
   */

  var co_1 = co['default'] = co.co = co;

  /**
   * Wrap the given generator `fn` into a
   * function that returns a promise.
   * This is a separate function so that
   * every `co()` call doesn't create a new,
   * unnecessary closure.
   *
   * @param {GeneratorFunction} fn
   * @return {Function}
   * @api public
   */

  co.wrap = function (fn) {
    createPromise.__generatorFunction__ = fn;
    return createPromise;
    function createPromise() {
      return co.call(this, fn.apply(this, arguments));
    }
  };

  /**
   * Execute the generator function or a generator
   * and return a promise.
   *
   * @param {Function} fn
   * @return {Promise}
   * @api public
   */

  function co(gen) {
    var ctx = this;
    var args = slice.call(arguments, 1);

    // we wrap everything in a promise to avoid promise chaining,
    // which leads to memory leak errors.
    // see https://github.com/tj/co/issues/180
    return new Promise(function(resolve, reject) {
      if (typeof gen === 'function') { gen = gen.apply(ctx, args); }
      if (!gen || typeof gen.next !== 'function') { return resolve(gen); }

      onFulfilled();

      /**
       * @param {Mixed} res
       * @return {Promise}
       * @api private
       */

      function onFulfilled(res) {
        var ret;
        try {
          ret = gen.next(res);
        } catch (e) {
          return reject(e);
        }
        next(ret);
      }

      /**
       * @param {Error} err
       * @return {Promise}
       * @api private
       */

      function onRejected(err) {
        var ret;
        try {
          ret = gen.throw(err);
        } catch (e) {
          return reject(e);
        }
        next(ret);
      }

      /**
       * Get the next value in the generator,
       * return a promise.
       *
       * @param {Object} ret
       * @return {Promise}
       * @api private
       */

      function next(ret) {
        if (ret.done) { return resolve(ret.value); }
        var value = toPromise.call(ctx, ret.value);
        if (value && isPromise$1(value)) { return value.then(onFulfilled, onRejected); }
        return onRejected(new TypeError('You may only yield a function, promise, generator, array, or object, '
          + 'but the following object was passed: "' + String(ret.value) + '"'));
      }
    });
  }

  /**
   * Convert a `yield`ed value into a promise.
   *
   * @param {Mixed} obj
   * @return {Promise}
   * @api private
   */

  function toPromise(obj) {
    if (!obj) { return obj; }
    if (isPromise$1(obj)) { return obj; }
    if (isGeneratorFunction(obj) || isGenerator(obj)) { return co.call(this, obj); }
    if ('function' == typeof obj) { return thunkToPromise.call(this, obj); }
    if (Array.isArray(obj)) { return arrayToPromise.call(this, obj); }
    if (isObject$4(obj)) { return objectToPromise.call(this, obj); }
    return obj;
  }

  /**
   * Convert a thunk to a promise.
   *
   * @param {Function}
   * @return {Promise}
   * @api private
   */

  function thunkToPromise(fn) {
    var ctx = this;
    return new Promise(function (resolve, reject) {
      fn.call(ctx, function (err, res) {
        if (err) { return reject(err); }
        if (arguments.length > 2) { res = slice.call(arguments, 1); }
        resolve(res);
      });
    });
  }

  /**
   * Convert an array of "yieldables" to a promise.
   * Uses `Promise.all()` internally.
   *
   * @param {Array} obj
   * @return {Promise}
   * @api private
   */

  function arrayToPromise(obj) {
    return Promise.all(obj.map(toPromise, this));
  }

  /**
   * Convert an object of "yieldables" to a promise.
   * Uses `Promise.all()` internally.
   *
   * @param {Object} obj
   * @return {Promise}
   * @api private
   */

  function objectToPromise(obj){
    var this$1 = this;

    var results = new obj.constructor();
    var keys = Object.keys(obj);
    var promises = [];
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var promise = toPromise.call(this$1, obj[key]);
      if (promise && isPromise$1(promise)) { defer(promise, key); }
      else { results[key] = obj[key]; }
    }
    return Promise.all(promises).then(function () {
      return results;
    });

    function defer(promise, key) {
      // predefine the key in the result
      results[key] = undefined;
      promises.push(promise.then(function (res) {
        results[key] = res;
      }));
    }
  }

  /**
   * Check if `obj` is a promise.
   *
   * @param {Object} obj
   * @return {Boolean}
   * @api private
   */

  function isPromise$1(obj) {
    return 'function' == typeof obj.then;
  }

  /**
   * Check if `obj` is a generator.
   *
   * @param {Mixed} obj
   * @return {Boolean}
   * @api private
   */

  function isGenerator(obj) {
    return 'function' == typeof obj.next && 'function' == typeof obj.throw;
  }

  /**
   * Check if `obj` is a generator function.
   *
   * @param {Mixed} obj
   * @return {Boolean}
   * @api private
   */
  function isGeneratorFunction(obj) {
    var constructor = obj.constructor;
    if (!constructor) { return false; }
    if ('GeneratorFunction' === constructor.name || 'GeneratorFunction' === constructor.displayName) { return true; }
    return isGenerator(constructor.prototype);
  }

  /**
   * Check for plain object.
   *
   * @param {Mixed} val
   * @return {Boolean}
   * @api private
   */

  function isObject$4(val) {
    return Object == val.constructor;
  }

  /**
   * Functions below are used inside compiled validations function
   */


  var ucs2length$1 = util$4.ucs2length;


  // this error is thrown by async schemas to return validation errors via exception
  var ValidationError$1 = error_classes.Validation;

  var compile_1 = compile;


  /**
   * Compiles schema to validation function
   * @this   Ajv
   * @param  {Object} schema schema object
   * @param  {Object} root object with information about the root schema for this schema
   * @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution
   * @param  {String} baseId base ID for IDs in the schema
   * @return {Function} validation function
   */
  function compile(schema, root, localRefs, baseId) {
    /* jshint validthis: true, evil: true */
    /* eslint no-shadow: 0 */
    var self = this
      , opts = this._opts
      , refVal = [ undefined ]
      , refs = {}
      , patterns = []
      , patternsHash = {}
      , defaults = []
      , defaultsHash = {}
      , customRules = [];

    root = root || { schema: schema, refVal: refVal, refs: refs };

    var c = checkCompiling.call(this, schema, root, baseId);
    var compilation = this._compilations[c.index];
    if (c.compiling) { return (compilation.callValidate = callValidate); }

    var formats = this._formats;
    var RULES = this.RULES;

    try {
      var v = localCompile(schema, root, localRefs, baseId);
      compilation.validate = v;
      var cv = compilation.callValidate;
      if (cv) {
        cv.schema = v.schema;
        cv.errors = null;
        cv.refs = v.refs;
        cv.refVal = v.refVal;
        cv.root = v.root;
        cv.$async = v.$async;
        if (opts.sourceCode) { cv.source = v.source; }
      }
      return v;
    } finally {
      endCompiling.call(this, schema, root, baseId);
    }

    function callValidate() {
      var validate = compilation.validate;
      var result = validate.apply(null, arguments);
      callValidate.errors = validate.errors;
      return result;
    }

    function localCompile(_schema, _root, localRefs, baseId) {
      var isRoot = !_root || (_root && _root.schema == _schema);
      if (_root.schema != root.schema)
        { return compile.call(self, _schema, _root, localRefs, baseId); }

      var $async = _schema.$async === true;

      var sourceCode = validate$1({
        isTop: true,
        schema: _schema,
        isRoot: isRoot,
        baseId: baseId,
        root: _root,
        schemaPath: '',
        errSchemaPath: '#',
        errorPath: '""',
        MissingRefError: error_classes.MissingRef,
        RULES: RULES,
        validate: validate$1,
        util: util$4,
        resolve: resolve_1,
        resolveRef: resolveRef,
        usePattern: usePattern,
        useDefault: useDefault,
        useCustomRule: useCustomRule,
        opts: opts,
        formats: formats,
        logger: self.logger,
        self: self
      });

      sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode)
                     + vars(defaults, defaultCode) + vars(customRules, customRuleCode)
                     + sourceCode;

      if (opts.processCode) { sourceCode = opts.processCode(sourceCode); }
      // console.log('\n\n\n *** \n', JSON.stringify(sourceCode));
      var validate;
      try {
        var makeValidate = new Function(
          'self',
          'RULES',
          'formats',
          'root',
          'refVal',
          'defaults',
          'customRules',
          'co',
          'equal',
          'ucs2length',
          'ValidationError',
          sourceCode
        );

        validate = makeValidate(
          self,
          RULES,
          formats,
          root,
          refVal,
          defaults,
          customRules,
          co_1,
          fastDeepEqual,
          ucs2length$1,
          ValidationError$1
        );

        refVal[0] = validate;
      } catch(e) {
        self.logger.error('Error compiling schema, function code:', sourceCode);
        throw e;
      }

      validate.schema = _schema;
      validate.errors = null;
      validate.refs = refs;
      validate.refVal = refVal;
      validate.root = isRoot ? validate : _root;
      if ($async) { validate.$async = true; }
      if (opts.sourceCode === true) {
        validate.source = {
          code: sourceCode,
          patterns: patterns,
          defaults: defaults
        };
      }

      return validate;
    }

    function resolveRef(baseId, ref, isRoot) {
      ref = resolve_1.url(baseId, ref);
      var refIndex = refs[ref];
      var _refVal, refCode;
      if (refIndex !== undefined) {
        _refVal = refVal[refIndex];
        refCode = 'refVal[' + refIndex + ']';
        return resolvedRef(_refVal, refCode);
      }
      if (!isRoot && root.refs) {
        var rootRefId = root.refs[ref];
        if (rootRefId !== undefined) {
          _refVal = root.refVal[rootRefId];
          refCode = addLocalRef(ref, _refVal);
          return resolvedRef(_refVal, refCode);
        }
      }

      refCode = addLocalRef(ref);
      var v = resolve_1.call(self, localCompile, root, ref);
      if (v === undefined) {
        var localSchema = localRefs && localRefs[ref];
        if (localSchema) {
          v = resolve_1.inlineRef(localSchema, opts.inlineRefs)
              ? localSchema
              : compile.call(self, localSchema, root, localRefs, baseId);
        }
      }

      if (v === undefined) {
        removeLocalRef(ref);
      } else {
        replaceLocalRef(ref, v);
        return resolvedRef(v, refCode);
      }
    }

    function addLocalRef(ref, v) {
      var refId = refVal.length;
      refVal[refId] = v;
      refs[ref] = refId;
      return 'refVal' + refId;
    }

    function removeLocalRef(ref) {
      delete refs[ref];
    }

    function replaceLocalRef(ref, v) {
      var refId = refs[ref];
      refVal[refId] = v;
    }

    function resolvedRef(refVal, code) {
      return typeof refVal == 'object' || typeof refVal == 'boolean'
              ? { code: code, schema: refVal, inline: true }
              : { code: code, $async: refVal && refVal.$async };
    }

    function usePattern(regexStr) {
      var index = patternsHash[regexStr];
      if (index === undefined) {
        index = patternsHash[regexStr] = patterns.length;
        patterns[index] = regexStr;
      }
      return 'pattern' + index;
    }

    function useDefault(value) {
      switch (typeof value) {
        case 'boolean':
        case 'number':
          return '' + value;
        case 'string':
          return util$4.toQuotedString(value);
        case 'object':
          if (value === null) { return 'null'; }
          var valueStr = fastJsonStableStringify(value);
          var index = defaultsHash[valueStr];
          if (index === undefined) {
            index = defaultsHash[valueStr] = defaults.length;
            defaults[index] = value;
          }
          return 'default' + index;
      }
    }

    function useCustomRule(rule, schema, parentSchema, it) {
      var validateSchema = rule.definition.validateSchema;
      if (validateSchema && self._opts.validateSchema !== false) {
        var valid = validateSchema(schema);
        if (!valid) {
          var message = 'keyword schema is invalid: ' + self.errorsText(validateSchema.errors);
          if (self._opts.validateSchema == 'log') { self.logger.error(message); }
          else { throw new Error(message); }
        }
      }

      var compile = rule.definition.compile
        , inline = rule.definition.inline
        , macro = rule.definition.macro;

      var validate;
      if (compile) {
        validate = compile.call(self, schema, parentSchema, it);
      } else if (macro) {
        validate = macro.call(self, schema, parentSchema, it);
        if (opts.validateSchema !== false) { self.validateSchema(validate, true); }
      } else if (inline) {
        validate = inline.call(self, it, rule.keyword, schema, parentSchema);
      } else {
        validate = rule.definition.validate;
        if (!validate) { return; }
      }

      if (validate === undefined)
        { throw new Error('custom keyword "' + rule.keyword + '"failed to compile'); }

      var index = customRules.length;
      customRules[index] = validate;

      return {
        code: 'customRule' + index,
        validate: validate
      };
    }
  }


  /**
   * Checks if the schema is currently compiled
   * @this   Ajv
   * @param  {Object} schema schema to compile
   * @param  {Object} root root object
   * @param  {String} baseId base schema ID
   * @return {Object} object with properties "index" (compilation index) and "compiling" (boolean)
   */
  function checkCompiling(schema, root, baseId) {
    /* jshint validthis: true */
    var index = compIndex.call(this, schema, root, baseId);
    if (index >= 0) { return { index: index, compiling: true }; }
    index = this._compilations.length;
    this._compilations[index] = {
      schema: schema,
      root: root,
      baseId: baseId
    };
    return { index: index, compiling: false };
  }


  /**
   * Removes the schema from the currently compiled list
   * @this   Ajv
   * @param  {Object} schema schema to compile
   * @param  {Object} root root object
   * @param  {String} baseId base schema ID
   */
  function endCompiling(schema, root, baseId) {
    /* jshint validthis: true */
    var i = compIndex.call(this, schema, root, baseId);
    if (i >= 0) { this._compilations.splice(i, 1); }
  }


  /**
   * Index of schema compilation in the currently compiled list
   * @this   Ajv
   * @param  {Object} schema schema to compile
   * @param  {Object} root root object
   * @param  {String} baseId base schema ID
   * @return {Integer} compilation index
   */
  function compIndex(schema, root, baseId) {
    var this$1 = this;

    /* jshint validthis: true */
    for (var i=0; i<this._compilations.length; i++) {
      var c = this$1._compilations[i];
      if (c.schema == schema && c.root == root && c.baseId == baseId) { return i; }
    }
    return -1;
  }


  function patternCode(i, patterns) {
    return 'var pattern' + i + ' = new RegExp(' + util$4.toQuotedString(patterns[i]) + ');';
  }


  function defaultCode(i) {
    return 'var default' + i + ' = defaults[' + i + '];';
  }


  function refValCode(i, refVal) {
    return refVal[i] === undefined ? '' : 'var refVal' + i + ' = refVal[' + i + '];';
  }


  function customRuleCode(i) {
    return 'var customRule' + i + ' = customRules[' + i + '];';
  }


  function vars(arr, statement) {
    if (!arr.length) { return ''; }
    var code = '';
    for (var i=0; i<arr.length; i++)
      { code += statement(i, arr); }
    return code;
  }

  var cache = createCommonjsModule(function (module) {


  var Cache = module.exports = function Cache() {
    this._cache = {};
  };


  Cache.prototype.put = function Cache_put(key, value) {
    this._cache[key] = value;
  };


  Cache.prototype.get = function Cache_get(key) {
    return this._cache[key];
  };


  Cache.prototype.del = function Cache_del(key) {
    delete this._cache[key];
  };


  Cache.prototype.clear = function Cache_clear() {
    this._cache = {};
  };
  });

  var DATE = /^\d\d\d\d-(\d\d)-(\d\d)$/;
  var DAYS = [0,31,29,31,30,31,30,31,31,30,31,30,31];
  var TIME$1 = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d:\d\d)?$/i;
  var HOSTNAME = /^[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*$/i;
  var URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
  var URIREF = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
  // uri-template: https://tools.ietf.org/html/rfc6570
  var URITEMPLATE = /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i;
  // For the source: https://gist.github.com/dperini/729294
  // For test cases: https://mathiasbynens.be/demo/url-regex
  // @todo Delete current URL in favour of the commented out URL rule when this issue is fixed https://github.com/eslint/eslint/issues/7983.
  // var URL = /^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)(?:\.(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu;
  var URL = /^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i;
  var UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
  var JSON_POINTER$1 = /^(?:\/(?:[^~/]|~0|~1)*)*$|^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
  var RELATIVE_JSON_POINTER$1 = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;


  var formats_1$1 = formats$4;

  function formats$4(mode) {
    mode = mode == 'full' ? 'full' : 'fast';
    return util$4.copy(formats$4[mode]);
  }


  formats$4.fast = {
    // date: http://tools.ietf.org/html/rfc3339#section-5.6
    date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
    // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
    time: /^[0-2]\d:[0-5]\d:[0-5]\d(?:\.\d+)?(?:z|[+-]\d\d:\d\d)?$/i,
    'date-time': /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s][0-2]\d:[0-5]\d:[0-5]\d(?:\.\d+)?(?:z|[+-]\d\d:\d\d)$/i,
    // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
    uri: /^(?:[a-z][a-z0-9+-.]*)(?::|\/)\/?[^\s]*$/i,
    'uri-reference': /^(?:(?:[a-z][a-z0-9+-.]*:)?\/\/)?[^\s]*$/i,
    'uri-template': URITEMPLATE,
    url: URL,
    // email (sources from jsen validator):
    // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
    // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')
    email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
    hostname: HOSTNAME,
    // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
    ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
    // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
    ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
    regex: regex$1,
    // uuid: http://tools.ietf.org/html/rfc4122
    uuid: UUID,
    // JSON-pointer: https://tools.ietf.org/html/rfc6901
    // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
    'json-pointer': JSON_POINTER$1,
    // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
    'relative-json-pointer': RELATIVE_JSON_POINTER$1
  };


  formats$4.full = {
    date: date,
    time: time,
    'date-time': date_time,
    uri: uri,
    'uri-reference': URIREF,
    'uri-template': URITEMPLATE,
    url: URL,
    email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&''*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
    hostname: hostname,
    ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
    ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
    regex: regex$1,
    uuid: UUID,
    'json-pointer': JSON_POINTER$1,
    'relative-json-pointer': RELATIVE_JSON_POINTER$1
  };


  function date(str) {
    // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
    var matches = str.match(DATE);
    if (!matches) { return false; }

    var month = +matches[1];
    var day = +matches[2];
    return month >= 1 && month <= 12 && day >= 1 && day <= DAYS[month];
  }


  function time(str, full) {
    var matches = str.match(TIME$1);
    if (!matches) { return false; }

    var hour = matches[1];
    var minute = matches[2];
    var second = matches[3];
    var timeZone = matches[5];
    return hour <= 23 && minute <= 59 && second <= 59 && (!full || timeZone);
  }


  var DATE_TIME_SEPARATOR = /t|\s/i;
  function date_time(str) {
    // http://tools.ietf.org/html/rfc3339#section-5.6
    var dateTime = str.split(DATE_TIME_SEPARATOR);
    return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);
  }


  function hostname(str) {
    // https://tools.ietf.org/html/rfc1034#section-3.5
    // https://tools.ietf.org/html/rfc1123#section-2
    return str.length <= 255 && HOSTNAME.test(str);
  }


  var NOT_URI_FRAGMENT = /\/|:/;
  function uri(str) {
    // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
    return NOT_URI_FRAGMENT.test(str) && URI.test(str);
  }


  var Z_ANCHOR = /[^\\]\\Z/;
  function regex$1(str) {
    if (Z_ANCHOR.test(str)) { return false; }
    try {
      return true;
    } catch(e) {
      return false;
    }
  }

  var ref$1 = function generate_ref(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $async, $refCode;
    if ($schema == '#' || $schema == '#/') {
      if (it.isRoot) {
        $async = it.async;
        $refCode = 'validate';
      } else {
        $async = it.root.schema.$async === true;
        $refCode = 'root.refVal[0]';
      }
    } else {
      var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);
      if ($refVal === undefined) {
        var $message = it.MissingRefError.message(it.baseId, $schema);
        if (it.opts.missingRefs == 'fail') {
          it.logger.error($message);
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = ''; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \'' + ('$ref') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { ref: \'' + (it.util.escapeQuotes($schema)) + '\' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \'can\\\'t resolve reference ' + (it.util.escapeQuotes($schema)) + '\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: ' + (it.util.toQuotedString($schema)) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
            if (it.async) {
              out += ' throw new ValidationError([' + (__err) + ']); ';
            } else {
              out += ' validate.errors = [' + (__err) + ']; return false; ';
            }
          } else {
            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
          if ($breakOnError) {
            out += ' if (false) { ';
          }
        } else if (it.opts.missingRefs == 'ignore') {
          it.logger.warn($message);
          if ($breakOnError) {
            out += ' if (true) { ';
          }
        } else {
          throw new it.MissingRefError(it.baseId, $schema, $message);
        }
      } else if ($refVal.inline) {
        var $it = it.util.copy(it);
        $it.level++;
        var $nextValid = 'valid' + $it.level;
        $it.schema = $refVal.schema;
        $it.schemaPath = '';
        $it.errSchemaPath = $schema;
        var $code = it.validate($it).replace(/validate\.schema/g, $refVal.code);
        out += ' ' + ($code) + ' ';
        if ($breakOnError) {
          out += ' if (' + ($nextValid) + ') { ';
        }
      } else {
        $async = $refVal.$async === true;
        $refCode = $refVal.code;
      }
    }
    if ($refCode) {
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = '';
      if (it.opts.passContext) {
        out += ' ' + ($refCode) + '.call(this, ';
      } else {
        out += ' ' + ($refCode) + '( ';
      }
      out += ' ' + ($data) + ', (dataPath || \'\')';
      if (it.errorPath != '""') {
        out += ' + ' + (it.errorPath);
      }
      var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
        $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
      out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ', rootData)  ';
      var __callValidate = out;
      out = $$outStack.pop();
      if ($async) {
        if (!it.async) { throw new Error('async schema referenced by sync schema'); }
        if ($breakOnError) {
          out += ' var ' + ($valid) + '; ';
        }
        out += ' try { ' + (it.yieldAwait) + ' ' + (__callValidate) + '; ';
        if ($breakOnError) {
          out += ' ' + ($valid) + ' = true; ';
        }
        out += ' } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ';
        if ($breakOnError) {
          out += ' ' + ($valid) + ' = false; ';
        }
        out += ' } ';
        if ($breakOnError) {
          out += ' if (' + ($valid) + ') { ';
        }
      } else {
        out += ' if (!' + (__callValidate) + ') { if (vErrors === null) vErrors = ' + ($refCode) + '.errors; else vErrors = vErrors.concat(' + ($refCode) + '.errors); errors = vErrors.length; } ';
        if ($breakOnError) {
          out += ' else { ';
        }
      }
    }
    return out;
  };

  var allOf = function generate_allOf(it, $keyword, $ruleType) {
    var out = ' ';
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    var $currentBaseId = $it.baseId,
      $allSchemasEmpty = true;
    var arr1 = $schema;
    if (arr1) {
      var $sch, $i = -1,
        l1 = arr1.length - 1;
      while ($i < l1) {
        $sch = arr1[$i += 1];
        if (it.util.schemaHasRules($sch, it.RULES.all)) {
          $allSchemasEmpty = false;
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + '[' + $i + ']';
          $it.errSchemaPath = $errSchemaPath + '/' + $i;
          out += '  ' + (it.validate($it)) + ' ';
          $it.baseId = $currentBaseId;
          if ($breakOnError) {
            out += ' if (' + ($nextValid) + ') { ';
            $closingBraces += '}';
          }
        }
      }
    }
    if ($breakOnError) {
      if ($allSchemasEmpty) {
        out += ' if (true) { ';
      } else {
        out += ' ' + ($closingBraces.slice(0, -1)) + ' ';
      }
    }
    out = it.util.cleanUpCode(out);
    return out;
  };

  var anyOf = function generate_anyOf(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $errs = 'errs__' + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    var $noEmptySchema = $schema.every(function($sch) {
      return it.util.schemaHasRules($sch, it.RULES.all);
    });
    if ($noEmptySchema) {
      var $currentBaseId = $it.baseId;
      out += ' var ' + ($errs) + ' = errors; var ' + ($valid) + ' = false;  ';
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      var arr1 = $schema;
      if (arr1) {
        var $sch, $i = -1,
          l1 = arr1.length - 1;
        while ($i < l1) {
          $sch = arr1[$i += 1];
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + '[' + $i + ']';
          $it.errSchemaPath = $errSchemaPath + '/' + $i;
          out += '  ' + (it.validate($it)) + ' ';
          $it.baseId = $currentBaseId;
          out += ' ' + ($valid) + ' = ' + ($valid) + ' || ' + ($nextValid) + '; if (!' + ($valid) + ') { ';
          $closingBraces += '}';
        }
      }
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += ' ' + ($closingBraces) + ' if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ('anyOf') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should match some schema in anyOf\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError(vErrors); ';
        } else {
          out += ' validate.errors = vErrors; return false; ';
        }
      }
      out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
      if (it.opts.allErrors) {
        out += ' } ';
      }
      out = it.util.cleanUpCode(out);
    } else {
      if ($breakOnError) {
        out += ' if (true) { ';
      }
    }
    return out;
  };

  var _const = function generate_const(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $isData = it.opts.$data && $schema && $schema.$data;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    } else {
    }
    if (!$isData) {
      out += ' var schema' + ($lvl) + ' = validate.schema' + ($schemaPath) + ';';
    }
    out += 'var ' + ($valid) + ' = equal(' + ($data) + ', schema' + ($lvl) + '); if (!' + ($valid) + ') {   ';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ('const') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should be equal to constant\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' }';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  };

  var contains = function generate_contains(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $errs = 'errs__' + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    var $idx = 'i' + $lvl,
      $dataNxt = $it.dataLevel = it.dataLevel + 1,
      $nextData = 'data' + $dataNxt,
      $currentBaseId = it.baseId,
      $nonEmptySchema = it.util.schemaHasRules($schema, it.RULES.all);
    out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
    if ($nonEmptySchema) {
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      $it.schema = $schema;
      $it.schemaPath = $schemaPath;
      $it.errSchemaPath = $errSchemaPath;
      out += ' var ' + ($nextValid) + ' = false; for (var ' + ($idx) + ' = 0; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
      var $passData = $data + '[' + $idx + ']';
      $it.dataPathArr[$dataNxt] = $idx;
      var $code = it.validate($it);
      $it.baseId = $currentBaseId;
      if (it.util.varOccurences($code, $nextData) < 2) {
        out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
      } else {
        out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
      }
      out += ' if (' + ($nextValid) + ') break; }  ';
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += ' ' + ($closingBraces) + ' if (!' + ($nextValid) + ') {';
    } else {
      out += ' if (' + ($data) + '.length == 0) {';
    }
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ('contains') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should contain a valid item\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' } else { ';
    if ($nonEmptySchema) {
      out += '  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
    }
    if (it.opts.allErrors) {
      out += ' } ';
    }
    out = it.util.cleanUpCode(out);
    return out;
  };

  var dependencies$2 = function generate_dependencies(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $errs = 'errs__' + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    var $schemaDeps = {},
      $propertyDeps = {},
      $ownProperties = it.opts.ownProperties;
    for ($property in $schema) {
      var $sch = $schema[$property];
      var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;
      $deps[$property] = $sch;
    }
    out += 'var ' + ($errs) + ' = errors;';
    var $currentErrorPath = it.errorPath;
    out += 'var missing' + ($lvl) + ';';
    for (var $property in $propertyDeps) {
      $deps = $propertyDeps[$property];
      if ($deps.length) {
        out += ' if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';
        if ($ownProperties) {
          out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($property)) + '\') ';
        }
        if ($breakOnError) {
          out += ' && ( ';
          var arr1 = $deps;
          if (arr1) {
            var $propertyKey, $i = -1,
              l1 = arr1.length - 1;
            while ($i < l1) {
              $propertyKey = arr1[$i += 1];
              if ($i) {
                out += ' || ';
              }
              var $prop = it.util.getProperty($propertyKey),
                $useData = $data + $prop;
              out += ' ( ( ' + ($useData) + ' === undefined ';
              if ($ownProperties) {
                out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
              }
              out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';
            }
          }
          out += ')) {  ';
          var $propertyPath = 'missing' + $lvl,
            $missingProperty = '\' + ' + $propertyPath + ' + \'';
          if (it.opts._errorDataPathProperty) {
            it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
          }
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = ''; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \'' + ('dependencies') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \'' + (it.util.escapeQuotes($property)) + '\', missingProperty: \'' + ($missingProperty) + '\', depsCount: ' + ($deps.length) + ', deps: \'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", "))) + '\' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \'should have ';
              if ($deps.length == 1) {
                out += 'property ' + (it.util.escapeQuotes($deps[0]));
              } else {
                out += 'properties ' + (it.util.escapeQuotes($deps.join(", ")));
              }
              out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
            if (it.async) {
              out += ' throw new ValidationError([' + (__err) + ']); ';
            } else {
              out += ' validate.errors = [' + (__err) + ']; return false; ';
            }
          } else {
            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
        } else {
          out += ' ) { ';
          var arr2 = $deps;
          if (arr2) {
            var $propertyKey, i2 = -1,
              l2 = arr2.length - 1;
            while (i2 < l2) {
              $propertyKey = arr2[i2 += 1];
              var $prop = it.util.getProperty($propertyKey),
                $missingProperty = it.util.escapeQuotes($propertyKey),
                $useData = $data + $prop;
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
              }
              out += ' if ( ' + ($useData) + ' === undefined ';
              if ($ownProperties) {
                out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
              }
              out += ') {  var err =   '; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ('dependencies') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \'' + (it.util.escapeQuotes($property)) + '\', missingProperty: \'' + ($missingProperty) + '\', depsCount: ' + ($deps.length) + ', deps: \'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", "))) + '\' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'should have ';
                  if ($deps.length == 1) {
                    out += 'property ' + (it.util.escapeQuotes($deps[0]));
                  } else {
                    out += 'properties ' + (it.util.escapeQuotes($deps.join(", ")));
                  }
                  out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
            }
          }
        }
        out += ' }   ';
        if ($breakOnError) {
          $closingBraces += '}';
          out += ' else { ';
        }
      }
    }
    it.errorPath = $currentErrorPath;
    var $currentBaseId = $it.baseId;
    for (var $property in $schemaDeps) {
      var $sch = $schemaDeps[$property];
      if (it.util.schemaHasRules($sch, it.RULES.all)) {
        out += ' ' + ($nextValid) + ' = true; if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';
        if ($ownProperties) {
          out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($property)) + '\') ';
        }
        out += ') { ';
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + it.util.getProperty($property);
        $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($property);
        out += '  ' + (it.validate($it)) + ' ';
        $it.baseId = $currentBaseId;
        out += ' }  ';
        if ($breakOnError) {
          out += ' if (' + ($nextValid) + ') { ';
          $closingBraces += '}';
        }
      }
    }
    if ($breakOnError) {
      out += '   ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
    }
    out = it.util.cleanUpCode(out);
    return out;
  };

  var _enum = function generate_enum(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $isData = it.opts.$data && $schema && $schema.$data;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    } else {
    }
    var $i = 'i' + $lvl,
      $vSchema = 'schema' + $lvl;
    if (!$isData) {
      out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + ';';
    }
    out += 'var ' + ($valid) + ';';
    if ($isData) {
      out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';
    }
    out += '' + ($valid) + ' = false;for (var ' + ($i) + '=0; ' + ($i) + '<' + ($vSchema) + '.length; ' + ($i) + '++) if (equal(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + '])) { ' + ($valid) + ' = true; break; }';
    if ($isData) {
      out += '  }  ';
    }
    out += ' if (!' + ($valid) + ') {   ';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ('enum') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { allowedValues: schema' + ($lvl) + ' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should be equal to one of the allowed values\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' }';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  };

  var format$2 = function generate_format(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    if (it.opts.format === false) {
      if ($breakOnError) {
        out += ' if (true) { ';
      }
      return out;
    }
    var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
      $schemaValue = 'schema' + $lvl;
    } else {
      $schemaValue = $schema;
    }
    var $unknownFormats = it.opts.unknownFormats,
      $allowUnknown = Array.isArray($unknownFormats);
    if ($isData) {
      var $format = 'format' + $lvl,
        $isObject = 'isObject' + $lvl,
        $formatType = 'formatType' + $lvl;
      out += ' var ' + ($format) + ' = formats[' + ($schemaValue) + ']; var ' + ($isObject) + ' = typeof ' + ($format) + ' == \'object\' && !(' + ($format) + ' instanceof RegExp) && ' + ($format) + '.validate; var ' + ($formatType) + ' = ' + ($isObject) + ' && ' + ($format) + '.type || \'string\'; if (' + ($isObject) + ') { ';
      if (it.async) {
        out += ' var async' + ($lvl) + ' = ' + ($format) + '.async; ';
      }
      out += ' ' + ($format) + ' = ' + ($format) + '.validate; } if (  ';
      if ($isData) {
        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'string\') || ';
      }
      out += ' (';
      if ($unknownFormats != 'ignore') {
        out += ' (' + ($schemaValue) + ' && !' + ($format) + ' ';
        if ($allowUnknown) {
          out += ' && self._opts.unknownFormats.indexOf(' + ($schemaValue) + ') == -1 ';
        }
        out += ') || ';
      }
      out += ' (' + ($format) + ' && ' + ($formatType) + ' == \'' + ($ruleType) + '\' && !(typeof ' + ($format) + ' == \'function\' ? ';
      if (it.async) {
        out += ' (async' + ($lvl) + ' ? ' + (it.yieldAwait) + ' ' + ($format) + '(' + ($data) + ') : ' + ($format) + '(' + ($data) + ')) ';
      } else {
        out += ' ' + ($format) + '(' + ($data) + ') ';
      }
      out += ' : ' + ($format) + '.test(' + ($data) + '))))) {';
    } else {
      var $format = it.formats[$schema];
      if (!$format) {
        if ($unknownFormats == 'ignore') {
          it.logger.warn('unknown format "' + $schema + '" ignored in schema at path "' + it.errSchemaPath + '"');
          if ($breakOnError) {
            out += ' if (true) { ';
          }
          return out;
        } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {
          if ($breakOnError) {
            out += ' if (true) { ';
          }
          return out;
        } else {
          throw new Error('unknown format "' + $schema + '" is used in schema at path "' + it.errSchemaPath + '"');
        }
      }
      var $isObject = typeof $format == 'object' && !($format instanceof RegExp) && $format.validate;
      var $formatType = $isObject && $format.type || 'string';
      if ($isObject) {
        var $async = $format.async === true;
        $format = $format.validate;
      }
      if ($formatType != $ruleType) {
        if ($breakOnError) {
          out += ' if (true) { ';
        }
        return out;
      }
      if ($async) {
        if (!it.async) { throw new Error('async format in sync schema'); }
        var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';
        out += ' if (!(' + (it.yieldAwait) + ' ' + ($formatRef) + '(' + ($data) + '))) { ';
      } else {
        out += ' if (! ';
        var $formatRef = 'formats' + it.util.getProperty($schema);
        if ($isObject) { $formatRef += '.validate'; }
        if (typeof $format == 'function') {
          out += ' ' + ($formatRef) + '(' + ($data) + ') ';
        } else {
          out += ' ' + ($formatRef) + '.test(' + ($data) + ') ';
        }
        out += ') { ';
      }
    }
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ('format') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { format:  ';
      if ($isData) {
        out += '' + ($schemaValue);
      } else {
        out += '' + (it.util.toQuotedString($schema));
      }
      out += '  } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should match format "';
        if ($isData) {
          out += '\' + ' + ($schemaValue) + ' + \'';
        } else {
          out += '' + (it.util.escapeQuotes($schema));
        }
        out += '"\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema:  ';
        if ($isData) {
          out += 'validate.schema' + ($schemaPath);
        } else {
          out += '' + (it.util.toQuotedString($schema));
        }
        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' } ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  };

  var items = function generate_items(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $errs = 'errs__' + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    var $idx = 'i' + $lvl,
      $dataNxt = $it.dataLevel = it.dataLevel + 1,
      $nextData = 'data' + $dataNxt,
      $currentBaseId = it.baseId;
    out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
    if (Array.isArray($schema)) {
      var $additionalItems = it.schema.additionalItems;
      if ($additionalItems === false) {
        out += ' ' + ($valid) + ' = ' + ($data) + '.length <= ' + ($schema.length) + '; ';
        var $currErrSchemaPath = $errSchemaPath;
        $errSchemaPath = it.errSchemaPath + '/additionalItems';
        out += '  if (!' + ($valid) + ') {   ';
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ('additionalItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schema.length) + ' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'should NOT have more than ' + ($schema.length) + ' items\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + (__err) + ']); ';
          } else {
            out += ' validate.errors = [' + (__err) + ']; return false; ';
          }
        } else {
          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        out += ' } ';
        $errSchemaPath = $currErrSchemaPath;
        if ($breakOnError) {
          $closingBraces += '}';
          out += ' else { ';
        }
      }
      var arr1 = $schema;
      if (arr1) {
        var $sch, $i = -1,
          l1 = arr1.length - 1;
        while ($i < l1) {
          $sch = arr1[$i += 1];
          if (it.util.schemaHasRules($sch, it.RULES.all)) {
            out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($i) + ') { ';
            var $passData = $data + '[' + $i + ']';
            $it.schema = $sch;
            $it.schemaPath = $schemaPath + '[' + $i + ']';
            $it.errSchemaPath = $errSchemaPath + '/' + $i;
            $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);
            $it.dataPathArr[$dataNxt] = $i;
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
            } else {
              out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
            }
            out += ' }  ';
            if ($breakOnError) {
              out += ' if (' + ($nextValid) + ') { ';
              $closingBraces += '}';
            }
          }
        }
      }
      if (typeof $additionalItems == 'object' && it.util.schemaHasRules($additionalItems, it.RULES.all)) {
        $it.schema = $additionalItems;
        $it.schemaPath = it.schemaPath + '.additionalItems';
        $it.errSchemaPath = it.errSchemaPath + '/additionalItems';
        out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($schema.length) + ') {  for (var ' + ($idx) + ' = ' + ($schema.length) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
        $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
        var $passData = $data + '[' + $idx + ']';
        $it.dataPathArr[$dataNxt] = $idx;
        var $code = it.validate($it);
        $it.baseId = $currentBaseId;
        if (it.util.varOccurences($code, $nextData) < 2) {
          out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
        } else {
          out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
        }
        if ($breakOnError) {
          out += ' if (!' + ($nextValid) + ') break; ';
        }
        out += ' } }  ';
        if ($breakOnError) {
          out += ' if (' + ($nextValid) + ') { ';
          $closingBraces += '}';
        }
      }
    } else if (it.util.schemaHasRules($schema, it.RULES.all)) {
      $it.schema = $schema;
      $it.schemaPath = $schemaPath;
      $it.errSchemaPath = $errSchemaPath;
      out += '  for (var ' + ($idx) + ' = ' + (0) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
      var $passData = $data + '[' + $idx + ']';
      $it.dataPathArr[$dataNxt] = $idx;
      var $code = it.validate($it);
      $it.baseId = $currentBaseId;
      if (it.util.varOccurences($code, $nextData) < 2) {
        out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
      } else {
        out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
      }
      if ($breakOnError) {
        out += ' if (!' + ($nextValid) + ') break; ';
      }
      out += ' }';
    }
    if ($breakOnError) {
      out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
    }
    out = it.util.cleanUpCode(out);
    return out;
  };

  var _limit = function generate__limit(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = 'data' + ($dataLvl || '');
    var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
      $schemaValue = 'schema' + $lvl;
    } else {
      $schemaValue = $schema;
    }
    var $isMax = $keyword == 'maximum',
      $exclusiveKeyword = $isMax ? 'exclusiveMaximum' : 'exclusiveMinimum',
      $schemaExcl = it.schema[$exclusiveKeyword],
      $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,
      $op = $isMax ? '<' : '>',
      $notOp = $isMax ? '>' : '<',
      $errorKeyword = undefined;
    if ($isDataExcl) {
      var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),
        $exclusive = 'exclusive' + $lvl,
        $exclType = 'exclType' + $lvl,
        $exclIsNumber = 'exclIsNumber' + $lvl,
        $opExpr = 'op' + $lvl,
        $opStr = '\' + ' + $opExpr + ' + \'';
      out += ' var schemaExcl' + ($lvl) + ' = ' + ($schemaValueExcl) + '; ';
      $schemaValueExcl = 'schemaExcl' + $lvl;
      out += ' var ' + ($exclusive) + '; var ' + ($exclType) + ' = typeof ' + ($schemaValueExcl) + '; if (' + ($exclType) + ' != \'boolean\' && ' + ($exclType) + ' != \'undefined\' && ' + ($exclType) + ' != \'number\') { ';
      var $errorKeyword = $exclusiveKeyword;
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ($errorKeyword || '_exclusiveLimit') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
        if (it.opts.messages !== false) {
          out += ' , message: \'' + ($exclusiveKeyword) + ' should be boolean\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += ' } else if ( ';
      if ($isData) {
        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
      }
      out += ' ' + ($exclType) + ' == \'number\' ? ( (' + ($exclusive) + ' = ' + ($schemaValue) + ' === undefined || ' + ($schemaValueExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ') ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValueExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) : ( (' + ($exclusive) + ' = ' + ($schemaValueExcl) + ' === true) ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValue) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { var op' + ($lvl) + ' = ' + ($exclusive) + ' ? \'' + ($op) + '\' : \'' + ($op) + '=\';';
    } else {
      var $exclIsNumber = typeof $schemaExcl == 'number',
        $opStr = $op;
      if ($exclIsNumber && $isData) {
        var $opExpr = '\'' + $opStr + '\'';
        out += ' if ( ';
        if ($isData) {
          out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
        }
        out += ' ( ' + ($schemaValue) + ' === undefined || ' + ($schemaExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ' ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { ';
      } else {
        if ($exclIsNumber && $schema === undefined) {
          $exclusive = true;
          $errorKeyword = $exclusiveKeyword;
          $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
          $schemaValue = $schemaExcl;
          $notOp += '=';
        } else {
          if ($exclIsNumber) { $schemaValue = Math[$isMax ? 'min' : 'max']($schemaExcl, $schema); }
          if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {
            $exclusive = true;
            $errorKeyword = $exclusiveKeyword;
            $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
            $notOp += '=';
          } else {
            $exclusive = false;
            $opStr += '=';
          }
        }
        var $opExpr = '\'' + $opStr + '\'';
        out += ' if ( ';
        if ($isData) {
          out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
        }
        out += ' ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' || ' + ($data) + ' !== ' + ($data) + ') { ';
      }
    }
    $errorKeyword = $errorKeyword || $keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ($errorKeyword || '_limit') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { comparison: ' + ($opExpr) + ', limit: ' + ($schemaValue) + ', exclusive: ' + ($exclusive) + ' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should be ' + ($opStr) + ' ';
        if ($isData) {
          out += '\' + ' + ($schemaValue);
        } else {
          out += '' + ($schemaValue) + '\'';
        }
      }
      if (it.opts.verbose) {
        out += ' , schema:  ';
        if ($isData) {
          out += 'validate.schema' + ($schemaPath);
        } else {
          out += '' + ($schema);
        }
        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' } ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  };

  var _limitItems = function generate__limitItems(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = 'data' + ($dataLvl || '');
    var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
      $schemaValue = 'schema' + $lvl;
    } else {
      $schemaValue = $schema;
    }
    var $op = $keyword == 'maxItems' ? '>' : '<';
    out += 'if ( ';
    if ($isData) {
      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
    }
    out += ' ' + ($data) + '.length ' + ($op) + ' ' + ($schemaValue) + ') { ';
    var $errorKeyword = $keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ($errorKeyword || '_limitItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT have ';
        if ($keyword == 'maxItems') {
          out += 'more';
        } else {
          out += 'less';
        }
        out += ' than ';
        if ($isData) {
          out += '\' + ' + ($schemaValue) + ' + \'';
        } else {
          out += '' + ($schema);
        }
        out += ' items\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema:  ';
        if ($isData) {
          out += 'validate.schema' + ($schemaPath);
        } else {
          out += '' + ($schema);
        }
        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += '} ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  };

  var _limitLength = function generate__limitLength(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = 'data' + ($dataLvl || '');
    var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
      $schemaValue = 'schema' + $lvl;
    } else {
      $schemaValue = $schema;
    }
    var $op = $keyword == 'maxLength' ? '>' : '<';
    out += 'if ( ';
    if ($isData) {
      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
    }
    if (it.opts.unicode === false) {
      out += ' ' + ($data) + '.length ';
    } else {
      out += ' ucs2length(' + ($data) + ') ';
    }
    out += ' ' + ($op) + ' ' + ($schemaValue) + ') { ';
    var $errorKeyword = $keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ($errorKeyword || '_limitLength') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT be ';
        if ($keyword == 'maxLength') {
          out += 'longer';
        } else {
          out += 'shorter';
        }
        out += ' than ';
        if ($isData) {
          out += '\' + ' + ($schemaValue) + ' + \'';
        } else {
          out += '' + ($schema);
        }
        out += ' characters\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema:  ';
        if ($isData) {
          out += 'validate.schema' + ($schemaPath);
        } else {
          out += '' + ($schema);
        }
        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += '} ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  };

  var _limitProperties = function generate__limitProperties(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = 'data' + ($dataLvl || '');
    var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
      $schemaValue = 'schema' + $lvl;
    } else {
      $schemaValue = $schema;
    }
    var $op = $keyword == 'maxProperties' ? '>' : '<';
    out += 'if ( ';
    if ($isData) {
      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
    }
    out += ' Object.keys(' + ($data) + ').length ' + ($op) + ' ' + ($schemaValue) + ') { ';
    var $errorKeyword = $keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ($errorKeyword || '_limitProperties') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT have ';
        if ($keyword == 'maxProperties') {
          out += 'more';
        } else {
          out += 'less';
        }
        out += ' than ';
        if ($isData) {
          out += '\' + ' + ($schemaValue) + ' + \'';
        } else {
          out += '' + ($schema);
        }
        out += ' properties\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema:  ';
        if ($isData) {
          out += 'validate.schema' + ($schemaPath);
        } else {
          out += '' + ($schema);
        }
        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += '} ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  };

  var multipleOf = function generate_multipleOf(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
      $schemaValue = 'schema' + $lvl;
    } else {
      $schemaValue = $schema;
    }
    out += 'var division' + ($lvl) + ';if (';
    if ($isData) {
      out += ' ' + ($schemaValue) + ' !== undefined && ( typeof ' + ($schemaValue) + ' != \'number\' || ';
    }
    out += ' (division' + ($lvl) + ' = ' + ($data) + ' / ' + ($schemaValue) + ', ';
    if (it.opts.multipleOfPrecision) {
      out += ' Math.abs(Math.round(division' + ($lvl) + ') - division' + ($lvl) + ') > 1e-' + (it.opts.multipleOfPrecision) + ' ';
    } else {
      out += ' division' + ($lvl) + ' !== parseInt(division' + ($lvl) + ') ';
    }
    out += ' ) ';
    if ($isData) {
      out += '  )  ';
    }
    out += ' ) {   ';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ('multipleOf') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { multipleOf: ' + ($schemaValue) + ' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should be multiple of ';
        if ($isData) {
          out += '\' + ' + ($schemaValue);
        } else {
          out += '' + ($schemaValue) + '\'';
        }
      }
      if (it.opts.verbose) {
        out += ' , schema:  ';
        if ($isData) {
          out += 'validate.schema' + ($schemaPath);
        } else {
          out += '' + ($schema);
        }
        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += '} ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  };

  var not = function generate_not(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $errs = 'errs__' + $lvl;
    var $it = it.util.copy(it);
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    if (it.util.schemaHasRules($schema, it.RULES.all)) {
      $it.schema = $schema;
      $it.schemaPath = $schemaPath;
      $it.errSchemaPath = $errSchemaPath;
      out += ' var ' + ($errs) + ' = errors;  ';
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      $it.createErrors = false;
      var $allErrorsOption;
      if ($it.opts.allErrors) {
        $allErrorsOption = $it.opts.allErrors;
        $it.opts.allErrors = false;
      }
      out += ' ' + (it.validate($it)) + ' ';
      $it.createErrors = true;
      if ($allErrorsOption) { $it.opts.allErrors = $allErrorsOption; }
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += ' if (' + ($nextValid) + ') {   ';
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ('not') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should NOT be valid\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
      if (it.opts.allErrors) {
        out += ' } ';
      }
    } else {
      out += '  var err =   '; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ('not') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should NOT be valid\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      if ($breakOnError) {
        out += ' if (false) { ';
      }
    }
    return out;
  };

  var oneOf = function generate_oneOf(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $errs = 'errs__' + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    out += 'var ' + ($errs) + ' = errors;var prevValid' + ($lvl) + ' = false;var ' + ($valid) + ' = false;';
    var $currentBaseId = $it.baseId;
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var arr1 = $schema;
    if (arr1) {
      var $sch, $i = -1,
        l1 = arr1.length - 1;
      while ($i < l1) {
        $sch = arr1[$i += 1];
        if (it.util.schemaHasRules($sch, it.RULES.all)) {
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + '[' + $i + ']';
          $it.errSchemaPath = $errSchemaPath + '/' + $i;
          out += '  ' + (it.validate($it)) + ' ';
          $it.baseId = $currentBaseId;
        } else {
          out += ' var ' + ($nextValid) + ' = true; ';
        }
        if ($i) {
          out += ' if (' + ($nextValid) + ' && prevValid' + ($lvl) + ') ' + ($valid) + ' = false; else { ';
          $closingBraces += '}';
        }
        out += ' if (' + ($nextValid) + ') ' + ($valid) + ' = prevValid' + ($lvl) + ' = true;';
      }
    }
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += '' + ($closingBraces) + 'if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ('oneOf') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should match exactly one schema in oneOf\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError(vErrors); ';
      } else {
        out += ' validate.errors = vErrors; return false; ';
      }
    }
    out += '} else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; }';
    if (it.opts.allErrors) {
      out += ' } ';
    }
    return out;
  };

  var pattern = function generate_pattern(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
      $schemaValue = 'schema' + $lvl;
    } else {
      $schemaValue = $schema;
    }
    var $regexp = $isData ? '(new RegExp(' + $schemaValue + '))' : it.usePattern($schema);
    out += 'if ( ';
    if ($isData) {
      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'string\') || ';
    }
    out += ' !' + ($regexp) + '.test(' + ($data) + ') ) {   ';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ('pattern') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { pattern:  ';
      if ($isData) {
        out += '' + ($schemaValue);
      } else {
        out += '' + (it.util.toQuotedString($schema));
      }
      out += '  } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should match pattern "';
        if ($isData) {
          out += '\' + ' + ($schemaValue) + ' + \'';
        } else {
          out += '' + (it.util.escapeQuotes($schema));
        }
        out += '"\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema:  ';
        if ($isData) {
          out += 'validate.schema' + ($schemaPath);
        } else {
          out += '' + (it.util.toQuotedString($schema));
        }
        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += '} ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  };

  var properties = function generate_properties(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $errs = 'errs__' + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    var $key = 'key' + $lvl,
      $idx = 'idx' + $lvl,
      $dataNxt = $it.dataLevel = it.dataLevel + 1,
      $nextData = 'data' + $dataNxt,
      $dataProperties = 'dataProperties' + $lvl;
    var $schemaKeys = Object.keys($schema || {}),
      $pProperties = it.schema.patternProperties || {},
      $pPropertyKeys = Object.keys($pProperties),
      $aProperties = it.schema.additionalProperties,
      $someProperties = $schemaKeys.length || $pPropertyKeys.length,
      $noAdditional = $aProperties === false,
      $additionalIsSchema = typeof $aProperties == 'object' && Object.keys($aProperties).length,
      $removeAdditional = it.opts.removeAdditional,
      $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,
      $ownProperties = it.opts.ownProperties,
      $currentBaseId = it.baseId;
    var $required = it.schema.required;
    if ($required && !(it.opts.v5 && $required.$data) && $required.length < it.opts.loopRequired) { var $requiredHash = it.util.toHash($required); }
    if (it.opts.patternGroups) {
      var $pgProperties = it.schema.patternGroups || {},
        $pgPropertyKeys = Object.keys($pgProperties);
    }
    out += 'var ' + ($errs) + ' = errors;var ' + ($nextValid) + ' = true;';
    if ($ownProperties) {
      out += ' var ' + ($dataProperties) + ' = undefined;';
    }
    if ($checkAdditional) {
      if ($ownProperties) {
        out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
      } else {
        out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
      }
      if ($someProperties) {
        out += ' var isAdditional' + ($lvl) + ' = !(false ';
        if ($schemaKeys.length) {
          if ($schemaKeys.length > 5) {
            out += ' || validate.schema' + ($schemaPath) + '[' + ($key) + '] ';
          } else {
            var arr1 = $schemaKeys;
            if (arr1) {
              var $propertyKey, i1 = -1,
                l1 = arr1.length - 1;
              while (i1 < l1) {
                $propertyKey = arr1[i1 += 1];
                out += ' || ' + ($key) + ' == ' + (it.util.toQuotedString($propertyKey)) + ' ';
              }
            }
          }
        }
        if ($pPropertyKeys.length) {
          var arr2 = $pPropertyKeys;
          if (arr2) {
            var $pProperty, $i = -1,
              l2 = arr2.length - 1;
            while ($i < l2) {
              $pProperty = arr2[$i += 1];
              out += ' || ' + (it.usePattern($pProperty)) + '.test(' + ($key) + ') ';
            }
          }
        }
        if (it.opts.patternGroups && $pgPropertyKeys.length) {
          var arr3 = $pgPropertyKeys;
          if (arr3) {
            var $pgProperty, $i = -1,
              l3 = arr3.length - 1;
            while ($i < l3) {
              $pgProperty = arr3[$i += 1];
              out += ' || ' + (it.usePattern($pgProperty)) + '.test(' + ($key) + ') ';
            }
          }
        }
        out += ' ); if (isAdditional' + ($lvl) + ') { ';
      }
      if ($removeAdditional == 'all') {
        out += ' delete ' + ($data) + '[' + ($key) + ']; ';
      } else {
        var $currentErrorPath = it.errorPath;
        var $additionalProperty = '\' + ' + $key + ' + \'';
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
        }
        if ($noAdditional) {
          if ($removeAdditional) {
            out += ' delete ' + ($data) + '[' + ($key) + ']; ';
          } else {
            out += ' ' + ($nextValid) + ' = false; ';
            var $currErrSchemaPath = $errSchemaPath;
            $errSchemaPath = it.errSchemaPath + '/additionalProperties';
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out += ' { keyword: \'' + ('additionalProperties') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { additionalProperty: \'' + ($additionalProperty) + '\' } ';
              if (it.opts.messages !== false) {
                out += ' , message: \'should NOT have additional properties\' ';
              }
              if (it.opts.verbose) {
                out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
              if (it.async) {
                out += ' throw new ValidationError([' + (__err) + ']); ';
              } else {
                out += ' validate.errors = [' + (__err) + ']; return false; ';
              }
            } else {
              out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
            $errSchemaPath = $currErrSchemaPath;
            if ($breakOnError) {
              out += ' break; ';
            }
          }
        } else if ($additionalIsSchema) {
          if ($removeAdditional == 'failing') {
            out += ' var ' + ($errs) + ' = errors;  ';
            var $wasComposite = it.compositeRule;
            it.compositeRule = $it.compositeRule = true;
            $it.schema = $aProperties;
            $it.schemaPath = it.schemaPath + '.additionalProperties';
            $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
            $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
            var $passData = $data + '[' + $key + ']';
            $it.dataPathArr[$dataNxt] = $key;
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
            } else {
              out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
            }
            out += ' if (!' + ($nextValid) + ') { errors = ' + ($errs) + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + ($data) + '[' + ($key) + ']; }  ';
            it.compositeRule = $it.compositeRule = $wasComposite;
          } else {
            $it.schema = $aProperties;
            $it.schemaPath = it.schemaPath + '.additionalProperties';
            $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
            $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
            var $passData = $data + '[' + $key + ']';
            $it.dataPathArr[$dataNxt] = $key;
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
            } else {
              out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
            }
            if ($breakOnError) {
              out += ' if (!' + ($nextValid) + ') break; ';
            }
          }
        }
        it.errorPath = $currentErrorPath;
      }
      if ($someProperties) {
        out += ' } ';
      }
      out += ' }  ';
      if ($breakOnError) {
        out += ' if (' + ($nextValid) + ') { ';
        $closingBraces += '}';
      }
    }
    var $useDefaults = it.opts.useDefaults && !it.compositeRule;
    if ($schemaKeys.length) {
      var arr4 = $schemaKeys;
      if (arr4) {
        var $propertyKey, i4 = -1,
          l4 = arr4.length - 1;
        while (i4 < l4) {
          $propertyKey = arr4[i4 += 1];
          var $sch = $schema[$propertyKey];
          if (it.util.schemaHasRules($sch, it.RULES.all)) {
            var $prop = it.util.getProperty($propertyKey),
              $passData = $data + $prop,
              $hasDefault = $useDefaults && $sch.default !== undefined;
            $it.schema = $sch;
            $it.schemaPath = $schemaPath + $prop;
            $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);
            $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
            $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              $code = it.util.varReplace($code, $nextData, $passData);
              var $useData = $passData;
            } else {
              var $useData = $nextData;
              out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ';
            }
            if ($hasDefault) {
              out += ' ' + ($code) + ' ';
            } else {
              if ($requiredHash && $requiredHash[$propertyKey]) {
                out += ' if ( ' + ($useData) + ' === undefined ';
                if ($ownProperties) {
                  out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                }
                out += ') { ' + ($nextValid) + ' = false; ';
                var $currentErrorPath = it.errorPath,
                  $currErrSchemaPath = $errSchemaPath,
                  $missingProperty = it.util.escapeQuotes($propertyKey);
                if (it.opts._errorDataPathProperty) {
                  it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
                }
                $errSchemaPath = it.errSchemaPath + '/required';
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'';
                    if (it.opts._errorDataPathProperty) {
                      out += 'is a required property';
                    } else {
                      out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                    }
                    out += '\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError([' + (__err) + ']); ';
                  } else {
                    out += ' validate.errors = [' + (__err) + ']; return false; ';
                  }
                } else {
                  out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                $errSchemaPath = $currErrSchemaPath;
                it.errorPath = $currentErrorPath;
                out += ' } else { ';
              } else {
                if ($breakOnError) {
                  out += ' if ( ' + ($useData) + ' === undefined ';
                  if ($ownProperties) {
                    out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                  }
                  out += ') { ' + ($nextValid) + ' = true; } else { ';
                } else {
                  out += ' if (' + ($useData) + ' !== undefined ';
                  if ($ownProperties) {
                    out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                  }
                  out += ' ) { ';
                }
              }
              out += ' ' + ($code) + ' } ';
            }
          }
          if ($breakOnError) {
            out += ' if (' + ($nextValid) + ') { ';
            $closingBraces += '}';
          }
        }
      }
    }
    if ($pPropertyKeys.length) {
      var arr5 = $pPropertyKeys;
      if (arr5) {
        var $pProperty, i5 = -1,
          l5 = arr5.length - 1;
        while (i5 < l5) {
          $pProperty = arr5[i5 += 1];
          var $sch = $pProperties[$pProperty];
          if (it.util.schemaHasRules($sch, it.RULES.all)) {
            $it.schema = $sch;
            $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);
            $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);
            if ($ownProperties) {
              out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
            } else {
              out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
            }
            out += ' if (' + (it.usePattern($pProperty)) + '.test(' + ($key) + ')) { ';
            $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
            var $passData = $data + '[' + $key + ']';
            $it.dataPathArr[$dataNxt] = $key;
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
            } else {
              out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
            }
            if ($breakOnError) {
              out += ' if (!' + ($nextValid) + ') break; ';
            }
            out += ' } ';
            if ($breakOnError) {
              out += ' else ' + ($nextValid) + ' = true; ';
            }
            out += ' }  ';
            if ($breakOnError) {
              out += ' if (' + ($nextValid) + ') { ';
              $closingBraces += '}';
            }
          }
        }
      }
    }
    if (it.opts.patternGroups && $pgPropertyKeys.length) {
      var arr6 = $pgPropertyKeys;
      if (arr6) {
        var $pgProperty, i6 = -1,
          l6 = arr6.length - 1;
        while (i6 < l6) {
          $pgProperty = arr6[i6 += 1];
          var $pgSchema = $pgProperties[$pgProperty],
            $sch = $pgSchema.schema;
          if (it.util.schemaHasRules($sch, it.RULES.all)) {
            $it.schema = $sch;
            $it.schemaPath = it.schemaPath + '.patternGroups' + it.util.getProperty($pgProperty) + '.schema';
            $it.errSchemaPath = it.errSchemaPath + '/patternGroups/' + it.util.escapeFragment($pgProperty) + '/schema';
            out += ' var pgPropCount' + ($lvl) + ' = 0;  ';
            if ($ownProperties) {
              out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
            } else {
              out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
            }
            out += ' if (' + (it.usePattern($pgProperty)) + '.test(' + ($key) + ')) { pgPropCount' + ($lvl) + '++; ';
            $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
            var $passData = $data + '[' + $key + ']';
            $it.dataPathArr[$dataNxt] = $key;
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
            } else {
              out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
            }
            if ($breakOnError) {
              out += ' if (!' + ($nextValid) + ') break; ';
            }
            out += ' } ';
            if ($breakOnError) {
              out += ' else ' + ($nextValid) + ' = true; ';
            }
            out += ' }  ';
            if ($breakOnError) {
              out += ' if (' + ($nextValid) + ') { ';
              $closingBraces += '}';
            }
            var $pgMin = $pgSchema.minimum,
              $pgMax = $pgSchema.maximum;
            if ($pgMin !== undefined || $pgMax !== undefined) {
              out += ' var ' + ($valid) + ' = true; ';
              var $currErrSchemaPath = $errSchemaPath;
              if ($pgMin !== undefined) {
                var $limit = $pgMin,
                  $reason = 'minimum',
                  $moreOrLess = 'less';
                out += ' ' + ($valid) + ' = pgPropCount' + ($lvl) + ' >= ' + ($pgMin) + '; ';
                $errSchemaPath = it.errSchemaPath + '/patternGroups/minimum';
                out += '  if (!' + ($valid) + ') {   ';
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ('patternGroups') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { reason: \'' + ($reason) + '\', limit: ' + ($limit) + ', pattern: \'' + (it.util.escapeQuotes($pgProperty)) + '\' } ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should NOT have ' + ($moreOrLess) + ' than ' + ($limit) + ' properties matching pattern "' + (it.util.escapeQuotes($pgProperty)) + '"\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError([' + (__err) + ']); ';
                  } else {
                    out += ' validate.errors = [' + (__err) + ']; return false; ';
                  }
                } else {
                  out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                out += ' } ';
                if ($pgMax !== undefined) {
                  out += ' else ';
                }
              }
              if ($pgMax !== undefined) {
                var $limit = $pgMax,
                  $reason = 'maximum',
                  $moreOrLess = 'more';
                out += ' ' + ($valid) + ' = pgPropCount' + ($lvl) + ' <= ' + ($pgMax) + '; ';
                $errSchemaPath = it.errSchemaPath + '/patternGroups/maximum';
                out += '  if (!' + ($valid) + ') {   ';
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ('patternGroups') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { reason: \'' + ($reason) + '\', limit: ' + ($limit) + ', pattern: \'' + (it.util.escapeQuotes($pgProperty)) + '\' } ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should NOT have ' + ($moreOrLess) + ' than ' + ($limit) + ' properties matching pattern "' + (it.util.escapeQuotes($pgProperty)) + '"\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError([' + (__err) + ']); ';
                  } else {
                    out += ' validate.errors = [' + (__err) + ']; return false; ';
                  }
                } else {
                  out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                out += ' } ';
              }
              $errSchemaPath = $currErrSchemaPath;
              if ($breakOnError) {
                out += ' if (' + ($valid) + ') { ';
                $closingBraces += '}';
              }
            }
          }
        }
      }
    }
    if ($breakOnError) {
      out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
    }
    out = it.util.cleanUpCode(out);
    return out;
  };

  var propertyNames = function generate_propertyNames(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $errs = 'errs__' + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    if (it.util.schemaHasRules($schema, it.RULES.all)) {
      $it.schema = $schema;
      $it.schemaPath = $schemaPath;
      $it.errSchemaPath = $errSchemaPath;
      var $key = 'key' + $lvl,
        $idx = 'idx' + $lvl,
        $i = 'i' + $lvl,
        $invalidName = '\' + ' + $key + ' + \'',
        $dataNxt = $it.dataLevel = it.dataLevel + 1,
        $nextData = 'data' + $dataNxt,
        $dataProperties = 'dataProperties' + $lvl,
        $ownProperties = it.opts.ownProperties,
        $currentBaseId = it.baseId;
      out += ' var ' + ($errs) + ' = errors; ';
      if ($ownProperties) {
        out += ' var ' + ($dataProperties) + ' = undefined; ';
      }
      if ($ownProperties) {
        out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
      } else {
        out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
      }
      out += ' var startErrs' + ($lvl) + ' = errors; ';
      var $passData = $key;
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      var $code = it.validate($it);
      $it.baseId = $currentBaseId;
      if (it.util.varOccurences($code, $nextData) < 2) {
        out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
      } else {
        out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
      }
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += ' if (!' + ($nextValid) + ') { for (var ' + ($i) + '=startErrs' + ($lvl) + '; ' + ($i) + '<errors; ' + ($i) + '++) { vErrors[' + ($i) + '].propertyName = ' + ($key) + '; }   var err =   '; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ('propertyNames') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { propertyName: \'' + ($invalidName) + '\' } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'property name \\\'' + ($invalidName) + '\\\' is invalid\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError(vErrors); ';
        } else {
          out += ' validate.errors = vErrors; return false; ';
        }
      }
      if ($breakOnError) {
        out += ' break; ';
      }
      out += ' } }';
    }
    if ($breakOnError) {
      out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
    }
    out = it.util.cleanUpCode(out);
    return out;
  };

  var required = function generate_required(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $isData = it.opts.$data && $schema && $schema.$data;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    } else {
    }
    var $vSchema = 'schema' + $lvl;
    if (!$isData) {
      if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {
        var $required = [];
        var arr1 = $schema;
        if (arr1) {
          var $property, i1 = -1,
            l1 = arr1.length - 1;
          while (i1 < l1) {
            $property = arr1[i1 += 1];
            var $propertySch = it.schema.properties[$property];
            if (!($propertySch && it.util.schemaHasRules($propertySch, it.RULES.all))) {
              $required[$required.length] = $property;
            }
          }
        }
      } else {
        var $required = $schema;
      }
    }
    if ($isData || $required.length) {
      var $currentErrorPath = it.errorPath,
        $loopRequired = $isData || $required.length >= it.opts.loopRequired,
        $ownProperties = it.opts.ownProperties;
      if ($breakOnError) {
        out += ' var missing' + ($lvl) + '; ';
        if ($loopRequired) {
          if (!$isData) {
            out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';
          }
          var $i = 'i' + $lvl,
            $propertyPath = 'schema' + $lvl + '[' + $i + ']',
            $missingProperty = '\' + ' + $propertyPath + ' + \'';
          if (it.opts._errorDataPathProperty) {
            it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
          }
          out += ' var ' + ($valid) + ' = true; ';
          if ($isData) {
            out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';
          }
          out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { ' + ($valid) + ' = ' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] !== undefined ';
          if ($ownProperties) {
            out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';
          }
          out += '; if (!' + ($valid) + ') break; } ';
          if ($isData) {
            out += '  }  ';
          }
          out += '  if (!' + ($valid) + ') {   ';
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = ''; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \'';
              if (it.opts._errorDataPathProperty) {
                out += 'is a required property';
              } else {
                out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
              }
              out += '\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
            if (it.async) {
              out += ' throw new ValidationError([' + (__err) + ']); ';
            } else {
              out += ' validate.errors = [' + (__err) + ']; return false; ';
            }
          } else {
            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
          out += ' } else { ';
        } else {
          out += ' if ( ';
          var arr2 = $required;
          if (arr2) {
            var $propertyKey, $i = -1,
              l2 = arr2.length - 1;
            while ($i < l2) {
              $propertyKey = arr2[$i += 1];
              if ($i) {
                out += ' || ';
              }
              var $prop = it.util.getProperty($propertyKey),
                $useData = $data + $prop;
              out += ' ( ( ' + ($useData) + ' === undefined ';
              if ($ownProperties) {
                out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
              }
              out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';
            }
          }
          out += ') {  ';
          var $propertyPath = 'missing' + $lvl,
            $missingProperty = '\' + ' + $propertyPath + ' + \'';
          if (it.opts._errorDataPathProperty) {
            it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
          }
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = ''; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \'';
              if (it.opts._errorDataPathProperty) {
                out += 'is a required property';
              } else {
                out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
              }
              out += '\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
            if (it.async) {
              out += ' throw new ValidationError([' + (__err) + ']); ';
            } else {
              out += ' validate.errors = [' + (__err) + ']; return false; ';
            }
          } else {
            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
          out += ' } else { ';
        }
      } else {
        if ($loopRequired) {
          if (!$isData) {
            out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';
          }
          var $i = 'i' + $lvl,
            $propertyPath = 'schema' + $lvl + '[' + $i + ']',
            $missingProperty = '\' + ' + $propertyPath + ' + \'';
          if (it.opts._errorDataPathProperty) {
            it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
          }
          if ($isData) {
            out += ' if (' + ($vSchema) + ' && !Array.isArray(' + ($vSchema) + ')) {  var err =   '; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
              if (it.opts.messages !== false) {
                out += ' , message: \'';
                if (it.opts._errorDataPathProperty) {
                  out += 'is a required property';
                } else {
                  out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                }
                out += '\' ';
              }
              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (' + ($vSchema) + ' !== undefined) { ';
          }
          out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { if (' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] === undefined ';
          if ($ownProperties) {
            out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';
          }
          out += ') {  var err =   '; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \'';
              if (it.opts._errorDataPathProperty) {
                out += 'is a required property';
              } else {
                out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
              }
              out += '\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ';
          if ($isData) {
            out += '  }  ';
          }
        } else {
          var arr3 = $required;
          if (arr3) {
            var $propertyKey, i3 = -1,
              l3 = arr3.length - 1;
            while (i3 < l3) {
              $propertyKey = arr3[i3 += 1];
              var $prop = it.util.getProperty($propertyKey),
                $missingProperty = it.util.escapeQuotes($propertyKey),
                $useData = $data + $prop;
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
              }
              out += ' if ( ' + ($useData) + ' === undefined ';
              if ($ownProperties) {
                out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
              }
              out += ') {  var err =   '; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'';
                  if (it.opts._errorDataPathProperty) {
                    out += 'is a required property';
                  } else {
                    out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                  }
                  out += '\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
            }
          }
        }
      }
      it.errorPath = $currentErrorPath;
    } else if ($breakOnError) {
      out += ' if (true) {';
    }
    return out;
  };

  var uniqueItems = function generate_uniqueItems(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
      $schemaValue = 'schema' + $lvl;
    } else {
      $schemaValue = $schema;
    }
    if (($schema || $isData) && it.opts.uniqueItems !== false) {
      if ($isData) {
        out += ' var ' + ($valid) + '; if (' + ($schemaValue) + ' === false || ' + ($schemaValue) + ' === undefined) ' + ($valid) + ' = true; else if (typeof ' + ($schemaValue) + ' != \'boolean\') ' + ($valid) + ' = false; else { ';
      }
      out += ' var ' + ($valid) + ' = true; if (' + ($data) + '.length > 1) { var i = ' + ($data) + '.length, j; outer: for (;i--;) { for (j = i; j--;) { if (equal(' + ($data) + '[i], ' + ($data) + '[j])) { ' + ($valid) + ' = false; break outer; } } } } ';
      if ($isData) {
        out += '  }  ';
      }
      out += ' if (!' + ($valid) + ') {   ';
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ('uniqueItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { i: i, j: j } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should NOT have duplicate items (items ## \' + j + \' and \' + i + \' are identical)\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema:  ';
          if ($isData) {
            out += 'validate.schema' + ($schemaPath);
          } else {
            out += '' + ($schema);
          }
          out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += ' } ';
      if ($breakOnError) {
        out += ' else { ';
      }
    } else {
      if ($breakOnError) {
        out += ' if (true) { ';
      }
    }
    return out;
  };

  //all requires must be explicit because browserify won't work with dynamic requires
  var _rules = {
    '$ref': ref$1,
    allOf: allOf,
    anyOf: anyOf,
    const: _const,
    contains: contains,
    dependencies: dependencies$2,
    'enum': _enum,
    format: format$2,
    items: items,
    maximum: _limit,
    minimum: _limit,
    maxItems: _limitItems,
    minItems: _limitItems,
    maxLength: _limitLength,
    minLength: _limitLength,
    maxProperties: _limitProperties,
    minProperties: _limitProperties,
    multipleOf: multipleOf,
    not: not,
    oneOf: oneOf,
    pattern: pattern,
    properties: properties,
    propertyNames: propertyNames,
    required: required,
    uniqueItems: uniqueItems,
    validate: validate$1
  };

  var toHash$1 = util$4.toHash;

  var rules = function rules() {
    var RULES = [
      { type: 'number',
        rules: [ { 'maximum': ['exclusiveMaximum'] },
                 { 'minimum': ['exclusiveMinimum'] }, 'multipleOf', 'format'] },
      { type: 'string',
        rules: [ 'maxLength', 'minLength', 'pattern', 'format' ] },
      { type: 'array',
        rules: [ 'maxItems', 'minItems', 'uniqueItems', 'contains', 'items' ] },
      { type: 'object',
        rules: [ 'maxProperties', 'minProperties', 'required', 'dependencies', 'propertyNames',
                 { 'properties': ['additionalProperties', 'patternProperties'] } ] },
      { rules: [ '$ref', 'const', 'enum', 'not', 'anyOf', 'oneOf', 'allOf' ] }
    ];

    var ALL = [ 'type' ];
    var KEYWORDS = [
      'additionalItems', '$schema', '$id', 'id', 'title',
      'description', 'default', 'definitions'
    ];
    var TYPES = [ 'number', 'integer', 'string', 'array', 'object', 'boolean', 'null' ];
    RULES.all = toHash$1(ALL);
    RULES.types = toHash$1(TYPES);

    RULES.forEach(function (group) {
      group.rules = group.rules.map(function (keyword) {
        var implKeywords;
        if (typeof keyword == 'object') {
          var key = Object.keys(keyword)[0];
          implKeywords = keyword[key];
          keyword = key;
          implKeywords.forEach(function (k) {
            ALL.push(k);
            RULES.all[k] = true;
          });
        }
        ALL.push(keyword);
        var rule = RULES.all[keyword] = {
          keyword: keyword,
          code: _rules[keyword],
          implements: implKeywords
        };
        return rule;
      });

      if (group.type) { RULES.types[group.type] = group; }
    });

    RULES.keywords = toHash$1(ALL.concat(KEYWORDS));
    RULES.custom = {};

    return RULES;
  };

  var KEYWORDS = [
    'multipleOf',
    'maximum',
    'exclusiveMaximum',
    'minimum',
    'exclusiveMinimum',
    'maxLength',
    'minLength',
    'pattern',
    'additionalItems',
    'maxItems',
    'minItems',
    'uniqueItems',
    'maxProperties',
    'minProperties',
    'required',
    'additionalProperties',
    'enum',
    'format',
    'const'
  ];

  var $data = function (metaSchema, keywordsJsonPointers) {
    for (var i=0; i<keywordsJsonPointers.length; i++) {
      metaSchema = JSON.parse(JSON.stringify(metaSchema));
      var segments = keywordsJsonPointers[i].split('/');
      var keywords = metaSchema;
      var j;
      for (j=1; j<segments.length; j++)
        { keywords = keywords[segments[j]]; }

      for (j=0; j<KEYWORDS.length; j++) {
        var key = KEYWORDS[j];
        var schema = keywords[key];
        if (schema) {
          keywords[key] = {
            anyOf: [
              schema,
              { $ref: 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/$data.json#' }
            ]
          };
        }
      }
    }

    return metaSchema;
  };

  var META_SCHEMA_ID = 'http://json-schema.org/draft-06/schema';

  var patternGroups = function (ajv) {
    var defaultMeta = ajv._opts.defaultMeta;
    var metaSchemaRef = typeof defaultMeta == 'string'
                        ? { $ref: defaultMeta }
                        : ajv.getSchema(META_SCHEMA_ID)
                          ? { $ref: META_SCHEMA_ID }
                          : {};

    ajv.addKeyword('patternGroups', {
      // implemented in properties.jst
      metaSchema: {
        type: 'object',
        additionalProperties: {
          type: 'object',
          required: [ 'schema' ],
          properties: {
            maximum: {
              type: 'integer',
              minimum: 0
            },
            minimum: {
              type: 'integer',
              minimum: 0
            },
            schema: metaSchemaRef
          },
          additionalProperties: false
        }
      }
    });
    ajv.RULES.all.properties.implements.push('patternGroups');
  };

  var MissingRefError$1 = error_classes.MissingRef;

  var async$1 = compileAsync;


  /**
   * Creates validating function for passed schema with asynchronous loading of missing schemas.
   * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.
   * @this  Ajv
   * @param {Object}   schema schema object
   * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped
   * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.
   * @return {Promise} promise that resolves with a validating function.
   */
  function compileAsync(schema, meta, callback) {
    /* eslint no-shadow: 0 */
    /* global Promise */
    /* jshint validthis: true */
    var self = this;
    if (typeof this._opts.loadSchema != 'function')
      { throw new Error('options.loadSchema should be a function'); }

    if (typeof meta == 'function') {
      callback = meta;
      meta = undefined;
    }

    var p = loadMetaSchemaOf(schema).then(function () {
      var schemaObj = self._addSchema(schema, undefined, meta);
      return schemaObj.validate || _compileAsync(schemaObj);
    });

    if (callback) {
      p.then(
        function(v) { callback(null, v); },
        callback
      );
    }

    return p;


    function loadMetaSchemaOf(sch) {
      var $schema = sch.$schema;
      return $schema && !self.getSchema($schema)
              ? compileAsync.call(self, { $ref: $schema }, true)
              : Promise.resolve();
    }


    function _compileAsync(schemaObj) {
      try { return self._compile(schemaObj); }
      catch(e) {
        if (e instanceof MissingRefError$1) { return loadMissingSchema(e); }
        throw e;
      }


      function loadMissingSchema(e) {
        var ref = e.missingSchema;
        if (added(ref)) { throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved'); }

        var schemaPromise = self._loadingSchemas[ref];
        if (!schemaPromise) {
          schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);
          schemaPromise.then(removePromise, removePromise);
        }

        return schemaPromise.then(function (sch) {
          if (!added(ref)) {
            return loadMetaSchemaOf(sch).then(function () {
              if (!added(ref)) { self.addSchema(sch, ref, undefined, meta); }
            });
          }
        }).then(function() {
          return _compileAsync(schemaObj);
        });

        function removePromise() {
          delete self._loadingSchemas[ref];
        }

        function added(ref) {
          return self._refs[ref] || self._schemas[ref];
        }
      }
    }
  }

  var custom = function generate_custom(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $errs = 'errs__' + $lvl;
    var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
      $schemaValue = 'schema' + $lvl;
    } else {
      $schemaValue = $schema;
    }
    var $rule = this,
      $definition = 'definition' + $lvl,
      $rDef = $rule.definition,
      $closingBraces = '';
    var $compile, $inline, $macro, $ruleValidate, $validateCode;
    if ($isData && $rDef.$data) {
      $validateCode = 'keywordValidate' + $lvl;
      var $validateSchema = $rDef.validateSchema;
      out += ' var ' + ($definition) + ' = RULES.custom[\'' + ($keyword) + '\'].definition; var ' + ($validateCode) + ' = ' + ($definition) + '.validate;';
    } else {
      $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);
      if (!$ruleValidate) { return; }
      $schemaValue = 'validate.schema' + $schemaPath;
      $validateCode = $ruleValidate.code;
      $compile = $rDef.compile;
      $inline = $rDef.inline;
      $macro = $rDef.macro;
    }
    var $ruleErrs = $validateCode + '.errors',
      $i = 'i' + $lvl,
      $ruleErr = 'ruleErr' + $lvl,
      $asyncKeyword = $rDef.async;
    if ($asyncKeyword && !it.async) { throw new Error('async keyword in sync schema'); }
    if (!($inline || $macro)) {
      out += '' + ($ruleErrs) + ' = null;';
    }
    out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
    if ($isData && $rDef.$data) {
      $closingBraces += '}';
      out += ' if (' + ($schemaValue) + ' === undefined) { ' + ($valid) + ' = true; } else { ';
      if ($validateSchema) {
        $closingBraces += '}';
        out += ' ' + ($valid) + ' = ' + ($definition) + '.validateSchema(' + ($schemaValue) + '); if (' + ($valid) + ') { ';
      }
    }
    if ($inline) {
      if ($rDef.statements) {
        out += ' ' + ($ruleValidate.validate) + ' ';
      } else {
        out += ' ' + ($valid) + ' = ' + ($ruleValidate.validate) + '; ';
      }
    } else if ($macro) {
      var $it = it.util.copy(it);
      var $closingBraces = '';
      $it.level++;
      var $nextValid = 'valid' + $it.level;
      $it.schema = $ruleValidate.validate;
      $it.schemaPath = '';
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      var $code = it.validate($it).replace(/validate\.schema/g, $validateCode);
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += ' ' + ($code);
    } else {
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = '';
      out += '  ' + ($validateCode) + '.call( ';
      if (it.opts.passContext) {
        out += 'this';
      } else {
        out += 'self';
      }
      if ($compile || $rDef.schema === false) {
        out += ' , ' + ($data) + ' ';
      } else {
        out += ' , ' + ($schemaValue) + ' , ' + ($data) + ' , validate.schema' + (it.schemaPath) + ' ';
      }
      out += ' , (dataPath || \'\')';
      if (it.errorPath != '""') {
        out += ' + ' + (it.errorPath);
      }
      var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
        $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
      out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ' , rootData )  ';
      var def_callRuleValidate = out;
      out = $$outStack.pop();
      if ($rDef.errors === false) {
        out += ' ' + ($valid) + ' = ';
        if ($asyncKeyword) {
          out += '' + (it.yieldAwait);
        }
        out += '' + (def_callRuleValidate) + '; ';
      } else {
        if ($asyncKeyword) {
          $ruleErrs = 'customErrors' + $lvl;
          out += ' var ' + ($ruleErrs) + ' = null; try { ' + ($valid) + ' = ' + (it.yieldAwait) + (def_callRuleValidate) + '; } catch (e) { ' + ($valid) + ' = false; if (e instanceof ValidationError) ' + ($ruleErrs) + ' = e.errors; else throw e; } ';
        } else {
          out += ' ' + ($ruleErrs) + ' = null; ' + ($valid) + ' = ' + (def_callRuleValidate) + '; ';
        }
      }
    }
    if ($rDef.modifying) {
      out += ' if (' + ($parentData) + ') ' + ($data) + ' = ' + ($parentData) + '[' + ($parentDataProperty) + '];';
    }
    out += '' + ($closingBraces);
    if ($rDef.valid) {
      if ($breakOnError) {
        out += ' if (true) { ';
      }
    } else {
      out += ' if ( ';
      if ($rDef.valid === undefined) {
        out += ' !';
        if ($macro) {
          out += '' + ($nextValid);
        } else {
          out += '' + ($valid);
        }
      } else {
        out += ' ' + (!$rDef.valid) + ' ';
      }
      out += ') { ';
      $errorKeyword = $rule.keyword;
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = '';
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \'' + ($rule.keyword) + '\' } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should pass "' + ($rule.keyword) + '" keyword validation\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      var def_customError = out;
      out = $$outStack.pop();
      if ($inline) {
        if ($rDef.errors) {
          if ($rDef.errors != 'full') {
            out += '  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \'\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = "' + ($errSchemaPath) + '"; } ';
            if (it.opts.verbose) {
              out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
            }
            out += ' } ';
          }
        } else {
          if ($rDef.errors === false) {
            out += ' ' + (def_customError) + ' ';
          } else {
            out += ' if (' + ($errs) + ' == errors) { ' + (def_customError) + ' } else {  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \'\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = "' + ($errSchemaPath) + '"; } ';
            if (it.opts.verbose) {
              out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
            }
            out += ' } } ';
          }
        }
      } else if ($macro) {
        out += '   var err =   '; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \'' + ($rule.keyword) + '\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'should pass "' + ($rule.keyword) + '" keyword validation\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError(vErrors); ';
          } else {
            out += ' validate.errors = vErrors; return false; ';
          }
        }
      } else {
        if ($rDef.errors === false) {
          out += ' ' + (def_customError) + ' ';
        } else {
          out += ' if (Array.isArray(' + ($ruleErrs) + ')) { if (vErrors === null) vErrors = ' + ($ruleErrs) + '; else vErrors = vErrors.concat(' + ($ruleErrs) + '); errors = vErrors.length;  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \'\') + ' + (it.errorPath) + ';  ' + ($ruleErr) + '.schemaPath = "' + ($errSchemaPath) + '";  ';
          if (it.opts.verbose) {
            out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
          }
          out += ' } } else { ' + (def_customError) + ' } ';
        }
      }
      out += ' } ';
      if ($breakOnError) {
        out += ' else { ';
      }
    }
    return out;
  };

  var IDENTIFIER$1 = /^[a-z_$][a-z0-9_$-]*$/i;


  var keyword = {
    add: addKeyword,
    get: getKeyword,
    remove: removeKeyword
  };

  /**
   * Define custom keyword
   * @this  Ajv
   * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).
   * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.
   * @return {Ajv} this for method chaining
   */
  function addKeyword(keyword, definition) {
    /* jshint validthis: true */
    /* eslint no-shadow: 0 */
    var RULES = this.RULES;

    if (RULES.keywords[keyword])
      { throw new Error('Keyword ' + keyword + ' is already defined'); }

    if (!IDENTIFIER$1.test(keyword))
      { throw new Error('Keyword ' + keyword + ' is not a valid identifier'); }

    if (definition) {
      if (definition.macro && definition.valid !== undefined)
        { throw new Error('"valid" option cannot be used with macro keywords'); }

      var dataType = definition.type;
      if (Array.isArray(dataType)) {
        var i, len = dataType.length;
        for (i=0; i<len; i++) { checkDataType(dataType[i]); }
        for (i=0; i<len; i++) { _addRule(keyword, dataType[i], definition); }
      } else {
        if (dataType) { checkDataType(dataType); }
        _addRule(keyword, dataType, definition);
      }

      var $data = definition.$data === true && this._opts.$data;
      if ($data && !definition.validate)
        { throw new Error('$data support: "validate" function is not defined'); }

      var metaSchema = definition.metaSchema;
      if (metaSchema) {
        if ($data) {
          metaSchema = {
            anyOf: [
              metaSchema,
              { '$ref': 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/$data.json#' }
            ]
          };
        }
        definition.validateSchema = this.compile(metaSchema, true);
      }
    }

    RULES.keywords[keyword] = RULES.all[keyword] = true;


    function _addRule(keyword, dataType, definition) {
      var ruleGroup;
      for (var i=0; i<RULES.length; i++) {
        var rg = RULES[i];
        if (rg.type == dataType) {
          ruleGroup = rg;
          break;
        }
      }

      if (!ruleGroup) {
        ruleGroup = { type: dataType, rules: [] };
        RULES.push(ruleGroup);
      }

      var rule = {
        keyword: keyword,
        definition: definition,
        custom: true,
        code: custom,
        implements: definition.implements
      };
      ruleGroup.rules.push(rule);
      RULES.custom[keyword] = rule;
    }


    function checkDataType(dataType) {
      if (!RULES.types[dataType]) { throw new Error('Unknown type ' + dataType); }
    }

    return this;
  }


  /**
   * Get keyword
   * @this  Ajv
   * @param {String} keyword pre-defined or custom keyword.
   * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.
   */
  function getKeyword(keyword) {
    /* jshint validthis: true */
    var rule = this.RULES.custom[keyword];
    return rule ? rule.definition : this.RULES.keywords[keyword] || false;
  }


  /**
   * Remove keyword
   * @this  Ajv
   * @param {String} keyword pre-defined or custom keyword.
   * @return {Ajv} this for method chaining
   */
  function removeKeyword(keyword) {
    /* jshint validthis: true */
    var RULES = this.RULES;
    delete RULES.keywords[keyword];
    delete RULES.all[keyword];
    delete RULES.custom[keyword];
    for (var i=0; i<RULES.length; i++) {
      var rules = RULES[i].rules;
      for (var j=0; j<rules.length; j++) {
        if (rules[j].keyword == keyword) {
          rules.splice(j, 1);
          break;
        }
      }
    }
    return this;
  }

  var $schema = "http://json-schema.org/draft-06/schema#";
  var $id = "https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/$data.json#";
  var description$2 = "Meta-schema for $data reference (JSON-schema extension proposal)";
  var type = "object";
  var required$1 = ["$data"];
  var properties$1 = {"$data":{"type":"string","anyOf":[{"format":"relative-json-pointer"},{"format":"json-pointer"}]}};
  var additionalProperties = false;
  var $data$1 = {
  	$schema: $schema,
  	$id: $id,
  	description: description$2,
  	type: type,
  	required: required$1,
  	properties: properties$1,
  	additionalProperties: additionalProperties
  };

  var $data$2 = /*#__PURE__*/Object.freeze({
    $schema: $schema,
    $id: $id,
    description: description$2,
    type: type,
    required: required$1,
    properties: properties$1,
    additionalProperties: additionalProperties,
    default: $data$1
  });

  var $schema$1 = "http://json-schema.org/draft-06/schema#";
  var $id$1 = "http://json-schema.org/draft-06/schema#";
  var title$1 = "Core schema meta-schema";
  var definitions = {"schemaArray":{"type":"array","minItems":1,"items":{"$ref":"#"}},"nonNegativeInteger":{"type":"integer","minimum":0},"nonNegativeIntegerDefault0":{"allOf":[{"$ref":"#/definitions/nonNegativeInteger"},{"default":0}]},"simpleTypes":{"enum":["array","boolean","integer","null","number","object","string"]},"stringArray":{"type":"array","items":{"type":"string"},"uniqueItems":true,"default":[]}};
  var type$1 = ["object","boolean"];
  var properties$2 = {"$id":{"type":"string","format":"uri-reference"},"$schema":{"type":"string","format":"uri"},"$ref":{"type":"string","format":"uri-reference"},"title":{"type":"string"},"description":{"type":"string"},"default":{},"examples":{"type":"array","items":{}},"multipleOf":{"type":"number","exclusiveMinimum":0},"maximum":{"type":"number"},"exclusiveMaximum":{"type":"number"},"minimum":{"type":"number"},"exclusiveMinimum":{"type":"number"},"maxLength":{"$ref":"#/definitions/nonNegativeInteger"},"minLength":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"pattern":{"type":"string","format":"regex"},"additionalItems":{"$ref":"#"},"items":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/schemaArray"}],"default":{}},"maxItems":{"$ref":"#/definitions/nonNegativeInteger"},"minItems":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"uniqueItems":{"type":"boolean","default":false},"contains":{"$ref":"#"},"maxProperties":{"$ref":"#/definitions/nonNegativeInteger"},"minProperties":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"required":{"$ref":"#/definitions/stringArray"},"additionalProperties":{"$ref":"#"},"definitions":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"properties":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"patternProperties":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"dependencies":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/stringArray"}]}},"propertyNames":{"$ref":"#"},"const":{},"enum":{"type":"array","minItems":1,"uniqueItems":true},"type":{"anyOf":[{"$ref":"#/definitions/simpleTypes"},{"type":"array","items":{"$ref":"#/definitions/simpleTypes"},"minItems":1,"uniqueItems":true}]},"format":{"type":"string"},"allOf":{"$ref":"#/definitions/schemaArray"},"anyOf":{"$ref":"#/definitions/schemaArray"},"oneOf":{"$ref":"#/definitions/schemaArray"},"not":{"$ref":"#"}};
  var jsonSchemaDraft06 = {
  	$schema: $schema$1,
  	$id: $id$1,
  	title: title$1,
  	definitions: definitions,
  	type: type$1,
  	properties: properties$2,
  	"default": {}
  };

  var jsonSchemaDraft06$1 = /*#__PURE__*/Object.freeze({
    $schema: $schema$1,
    $id: $id$1,
    title: title$1,
    definitions: definitions,
    type: type$1,
    properties: properties$2,
    default: jsonSchemaDraft06
  });

  var require$$1 = ( $data$2 && $data$1 ) || $data$2;

  var require$$2 = ( jsonSchemaDraft06$1 && jsonSchemaDraft06 ) || jsonSchemaDraft06$1;

  var ajv = Ajv;

  Ajv.prototype.validate = validate$2;
  Ajv.prototype.compile = compile$1;
  Ajv.prototype.addSchema = addSchema;
  Ajv.prototype.addMetaSchema = addMetaSchema;
  Ajv.prototype.validateSchema = validateSchema;
  Ajv.prototype.getSchema = getSchema;
  Ajv.prototype.removeSchema = removeSchema;
  Ajv.prototype.addFormat = addFormat;
  Ajv.prototype.errorsText = errorsText;

  Ajv.prototype._addSchema = _addSchema;
  Ajv.prototype._compile = _compile;

  Ajv.prototype.compileAsync = async$1;

  Ajv.prototype.addKeyword = keyword.add;
  Ajv.prototype.getKeyword = keyword.get;
  Ajv.prototype.removeKeyword = keyword.remove;


  Ajv.ValidationError = error_classes.Validation;
  Ajv.MissingRefError = error_classes.MissingRef;
  Ajv.$dataMetaSchema = $data;

  var META_SCHEMA_ID$1 = 'http://json-schema.org/draft-06/schema';

  var META_IGNORE_OPTIONS = [ 'removeAdditional', 'useDefaults', 'coerceTypes' ];
  var META_SUPPORT_DATA = ['/properties'];

  /**
   * Creates validator instance.
   * Usage: `Ajv(opts)`
   * @param {Object} opts optional options
   * @return {Object} ajv instance
   */
  function Ajv(opts) {
    if (!(this instanceof Ajv)) { return new Ajv(opts); }
    opts = this._opts = util$4.copy(opts) || {};
    setLogger(this);
    this._schemas = {};
    this._refs = {};
    this._fragments = {};
    this._formats = formats_1$1(opts.format);
    var schemaUriFormat = this._schemaUriFormat = this._formats['uri-reference'];
    this._schemaUriFormatFunc = function (str) { return schemaUriFormat.test(str); };

    this._cache = opts.cache || new cache;
    this._loadingSchemas = {};
    this._compilations = [];
    this.RULES = rules();
    this._getId = chooseGetId(opts);

    opts.loopRequired = opts.loopRequired || Infinity;
    if (opts.errorDataPath == 'property') { opts._errorDataPathProperty = true; }
    if (opts.serialize === undefined) { opts.serialize = fastJsonStableStringify; }
    this._metaOpts = getMetaSchemaOptions(this);

    if (opts.formats) { addInitialFormats(this); }
    addDraft6MetaSchema(this);
    if (typeof opts.meta == 'object') { this.addMetaSchema(opts.meta); }
    addInitialSchemas(this);
    if (opts.patternGroups) { patternGroups(this); }
  }



  /**
   * Validate data using schema
   * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.
   * @this   Ajv
   * @param  {String|Object} schemaKeyRef key, ref or schema object
   * @param  {Any} data to be validated
   * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).
   */
  function validate$2(schemaKeyRef, data) {
    var v;
    if (typeof schemaKeyRef == 'string') {
      v = this.getSchema(schemaKeyRef);
      if (!v) { throw new Error('no schema with key or ref "' + schemaKeyRef + '"'); }
    } else {
      var schemaObj = this._addSchema(schemaKeyRef);
      v = schemaObj.validate || this._compile(schemaObj);
    }

    var valid = v(data);
    if (v.$async === true)
      { return this._opts.async == '*' ? co_1(valid) : valid; }
    this.errors = v.errors;
    return valid;
  }


  /**
   * Create validating function for passed schema.
   * @this   Ajv
   * @param  {Object} schema schema object
   * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.
   * @return {Function} validating function
   */
  function compile$1(schema, _meta) {
    var schemaObj = this._addSchema(schema, undefined, _meta);
    return schemaObj.validate || this._compile(schemaObj);
  }


  /**
   * Adds schema to the instance.
   * @this   Ajv
   * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.
   * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
   * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.
   * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
   * @return {Ajv} this for method chaining
   */
  function addSchema(schema, key, _skipValidation, _meta) {
    var this$1 = this;

    if (Array.isArray(schema)){
      for (var i=0; i<schema.length; i++) { this$1.addSchema(schema[i], undefined, _skipValidation, _meta); }
      return this;
    }
    var id = this._getId(schema);
    if (id !== undefined && typeof id != 'string')
      { throw new Error('schema id must be string'); }
    key = resolve_1.normalizeId(key || id);
    checkUnique(this, key);
    this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);
    return this;
  }


  /**
   * Add schema that will be used to validate other schemas
   * options in META_IGNORE_OPTIONS are alway set to false
   * @this   Ajv
   * @param {Object} schema schema object
   * @param {String} key optional schema key
   * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema
   * @return {Ajv} this for method chaining
   */
  function addMetaSchema(schema, key, skipValidation) {
    this.addSchema(schema, key, skipValidation, true);
    return this;
  }


  /**
   * Validate schema
   * @this   Ajv
   * @param {Object} schema schema to validate
   * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid
   * @return {Boolean} true if schema is valid
   */
  function validateSchema(schema, throwOrLogError) {
    var $schema = schema.$schema;
    if ($schema !== undefined && typeof $schema != 'string')
      { throw new Error('$schema must be a string'); }
    $schema = $schema || this._opts.defaultMeta || defaultMeta(this);
    if (!$schema) {
      this.logger.warn('meta-schema not available');
      this.errors = null;
      return true;
    }
    var currentUriFormat = this._formats.uri;
    this._formats.uri = typeof currentUriFormat == 'function'
                        ? this._schemaUriFormatFunc
                        : this._schemaUriFormat;
    var valid;
    try { valid = this.validate($schema, schema); }
    finally { this._formats.uri = currentUriFormat; }
    if (!valid && throwOrLogError) {
      var message = 'schema is invalid: ' + this.errorsText();
      if (this._opts.validateSchema == 'log') { this.logger.error(message); }
      else { throw new Error(message); }
    }
    return valid;
  }


  function defaultMeta(self) {
    var meta = self._opts.meta;
    self._opts.defaultMeta = typeof meta == 'object'
                              ? self._getId(meta) || meta
                              : self.getSchema(META_SCHEMA_ID$1)
                                ? META_SCHEMA_ID$1
                                : undefined;
    return self._opts.defaultMeta;
  }


  /**
   * Get compiled schema from the instance by `key` or `ref`.
   * @this   Ajv
   * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).
   * @return {Function} schema validating function (with property `schema`).
   */
  function getSchema(keyRef) {
    var schemaObj = _getSchemaObj(this, keyRef);
    switch (typeof schemaObj) {
      case 'object': return schemaObj.validate || this._compile(schemaObj);
      case 'string': return this.getSchema(schemaObj);
      case 'undefined': return _getSchemaFragment(this, keyRef);
    }
  }


  function _getSchemaFragment(self, ref) {
    var res = resolve_1.schema.call(self, { schema: {} }, ref);
    if (res) {
      var schema = res.schema
        , root = res.root
        , baseId = res.baseId;
      var v = compile_1.call(self, schema, root, undefined, baseId);
      self._fragments[ref] = new schema_obj({
        ref: ref,
        fragment: true,
        schema: schema,
        root: root,
        baseId: baseId,
        validate: v
      });
      return v;
    }
  }


  function _getSchemaObj(self, keyRef) {
    keyRef = resolve_1.normalizeId(keyRef);
    return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];
  }


  /**
   * Remove cached schema(s).
   * If no parameter is passed all schemas but meta-schemas are removed.
   * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
   * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
   * @this   Ajv
   * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object
   * @return {Ajv} this for method chaining
   */
  function removeSchema(schemaKeyRef) {
    if (schemaKeyRef instanceof RegExp) {
      _removeAllSchemas(this, this._schemas, schemaKeyRef);
      _removeAllSchemas(this, this._refs, schemaKeyRef);
      return this;
    }
    switch (typeof schemaKeyRef) {
      case 'undefined':
        _removeAllSchemas(this, this._schemas);
        _removeAllSchemas(this, this._refs);
        this._cache.clear();
        return this;
      case 'string':
        var schemaObj = _getSchemaObj(this, schemaKeyRef);
        if (schemaObj) { this._cache.del(schemaObj.cacheKey); }
        delete this._schemas[schemaKeyRef];
        delete this._refs[schemaKeyRef];
        return this;
      case 'object':
        var serialize = this._opts.serialize;
        var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;
        this._cache.del(cacheKey);
        var id = this._getId(schemaKeyRef);
        if (id) {
          id = resolve_1.normalizeId(id);
          delete this._schemas[id];
          delete this._refs[id];
        }
    }
    return this;
  }


  function _removeAllSchemas(self, schemas, regex) {
    for (var keyRef in schemas) {
      var schemaObj = schemas[keyRef];
      if (!schemaObj.meta && (!regex || regex.test(keyRef))) {
        self._cache.del(schemaObj.cacheKey);
        delete schemas[keyRef];
      }
    }
  }


  /* @this   Ajv */
  function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
    if (typeof schema != 'object' && typeof schema != 'boolean')
      { throw new Error('schema should be object or boolean'); }
    var serialize = this._opts.serialize;
    var cacheKey = serialize ? serialize(schema) : schema;
    var cached = this._cache.get(cacheKey);
    if (cached) { return cached; }

    shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;

    var id = resolve_1.normalizeId(this._getId(schema));
    if (id && shouldAddSchema) { checkUnique(this, id); }

    var willValidate = this._opts.validateSchema !== false && !skipValidation;
    var recursiveMeta;
    if (willValidate && !(recursiveMeta = id && id == resolve_1.normalizeId(schema.$schema)))
      { this.validateSchema(schema, true); }

    var localRefs = resolve_1.ids.call(this, schema);

    var schemaObj = new schema_obj({
      id: id,
      schema: schema,
      localRefs: localRefs,
      cacheKey: cacheKey,
      meta: meta
    });

    if (id[0] != '#' && shouldAddSchema) { this._refs[id] = schemaObj; }
    this._cache.put(cacheKey, schemaObj);

    if (willValidate && recursiveMeta) { this.validateSchema(schema, true); }

    return schemaObj;
  }


  /* @this   Ajv */
  function _compile(schemaObj, root) {
    if (schemaObj.compiling) {
      schemaObj.validate = callValidate;
      callValidate.schema = schemaObj.schema;
      callValidate.errors = null;
      callValidate.root = root ? root : callValidate;
      if (schemaObj.schema.$async === true)
        { callValidate.$async = true; }
      return callValidate;
    }
    schemaObj.compiling = true;

    var currentOpts;
    if (schemaObj.meta) {
      currentOpts = this._opts;
      this._opts = this._metaOpts;
    }

    var v;
    try { v = compile_1.call(this, schemaObj.schema, root, schemaObj.localRefs); }
    finally {
      schemaObj.compiling = false;
      if (schemaObj.meta) { this._opts = currentOpts; }
    }

    schemaObj.validate = v;
    schemaObj.refs = v.refs;
    schemaObj.refVal = v.refVal;
    schemaObj.root = v.root;
    return v;


    function callValidate() {
      var _validate = schemaObj.validate;
      var result = _validate.apply(null, arguments);
      callValidate.errors = _validate.errors;
      return result;
    }
  }


  function chooseGetId(opts) {
    switch (opts.schemaId) {
      case '$id': return _get$Id;
      case 'id': return _getId;
      default: return _get$IdOrId;
    }
  }

  /* @this   Ajv */
  function _getId(schema) {
    if (schema.$id) { this.logger.warn('schema $id ignored', schema.$id); }
    return schema.id;
  }

  /* @this   Ajv */
  function _get$Id(schema) {
    if (schema.id) { this.logger.warn('schema id ignored', schema.id); }
    return schema.$id;
  }


  function _get$IdOrId(schema) {
    if (schema.$id && schema.id && schema.$id != schema.id)
      { throw new Error('schema $id is different from id'); }
    return schema.$id || schema.id;
  }


  /**
   * Convert array of error message objects to string
   * @this   Ajv
   * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.
   * @param  {Object} options optional options with properties `separator` and `dataVar`.
   * @return {String} human readable string with all errors descriptions
   */
  function errorsText(errors, options) {
    errors = errors || this.errors;
    if (!errors) { return 'No errors'; }
    options = options || {};
    var separator = options.separator === undefined ? ', ' : options.separator;
    var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;

    var text = '';
    for (var i=0; i<errors.length; i++) {
      var e = errors[i];
      if (e) { text += dataVar + e.dataPath + ' ' + e.message + separator; }
    }
    return text.slice(0, -separator.length);
  }


  /**
   * Add custom format
   * @this   Ajv
   * @param {String} name format name
   * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)
   * @return {Ajv} this for method chaining
   */
  function addFormat(name, format) {
    if (typeof format == 'string') { format = new RegExp(format); }
    this._formats[name] = format;
    return this;
  }


  function addDraft6MetaSchema(self) {
    var $dataSchema;
    if (self._opts.$data) {
      $dataSchema = require$$1;
      self.addMetaSchema($dataSchema, $dataSchema.$id, true);
    }
    if (self._opts.meta === false) { return; }
    var metaSchema = require$$2;
    if (self._opts.$data) { metaSchema = $data(metaSchema, META_SUPPORT_DATA); }
    self.addMetaSchema(metaSchema, META_SCHEMA_ID$1, true);
    self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID$1;
  }


  function addInitialSchemas(self) {
    var optsSchemas = self._opts.schemas;
    if (!optsSchemas) { return; }
    if (Array.isArray(optsSchemas)) { self.addSchema(optsSchemas); }
    else { for (var key in optsSchemas) { self.addSchema(optsSchemas[key], key); } }
  }


  function addInitialFormats(self) {
    for (var name in self._opts.formats) {
      var format = self._opts.formats[name];
      self.addFormat(name, format);
    }
  }


  function checkUnique(self, id) {
    if (self._schemas[id] || self._refs[id])
      { throw new Error('schema with key or id "' + id + '" already exists'); }
  }


  function getMetaSchemaOptions(self) {
    var metaOpts = util$4.copy(self._opts);
    for (var i=0; i<META_IGNORE_OPTIONS.length; i++)
      { delete metaOpts[META_IGNORE_OPTIONS[i]]; }
    return metaOpts;
  }


  function setLogger(self) {
    var logger = self._opts.logger;
    if (logger === false) {
      self.logger = {log: noop$3, warn: noop$3, error: noop$3};
    } else {
      if (logger === undefined) { logger = console; }
      if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error))
        { throw new Error('logger must implement log, warn and error methods'); }
      self.logger = logger;
    }
  }


  function noop$3() {}

  function HARError (errors) {
    var message = 'validation failed';

    this.name = 'HARError';
    this.message = message;
    this.errors = errors;

    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = (new Error(message)).stack;
    }
  }

  HARError.prototype = Error.prototype;

  var error$1 = HARError;

  var $id$2 = "afterRequest.json#";
  var $schema$2 = "http://json-schema.org/draft-06/schema#";
  var type$2 = "object";
  var optional = true;
  var required$2 = ["lastAccess","eTag","hitCount"];
  var properties$3 = {"expires":{"type":"string","pattern":"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?"},"lastAccess":{"type":"string","pattern":"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?"},"eTag":{"type":"string"},"hitCount":{"type":"integer"},"comment":{"type":"string"}};
  var afterRequest = {
  	$id: $id$2,
  	$schema: $schema$2,
  	type: type$2,
  	optional: optional,
  	required: required$2,
  	properties: properties$3
  };

  var afterRequest$1 = /*#__PURE__*/Object.freeze({
    $id: $id$2,
    $schema: $schema$2,
    type: type$2,
    optional: optional,
    required: required$2,
    properties: properties$3,
    default: afterRequest
  });

  var $id$3 = "beforeRequest.json#";
  var $schema$3 = "http://json-schema.org/draft-06/schema#";
  var type$3 = "object";
  var optional$1 = true;
  var required$3 = ["lastAccess","eTag","hitCount"];
  var properties$4 = {"expires":{"type":"string","pattern":"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?"},"lastAccess":{"type":"string","pattern":"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?"},"eTag":{"type":"string"},"hitCount":{"type":"integer"},"comment":{"type":"string"}};
  var beforeRequest = {
  	$id: $id$3,
  	$schema: $schema$3,
  	type: type$3,
  	optional: optional$1,
  	required: required$3,
  	properties: properties$4
  };

  var beforeRequest$1 = /*#__PURE__*/Object.freeze({
    $id: $id$3,
    $schema: $schema$3,
    type: type$3,
    optional: optional$1,
    required: required$3,
    properties: properties$4,
    default: beforeRequest
  });

  var $id$4 = "browser.json#";
  var $schema$4 = "http://json-schema.org/draft-06/schema#";
  var type$4 = "object";
  var required$4 = ["name","version"];
  var properties$5 = {"name":{"type":"string"},"version":{"type":"string"},"comment":{"type":"string"}};
  var browser$2 = {
  	$id: $id$4,
  	$schema: $schema$4,
  	type: type$4,
  	required: required$4,
  	properties: properties$5
  };

  var browser$3 = /*#__PURE__*/Object.freeze({
    $id: $id$4,
    $schema: $schema$4,
    type: type$4,
    required: required$4,
    properties: properties$5,
    default: browser$2
  });

  var $id$5 = "cache.json#";
  var $schema$5 = "http://json-schema.org/draft-06/schema#";
  var properties$6 = {"beforeRequest":{"oneOf":[{"type":"null"},{"$ref":"beforeRequest.json#"}]},"afterRequest":{"oneOf":[{"type":"null"},{"$ref":"afterRequest.json#"}]},"comment":{"type":"string"}};
  var cache$1 = {
  	$id: $id$5,
  	$schema: $schema$5,
  	properties: properties$6
  };

  var cache$2 = /*#__PURE__*/Object.freeze({
    $id: $id$5,
    $schema: $schema$5,
    properties: properties$6,
    default: cache$1
  });

  var $id$6 = "content.json#";
  var $schema$6 = "http://json-schema.org/draft-06/schema#";
  var type$5 = "object";
  var required$5 = ["size","mimeType"];
  var properties$7 = {"size":{"type":"integer"},"compression":{"type":"integer"},"mimeType":{"type":"string"},"text":{"type":"string"},"encoding":{"type":"string"},"comment":{"type":"string"}};
  var content = {
  	$id: $id$6,
  	$schema: $schema$6,
  	type: type$5,
  	required: required$5,
  	properties: properties$7
  };

  var content$1 = /*#__PURE__*/Object.freeze({
    $id: $id$6,
    $schema: $schema$6,
    type: type$5,
    required: required$5,
    properties: properties$7,
    default: content
  });

  var $id$7 = "cookie.json#";
  var $schema$7 = "http://json-schema.org/draft-06/schema#";
  var type$6 = "object";
  var required$6 = ["name","value"];
  var properties$8 = {"name":{"type":"string"},"value":{"type":"string"},"path":{"type":"string"},"domain":{"type":"string"},"expires":{"type":["string","null"],"format":"date-time"},"httpOnly":{"type":"boolean"},"secure":{"type":"boolean"},"comment":{"type":"string"}};
  var cookie$1 = {
  	$id: $id$7,
  	$schema: $schema$7,
  	type: type$6,
  	required: required$6,
  	properties: properties$8
  };

  var cookie$2 = /*#__PURE__*/Object.freeze({
    $id: $id$7,
    $schema: $schema$7,
    type: type$6,
    required: required$6,
    properties: properties$8,
    default: cookie$1
  });

  var $id$8 = "creator.json#";
  var $schema$8 = "http://json-schema.org/draft-06/schema#";
  var type$7 = "object";
  var required$7 = ["name","version"];
  var properties$9 = {"name":{"type":"string"},"version":{"type":"string"},"comment":{"type":"string"}};
  var creator = {
  	$id: $id$8,
  	$schema: $schema$8,
  	type: type$7,
  	required: required$7,
  	properties: properties$9
  };

  var creator$1 = /*#__PURE__*/Object.freeze({
    $id: $id$8,
    $schema: $schema$8,
    type: type$7,
    required: required$7,
    properties: properties$9,
    default: creator
  });

  var $id$9 = "entry.json#";
  var $schema$9 = "http://json-schema.org/draft-06/schema#";
  var type$8 = "object";
  var optional$2 = true;
  var required$8 = ["startedDateTime","time","request","response","cache","timings"];
  var properties$10 = {"pageref":{"type":"string"},"startedDateTime":{"type":"string","format":"date-time","pattern":"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))"},"time":{"type":"number","min":0},"request":{"$ref":"request.json#"},"response":{"$ref":"response.json#"},"cache":{"$ref":"cache.json#"},"timings":{"$ref":"timings.json#"},"serverIPAddress":{"type":"string","oneOf":[{"format":"ipv4"},{"format":"ipv6"}]},"connection":{"type":"string"},"comment":{"type":"string"}};
  var entry = {
  	$id: $id$9,
  	$schema: $schema$9,
  	type: type$8,
  	optional: optional$2,
  	required: required$8,
  	properties: properties$10
  };

  var entry$1 = /*#__PURE__*/Object.freeze({
    $id: $id$9,
    $schema: $schema$9,
    type: type$8,
    optional: optional$2,
    required: required$8,
    properties: properties$10,
    default: entry
  });

  var $id$10 = "har.json#";
  var $schema$10 = "http://json-schema.org/draft-06/schema#";
  var type$9 = "object";
  var required$9 = ["log"];
  var properties$11 = {"log":{"$ref":"log.json#"}};
  var har = {
  	$id: $id$10,
  	$schema: $schema$10,
  	type: type$9,
  	required: required$9,
  	properties: properties$11
  };

  var har$1 = /*#__PURE__*/Object.freeze({
    $id: $id$10,
    $schema: $schema$10,
    type: type$9,
    required: required$9,
    properties: properties$11,
    default: har
  });

  var $id$11 = "header.json#";
  var $schema$11 = "http://json-schema.org/draft-06/schema#";
  var type$10 = "object";
  var required$10 = ["name","value"];
  var properties$12 = {"name":{"type":"string"},"value":{"type":"string"},"comment":{"type":"string"}};
  var header$2 = {
  	$id: $id$11,
  	$schema: $schema$11,
  	type: type$10,
  	required: required$10,
  	properties: properties$12
  };

  var header$3 = /*#__PURE__*/Object.freeze({
    $id: $id$11,
    $schema: $schema$11,
    type: type$10,
    required: required$10,
    properties: properties$12,
    default: header$2
  });

  var $id$12 = "log.json#";
  var $schema$12 = "http://json-schema.org/draft-06/schema#";
  var type$11 = "object";
  var required$11 = ["version","creator","entries"];
  var properties$13 = {"version":{"type":"string"},"creator":{"$ref":"creator.json#"},"browser":{"$ref":"browser.json#"},"pages":{"type":"array","items":{"$ref":"page.json#"}},"entries":{"type":"array","items":{"$ref":"entry.json#"}},"comment":{"type":"string"}};
  var log$1 = {
  	$id: $id$12,
  	$schema: $schema$12,
  	type: type$11,
  	required: required$11,
  	properties: properties$13
  };

  var log$2 = /*#__PURE__*/Object.freeze({
    $id: $id$12,
    $schema: $schema$12,
    type: type$11,
    required: required$11,
    properties: properties$13,
    default: log$1
  });

  var $id$13 = "page.json#";
  var $schema$13 = "http://json-schema.org/draft-06/schema#";
  var type$12 = "object";
  var optional$3 = true;
  var required$12 = ["startedDateTime","id","title","pageTimings"];
  var properties$14 = {"startedDateTime":{"type":"string","format":"date-time","pattern":"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))"},"id":{"type":"string","unique":true},"title":{"type":"string"},"pageTimings":{"$ref":"pageTimings.json#"},"comment":{"type":"string"}};
  var page = {
  	$id: $id$13,
  	$schema: $schema$13,
  	type: type$12,
  	optional: optional$3,
  	required: required$12,
  	properties: properties$14
  };

  var page$1 = /*#__PURE__*/Object.freeze({
    $id: $id$13,
    $schema: $schema$13,
    type: type$12,
    optional: optional$3,
    required: required$12,
    properties: properties$14,
    default: page
  });

  var $id$14 = "pageTimings.json#";
  var $schema$14 = "http://json-schema.org/draft-06/schema#";
  var type$13 = "object";
  var properties$15 = {"onContentLoad":{"type":"number","min":-1},"onLoad":{"type":"number","min":-1},"comment":{"type":"string"}};
  var pageTimings = {
  	$id: $id$14,
  	$schema: $schema$14,
  	type: type$13,
  	properties: properties$15
  };

  var pageTimings$1 = /*#__PURE__*/Object.freeze({
    $id: $id$14,
    $schema: $schema$14,
    type: type$13,
    properties: properties$15,
    default: pageTimings
  });

  var $id$15 = "postData.json#";
  var $schema$15 = "http://json-schema.org/draft-06/schema#";
  var type$14 = "object";
  var optional$4 = true;
  var required$13 = ["mimeType"];
  var properties$16 = {"mimeType":{"type":"string"},"text":{"type":"string"},"params":{"type":"array","required":["name"],"properties":{"name":{"type":"string"},"value":{"type":"string"},"fileName":{"type":"string"},"contentType":{"type":"string"},"comment":{"type":"string"}}},"comment":{"type":"string"}};
  var postData = {
  	$id: $id$15,
  	$schema: $schema$15,
  	type: type$14,
  	optional: optional$4,
  	required: required$13,
  	properties: properties$16
  };

  var postData$1 = /*#__PURE__*/Object.freeze({
    $id: $id$15,
    $schema: $schema$15,
    type: type$14,
    optional: optional$4,
    required: required$13,
    properties: properties$16,
    default: postData
  });

  var $id$16 = "query.json#";
  var $schema$16 = "http://json-schema.org/draft-06/schema#";
  var type$15 = "object";
  var required$14 = ["name","value"];
  var properties$17 = {"name":{"type":"string"},"value":{"type":"string"},"comment":{"type":"string"}};
  var query$1 = {
  	$id: $id$16,
  	$schema: $schema$16,
  	type: type$15,
  	required: required$14,
  	properties: properties$17
  };

  var query$2 = /*#__PURE__*/Object.freeze({
    $id: $id$16,
    $schema: $schema$16,
    type: type$15,
    required: required$14,
    properties: properties$17,
    default: query$1
  });

  var $id$17 = "request.json#";
  var $schema$17 = "http://json-schema.org/draft-06/schema#";
  var type$16 = "object";
  var required$15 = ["method","url","httpVersion","cookies","headers","queryString","headersSize","bodySize"];
  var properties$18 = {"method":{"type":"string"},"url":{"type":"string","format":"uri"},"httpVersion":{"type":"string"},"cookies":{"type":"array","items":{"$ref":"cookie.json#"}},"headers":{"type":"array","items":{"$ref":"header.json#"}},"queryString":{"type":"array","items":{"$ref":"query.json#"}},"postData":{"$ref":"postData.json#"},"headersSize":{"type":"integer"},"bodySize":{"type":"integer"},"comment":{"type":"string"}};
  var request$1 = {
  	$id: $id$17,
  	$schema: $schema$17,
  	type: type$16,
  	required: required$15,
  	properties: properties$18
  };

  var request$2 = /*#__PURE__*/Object.freeze({
    $id: $id$17,
    $schema: $schema$17,
    type: type$16,
    required: required$15,
    properties: properties$18,
    default: request$1
  });

  var $id$18 = "response.json#";
  var $schema$18 = "http://json-schema.org/draft-06/schema#";
  var type$17 = "object";
  var required$16 = ["status","statusText","httpVersion","cookies","headers","content","redirectURL","headersSize","bodySize"];
  var properties$19 = {"status":{"type":"integer"},"statusText":{"type":"string"},"httpVersion":{"type":"string"},"cookies":{"type":"array","items":{"$ref":"cookie.json#"}},"headers":{"type":"array","items":{"$ref":"header.json#"}},"content":{"$ref":"content.json#"},"redirectURL":{"type":"string"},"headersSize":{"type":"integer"},"bodySize":{"type":"integer"},"comment":{"type":"string"}};
  var response = {
  	$id: $id$18,
  	$schema: $schema$18,
  	type: type$17,
  	required: required$16,
  	properties: properties$19
  };

  var response$1 = /*#__PURE__*/Object.freeze({
    $id: $id$18,
    $schema: $schema$18,
    type: type$17,
    required: required$16,
    properties: properties$19,
    default: response
  });

  var $id$19 = "timings.json#";
  var $schema$19 = "http://json-schema.org/draft-06/schema#";
  var required$17 = ["send","wait","receive"];
  var properties$20 = {"dns":{"type":"number","min":-1},"connect":{"type":"number","min":-1},"blocked":{"type":"number","min":-1},"send":{"type":"number","min":-1},"wait":{"type":"number","min":-1},"receive":{"type":"number","min":-1},"ssl":{"type":"number","min":-1},"comment":{"type":"string"}};
  var timings = {
  	$id: $id$19,
  	$schema: $schema$19,
  	required: required$17,
  	properties: properties$20
  };

  var timings$1 = /*#__PURE__*/Object.freeze({
    $id: $id$19,
    $schema: $schema$19,
    required: required$17,
    properties: properties$20,
    default: timings
  });

  var require$$0$2 = ( afterRequest$1 && afterRequest ) || afterRequest$1;

  var require$$1$1 = ( beforeRequest$1 && beforeRequest ) || beforeRequest$1;

  var require$$2$1 = ( browser$3 && browser$2 ) || browser$3;

  var require$$3 = ( cache$2 && cache$1 ) || cache$2;

  var require$$4$1 = ( content$1 && content ) || content$1;

  var require$$5 = ( cookie$2 && cookie$1 ) || cookie$2;

  var require$$6 = ( creator$1 && creator ) || creator$1;

  var require$$7 = ( entry$1 && entry ) || entry$1;

  var require$$8 = ( har$1 && har ) || har$1;

  var require$$9 = ( header$3 && header$2 ) || header$3;

  var require$$10 = ( log$2 && log$1 ) || log$2;

  var require$$11 = ( page$1 && page ) || page$1;

  var require$$12 = ( pageTimings$1 && pageTimings ) || pageTimings$1;

  var require$$13 = ( postData$1 && postData ) || postData$1;

  var require$$14 = ( query$2 && query$1 ) || query$2;

  var require$$15 = ( request$2 && request$1 ) || request$2;

  var require$$16 = ( response$1 && response ) || response$1;

  var require$$17 = ( timings$1 && timings ) || timings$1;

  var lib$10 = {
    afterRequest: require$$0$2,
    beforeRequest: require$$1$1,
    browser: require$$2$1,
    cache: require$$3,
    content: require$$4$1,
    cookie: require$$5,
    creator: require$$6,
    entry: require$$7,
    har: require$$8,
    header: require$$9,
    log: require$$10,
    page: require$$11,
    pageTimings: require$$12,
    postData: require$$13,
    query: require$$14,
    request: require$$15,
    response: require$$16,
    timings: require$$17
  };

  var ajv$1;

  function validate$3 (name, data) {
    data = data || {};

    // validator config
    ajv$1 = ajv$1 || new ajv({
      allErrors: true,
      schemas: lib$10
    });

    var validate = ajv$1.getSchema(name + '.json');

    return new Promise(function (resolve, reject) {
      var valid = validate(data);

      !valid ? reject(new error$1(validate.errors)) : resolve(data);
    })
  }

  var afterRequest$2 = function (data) {
    return validate$3('afterRequest', data)
  };

  var beforeRequest$2 = function (data) {
    return validate$3('beforeRequest', data)
  };

  var browser$4 = function (data) {
    return validate$3('browser', data)
  };

  var cache$3 = function (data) {
    return validate$3('cache', data)
  };

  var content$2 = function (data) {
    return validate$3('content', data)
  };

  var cookie$3 = function (data) {
    return validate$3('cookie', data)
  };

  var creator$2 = function (data) {
    return validate$3('creator', data)
  };

  var entry$2 = function (data) {
    return validate$3('entry', data)
  };

  var har$2 = function (data) {
    return validate$3('har', data)
  };

  var header$4 = function (data) {
    return validate$3('header', data)
  };

  var log$3 = function (data) {
    return validate$3('log', data)
  };

  var page$2 = function (data) {
    return validate$3('page', data)
  };

  var pageTimings$2 = function (data) {
    return validate$3('pageTimings', data)
  };

  var postData$2 = function (data) {
    return validate$3('postData', data)
  };

  var query$3 = function (data) {
    return validate$3('query', data)
  };

  var request$3 = function (data) {
    return validate$3('request', data)
  };

  var response$2 = function (data) {
    return validate$3('response', data)
  };

  var timings$2 = function (data) {
    return validate$3('timings', data)
  };

  var promise = {
  	afterRequest: afterRequest$2,
  	beforeRequest: beforeRequest$2,
  	browser: browser$4,
  	cache: cache$3,
  	content: content$2,
  	cookie: cookie$3,
  	creator: creator$2,
  	entry: entry$2,
  	har: har$2,
  	header: header$4,
  	log: log$3,
  	page: page$2,
  	pageTimings: pageTimings$2,
  	postData: postData$2,
  	query: query$3,
  	request: request$3,
  	response: response$2,
  	timings: timings$2
  };

  function Har (request) {
    this.request = request;
  }

  Har.prototype.reducer = function (obj, pair) {
    // new property ?
    if (obj[pair.name] === undefined) {
      obj[pair.name] = pair.value;
      return obj
    }

    // existing? convert to array
    var arr = [
      obj[pair.name],
      pair.value
    ];

    obj[pair.name] = arr;

    return obj
  };

  Har.prototype.prep = function (data) {
    // construct utility properties
    data.queryObj = {};
    data.headersObj = {};
    data.postData.jsonObj = false;
    data.postData.paramsObj = false;

    // construct query objects
    if (data.queryString && data.queryString.length) {
      data.queryObj = data.queryString.reduce(this.reducer, {});
    }

    // construct headers objects
    if (data.headers && data.headers.length) {
      // loweCase header keys
      data.headersObj = data.headers.reduceRight(function (headers, header) {
        headers[header.name] = header.value;
        return headers
      }, {});
    }

    // construct Cookie header
    if (data.cookies && data.cookies.length) {
      var cookies = data.cookies.map(function (cookie) {
        return cookie.name + '=' + cookie.value
      });

      if (cookies.length) {
        data.headersObj.cookie = cookies.join('; ');
      }
    }

    // prep body
    function some (arr) {
      return arr.some(function (type) {
        return data.postData.mimeType.indexOf(type) === 0
      })
    }

    if (some([
      'multipart/mixed',
      'multipart/related',
      'multipart/form-data',
      'multipart/alternative'])) {
      // reset values
      data.postData.mimeType = 'multipart/form-data';
    } else if (some([
      'application/x-www-form-urlencoded'])) {
      if (!data.postData.params) {
        data.postData.text = '';
      } else {
        data.postData.paramsObj = data.postData.params.reduce(this.reducer, {});

        // always overwrite
        data.postData.text = qs$2.stringify(data.postData.paramsObj);
      }
    } else if (some([
      'text/json',
      'text/x-json',
      'application/json',
      'application/x-json'])) {
      data.postData.mimeType = 'application/json';

      if (data.postData.text) {
        try {
          data.postData.jsonObj = JSON.parse(data.postData.text);
        } catch (e) {
          this.request.debug(e);

          // force back to text/plain
          data.postData.mimeType = 'text/plain';
        }
      }
    }

    return data
  };

  Har.prototype.options = function (options) {
    // skip if no har property defined
    if (!options.har) {
      return options
    }

    var har = {};
    extend$1(har, options.har);

    // only process the first entry
    if (har.log && har.log.entries) {
      har = har.log.entries[0];
    }

    // add optional properties to make validation successful
    har.url = har.url || options.url || options.uri || options.baseUrl || '/';
    har.httpVersion = har.httpVersion || 'HTTP/1.1';
    har.queryString = har.queryString || [];
    har.headers = har.headers || [];
    har.cookies = har.cookies || [];
    har.postData = har.postData || {};
    har.postData.mimeType = har.postData.mimeType || 'application/octet-stream';

    har.bodySize = 0;
    har.headersSize = 0;
    har.postData.size = 0;

    if (!promise.request(har)) {
      return options
    }

    // clean up and get some utility properties
    var req = this.prep(har);

    // construct new options
    if (req.url) {
      options.url = req.url;
    }

    if (req.method) {
      options.method = req.method;
    }

    if (Object.keys(req.queryObj).length) {
      options.qs = req.queryObj;
    }

    if (Object.keys(req.headersObj).length) {
      options.headers = req.headersObj;
    }

    function test (type) {
      return req.postData.mimeType.indexOf(type) === 0
    }
    if (test('application/x-www-form-urlencoded')) {
      options.form = req.postData.paramsObj;
    } else if (test('application/json')) {
      if (req.postData.jsonObj) {
        options.body = req.postData.jsonObj;
        options.json = true;
      }
    } else if (test('multipart/form-data')) {
      options.formData = {};

      req.postData.params.forEach(function (param) {
        var attachment = {};

        if (!param.fileName && !param.fileName && !param.contentType) {
          options.formData[param.name] = param.value;
          return
        }

        // attempt to read from disk!
        if (param.fileName && !param.value) {
          attachment.value = tls.createReadStream(param.fileName);
        } else if (param.value) {
          attachment.value = param.value;
        }

        if (param.fileName) {
          attachment.options = {
            filename: param.fileName,
            contentType: param.contentType ? param.contentType : null
          };
        }

        options.formData[param.name] = attachment;
      });
    } else {
      if (req.postData.text) {
        options.body = req.postData.text;
      }
    }

    return options
  };

  var Har_1 = Har;

  var har$3 = {
  	Har: Har_1
  };

  // Unique ID creation requires a high quality random # generator.  In node.js
  // this is pretty straight-forward - we use the crypto API.



  var rng = function nodeRNG() {
    return tls.randomBytes(16);
  };

  /**
   * Convert array of 16 byte values to UUID string format of the form:
   * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
   */
  var byteToHex = [];
  for (var i = 0; i < 256; ++i) {
    byteToHex[i] = (i + 0x100).toString(16).substr(1);
  }

  function bytesToUuid(buf, offset) {
    var i = offset || 0;
    var bth = byteToHex;
    return bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]];
  }

  var bytesToUuid_1 = bytesToUuid;

  // **`v1()` - Generate time-based UUID**
  //
  // Inspired by https://github.com/LiosK/UUID.js
  // and http://docs.python.org/library/uuid.html

  var _nodeId;
  var _clockseq;

  // Previous uuid creation time
  var _lastMSecs = 0;
  var _lastNSecs = 0;

  // See https://github.com/broofa/node-uuid for API details
  function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || [];

    options = options || {};
    var node = options.node || _nodeId;
    var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

    // node and clockseq need to be initialized to random values if they're not
    // specified.  We do this lazily to minimize issues related to insufficient
    // system entropy.  See #189
    if (node == null || clockseq == null) {
      var seedBytes = rng();
      if (node == null) {
        // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
        node = _nodeId = [
          seedBytes[0] | 0x01,
          seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
        ];
      }
      if (clockseq == null) {
        // Per 4.2.2, randomize (14 bit) clockseq
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
      }
    }

    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
    var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

    // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock
    var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

    // Time since last uuid creation (in msecs)
    var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

    // Per 4.2.1.2, Bump clockseq on clock regression
    if (dt < 0 && options.clockseq === undefined) {
      clockseq = clockseq + 1 & 0x3fff;
    }

    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
      nsecs = 0;
    }

    // Per 4.2.1.2 Throw error if too many uuids are requested
    if (nsecs >= 10000) {
      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
    }

    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;

    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
    msecs += 12219292800000;

    // `time_low`
    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff;

    // `time_mid`
    var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff;

    // `time_high_and_version`
    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
    b[i++] = tmh >>> 16 & 0xff;

    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
    b[i++] = clockseq >>> 8 | 0x80;

    // `clock_seq_low`
    b[i++] = clockseq & 0xff;

    // `node`
    for (var n = 0; n < 6; ++n) {
      b[i + n] = node[n];
    }

    return buf ? buf : bytesToUuid_1(b);
  }

  var v1_1 = v1;

  function v4(options, buf, offset) {
    var i = buf && offset || 0;

    if (typeof(options) == 'string') {
      buf = options === 'binary' ? new Array(16) : null;
      options = null;
    }
    options = options || {};

    var rnds = options.random || (options.rng || rng)();

    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = (rnds[6] & 0x0f) | 0x40;
    rnds[8] = (rnds[8] & 0x3f) | 0x80;

    // Copy bytes to buffer, if provided
    if (buf) {
      for (var ii = 0; ii < 16; ++ii) {
        buf[i + ii] = rnds[ii];
      }
    }

    return buf || bytesToUuid_1(rnds);
  }

  var v4_1 = v4;

  var uuid = v4_1;
  uuid.v1 = v1_1;
  uuid.v4 = v4_1;

  var uuid_1 = uuid;

  var md5$1 = helpers.md5;
  var toBase64$1 = helpers.toBase64;

  function Auth (request) {
    // define all public properties here
    this.request = request;
    this.hasAuth = false;
    this.sentAuth = false;
    this.bearerToken = null;
    this.user = null;
    this.pass = null;
  }

  Auth.prototype.basic = function (user, pass, sendImmediately) {
    var self = this;
    if (typeof user !== 'string' || (pass !== undefined && typeof pass !== 'string')) {
      self.request.emit('error', new Error('auth() received invalid user or password'));
    }
    self.user = user;
    self.pass = pass;
    self.hasAuth = true;
    var header = user + ':' + (pass || '');
    if (sendImmediately || typeof sendImmediately === 'undefined') {
      var authHeader = 'Basic ' + toBase64$1(header);
      self.sentAuth = true;
      return authHeader
    }
  };

  Auth.prototype.bearer = function (bearer, sendImmediately) {
    var self = this;
    self.bearerToken = bearer;
    self.hasAuth = true;
    if (sendImmediately || typeof sendImmediately === 'undefined') {
      if (typeof bearer === 'function') {
        bearer = bearer();
      }
      var authHeader = 'Bearer ' + (bearer || '');
      self.sentAuth = true;
      return authHeader
    }
  };

  Auth.prototype.digest = function (method, path, authHeader) {
    // TODO: More complete implementation of RFC 2617.
    //   - handle challenge.domain
    //   - support qop="auth-int" only
    //   - handle Authentication-Info (not necessarily?)
    //   - check challenge.stale (not necessarily?)
    //   - increase nc (not necessarily?)
    // For reference:
    // http://tools.ietf.org/html/rfc2617#section-3
    // https://github.com/bagder/curl/blob/master/lib/http_digest.c

    var self = this;

    var challenge = {};
    var re = /([a-z0-9_-]+)=(?:"([^"]+)"|([a-z0-9_-]+))/gi;
    for (;;) {
      var match = re.exec(authHeader);
      if (!match) {
        break
      }
      challenge[match[1]] = match[2] || match[3];
    }

    /**
     * RFC 2617: handle both MD5 and MD5-sess algorithms.
     *
     * If the algorithm directive's value is "MD5" or unspecified, then HA1 is
     *   HA1=MD5(username:realm:password)
     * If the algorithm directive's value is "MD5-sess", then HA1 is
     *   HA1=MD5(MD5(username:realm:password):nonce:cnonce)
     */
    var ha1Compute = function (algorithm, user, realm, pass, nonce, cnonce) {
      var ha1 = md5$1(user + ':' + realm + ':' + pass);
      if (algorithm && algorithm.toLowerCase() === 'md5-sess') {
        return md5$1(ha1 + ':' + nonce + ':' + cnonce)
      } else {
        return ha1
      }
    };

    var qop = /(^|,)\s*auth\s*($|,)/.test(challenge.qop) && 'auth';
    var nc = qop && '00000001';
    var cnonce = qop && uuid_1().replace(/-/g, '');
    var ha1 = ha1Compute(challenge.algorithm, self.user, challenge.realm, self.pass, challenge.nonce, cnonce);
    var ha2 = md5$1(method + ':' + path);
    var digestResponse = qop
      ? md5$1(ha1 + ':' + challenge.nonce + ':' + nc + ':' + cnonce + ':' + qop + ':' + ha2)
      : md5$1(ha1 + ':' + challenge.nonce + ':' + ha2);
    var authValues = {
      username: self.user,
      realm: challenge.realm,
      nonce: challenge.nonce,
      uri: path,
      qop: qop,
      response: digestResponse,
      nc: nc,
      cnonce: cnonce,
      algorithm: challenge.algorithm,
      opaque: challenge.opaque
    };

    authHeader = [];
    for (var k in authValues) {
      if (authValues[k]) {
        if (k === 'qop' || k === 'nc' || k === 'algorithm') {
          authHeader.push(k + '=' + authValues[k]);
        } else {
          authHeader.push(k + '="' + authValues[k] + '"');
        }
      }
    }
    authHeader = 'Digest ' + authHeader.join(', ');
    self.sentAuth = true;
    return authHeader
  };

  Auth.prototype.onRequest = function (user, pass, sendImmediately, bearer) {
    var self = this;
    var request = self.request;

    var authHeader;
    if (bearer === undefined && user === undefined) {
      self.request.emit('error', new Error('no auth mechanism defined'));
    } else if (bearer !== undefined) {
      authHeader = self.bearer(bearer, sendImmediately);
    } else {
      authHeader = self.basic(user, pass, sendImmediately);
    }
    if (authHeader) {
      request.setHeader('authorization', authHeader);
    }
  };

  Auth.prototype.onResponse = function (response) {
    var self = this;
    var request = self.request;

    if (!self.hasAuth || self.sentAuth) { return null }

    var c = caseless(response.headers);

    var authHeader = c.get('www-authenticate');
    var authVerb = authHeader && authHeader.split(' ')[0].toLowerCase();
    request.debug('reauth', authVerb);

    switch (authVerb) {
      case 'basic':
        return self.basic(self.user, self.pass, true)

      case 'bearer':
        return self.bearer(self.bearerToken, true)

      case 'digest':
        return self.digest(request.method, request.path, authHeader)
    }
  };

  var Auth_1 = Auth;

  var auth = {
  	Auth: Auth_1
  };

  function sha1 (key, body) {
    return tls.createHmac('sha1', key).update(body).digest('base64')
  }

  function rsa (key, body) {
    return tls.createSign("RSA-SHA1").update(body).sign(key, 'base64');
  }

  function rfc3986 (str) {
    return encodeURIComponent(str)
      .replace(/!/g,'%21')
      .replace(/\*/g,'%2A')
      .replace(/\(/g,'%28')
      .replace(/\)/g,'%29')
      .replace(/'/g,'%27')
      ;
  }

  // Maps object to bi-dimensional array
  // Converts { foo: 'A', bar: [ 'b', 'B' ]} to
  // [ ['foo', 'A'], ['bar', 'b'], ['bar', 'B'] ]
  function map$2 (obj) {
    var key, val, arr = [];
    for (key in obj) {
      val = obj[key];
      if (Array.isArray(val))
        { for (var i = 0; i < val.length; i++)
          { arr.push([key, val[i]]); } }
      else if (typeof val === "object")
        { for (var prop in val)
          { arr.push([key + '[' + prop + ']', val[prop]]); } }
      else
        { arr.push([key, val]); }
    }
    return arr
  }

  // Compare function for sort
  function compare$1 (a, b) {
    return a > b ? 1 : a < b ? -1 : 0
  }

  function generateBase (httpMethod, base_uri, params) {
    // adapted from https://dev.twitter.com/docs/auth/oauth and 
    // https://dev.twitter.com/docs/auth/creating-signature

    // Parameter normalization
    // http://tools.ietf.org/html/rfc5849#section-3.4.1.3.2
    var normalized = map$2(params)
    // 1.  First, the name and value of each parameter are encoded
    .map(function (p) {
      return [ rfc3986(p[0]), rfc3986(p[1] || '') ]
    })
    // 2.  The parameters are sorted by name, using ascending byte value
    //     ordering.  If two or more parameters share the same name, they
    //     are sorted by their value.
    .sort(function (a, b) {
      return compare$1(a[0], b[0]) || compare$1(a[1], b[1])
    })
    // 3.  The name of each parameter is concatenated to its corresponding
    //     value using an "=" character (ASCII code 61) as a separator, even
    //     if the value is empty.
    .map(function (p) { return p.join('=') })
     // 4.  The sorted name/value pairs are concatenated together into a
     //     single string by using an "&" character (ASCII code 38) as
     //     separator.
    .join('&');

    var base = [
      rfc3986(httpMethod ? httpMethod.toUpperCase() : 'GET'),
      rfc3986(base_uri),
      rfc3986(normalized)
    ].join('&');

    return base
  }

  function hmacsign (httpMethod, base_uri, params, consumer_secret, token_secret) {
    var base = generateBase(httpMethod, base_uri, params);
    var key = [
      consumer_secret || '',
      token_secret || ''
    ].map(rfc3986).join('&');

    return sha1(key, base)
  }

  function rsasign (httpMethod, base_uri, params, private_key, token_secret) {
    var base = generateBase(httpMethod, base_uri, params);
    var key = private_key || '';

    return rsa(key, base)
  }

  function plaintext (consumer_secret, token_secret) {
    var key = [
      consumer_secret || '',
      token_secret || ''
    ].map(rfc3986).join('&');

    return key
  }

  function sign$3 (signMethod, httpMethod, base_uri, params, consumer_secret, token_secret) {
    var method;
    var skipArgs = 1;

    switch (signMethod) {
      case 'RSA-SHA1':
        method = rsasign;
        break
      case 'HMAC-SHA1':
        method = hmacsign;
        break
      case 'PLAINTEXT':
        method = plaintext;
        skipArgs = 4;
        break
      default:
       throw new Error("Signature method not supported: " + signMethod)
    }

    return method.apply(null, [].slice.call(arguments, skipArgs))
  }

  var hmacsign_1 = hmacsign;
  var rsasign_1 = rsasign;
  var plaintext_1 = plaintext;
  var sign_1$1 = sign$3;
  var rfc3986_1 = rfc3986;
  var generateBase_1 = generateBase;

  var oauthSign = {
  	hmacsign: hmacsign_1,
  	rsasign: rsasign_1,
  	plaintext: plaintext_1,
  	sign: sign_1$1,
  	rfc3986: rfc3986_1,
  	generateBase: generateBase_1
  };

  var Buffer$3 = safeBuffer.Buffer;

  function OAuth (request) {
    this.request = request;
    this.params = null;
  }

  OAuth.prototype.buildParams = function (_oauth, uri, method, query, form, qsLib) {
    var oa = {};
    for (var i in _oauth) {
      oa['oauth_' + i] = _oauth[i];
    }
    if (!oa.oauth_version) {
      oa.oauth_version = '1.0';
    }
    if (!oa.oauth_timestamp) {
      oa.oauth_timestamp = Math.floor(Date.now() / 1000).toString();
    }
    if (!oa.oauth_nonce) {
      oa.oauth_nonce = uuid_1().replace(/-/g, '');
    }
    if (!oa.oauth_signature_method) {
      oa.oauth_signature_method = 'HMAC-SHA1';
    }

    var consumer_secret_or_private_key = oa.oauth_consumer_secret || oa.oauth_private_key; // eslint-disable-line camelcase
    delete oa.oauth_consumer_secret;
    delete oa.oauth_private_key;

    var token_secret = oa.oauth_token_secret; // eslint-disable-line camelcase
    delete oa.oauth_token_secret;

    var realm = oa.oauth_realm;
    delete oa.oauth_realm;
    delete oa.oauth_transport_method;

    var baseurl = uri.protocol + '//' + uri.host + uri.pathname;
    var params = qsLib.parse([].concat(query, form, qsLib.stringify(oa)).join('&'));

    oa.oauth_signature = oauthSign.sign(
      oa.oauth_signature_method,
      method,
      baseurl,
      params,
      consumer_secret_or_private_key, // eslint-disable-line camelcase
      token_secret // eslint-disable-line camelcase
    );

    if (realm) {
      oa.realm = realm;
    }

    return oa
  };

  OAuth.prototype.buildBodyHash = function (_oauth, body) {
    if (['HMAC-SHA1', 'RSA-SHA1'].indexOf(_oauth.signature_method || 'HMAC-SHA1') < 0) {
      this.request.emit('error', new Error('oauth: ' + _oauth.signature_method +
        ' signature_method not supported with body_hash signing.'));
    }

    var shasum = tls.createHash('sha1');
    shasum.update(body || '');
    var sha1 = shasum.digest('hex');

    return Buffer$3.from(sha1).toString('base64')
  };

  OAuth.prototype.concatParams = function (oa, sep, wrap) {
    wrap = wrap || '';

    var params = Object.keys(oa).filter(function (i) {
      return i !== 'realm' && i !== 'oauth_signature'
    }).sort();

    if (oa.realm) {
      params.splice(0, 0, 'realm');
    }
    params.push('oauth_signature');

    return params.map(function (i) {
      return i + '=' + wrap + oauthSign.rfc3986(oa[i]) + wrap
    }).join(sep)
  };

  OAuth.prototype.onRequest = function (_oauth) {
    var self = this;
    self.params = _oauth;

    var uri = self.request.uri || {};
    var method = self.request.method || '';
    var headers = caseless(self.request.headers);
    var body = self.request.body || '';
    var qsLib = self.request.qsLib || lib$9;

    var form;
    var query;
    var contentType = headers.get('content-type') || '';
    var formContentType = 'application/x-www-form-urlencoded';
    var transport = _oauth.transport_method || 'header';

    if (contentType.slice(0, formContentType.length) === formContentType) {
      contentType = formContentType;
      form = body;
    }
    if (uri.query) {
      query = uri.query;
    }
    if (transport === 'body' && (method !== 'POST' || contentType !== formContentType)) {
      self.request.emit('error', new Error('oauth: transport_method of body requires POST ' +
        'and content-type ' + formContentType));
    }

    if (!form && typeof _oauth.body_hash === 'boolean') {
      _oauth.body_hash = self.buildBodyHash(_oauth, self.request.body.toString());
    }

    var oa = self.buildParams(_oauth, uri, method, query, form, qsLib);

    switch (transport) {
      case 'header':
        self.request.setHeader('Authorization', 'OAuth ' + self.concatParams(oa, ',', '"'));
        break

      case 'query':
        var href = self.request.uri.href += (query ? '&' : '?') + self.concatParams(oa, '&');
        self.request.uri = url$2.parse(href);
        self.request.path = self.request.uri.path;
        break

      case 'body':
        self.request.body = (form ? form + '&' : '') + self.concatParams(oa, '&');
        break

      default:
        self.request.emit('error', new Error('oauth: transport_method invalid'));
    }
  };

  var OAuth_1 = OAuth;

  var oauth_1 = {
  	OAuth: OAuth_1
  };

  var Buffer$4 = safeBuffer.Buffer;

  function Multipart (request) {
    this.request = request;
    this.boundary = uuid_1();
    this.chunked = false;
    this.body = null;
  }

  Multipart.prototype.isChunked = function (options) {
    var self = this;
    var chunked = false;
    var parts = options.data || options;

    if (!parts.forEach) {
      self.request.emit('error', new Error('Argument error, options.multipart.'));
    }

    if (options.chunked !== undefined) {
      chunked = options.chunked;
    }

    if (self.request.getHeader('transfer-encoding') === 'chunked') {
      chunked = true;
    }

    if (!chunked) {
      parts.forEach(function (part) {
        if (typeof part.body === 'undefined') {
          self.request.emit('error', new Error('Body attribute missing in multipart.'));
        }
        if (isstream(part.body)) {
          chunked = true;
        }
      });
    }

    return chunked
  };

  Multipart.prototype.setHeaders = function (chunked) {
    var self = this;

    if (chunked && !self.request.hasHeader('transfer-encoding')) {
      self.request.setHeader('transfer-encoding', 'chunked');
    }

    var header = self.request.getHeader('content-type');

    if (!header || header.indexOf('multipart') === -1) {
      self.request.setHeader('content-type', 'multipart/related; boundary=' + self.boundary);
    } else {
      if (header.indexOf('boundary') !== -1) {
        self.boundary = header.replace(/.*boundary=([^\s;]+).*/, '$1');
      } else {
        self.request.setHeader('content-type', header + '; boundary=' + self.boundary);
      }
    }
  };

  Multipart.prototype.build = function (parts, chunked) {
    var self = this;
    var body = chunked ? new combined_stream() : [];

    function add (part) {
      if (typeof part === 'number') {
        part = part.toString();
      }
      return chunked ? body.append(part) : body.push(Buffer$4.from(part))
    }

    if (self.request.preambleCRLF) {
      add('\r\n');
    }

    parts.forEach(function (part) {
      var preamble = '--' + self.boundary + '\r\n';
      Object.keys(part).forEach(function (key) {
        if (key === 'body') { return }
        preamble += key + ': ' + part[key] + '\r\n';
      });
      preamble += '\r\n';
      add(preamble);
      add(part.body);
      add('\r\n');
    });
    add('--' + self.boundary + '--');

    if (self.request.postambleCRLF) {
      add('\r\n');
    }

    return body
  };

  Multipart.prototype.onRequest = function (options) {
    var self = this;

    var chunked = self.isChunked(options);
    var parts = options.data || options;

    self.setHeaders(chunked);
    self.chunked = chunked;
    self.body = self.build(parts, chunked);
  };

  var Multipart_1 = Multipart;

  var multipart = {
  	Multipart: Multipart_1
  };

  var isUrl = /^https?:/;

  function Redirect (request) {
    this.request = request;
    this.followRedirect = true;
    this.followRedirects = true;
    this.followAllRedirects = false;
    this.followOriginalHttpMethod = false;
    this.allowRedirect = function () { return true };
    this.maxRedirects = 10;
    this.redirects = [];
    this.redirectsFollowed = 0;
    this.removeRefererHeader = false;
  }

  Redirect.prototype.onRequest = function (options) {
    var self = this;

    if (options.maxRedirects !== undefined) {
      self.maxRedirects = options.maxRedirects;
    }
    if (typeof options.followRedirect === 'function') {
      self.allowRedirect = options.followRedirect;
    }
    if (options.followRedirect !== undefined) {
      self.followRedirects = !!options.followRedirect;
    }
    if (options.followAllRedirects !== undefined) {
      self.followAllRedirects = options.followAllRedirects;
    }
    if (self.followRedirects || self.followAllRedirects) {
      self.redirects = self.redirects || [];
    }
    if (options.removeRefererHeader !== undefined) {
      self.removeRefererHeader = options.removeRefererHeader;
    }
    if (options.followOriginalHttpMethod !== undefined) {
      self.followOriginalHttpMethod = options.followOriginalHttpMethod;
    }
  };

  Redirect.prototype.redirectTo = function (response) {
    var self = this;
    var request = self.request;

    var redirectTo = null;
    if (response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has('location')) {
      var location = response.caseless.get('location');
      request.debug('redirect', location);

      if (self.followAllRedirects) {
        redirectTo = location;
      } else if (self.followRedirects) {
        switch (request.method) {
          case 'PATCH':
          case 'PUT':
          case 'POST':
          case 'DELETE':
            // Do not follow redirects
            break
          default:
            redirectTo = location;
            break
        }
      }
    } else if (response.statusCode === 401) {
      var authHeader = request._auth.onResponse(response);
      if (authHeader) {
        request.setHeader('authorization', authHeader);
        redirectTo = request.uri;
      }
    }
    return redirectTo
  };

  Redirect.prototype.onResponse = function (response) {
    var self = this;
    var request = self.request;

    var redirectTo = self.redirectTo(response);
    if (!redirectTo || !self.allowRedirect.call(request, response)) {
      return false
    }

    request.debug('redirect to', redirectTo);

    // ignore any potential response body.  it cannot possibly be useful
    // to us at this point.
    // response.resume should be defined, but check anyway before calling. Workaround for browserify.
    if (response.resume) {
      response.resume();
    }

    if (self.redirectsFollowed >= self.maxRedirects) {
      request.emit('error', new Error('Exceeded maxRedirects. Probably stuck in a redirect loop ' + request.uri.href));
      return false
    }
    self.redirectsFollowed += 1;

    if (!isUrl.test(redirectTo)) {
      redirectTo = url$2.resolve(request.uri.href, redirectTo);
    }

    var uriPrev = request.uri;
    request.uri = url$2.parse(redirectTo);

    // handle the case where we change protocol from https to http or vice versa
    if (request.uri.protocol !== uriPrev.protocol) {
      delete request.agent;
    }

    self.redirects.push({ statusCode: response.statusCode, redirectUri: redirectTo });

    if (self.followAllRedirects && request.method !== 'HEAD' &&
      response.statusCode !== 401 && response.statusCode !== 307) {
      request.method = self.followOriginalHttpMethod ? request.method : 'GET';
    }
    // request.method = 'GET' // Force all redirects to use GET || commented out fixes #215
    delete request.src;
    delete request.req;
    delete request._started;
    if (response.statusCode !== 401 && response.statusCode !== 307) {
      // Remove parameters from the previous response, unless this is the second request
      // for a server that requires digest authentication.
      delete request.body;
      delete request._form;
      if (request.headers) {
        request.removeHeader('host');
        request.removeHeader('content-type');
        request.removeHeader('content-length');
        if (request.uri.hostname !== request.originalHost.split(':')[0]) {
          // Remove authorization if changing hostnames (but not if just
          // changing ports or protocols).  This matches the behavior of curl:
          // https://github.com/bagder/curl/blob/6beb0eee/lib/http.c#L710
          request.removeHeader('authorization');
        }
      }
    }

    if (!self.removeRefererHeader) {
      request.setHeader('referer', uriPrev.href);
    }

    request.emit('redirect');

    request.init();

    return true
  };

  var Redirect_1 = Redirect;

  var redirect = {
  	Redirect: Redirect_1
  };

  var events$2 = ( events$1 && EventEmitter ) || events$1;

  var Buffer$5 = safeBuffer.Buffer
    ;

  var httpOverHttp_1 = httpOverHttp;
  var httpsOverHttp_1 = httpsOverHttp;
  var httpOverHttps_1 = httpOverHttps;
  var httpsOverHttps_1 = httpsOverHttps;


  function httpOverHttp(options) {
    var agent = new TunnelingAgent(options);
    agent.request = http$2.request;
    return agent
  }

  function httpsOverHttp(options) {
    var agent = new TunnelingAgent(options);
    agent.request = http$2.request;
    agent.createSocket = createSecureSocket;
    agent.defaultPort = 443;
    return agent
  }

  function httpOverHttps(options) {
    var agent = new TunnelingAgent(options);
    agent.request = http$2.request;
    return agent
  }

  function httpsOverHttps(options) {
    var agent = new TunnelingAgent(options);
    agent.request = http$2.request;
    agent.createSocket = createSecureSocket;
    agent.defaultPort = 443;
    return agent
  }


  function TunnelingAgent(options) {
    var self = this;
    self.options = options || {};
    self.proxyOptions = self.options.proxy || {};
    self.maxSockets = self.options.maxSockets || http$2.Agent.defaultMaxSockets;
    self.requests = [];
    self.sockets = [];

    self.on('free', function onFree(socket, host, port) {
      for (var i = 0, len = self.requests.length; i < len; ++i) {
        var pending = self.requests[i];
        if (pending.host === host && pending.port === port) {
          // Detect the request to connect same origin server,
          // reuse the connection.
          self.requests.splice(i, 1);
          pending.request.onSocket(socket);
          return
        }
      }
      socket.destroy();
      self.removeSocket(socket);
    });
  }
  util$2.inherits(TunnelingAgent, events$2.EventEmitter);

  TunnelingAgent.prototype.addRequest = function addRequest(req, options) {
    var self = this;

     // Legacy API: addRequest(req, host, port, path)
    if (typeof options === 'string') {
      options = {
        host: options,
        port: arguments[2],
        path: arguments[3]
      };
    }

    if (self.sockets.length >= this.maxSockets) {
      // We are over limit so we'll add it to the queue.
      self.requests.push({host: options.host, port: options.port, request: req});
      return
    }

    // If we are under maxSockets create a new one.
    self.createConnection({host: options.host, port: options.port, request: req});
  };

  TunnelingAgent.prototype.createConnection = function createConnection(pending) {
    var self = this;

    self.createSocket(pending, function(socket) {
      socket.on('free', onFree);
      socket.on('close', onCloseOrRemove);
      socket.on('agentRemove', onCloseOrRemove);
      pending.request.onSocket(socket);

      function onFree() {
        self.emit('free', socket, pending.host, pending.port);
      }

      function onCloseOrRemove(err) {
        self.removeSocket(socket);
        socket.removeListener('free', onFree);
        socket.removeListener('close', onCloseOrRemove);
        socket.removeListener('agentRemove', onCloseOrRemove);
      }
    });
  };

  TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
    var self = this;
    var placeholder = {};
    self.sockets.push(placeholder);

    var connectOptions = mergeOptions$1({}, self.proxyOptions,
      { method: 'CONNECT'
      , path: options.host + ':' + options.port
      , agent: false
      }
    );
    if (connectOptions.proxyAuth) {
      connectOptions.headers = connectOptions.headers || {};
      connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
          Buffer$5.from(connectOptions.proxyAuth).toString('base64');
    }

    debug$1('making CONNECT request');
    var connectReq = self.request(connectOptions);
    connectReq.useChunkedEncodingByDefault = false; // for v0.6
    connectReq.once('response', onResponse); // for v0.6
    connectReq.once('upgrade', onUpgrade);   // for v0.6
    connectReq.once('connect', onConnect);   // for v0.7 or later
    connectReq.once('error', onError);
    connectReq.end();

    function onResponse(res) {
      // Very hacky. This is necessary to avoid http-parser leaks.
      res.upgrade = true;
    }

    function onUpgrade(res, socket, head) {
      // Hacky.
      process.nextTick(function() {
        onConnect(res, socket, head);
      });
    }

    function onConnect(res, socket, head) {
      connectReq.removeAllListeners();
      socket.removeAllListeners();

      if (res.statusCode === 200) {
        assert$4.equal(head.length, 0);
        debug$1('tunneling connection has established');
        self.sockets[self.sockets.indexOf(placeholder)] = socket;
        cb(socket);
      } else {
        debug$1('tunneling socket could not be established, statusCode=%d', res.statusCode);
        var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode);
        error.code = 'ECONNRESET';
        options.request.emit('error', error);
        self.removeSocket(placeholder);
      }
    }

    function onError(cause) {
      connectReq.removeAllListeners();

      debug$1('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack);
      var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message);
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
    }
  };

  TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
    var pos = this.sockets.indexOf(socket);
    if (pos === -1) { return }

    this.sockets.splice(pos, 1);

    var pending = this.requests.shift();
    if (pending) {
      // If we have pending requests and a socket gets closed a new one
      // needs to be created to take over in the pool for the one that closed.
      this.createConnection(pending);
    }
  };

  function createSecureSocket(options, cb) {
    var self = this;
    TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
      // 0 is dummy port for v0.6
      var secureSocket = tls.connect(0, mergeOptions$1({}, self.options,
        { servername: options.host
        , socket: socket
        }
      ));
      self.sockets[self.sockets.indexOf(socket)] = secureSocket;
      cb(secureSocket);
    });
  }


  function mergeOptions$1(target) {
    var arguments$1 = arguments;

    for (var i = 1, len = arguments.length; i < len; ++i) {
      var overrides = arguments$1[i];
      if (typeof overrides === 'object') {
        var keys = Object.keys(overrides);
        for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
          var k = keys[j];
          if (overrides[k] !== undefined) {
            target[k] = overrides[k];
          }
        }
      }
    }
    return target
  }


  var debug$1;
  if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
    debug$1 = function() {
      var args = Array.prototype.slice.call(arguments);
      if (typeof args[0] === 'string') {
        args[0] = 'TUNNEL: ' + args[0];
      } else {
        args.unshift('TUNNEL:');
      }
      console.error.apply(console, args);
    };
  } else {
    debug$1 = function() {};
  }
  var debug_1 = debug$1; // for test

  var tunnelAgent = {
  	httpOverHttp: httpOverHttp_1,
  	httpsOverHttp: httpsOverHttp_1,
  	httpOverHttps: httpOverHttps_1,
  	httpsOverHttps: httpsOverHttps_1,
  	debug: debug_1
  };

  var defaultProxyHeaderWhiteList = [
    'accept',
    'accept-charset',
    'accept-encoding',
    'accept-language',
    'accept-ranges',
    'cache-control',
    'content-encoding',
    'content-language',
    'content-location',
    'content-md5',
    'content-range',
    'content-type',
    'connection',
    'date',
    'expect',
    'max-forwards',
    'pragma',
    'referer',
    'te',
    'user-agent',
    'via'
  ];

  var defaultProxyHeaderExclusiveList = [
    'proxy-authorization'
  ];

  function constructProxyHost (uriObject) {
    var port = uriObject.port;
    var protocol = uriObject.protocol;
    var proxyHost = uriObject.hostname + ':';

    if (port) {
      proxyHost += port;
    } else if (protocol === 'https:') {
      proxyHost += '443';
    } else {
      proxyHost += '80';
    }

    return proxyHost
  }

  function constructProxyHeaderWhiteList (headers, proxyHeaderWhiteList) {
    var whiteList = proxyHeaderWhiteList
      .reduce(function (set, header) {
        set[header.toLowerCase()] = true;
        return set
      }, {});

    return Object.keys(headers)
      .filter(function (header) {
        return whiteList[header.toLowerCase()]
      })
      .reduce(function (set, header) {
        set[header] = headers[header];
        return set
      }, {})
  }

  function constructTunnelOptions (request, proxyHeaders) {
    var proxy = request.proxy;

    var tunnelOptions = {
      proxy: {
        host: proxy.hostname,
        port: +proxy.port,
        proxyAuth: proxy.auth,
        headers: proxyHeaders
      },
      headers: request.headers,
      ca: request.ca,
      cert: request.cert,
      key: request.key,
      passphrase: request.passphrase,
      pfx: request.pfx,
      ciphers: request.ciphers,
      rejectUnauthorized: request.rejectUnauthorized,
      secureOptions: request.secureOptions,
      secureProtocol: request.secureProtocol
    };

    return tunnelOptions
  }

  function constructTunnelFnName (uri, proxy) {
    var uriProtocol = (uri.protocol === 'https:' ? 'https' : 'http');
    var proxyProtocol = (proxy.protocol === 'https:' ? 'Https' : 'Http');
    return [uriProtocol, proxyProtocol].join('Over')
  }

  function getTunnelFn (request) {
    var uri = request.uri;
    var proxy = request.proxy;
    var tunnelFnName = constructTunnelFnName(uri, proxy);
    return tunnelAgent[tunnelFnName]
  }

  function Tunnel (request) {
    this.request = request;
    this.proxyHeaderWhiteList = defaultProxyHeaderWhiteList;
    this.proxyHeaderExclusiveList = [];
    if (typeof request.tunnel !== 'undefined') {
      this.tunnelOverride = request.tunnel;
    }
  }

  Tunnel.prototype.isEnabled = function () {
    var self = this;
    var request = self.request;
      // Tunnel HTTPS by default. Allow the user to override this setting.

    // If self.tunnelOverride is set (the user specified a value), use it.
    if (typeof self.tunnelOverride !== 'undefined') {
      return self.tunnelOverride
    }

    // If the destination is HTTPS, tunnel.
    if (request.uri.protocol === 'https:') {
      return true
    }

    // Otherwise, do not use tunnel.
    return false
  };

  Tunnel.prototype.setup = function (options) {
    var self = this;
    var request = self.request;

    options = options || {};

    if (typeof request.proxy === 'string') {
      request.proxy = url$2.parse(request.proxy);
    }

    if (!request.proxy || !request.tunnel) {
      return false
    }

    // Setup Proxy Header Exclusive List and White List
    if (options.proxyHeaderWhiteList) {
      self.proxyHeaderWhiteList = options.proxyHeaderWhiteList;
    }
    if (options.proxyHeaderExclusiveList) {
      self.proxyHeaderExclusiveList = options.proxyHeaderExclusiveList;
    }

    var proxyHeaderExclusiveList = self.proxyHeaderExclusiveList.concat(defaultProxyHeaderExclusiveList);
    var proxyHeaderWhiteList = self.proxyHeaderWhiteList.concat(proxyHeaderExclusiveList);

    // Setup Proxy Headers and Proxy Headers Host
    // Only send the Proxy White Listed Header names
    var proxyHeaders = constructProxyHeaderWhiteList(request.headers, proxyHeaderWhiteList);
    proxyHeaders.host = constructProxyHost(request.uri);

    proxyHeaderExclusiveList.forEach(request.removeHeader, request);

    // Set Agent from Tunnel Data
    var tunnelFn = getTunnelFn(request);
    var tunnelOptions = constructTunnelOptions(request, proxyHeaders);
    request.agent = tunnelFn(tunnelOptions);

    return true
  };

  Tunnel.defaultProxyHeaderWhiteList = defaultProxyHeaderWhiteList;
  Tunnel.defaultProxyHeaderExclusiveList = defaultProxyHeaderExclusiveList;
  var Tunnel_1 = Tunnel;

  var tunnel_1 = {
  	Tunnel: Tunnel_1
  };

  var performanceNow$1 = createCommonjsModule(function (module) {
  // Generated by CoffeeScript 1.12.2
  (function() {
    var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

    if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
      module.exports = function() {
        return performance.now();
      };
    } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
      module.exports = function() {
        return (getNanoSeconds() - nodeLoadTime) / 1e6;
      };
      hrtime = process.hrtime;
      getNanoSeconds = function() {
        var hr;
        hr = hrtime();
        return hr[0] * 1e9 + hr[1];
      };
      moduleLoadTime = getNanoSeconds();
      upTime = process.uptime() * 1e9;
      nodeLoadTime = moduleLoadTime - upTime;
    } else if (Date.now) {
      module.exports = function() {
        return Date.now() - loadTime;
      };
      loadTime = Date.now();
    } else {
      module.exports = function() {
        return new Date().getTime() - loadTime;
      };
      loadTime = new Date().getTime();
    }

  }).call(commonjsGlobal);


  });

  var zlib$2 = ( zlib$1 && zlib ) || zlib$1;

  var isTypedArray$1 = isTypedarray.strict;

  var cookies$1 = cookies;

  var Querystring$1 = querystring_1.Querystring;
  var Har$1 = har$3.Har;
  var Auth$1 = auth.Auth;
  var OAuth$1 = oauth_1.OAuth;
  var Multipart$1 = multipart.Multipart;
  var Redirect$1 = redirect.Redirect;
  var Tunnel$1 = tunnel_1.Tunnel;

  var Buffer$6 = safeBuffer.Buffer;

  var safeStringify$1 = helpers.safeStringify;
  var isReadStream$1 = helpers.isReadStream;
  var toBase64$2 = helpers.toBase64;
  var defer$3 = helpers.defer;
  var copy$2 = helpers.copy;
  var version$5 = helpers.version;
  var globalCookieJar = cookies$1.jar();

  var globalPool = {};

  function filterForNonReserved (reserved, options) {
    // Filter out properties that are not reserved.
    // Reserved values are passed in at call site.

    var object = {};
    for (var i in options) {
      var notReserved = (reserved.indexOf(i) === -1);
      if (notReserved) {
        object[i] = options[i];
      }
    }
    return object
  }

  function filterOutReservedFunctions (reserved, options) {
    // Filter out properties that are functions and are reserved.
    // Reserved values are passed in at call site.

    var object = {};
    for (var i in options) {
      var isReserved = !(reserved.indexOf(i) === -1);
      var isFunction = (typeof options[i] === 'function');
      if (!(isReserved && isFunction)) {
        object[i] = options[i];
      }
    }
    return object
  }

  // Return a simpler request object to allow serialization
  function requestToJSON () {
    var self = this;
    return {
      uri: self.uri,
      method: self.method,
      headers: self.headers
    }
  }

  // Return a simpler response object to allow serialization
  function responseToJSON () {
    var self = this;
    return {
      statusCode: self.statusCode,
      body: self.body,
      headers: self.headers,
      request: requestToJSON.call(self.request)
    }
  }

  function Request (options) {
    // if given the method property in options, set property explicitMethod to true

    // extend the Request instance with any non-reserved properties
    // remove any reserved functions from the options object
    // set Request instance to be readable and writable
    // call init

    var self = this;

    // start with HAR, then override with additional options
    if (options.har) {
      self._har = new Har$1(self);
      options = self._har.options(options);
    }

    stream$1.Stream.call(self);
    var reserved = Object.keys(Request.prototype);
    var nonReserved = filterForNonReserved(reserved, options);

    extend$1(self, nonReserved);
    options = filterOutReservedFunctions(reserved, options);

    self.readable = true;
    self.writable = true;
    if (options.method) {
      self.explicitMethod = true;
    }
    self._qs = new Querystring$1(self);
    self._auth = new Auth$1(self);
    self._oauth = new OAuth$1(self);
    self._multipart = new Multipart$1(self);
    self._redirect = new Redirect$1(self);
    self._tunnel = new Tunnel$1(self);
    self.init(options);
  }

  util$2.inherits(Request, stream$1.Stream);

  // Debugging
  Request.debug = process.env.NODE_DEBUG && /\brequest\b/.test(process.env.NODE_DEBUG);
  function debug$2 () {
    if (Request.debug) {
      console.error('REQUEST %s', util$2.format.apply(util$2, arguments));
    }
  }
  Request.prototype.debug = debug$2;

  Request.prototype.init = function (options) {
    // init() contains all the code to setup the request object.
    // the actual outgoing request is not started until start() is called
    // this function is called from both the constructor and on redirect.
    var self = this;
    if (!options) {
      options = {};
    }
    self.headers = self.headers ? copy$2(self.headers) : {};

    // Delete headers with value undefined since they break
    // ClientRequest.OutgoingMessage.setHeader in node 0.12
    for (var headerName in self.headers) {
      if (typeof self.headers[headerName] === 'undefined') {
        delete self.headers[headerName];
      }
    }

    caseless.httpify(self, self.headers);

    if (!self.method) {
      self.method = options.method || 'GET';
    }
    if (!self.localAddress) {
      self.localAddress = options.localAddress;
    }

    self._qs.init(options);

    debug$2(options);
    if (!self.pool && self.pool !== false) {
      self.pool = globalPool;
    }
    self.dests = self.dests || [];
    self.__isRequestRequest = true;

    // Protect against double callback
    if (!self._callback && self.callback) {
      self._callback = self.callback;
      self.callback = function () {
        if (self._callbackCalled) {
          return // Print a warning maybe?
        }
        self._callbackCalled = true;
        self._callback.apply(self, arguments);
      };
      self.on('error', self.callback.bind());
      self.on('complete', self.callback.bind(self, null));
    }

    // People use this property instead all the time, so support it
    if (!self.uri && self.url) {
      self.uri = self.url;
      delete self.url;
    }

    // If there's a baseUrl, then use it as the base URL (i.e. uri must be
    // specified as a relative path and is appended to baseUrl).
    if (self.baseUrl) {
      if (typeof self.baseUrl !== 'string') {
        return self.emit('error', new Error('options.baseUrl must be a string'))
      }

      if (typeof self.uri !== 'string') {
        return self.emit('error', new Error('options.uri must be a string when using options.baseUrl'))
      }

      if (self.uri.indexOf('//') === 0 || self.uri.indexOf('://') !== -1) {
        return self.emit('error', new Error('options.uri must be a path when using options.baseUrl'))
      }

      // Handle all cases to make sure that there's only one slash between
      // baseUrl and uri.
      var baseUrlEndsWithSlash = self.baseUrl.lastIndexOf('/') === self.baseUrl.length - 1;
      var uriStartsWithSlash = self.uri.indexOf('/') === 0;

      if (baseUrlEndsWithSlash && uriStartsWithSlash) {
        self.uri = self.baseUrl + self.uri.slice(1);
      } else if (baseUrlEndsWithSlash || uriStartsWithSlash) {
        self.uri = self.baseUrl + self.uri;
      } else if (self.uri === '') {
        self.uri = self.baseUrl;
      } else {
        self.uri = self.baseUrl + '/' + self.uri;
      }
      delete self.baseUrl;
    }

    // A URI is needed by this point, emit error if we haven't been able to get one
    if (!self.uri) {
      return self.emit('error', new Error('options.uri is a required argument'))
    }

    // If a string URI/URL was given, parse it into a URL object
    if (typeof self.uri === 'string') {
      self.uri = url$2.parse(self.uri);
    }

    // Some URL objects are not from a URL parsed string and need href added
    if (!self.uri.href) {
      self.uri.href = url$2.format(self.uri);
    }

    // DEPRECATED: Warning for users of the old Unix Sockets URL Scheme
    if (self.uri.protocol === 'unix:') {
      return self.emit('error', new Error('`unix://` URL scheme is no longer supported. Please use the format `http://unix:SOCKET:PATH`'))
    }

    // Support Unix Sockets
    if (self.uri.host === 'unix') {
      self.enableUnixSocket();
    }

    if (self.strictSSL === false) {
      self.rejectUnauthorized = false;
    }

    if (!self.uri.pathname) { self.uri.pathname = '/'; }

    if (!(self.uri.host || (self.uri.hostname && self.uri.port)) && !self.uri.isUnix) {
      // Invalid URI: it may generate lot of bad errors, like 'TypeError: Cannot call method `indexOf` of undefined' in CookieJar
      // Detect and reject it as soon as possible
      var faultyUri = url$2.format(self.uri);
      var message = 'Invalid URI "' + faultyUri + '"';
      if (Object.keys(options).length === 0) {
        // No option ? This can be the sign of a redirect
        // As this is a case where the user cannot do anything (they didn't call request directly with this URL)
        // they should be warned that it can be caused by a redirection (can save some hair)
        message += '. This can be caused by a crappy redirection.';
      }
      // This error was fatal
      self.abort();
      return self.emit('error', new Error(message))
    }

    if (!self.hasOwnProperty('proxy')) {
      self.proxy = getProxyFromURI_1(self.uri);
    }

    self.tunnel = self._tunnel.isEnabled();
    if (self.proxy) {
      self._tunnel.setup(options);
    }

    self._redirect.onRequest(options);

    self.setHost = false;
    if (!self.hasHeader('host')) {
      var hostHeaderName = self.originalHostHeaderName || 'host';
      // When used with an IPv6 address, `host` will provide
      // the correct bracketed format, unlike using `hostname` and
      // optionally adding the `port` when necessary.
      self.setHeader(hostHeaderName, self.uri.host);
      self.setHost = true;
    }

    self.jar(self._jar || options.jar);

    if (!self.uri.port) {
      if (self.uri.protocol === 'http:') { self.uri.port = 80; } else if (self.uri.protocol === 'https:') { self.uri.port = 443; }
    }

    if (self.proxy && !self.tunnel) {
      self.port = self.proxy.port;
      self.host = self.proxy.hostname;
    } else {
      self.port = self.uri.port;
      self.host = self.uri.hostname;
    }

    if (options.form) {
      self.form(options.form);
    }

    if (options.formData) {
      var formData = options.formData;
      var requestForm = self.form();
      var appendFormValue = function (key, value) {
        if (value && value.hasOwnProperty('value') && value.hasOwnProperty('options')) {
          requestForm.append(key, value.value, value.options);
        } else {
          requestForm.append(key, value);
        }
      };
      for (var formKey in formData) {
        if (formData.hasOwnProperty(formKey)) {
          var formValue = formData[formKey];
          if (formValue instanceof Array) {
            for (var j = 0; j < formValue.length; j++) {
              appendFormValue(formKey, formValue[j]);
            }
          } else {
            appendFormValue(formKey, formValue);
          }
        }
      }
    }

    if (options.qs) {
      self.qs(options.qs);
    }

    if (self.uri.path) {
      self.path = self.uri.path;
    } else {
      self.path = self.uri.pathname + (self.uri.search || '');
    }

    if (self.path.length === 0) {
      self.path = '/';
    }

    // Auth must happen last in case signing is dependent on other headers
    if (options.aws) {
      self.aws(options.aws);
    }

    if (options.hawk) {
      self.hawk(options.hawk);
    }

    if (options.httpSignature) {
      self.httpSignature(options.httpSignature);
    }

    if (options.auth) {
      if (Object.prototype.hasOwnProperty.call(options.auth, 'username')) {
        options.auth.user = options.auth.username;
      }
      if (Object.prototype.hasOwnProperty.call(options.auth, 'password')) {
        options.auth.pass = options.auth.password;
      }

      self.auth(
        options.auth.user,
        options.auth.pass,
        options.auth.sendImmediately,
        options.auth.bearer
      );
    }

    if (self.gzip && !self.hasHeader('accept-encoding')) {
      self.setHeader('accept-encoding', 'gzip, deflate');
    }

    if (self.uri.auth && !self.hasHeader('authorization')) {
      var uriAuthPieces = self.uri.auth.split(':').map(function (item) { return self._qs.unescape(item) });
      self.auth(uriAuthPieces[0], uriAuthPieces.slice(1).join(':'), true);
    }

    if (!self.tunnel && self.proxy && self.proxy.auth && !self.hasHeader('proxy-authorization')) {
      var proxyAuthPieces = self.proxy.auth.split(':').map(function (item) { return self._qs.unescape(item) });
      var authHeader = 'Basic ' + toBase64$2(proxyAuthPieces.join(':'));
      self.setHeader('proxy-authorization', authHeader);
    }

    if (self.proxy && !self.tunnel) {
      self.path = (self.uri.protocol + '//' + self.uri.host + self.path);
    }

    if (options.json) {
      self.json(options.json);
    }
    if (options.multipart) {
      self.multipart(options.multipart);
    }

    if (options.time) {
      self.timing = true;

      // NOTE: elapsedTime is deprecated in favor of .timings
      self.elapsedTime = self.elapsedTime || 0;
    }

    function setContentLength () {
      if (isTypedArray$1(self.body)) {
        self.body = Buffer$6.from(self.body);
      }

      if (!self.hasHeader('content-length')) {
        var length;
        if (typeof self.body === 'string') {
          length = Buffer$6.byteLength(self.body);
        } else if (Array.isArray(self.body)) {
          length = self.body.reduce(function (a, b) { return a + b.length }, 0);
        } else {
          length = self.body.length;
        }

        if (length) {
          self.setHeader('content-length', length);
        } else {
          self.emit('error', new Error('Argument error, options.body.'));
        }
      }
    }
    if (self.body && !isstream(self.body)) {
      setContentLength();
    }

    if (options.oauth) {
      self.oauth(options.oauth);
    } else if (self._oauth.params && self.hasHeader('authorization')) {
      self.oauth(self._oauth.params);
    }

    var protocol = self.proxy && !self.tunnel ? self.proxy.protocol : self.uri.protocol;
    var defaultModules = {'http:': http$2, 'https:': http$2};
    var httpModules = self.httpModules || {};

    self.httpModule = httpModules[protocol] || defaultModules[protocol];

    if (!self.httpModule) {
      return self.emit('error', new Error('Invalid protocol: ' + protocol))
    }

    if (options.ca) {
      self.ca = options.ca;
    }

    if (!self.agent) {
      if (options.agentOptions) {
        self.agentOptions = options.agentOptions;
      }

      if (options.agentClass) {
        self.agentClass = options.agentClass;
      } else if (options.forever) {
        var v = version$5();
        // use ForeverAgent in node 0.10- only
        if (v.major === 0 && v.minor <= 10) {
          self.agentClass = protocol === 'http:' ? foreverAgent : foreverAgent.SSL;
        } else {
          self.agentClass = self.httpModule.Agent;
          self.agentOptions = self.agentOptions || {};
          self.agentOptions.keepAlive = true;
        }
      } else {
        self.agentClass = self.httpModule.Agent;
      }
    }

    if (self.pool === false) {
      self.agent = false;
    } else {
      self.agent = self.agent || self.getNewAgent();
    }

    self.on('pipe', function (src) {
      if (self.ntick && self._started) {
        self.emit('error', new Error('You cannot pipe to this stream after the outbound request has started.'));
      }
      self.src = src;
      if (isReadStream$1(src)) {
        if (!self.hasHeader('content-type')) {
          self.setHeader('content-type', mimeTypes.lookup(src.path));
        }
      } else {
        if (src.headers) {
          for (var i in src.headers) {
            if (!self.hasHeader(i)) {
              self.setHeader(i, src.headers[i]);
            }
          }
        }
        if (self._json && !self.hasHeader('content-type')) {
          self.setHeader('content-type', 'application/json');
        }
        if (src.method && !self.explicitMethod) {
          self.method = src.method;
        }
      }

    // self.on('pipe', function () {
    //   console.error('You have already piped to this stream. Pipeing twice is likely to break the request.')
    // })
    });

    defer$3(function () {
      if (self._aborted) {
        return
      }

      var end = function () {
        if (self._form) {
          if (!self._auth.hasAuth) {
            self._form.pipe(self);
          } else if (self._auth.hasAuth && self._auth.sentAuth) {
            self._form.pipe(self);
          }
        }
        if (self._multipart && self._multipart.chunked) {
          self._multipart.body.pipe(self);
        }
        if (self.body) {
          if (isstream(self.body)) {
            self.body.pipe(self);
          } else {
            setContentLength();
            if (Array.isArray(self.body)) {
              self.body.forEach(function (part) {
                self.write(part);
              });
            } else {
              self.write(self.body);
            }
            self.end();
          }
        } else if (self.requestBodyStream) {
          console.warn('options.requestBodyStream is deprecated, please pass the request object to stream.pipe.');
          self.requestBodyStream.pipe(self);
        } else if (!self.src) {
          if (self._auth.hasAuth && !self._auth.sentAuth) {
            self.end();
            return
          }
          if (self.method !== 'GET' && typeof self.method !== 'undefined') {
            self.setHeader('content-length', 0);
          }
          self.end();
        }
      };

      if (self._form && !self.hasHeader('content-length')) {
        // Before ending the request, we had to compute the length of the whole form, asyncly
        self.setHeader(self._form.getHeaders(), true);
        self._form.getLength(function (err, length) {
          if (!err && !isNaN(length)) {
            self.setHeader('content-length', length);
          }
          end();
        });
      } else {
        end();
      }

      self.ntick = true;
    });
  };

  Request.prototype.getNewAgent = function () {
    var self = this;
    var Agent = self.agentClass;
    var options = {};
    if (self.agentOptions) {
      for (var i in self.agentOptions) {
        options[i] = self.agentOptions[i];
      }
    }
    if (self.ca) {
      options.ca = self.ca;
    }
    if (self.ciphers) {
      options.ciphers = self.ciphers;
    }
    if (self.secureProtocol) {
      options.secureProtocol = self.secureProtocol;
    }
    if (self.secureOptions) {
      options.secureOptions = self.secureOptions;
    }
    if (typeof self.rejectUnauthorized !== 'undefined') {
      options.rejectUnauthorized = self.rejectUnauthorized;
    }

    if (self.cert && self.key) {
      options.key = self.key;
      options.cert = self.cert;
    }

    if (self.pfx) {
      options.pfx = self.pfx;
    }

    if (self.passphrase) {
      options.passphrase = self.passphrase;
    }

    var poolKey = '';

    // different types of agents are in different pools
    if (Agent !== self.httpModule.Agent) {
      poolKey += Agent.name;
    }

    // ca option is only relevant if proxy or destination are https
    var proxy = self.proxy;
    if (typeof proxy === 'string') {
      proxy = url$2.parse(proxy);
    }
    var isHttps = (proxy && proxy.protocol === 'https:') || this.uri.protocol === 'https:';

    if (isHttps) {
      if (options.ca) {
        if (poolKey) {
          poolKey += ':';
        }
        poolKey += options.ca;
      }

      if (typeof options.rejectUnauthorized !== 'undefined') {
        if (poolKey) {
          poolKey += ':';
        }
        poolKey += options.rejectUnauthorized;
      }

      if (options.cert) {
        if (poolKey) {
          poolKey += ':';
        }
        poolKey += options.cert.toString('ascii') + options.key.toString('ascii');
      }

      if (options.pfx) {
        if (poolKey) {
          poolKey += ':';
        }
        poolKey += options.pfx.toString('ascii');
      }

      if (options.ciphers) {
        if (poolKey) {
          poolKey += ':';
        }
        poolKey += options.ciphers;
      }

      if (options.secureProtocol) {
        if (poolKey) {
          poolKey += ':';
        }
        poolKey += options.secureProtocol;
      }

      if (options.secureOptions) {
        if (poolKey) {
          poolKey += ':';
        }
        poolKey += options.secureOptions;
      }
    }

    if (self.pool === globalPool && !poolKey && Object.keys(options).length === 0 && self.httpModule.globalAgent) {
      // not doing anything special.  Use the globalAgent
      return self.httpModule.globalAgent
    }

    // we're using a stored agent.  Make sure it's protocol-specific
    poolKey = self.uri.protocol + poolKey;

    // generate a new agent for this setting if none yet exists
    if (!self.pool[poolKey]) {
      self.pool[poolKey] = new Agent(options);
      // properly set maxSockets on new agents
      if (self.pool.maxSockets) {
        self.pool[poolKey].maxSockets = self.pool.maxSockets;
      }
    }

    return self.pool[poolKey]
  };

  Request.prototype.start = function () {
    // start() is called once we are ready to send the outgoing HTTP request.
    // this is usually called on the first write(), end() or on nextTick()
    var self = this;

    if (self.timing) {
      // All timings will be relative to this request's startTime.  In order to do this,
      // we need to capture the wall-clock start time (via Date), immediately followed
      // by the high-resolution timer (via now()).  While these two won't be set
      // at the _exact_ same time, they should be close enough to be able to calculate
      // high-resolution, monotonically non-decreasing timestamps relative to startTime.
      var startTime = new Date().getTime();
      var startTimeNow = performanceNow$1();
    }

    if (self._aborted) {
      return
    }

    self._started = true;
    self.method = self.method || 'GET';
    self.href = self.uri.href;

    if (self.src && self.src.stat && self.src.stat.size && !self.hasHeader('content-length')) {
      self.setHeader('content-length', self.src.stat.size);
    }
    if (self._aws) {
      self.aws(self._aws, true);
    }

    // We have a method named auth, which is completely different from the http.request
    // auth option.  If we don't remove it, we're gonna have a bad time.
    var reqOptions = copy$2(self);
    delete reqOptions.auth;

    debug$2('make request', self.uri.href);

    // node v6.8.0 now supports a `timeout` value in `http.request()`, but we
    // should delete it for now since we handle timeouts manually for better
    // consistency with node versions before v6.8.0
    delete reqOptions.timeout;

    try {
      self.req = self.httpModule.request(reqOptions);
    } catch (err) {
      self.emit('error', err);
      return
    }

    if (self.timing) {
      self.startTime = startTime;
      self.startTimeNow = startTimeNow;

      // Timing values will all be relative to startTime (by comparing to startTimeNow
      // so we have an accurate clock)
      self.timings = {};
    }

    var timeout;
    if (self.timeout && !self.timeoutTimer) {
      if (self.timeout < 0) {
        timeout = 0;
      } else if (typeof self.timeout === 'number' && isFinite(self.timeout)) {
        timeout = self.timeout;
      }
    }

    self.req.on('response', self.onRequestResponse.bind(self));
    self.req.on('error', self.onRequestError.bind(self));
    self.req.on('drain', function () {
      self.emit('drain');
    });

    self.req.on('socket', function (socket) {
      // `._connecting` was the old property which was made public in node v6.1.0
      var isConnecting = socket._connecting || socket.connecting;
      if (self.timing) {
        self.timings.socket = performanceNow$1() - self.startTimeNow;

        if (isConnecting) {
          var onLookupTiming = function () {
            self.timings.lookup = performanceNow$1() - self.startTimeNow;
          };

          var onConnectTiming = function () {
            self.timings.connect = performanceNow$1() - self.startTimeNow;
          };

          socket.once('lookup', onLookupTiming);
          socket.once('connect', onConnectTiming);

          // clean up timing event listeners if needed on error
          self.req.once('error', function () {
            socket.removeListener('lookup', onLookupTiming);
            socket.removeListener('connect', onConnectTiming);
          });
        }
      }

      var setReqTimeout = function () {
        // This timeout sets the amount of time to wait *between* bytes sent
        // from the server once connected.
        //
        // In particular, it's useful for erroring if the server fails to send
        // data halfway through streaming a response.
        self.req.setTimeout(timeout, function () {
          if (self.req) {
            self.abort();
            var e = new Error('ESOCKETTIMEDOUT');
            e.code = 'ESOCKETTIMEDOUT';
            e.connect = false;
            self.emit('error', e);
          }
        });
      };
      if (timeout !== undefined) {
        // Only start the connection timer if we're actually connecting a new
        // socket, otherwise if we're already connected (because this is a
        // keep-alive connection) do not bother. This is important since we won't
        // get a 'connect' event for an already connected socket.
        if (isConnecting) {
          var onReqSockConnect = function () {
            socket.removeListener('connect', onReqSockConnect);
            clearTimeout(self.timeoutTimer);
            self.timeoutTimer = null;
            setReqTimeout();
          };

          socket.on('connect', onReqSockConnect);

          self.req.on('error', function (err) { // eslint-disable-line handle-callback-err
            socket.removeListener('connect', onReqSockConnect);
          });

          // Set a timeout in memory - this block will throw if the server takes more
          // than `timeout` to write the HTTP status and headers (corresponding to
          // the on('response') event on the client). NB: this measures wall-clock
          // time, not the time between bytes sent by the server.
          self.timeoutTimer = setTimeout(function () {
            socket.removeListener('connect', onReqSockConnect);
            self.abort();
            var e = new Error('ETIMEDOUT');
            e.code = 'ETIMEDOUT';
            e.connect = true;
            self.emit('error', e);
          }, timeout);
        } else {
          // We're already connected
          setReqTimeout();
        }
      }
      self.emit('socket', socket);
    });

    self.emit('request', self.req);
  };

  Request.prototype.onRequestError = function (error) {
    var self = this;
    if (self._aborted) {
      return
    }
    if (self.req && self.req._reusedSocket && error.code === 'ECONNRESET' &&
      self.agent.addRequestNoreuse) {
      self.agent = { addRequest: self.agent.addRequestNoreuse.bind(self.agent) };
      self.start();
      self.req.end();
      return
    }
    if (self.timeout && self.timeoutTimer) {
      clearTimeout(self.timeoutTimer);
      self.timeoutTimer = null;
    }
    self.emit('error', error);
  };

  Request.prototype.onRequestResponse = function (response) {
    var self = this;

    if (self.timing) {
      self.timings.response = performanceNow$1() - self.startTimeNow;
    }

    debug$2('onRequestResponse', self.uri.href, response.statusCode, response.headers);
    response.on('end', function () {
      if (self.timing) {
        self.timings.end = performanceNow$1() - self.startTimeNow;
        response.timingStart = self.startTime;

        // fill in the blanks for any periods that didn't trigger, such as
        // no lookup or connect due to keep alive
        if (!self.timings.socket) {
          self.timings.socket = 0;
        }
        if (!self.timings.lookup) {
          self.timings.lookup = self.timings.socket;
        }
        if (!self.timings.connect) {
          self.timings.connect = self.timings.lookup;
        }
        if (!self.timings.response) {
          self.timings.response = self.timings.connect;
        }

        debug$2('elapsed time', self.timings.end);

        // elapsedTime includes all redirects
        self.elapsedTime += Math.round(self.timings.end);

        // NOTE: elapsedTime is deprecated in favor of .timings
        response.elapsedTime = self.elapsedTime;

        // timings is just for the final fetch
        response.timings = self.timings;

        // pre-calculate phase timings as well
        response.timingPhases = {
          wait: self.timings.socket,
          dns: self.timings.lookup - self.timings.socket,
          tcp: self.timings.connect - self.timings.lookup,
          firstByte: self.timings.response - self.timings.connect,
          download: self.timings.end - self.timings.response,
          total: self.timings.end
        };
      }
      debug$2('response end', self.uri.href, response.statusCode, response.headers);
    });

    if (self._aborted) {
      debug$2('aborted', self.uri.href);
      response.resume();
      return
    }

    self.response = response;
    response.request = self;
    response.toJSON = responseToJSON;

    // XXX This is different on 0.10, because SSL is strict by default
    if (self.httpModule === http$2 &&
      self.strictSSL && (!response.hasOwnProperty('socket') ||
      !response.socket.authorized)) {
      debug$2('strict ssl error', self.uri.href);
      var sslErr = response.hasOwnProperty('socket') ? response.socket.authorizationError : self.uri.href + ' does not support SSL';
      self.emit('error', new Error('SSL Error: ' + sslErr));
      return
    }

    // Save the original host before any redirect (if it changes, we need to
    // remove any authorization headers).  Also remember the case of the header
    // name because lots of broken servers expect Host instead of host and we
    // want the caller to be able to specify this.
    self.originalHost = self.getHeader('host');
    if (!self.originalHostHeaderName) {
      self.originalHostHeaderName = self.hasHeader('host');
    }
    if (self.setHost) {
      self.removeHeader('host');
    }
    if (self.timeout && self.timeoutTimer) {
      clearTimeout(self.timeoutTimer);
      self.timeoutTimer = null;
    }

    var targetCookieJar = (self._jar && self._jar.setCookie) ? self._jar : globalCookieJar;
    var addCookie = function (cookie) {
      // set the cookie if it's domain in the href's domain.
      try {
        targetCookieJar.setCookie(cookie, self.uri.href, {ignoreError: true});
      } catch (e) {
        self.emit('error', e);
      }
    };

    response.caseless = caseless(response.headers);

    if (response.caseless.has('set-cookie') && (!self._disableCookies)) {
      var headerName = response.caseless.has('set-cookie');
      if (Array.isArray(response.headers[headerName])) {
        response.headers[headerName].forEach(addCookie);
      } else {
        addCookie(response.headers[headerName]);
      }
    }

    if (self._redirect.onResponse(response)) {
      return // Ignore the rest of the response
    } else {
      // Be a good stream and emit end when the response is finished.
      // Hack to emit end on close because of a core bug that never fires end
      response.on('close', function () {
        if (!self._ended) {
          self.response.emit('end');
        }
      });

      response.once('end', function () {
        self._ended = true;
      });

      var noBody = function (code) {
        return (
          self.method === 'HEAD' ||
          // Informational
          (code >= 100 && code < 200) ||
          // No Content
          code === 204 ||
          // Not Modified
          code === 304
        )
      };

      var responseContent;
      if (self.gzip && !noBody(response.statusCode)) {
        var contentEncoding = response.headers['content-encoding'] || 'identity';
        contentEncoding = contentEncoding.trim().toLowerCase();

        // Be more lenient with decoding compressed responses, since (very rarely)
        // servers send slightly invalid gzip responses that are still accepted
        // by common browsers.
        // Always using Z_SYNC_FLUSH is what cURL does.
        var zlibOptions = {
          flush: zlib$2.Z_SYNC_FLUSH,
          finishFlush: zlib$2.Z_SYNC_FLUSH
        };

        if (contentEncoding === 'gzip') {
          responseContent = zlib$2.createGunzip(zlibOptions);
          response.pipe(responseContent);
        } else if (contentEncoding === 'deflate') {
          responseContent = zlib$2.createInflate(zlibOptions);
          response.pipe(responseContent);
        } else {
          // Since previous versions didn't check for Content-Encoding header,
          // ignore any invalid values to preserve backwards-compatibility
          if (contentEncoding !== 'identity') {
            debug$2('ignoring unrecognized Content-Encoding ' + contentEncoding);
          }
          responseContent = response;
        }
      } else {
        responseContent = response;
      }

      if (self.encoding) {
        if (self.dests.length !== 0) {
          console.error('Ignoring encoding parameter as this stream is being piped to another stream which makes the encoding option invalid.');
        } else if (responseContent.setEncoding) {
          responseContent.setEncoding(self.encoding);
        } else {
          // Should only occur on node pre-v0.9.4 (joyent/node@9b5abe5) with
          // zlib streams.
          // If/When support for 0.9.4 is dropped, this should be unnecessary.
          responseContent = responseContent.pipe(stringstream(self.encoding));
        }
      }

      if (self._paused) {
        responseContent.pause();
      }

      self.responseContent = responseContent;

      self.emit('response', response);

      self.dests.forEach(function (dest) {
        self.pipeDest(dest);
      });

      responseContent.on('data', function (chunk) {
        if (self.timing && !self.responseStarted) {
          self.responseStartTime = (new Date()).getTime();

          // NOTE: responseStartTime is deprecated in favor of .timings
          response.responseStartTime = self.responseStartTime;
        }
        self._destdata = true;
        self.emit('data', chunk);
      });
      responseContent.once('end', function (chunk) {
        self.emit('end', chunk);
      });
      responseContent.on('error', function (error) {
        self.emit('error', error);
      });
      responseContent.on('close', function () { self.emit('close'); });

      if (self.callback) {
        self.readResponseBody(response);
      } else { // if no callback
        self.on('end', function () {
          if (self._aborted) {
            debug$2('aborted', self.uri.href);
            return
          }
          self.emit('complete', response);
        });
      }
    }
    debug$2('finish init function', self.uri.href);
  };

  Request.prototype.readResponseBody = function (response) {
    var self = this;
    debug$2("reading response's body");
    var buffers = [];
    var bufferLength = 0;
    var strings = [];

    self.on('data', function (chunk) {
      if (!Buffer$6.isBuffer(chunk)) {
        strings.push(chunk);
      } else if (chunk.length) {
        bufferLength += chunk.length;
        buffers.push(chunk);
      }
    });
    self.on('end', function () {
      debug$2('end event', self.uri.href);
      if (self._aborted) {
        debug$2('aborted', self.uri.href);
        // `buffer` is defined in the parent scope and used in a closure it exists for the life of the request.
        // This can lead to leaky behavior if the user retains a reference to the request object.
        buffers = [];
        bufferLength = 0;
        return
      }

      if (bufferLength) {
        debug$2('has body', self.uri.href, bufferLength);
        response.body = Buffer$6.concat(buffers, bufferLength);
        if (self.encoding !== null) {
          response.body = response.body.toString(self.encoding);
        }
        // `buffer` is defined in the parent scope and used in a closure it exists for the life of the Request.
        // This can lead to leaky behavior if the user retains a reference to the request object.
        buffers = [];
        bufferLength = 0;
      } else if (strings.length) {
        // The UTF8 BOM [0xEF,0xBB,0xBF] is converted to [0xFE,0xFF] in the JS UTC16/UCS2 representation.
        // Strip this value out when the encoding is set to 'utf8', as upstream consumers won't expect it and it breaks JSON.parse().
        if (self.encoding === 'utf8' && strings[0].length > 0 && strings[0][0] === '\uFEFF') {
          strings[0] = strings[0].substring(1);
        }
        response.body = strings.join('');
      }

      if (self._json) {
        try {
          response.body = JSON.parse(response.body, self._jsonReviver);
        } catch (e) {
          debug$2('invalid JSON received', self.uri.href);
        }
      }
      debug$2('emitting complete', self.uri.href);
      if (typeof response.body === 'undefined' && !self._json) {
        response.body = self.encoding === null ? Buffer$6.alloc(0) : '';
      }
      self.emit('complete', response, response.body);
    });
  };

  Request.prototype.abort = function () {
    var self = this;
    self._aborted = true;

    if (self.req) {
      self.req.abort();
    } else if (self.response) {
      self.response.destroy();
    }

    self.emit('abort');
  };

  Request.prototype.pipeDest = function (dest) {
    var self = this;
    var response = self.response;
    // Called after the response is received
    if (dest.headers && !dest.headersSent) {
      if (response.caseless.has('content-type')) {
        var ctname = response.caseless.has('content-type');
        if (dest.setHeader) {
          dest.setHeader(ctname, response.headers[ctname]);
        } else {
          dest.headers[ctname] = response.headers[ctname];
        }
      }

      if (response.caseless.has('content-length')) {
        var clname = response.caseless.has('content-length');
        if (dest.setHeader) {
          dest.setHeader(clname, response.headers[clname]);
        } else {
          dest.headers[clname] = response.headers[clname];
        }
      }
    }
    if (dest.setHeader && !dest.headersSent) {
      for (var i in response.headers) {
        // If the response content is being decoded, the Content-Encoding header
        // of the response doesn't represent the piped content, so don't pass it.
        if (!self.gzip || i !== 'content-encoding') {
          dest.setHeader(i, response.headers[i]);
        }
      }
      dest.statusCode = response.statusCode;
    }
    if (self.pipefilter) {
      self.pipefilter(response, dest);
    }
  };

  Request.prototype.qs = function (q, clobber) {
    var self = this;
    var base;
    if (!clobber && self.uri.query) {
      base = self._qs.parse(self.uri.query);
    } else {
      base = {};
    }

    for (var i in q) {
      base[i] = q[i];
    }

    var qs = self._qs.stringify(base);

    if (qs === '') {
      return self
    }

    self.uri = url$2.parse(self.uri.href.split('?')[0] + '?' + qs);
    self.url = self.uri;
    self.path = self.uri.path;

    if (self.uri.host === 'unix') {
      self.enableUnixSocket();
    }

    return self
  };
  Request.prototype.form = function (form) {
    var self = this;
    if (form) {
      if (!/^application\/x-www-form-urlencoded\b/.test(self.getHeader('content-type'))) {
        self.setHeader('content-type', 'application/x-www-form-urlencoded');
      }
      self.body = (typeof form === 'string')
        ? self._qs.rfc3986(form.toString('utf8'))
        : self._qs.stringify(form).toString('utf8');
      return self
    }
    // create form-data object
    self._form = new form_data();
    self._form.on('error', function (err) {
      err.message = 'form-data: ' + err.message;
      self.emit('error', err);
      self.abort();
    });
    return self._form
  };
  Request.prototype.multipart = function (multipart$$1) {
    var self = this;

    self._multipart.onRequest(multipart$$1);

    if (!self._multipart.chunked) {
      self.body = self._multipart.body;
    }

    return self
  };
  Request.prototype.json = function (val) {
    var self = this;

    if (!self.hasHeader('accept')) {
      self.setHeader('accept', 'application/json');
    }

    if (typeof self.jsonReplacer === 'function') {
      self._jsonReplacer = self.jsonReplacer;
    }

    self._json = true;
    if (typeof val === 'boolean') {
      if (self.body !== undefined) {
        if (!/^application\/x-www-form-urlencoded\b/.test(self.getHeader('content-type'))) {
          self.body = safeStringify$1(self.body, self._jsonReplacer);
        } else {
          self.body = self._qs.rfc3986(self.body);
        }
        if (!self.hasHeader('content-type')) {
          self.setHeader('content-type', 'application/json');
        }
      }
    } else {
      self.body = safeStringify$1(val, self._jsonReplacer);
      if (!self.hasHeader('content-type')) {
        self.setHeader('content-type', 'application/json');
      }
    }

    if (typeof self.jsonReviver === 'function') {
      self._jsonReviver = self.jsonReviver;
    }

    return self
  };
  Request.prototype.getHeader = function (name, headers) {
    var self = this;
    var result, re, match;
    if (!headers) {
      headers = self.headers;
    }
    Object.keys(headers).forEach(function (key) {
      if (key.length !== name.length) {
        return
      }
      re = new RegExp(name, 'i');
      match = key.match(re);
      if (match) {
        result = headers[key];
      }
    });
    return result
  };
  Request.prototype.enableUnixSocket = function () {
    // Get the socket & request paths from the URL
    var unixParts = this.uri.path.split(':');
    var host = unixParts[0];
    var path = unixParts[1];
    // Apply unix properties to request
    this.socketPath = host;
    this.uri.pathname = path;
    this.uri.path = path;
    this.uri.host = host;
    this.uri.hostname = host;
    this.uri.isUnix = true;
  };

  Request.prototype.auth = function (user, pass, sendImmediately, bearer) {
    var self = this;

    self._auth.onRequest(user, pass, sendImmediately, bearer);

    return self
  };
  Request.prototype.aws = function (opts, now) {
    var self = this;

    if (!now) {
      self._aws = opts;
      return self
    }

    if (opts.sign_version === 4 || opts.sign_version === '4') {
      // use aws4
      var options = {
        host: self.uri.host,
        path: self.uri.path,
        method: self.method,
        headers: {
          'content-type': self.getHeader('content-type') || ''
        },
        body: self.body
      };
      var signRes = aws4_1.sign(options, {
        accessKeyId: opts.key,
        secretAccessKey: opts.secret,
        sessionToken: opts.session
      });
      self.setHeader('authorization', signRes.headers.Authorization);
      self.setHeader('x-amz-date', signRes.headers['X-Amz-Date']);
      if (signRes.headers['X-Amz-Security-Token']) {
        self.setHeader('x-amz-security-token', signRes.headers['X-Amz-Security-Token']);
      }
    } else {
      // default: use aws-sign2
      var date = new Date();
      self.setHeader('date', date.toUTCString());
      var auth$$1 = {
        key: opts.key,
        secret: opts.secret,
        verb: self.method.toUpperCase(),
        date: date,
        contentType: self.getHeader('content-type') || '',
        md5: self.getHeader('content-md5') || '',
        amazonHeaders: awsSign2.canonicalizeHeaders(self.headers)
      };
      var path = self.uri.path;
      if (opts.bucket && path) {
        auth$$1.resource = '/' + opts.bucket + path;
      } else if (opts.bucket && !path) {
        auth$$1.resource = '/' + opts.bucket;
      } else if (!opts.bucket && path) {
        auth$$1.resource = path;
      } else if (!opts.bucket && !path) {
        auth$$1.resource = '/';
      }
      auth$$1.resource = awsSign2.canonicalizeResource(auth$$1.resource);
      self.setHeader('authorization', awsSign2.authorization(auth$$1));
    }

    return self
  };
  Request.prototype.httpSignature = function (opts) {
    var self = this;
    lib$8.signRequest({
      getHeader: function (header) {
        return self.getHeader(header, self.headers)
      },
      setHeader: function (header, value) {
        self.setHeader(header, value);
      },
      method: self.method,
      path: self.path
    }, opts);
    debug$2('httpSignature authorization', self.getHeader('authorization'));

    return self
  };
  Request.prototype.hawk = function (opts) {
    var self = this;
    self.setHeader('Authorization', lib$5.client.header(self.uri, self.method, opts).field);
  };
  Request.prototype.oauth = function (_oauth) {
    var self = this;

    self._oauth.onRequest(_oauth);

    return self
  };

  Request.prototype.jar = function (jar) {
    var self = this;
    var cookies$$1;

    if (self._redirect.redirectsFollowed === 0) {
      self.originalCookieHeader = self.getHeader('cookie');
    }

    if (!jar) {
      // disable cookies
      cookies$$1 = false;
      self._disableCookies = true;
    } else {
      var targetCookieJar = (jar && jar.getCookieString) ? jar : globalCookieJar;
      var urihref = self.uri.href;
      // fetch cookie in the Specified host
      if (targetCookieJar) {
        cookies$$1 = targetCookieJar.getCookieString(urihref);
      }
    }

    // if need cookie and cookie is not empty
    if (cookies$$1 && cookies$$1.length) {
      if (self.originalCookieHeader) {
        // Don't overwrite existing Cookie header
        self.setHeader('cookie', self.originalCookieHeader + '; ' + cookies$$1);
      } else {
        self.setHeader('cookie', cookies$$1);
      }
    }
    self._jar = jar;
    return self
  };

  // Stream API
  Request.prototype.pipe = function (dest, opts) {
    var self = this;

    if (self.response) {
      if (self._destdata) {
        self.emit('error', new Error('You cannot pipe after data has been emitted from the response.'));
      } else if (self._ended) {
        self.emit('error', new Error('You cannot pipe after the response has been ended.'));
      } else {
        stream$1.Stream.prototype.pipe.call(self, dest, opts);
        self.pipeDest(dest);
        return dest
      }
    } else {
      self.dests.push(dest);
      stream$1.Stream.prototype.pipe.call(self, dest, opts);
      return dest
    }
  };
  Request.prototype.write = function () {
    var self = this;
    if (self._aborted) { return }

    if (!self._started) {
      self.start();
    }
    if (self.req) {
      return self.req.write.apply(self.req, arguments)
    }
  };
  Request.prototype.end = function (chunk) {
    var self = this;
    if (self._aborted) { return }

    if (chunk) {
      self.write(chunk);
    }
    if (!self._started) {
      self.start();
    }
    if (self.req) {
      self.req.end();
    }
  };
  Request.prototype.pause = function () {
    var self = this;
    if (!self.responseContent) {
      self._paused = true;
    } else {
      self.responseContent.pause.apply(self.responseContent, arguments);
    }
  };
  Request.prototype.resume = function () {
    var self = this;
    if (!self.responseContent) {
      self._paused = false;
    } else {
      self.responseContent.resume.apply(self.responseContent, arguments);
    }
  };
  Request.prototype.destroy = function () {
    var self = this;
    if (!self._ended) {
      self.end();
    } else if (self.response) {
      self.response.destroy();
    }
  };

  Request.defaultProxyHeaderWhiteList =
    Tunnel$1.defaultProxyHeaderWhiteList.slice();

  Request.defaultProxyHeaderExclusiveList =
    Tunnel$1.defaultProxyHeaderExclusiveList.slice();

  // Exports

  Request.prototype.toJSON = requestToJSON;
  var request$4 = Request;

  var paramsHaveRequestBody$1 = helpers.paramsHaveRequestBody;

  // organize params for patch, post, put, head, del
  function initParams (uri, options, callback) {
    if (typeof options === 'function') {
      callback = options;
    }

    var params = {};
    if (typeof options === 'object') {
      extend$1(params, options, {uri: uri});
    } else if (typeof uri === 'string') {
      extend$1(params, {uri: uri});
    } else {
      extend$1(params, uri);
    }

    params.callback = callback || params.callback;
    return params
  }

  function request$5 (uri, options, callback) {
    if (typeof uri === 'undefined') {
      throw new Error('undefined is not a valid uri or options object.')
    }

    var params = initParams(uri, options, callback);

    if (params.method === 'HEAD' && paramsHaveRequestBody$1(params)) {
      throw new Error('HTTP HEAD requests MUST NOT include a request body.')
    }

    return new request$5.Request(params)
  }

  function verbFunc (verb) {
    var method = verb.toUpperCase();
    return function (uri, options, callback) {
      var params = initParams(uri, options, callback);
      params.method = method;
      return request$5(params, params.callback)
    }
  }

  // define like this to please codeintel/intellisense IDEs
  request$5.get = verbFunc('get');
  request$5.head = verbFunc('head');
  request$5.options = verbFunc('options');
  request$5.post = verbFunc('post');
  request$5.put = verbFunc('put');
  request$5.patch = verbFunc('patch');
  request$5.del = verbFunc('delete');
  request$5['delete'] = verbFunc('delete');

  request$5.jar = function (store) {
    return cookies.jar(store)
  };

  request$5.cookie = function (str) {
    return cookies.parse(str)
  };

  function wrapRequestMethod (method, options, requester, verb) {
    return function (uri, opts, callback) {
      var params = initParams(uri, opts, callback);

      var target = {};
      extend$1(true, target, options, params);

      target.pool = params.pool || options.pool;

      if (verb) {
        target.method = verb.toUpperCase();
      }

      if (typeof requester === 'function') {
        method = requester;
      }

      return method(target, target.callback)
    }
  }

  request$5.defaults = function (options, requester) {
    var self = this;

    options = options || {};

    if (typeof options === 'function') {
      requester = options;
      options = {};
    }

    var defaults = wrapRequestMethod(self, options, requester);

    var verbs = ['get', 'head', 'post', 'put', 'patch', 'del', 'delete'];
    verbs.forEach(function (verb) {
      defaults[verb] = wrapRequestMethod(self[verb], options, requester, verb);
    });

    defaults.cookie = wrapRequestMethod(self.cookie, options, requester);
    defaults.jar = self.jar;
    defaults.defaults = self.defaults;
    return defaults
  };

  request$5.forever = function (agentOptions, optionsArg) {
    var options = {};
    if (optionsArg) {
      extend$1(options, optionsArg);
    }
    if (agentOptions) {
      options.agentOptions = agentOptions;
    }

    options.forever = true;
    return request$5.defaults(options)
  };

  // Exports

  var request_1 = request$5;
  request$5.Request = request$4;
  request$5.initParams = initParams;

  // Backwards compatibility for request.debug
  Object.defineProperty(request$5, 'debug', {
    enumerable: true,
    get: function () {
      return request$5.Request.debug
    },
    set: function (debug) {
      request$5.Request.debug = debug;
    }
  });

  var es5 = createCommonjsModule(function (module) {
  var isES5 = (function(){
      return this === undefined;
  })();

  if (isES5) {
      module.exports = {
          freeze: Object.freeze,
          defineProperty: Object.defineProperty,
          getDescriptor: Object.getOwnPropertyDescriptor,
          keys: Object.keys,
          names: Object.getOwnPropertyNames,
          getPrototypeOf: Object.getPrototypeOf,
          isArray: Array.isArray,
          isES5: isES5,
          propertyIsWritable: function(obj, prop) {
              var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
              return !!(!descriptor || descriptor.writable || descriptor.set);
          }
      };
  } else {
      var has = {}.hasOwnProperty;
      var str = {}.toString;
      var proto = {}.constructor.prototype;

      var ObjectKeys = function (o) {
          var ret = [];
          for (var key in o) {
              if (has.call(o, key)) {
                  ret.push(key);
              }
          }
          return ret;
      };

      var ObjectGetDescriptor = function(o, key) {
          return {value: o[key]};
      };

      var ObjectDefineProperty = function (o, key, desc) {
          o[key] = desc.value;
          return o;
      };

      var ObjectFreeze = function (obj) {
          return obj;
      };

      var ObjectGetPrototypeOf = function (obj) {
          try {
              return Object(obj).constructor.prototype;
          }
          catch (e) {
              return proto;
          }
      };

      var ArrayIsArray = function (obj) {
          try {
              return str.call(obj) === "[object Array]";
          }
          catch(e) {
              return false;
          }
      };

      module.exports = {
          isArray: ArrayIsArray,
          keys: ObjectKeys,
          names: ObjectKeys,
          defineProperty: ObjectDefineProperty,
          getDescriptor: ObjectGetDescriptor,
          freeze: ObjectFreeze,
          getPrototypeOf: ObjectGetPrototypeOf,
          isES5: isES5,
          propertyIsWritable: function() {
              return true;
          }
      };
  }
  });
  var es5_1 = es5.freeze;
  var es5_2 = es5.defineProperty;
  var es5_3 = es5.getDescriptor;
  var es5_4 = es5.keys;
  var es5_5 = es5.names;
  var es5_6 = es5.getPrototypeOf;
  var es5_7 = es5.isArray;
  var es5_8 = es5.isES5;
  var es5_9 = es5.propertyIsWritable;

  var canEvaluate = typeof navigator == "undefined";

  var errorObj = {e: {}};
  var tryCatchTarget;
  var globalObject = typeof self !== "undefined" ? self :
      typeof window !== "undefined" ? window :
      typeof commonjsGlobal !== "undefined" ? commonjsGlobal :
      commonjsGlobal !== undefined ? commonjsGlobal : null;

  function tryCatcher() {
      try {
          var target = tryCatchTarget;
          tryCatchTarget = null;
          return target.apply(this, arguments);
      } catch (e) {
          errorObj.e = e;
          return errorObj;
      }
  }
  function tryCatch(fn) {
      tryCatchTarget = fn;
      return tryCatcher;
  }

  var inherits$2 = function(Child, Parent) {
      var hasProp = {}.hasOwnProperty;

      function T() {
          var this$1 = this;

          this.constructor = Child;
          this.constructor$ = Parent;
          for (var propertyName in Parent.prototype) {
              if (hasProp.call(Parent.prototype, propertyName) &&
                  propertyName.charAt(propertyName.length-1) !== "$"
             ) {
                  this$1[propertyName + "$"] = Parent.prototype[propertyName];
              }
          }
      }
      T.prototype = Parent.prototype;
      Child.prototype = new T();
      return Child.prototype;
  };


  function isPrimitive$3(val) {
      return val == null || val === true || val === false ||
          typeof val === "string" || typeof val === "number";

  }

  function isObject$5(value) {
      return typeof value === "function" ||
             typeof value === "object" && value !== null;
  }

  function maybeWrapAsError(maybeError) {
      if (!isPrimitive$3(maybeError)) { return maybeError; }

      return new Error(safeToString(maybeError));
  }

  function withAppended(target, appendee) {
      var len = target.length;
      var ret = new Array(len + 1);
      var i;
      for (i = 0; i < len; ++i) {
          ret[i] = target[i];
      }
      ret[i] = appendee;
      return ret;
  }

  function getDataPropertyOrDefault(obj, key, defaultValue) {
      if (es5.isES5) {
          var desc = Object.getOwnPropertyDescriptor(obj, key);

          if (desc != null) {
              return desc.get == null && desc.set == null
                      ? desc.value
                      : defaultValue;
          }
      } else {
          return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;
      }
  }

  function notEnumerableProp(obj, name, value) {
      if (isPrimitive$3(obj)) { return obj; }
      var descriptor = {
          value: value,
          configurable: true,
          enumerable: false,
          writable: true
      };
      es5.defineProperty(obj, name, descriptor);
      return obj;
  }

  function thrower(r) {
      throw r;
  }

  var inheritedDataKeys = (function() {
      var excludedPrototypes = [
          Array.prototype,
          Object.prototype,
          Function.prototype
      ];

      var isExcludedProto = function(val) {
          for (var i = 0; i < excludedPrototypes.length; ++i) {
              if (excludedPrototypes[i] === val) {
                  return true;
              }
          }
          return false;
      };

      if (es5.isES5) {
          var getKeys = Object.getOwnPropertyNames;
          return function(obj) {
              var ret = [];
              var visitedKeys = Object.create(null);
              while (obj != null && !isExcludedProto(obj)) {
                  var keys;
                  try {
                      keys = getKeys(obj);
                  } catch (e) {
                      return ret;
                  }
                  for (var i = 0; i < keys.length; ++i) {
                      var key = keys[i];
                      if (visitedKeys[key]) { continue; }
                      visitedKeys[key] = true;
                      var desc = Object.getOwnPropertyDescriptor(obj, key);
                      if (desc != null && desc.get == null && desc.set == null) {
                          ret.push(key);
                      }
                  }
                  obj = es5.getPrototypeOf(obj);
              }
              return ret;
          };
      } else {
          var hasProp = {}.hasOwnProperty;
          return function(obj) {
              if (isExcludedProto(obj)) { return []; }
              var ret = [];

              /*jshint forin:false */
              enumeration: for (var key in obj) {
                  if (hasProp.call(obj, key)) {
                      ret.push(key);
                  } else {
                      for (var i = 0; i < excludedPrototypes.length; ++i) {
                          if (hasProp.call(excludedPrototypes[i], key)) {
                              continue enumeration;
                          }
                      }
                      ret.push(key);
                  }
              }
              return ret;
          };
      }

  })();

  var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
  function isClass(fn) {
      try {
          if (typeof fn === "function") {
              var keys = es5.names(fn.prototype);

              var hasMethods = es5.isES5 && keys.length > 1;
              var hasMethodsOtherThanConstructor = keys.length > 0 &&
                  !(keys.length === 1 && keys[0] === "constructor");
              var hasThisAssignmentAndStaticMethods =
                  thisAssignmentPattern.test(fn + "") && es5.names(fn).length > 0;

              if (hasMethods || hasMethodsOtherThanConstructor ||
                  hasThisAssignmentAndStaticMethods) {
                  return true;
              }
          }
          return false;
      } catch (e) {
          return false;
      }
  }

  function toFastProperties(obj) {
      return obj;
      eval(obj);
  }

  var rident = /^[a-z$_][a-z$_0-9]*$/i;
  function isIdentifier(str) {
      return rident.test(str);
  }

  function filledRange(count, prefix, suffix) {
      var ret = new Array(count);
      for(var i = 0; i < count; ++i) {
          ret[i] = prefix + i + suffix;
      }
      return ret;
  }

  function safeToString(obj) {
      try {
          return obj + "";
      } catch (e) {
          return "[no string representation]";
      }
  }

  function isError$2(obj) {
      return obj instanceof Error ||
          (obj !== null &&
             typeof obj === "object" &&
             typeof obj.message === "string" &&
             typeof obj.name === "string");
  }

  function markAsOriginatingFromRejection(e) {
      try {
          notEnumerableProp(e, "isOperational", true);
      }
      catch(ignore) {}
  }

  function originatesFromRejection(e) {
      if (e == null) { return false; }
      return ((e instanceof Error["__BluebirdErrorTypes__"].OperationalError) ||
          e["isOperational"] === true);
  }

  function canAttachTrace(obj) {
      return isError$2(obj) && es5.propertyIsWritable(obj, "stack");
  }

  var ensureErrorObject = (function() {
      if (!("stack" in new Error())) {
          return function(value) {
              if (canAttachTrace(value)) { return value; }
              try {throw new Error(safeToString(value));}
              catch(err) {return err;}
          };
      } else {
          return function(value) {
              if (canAttachTrace(value)) { return value; }
              return new Error(safeToString(value));
          };
      }
  })();

  function classString(obj) {
      return {}.toString.call(obj);
  }

  function copyDescriptors(from, to, filter) {
      var keys = es5.names(from);
      for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (filter(key)) {
              try {
                  es5.defineProperty(to, key, es5.getDescriptor(from, key));
              } catch (ignore) {}
          }
      }
  }

  var asArray = function(v) {
      if (es5.isArray(v)) {
          return v;
      }
      return null;
  };

  if (typeof Symbol !== "undefined" && Symbol.iterator) {
      var ArrayFrom = typeof Array.from === "function" ? function(v) {
          return Array.from(v);
      } : function(v) {
          var ret = [];
          var it = v[Symbol.iterator]();
          var itResult;
          while (!((itResult = it.next()).done)) {
              ret.push(itResult.value);
          }
          return ret;
      };

      asArray = function(v) {
          if (es5.isArray(v)) {
              return v;
          } else if (v != null && typeof v[Symbol.iterator] === "function") {
              return ArrayFrom(v);
          }
          return null;
      };
  }

  var isNode = typeof process !== "undefined" &&
          classString(process).toLowerCase() === "[object process]";

  var hasEnvVariables = typeof process !== "undefined" &&
      typeof process.env !== "undefined";

  function env$1(key) {
      return hasEnvVariables ? process.env[key] : undefined;
  }

  function getNativePromise() {
      if (typeof Promise === "function") {
          try {
              var promise = new Promise(function(){});
              if ({}.toString.call(promise) === "[object Promise]") {
                  return Promise;
              }
          } catch (e) {}
      }
  }

  function domainBind(self, cb) {
      return self.bind(cb);
  }

  var ret = {
      isClass: isClass,
      isIdentifier: isIdentifier,
      inheritedDataKeys: inheritedDataKeys,
      getDataPropertyOrDefault: getDataPropertyOrDefault,
      thrower: thrower,
      isArray: es5.isArray,
      asArray: asArray,
      notEnumerableProp: notEnumerableProp,
      isPrimitive: isPrimitive$3,
      isObject: isObject$5,
      isError: isError$2,
      canEvaluate: canEvaluate,
      errorObj: errorObj,
      tryCatch: tryCatch,
      inherits: inherits$2,
      withAppended: withAppended,
      maybeWrapAsError: maybeWrapAsError,
      toFastProperties: toFastProperties,
      filledRange: filledRange,
      toString: safeToString,
      canAttachTrace: canAttachTrace,
      ensureErrorObject: ensureErrorObject,
      originatesFromRejection: originatesFromRejection,
      markAsOriginatingFromRejection: markAsOriginatingFromRejection,
      classString: classString,
      copyDescriptors: copyDescriptors,
      hasDevTools: typeof chrome !== "undefined" && chrome &&
                   typeof chrome.loadTimes === "function",
      isNode: isNode,
      hasEnvVariables: hasEnvVariables,
      env: env$1,
      global: globalObject,
      getNativePromise: getNativePromise,
      domainBind: domainBind
  };
  ret.isRecentNode = ret.isNode && (function() {
      var version = process.versions.node.split(".").map(Number);
      return (version[0] === 0 && version[1] > 10) || (version[0] > 0);
  })();

  if (ret.isNode) { ret.toFastProperties(process); }

  try {throw new Error(); } catch (e) {ret.lastLineError = e;}
  var util$5 = ret;

  var schedule;
  var noAsyncScheduler = function() {
      throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
  };
  var NativePromise = util$5.getNativePromise();
  if (util$5.isNode && typeof MutationObserver === "undefined") {
      var GlobalSetImmediate = commonjsGlobal.setImmediate;
      var ProcessNextTick = process.nextTick;
      schedule = util$5.isRecentNode
                  ? function(fn) { GlobalSetImmediate.call(commonjsGlobal, fn); }
                  : function(fn) { ProcessNextTick.call(process, fn); };
  } else if (typeof NativePromise === "function" &&
             typeof NativePromise.resolve === "function") {
      var nativePromise = NativePromise.resolve();
      schedule = function(fn) {
          nativePromise.then(fn);
      };
  } else if ((typeof MutationObserver !== "undefined") &&
            !(typeof window !== "undefined" &&
              window.navigator &&
              (window.navigator.standalone || window.cordova))) {
      schedule = (function() {
          var div = document.createElement("div");
          var opts = {attributes: true};
          var toggleScheduled = false;
          var div2 = document.createElement("div");
          var o2 = new MutationObserver(function() {
              div.classList.toggle("foo");
              toggleScheduled = false;
          });
          o2.observe(div2, opts);

          var scheduleToggle = function() {
              if (toggleScheduled) { return; }
              toggleScheduled = true;
              div2.classList.toggle("foo");
          };

          return function schedule(fn) {
              var o = new MutationObserver(function() {
                  o.disconnect();
                  fn();
              });
              o.observe(div, opts);
              scheduleToggle();
          };
      })();
  } else if (typeof setImmediate !== "undefined") {
      schedule = function (fn) {
          setImmediate(fn);
      };
  } else if (typeof setTimeout !== "undefined") {
      schedule = function (fn) {
          setTimeout(fn, 0);
      };
  } else {
      schedule = noAsyncScheduler;
  }
  var schedule_1 = schedule;

  function arrayMove(src, srcIndex, dst, dstIndex, len) {
      for (var j = 0; j < len; ++j) {
          dst[j + dstIndex] = src[j + srcIndex];
          src[j + srcIndex] = void 0;
      }
  }

  function Queue(capacity) {
      this._capacity = capacity;
      this._length = 0;
      this._front = 0;
  }

  Queue.prototype._willBeOverCapacity = function (size) {
      return this._capacity < size;
  };

  Queue.prototype._pushOne = function (arg) {
      var length = this.length();
      this._checkCapacity(length + 1);
      var i = (this._front + length) & (this._capacity - 1);
      this[i] = arg;
      this._length = length + 1;
  };

  Queue.prototype.push = function (fn, receiver, arg) {
      var length = this.length() + 3;
      if (this._willBeOverCapacity(length)) {
          this._pushOne(fn);
          this._pushOne(receiver);
          this._pushOne(arg);
          return;
      }
      var j = this._front + length - 3;
      this._checkCapacity(length);
      var wrapMask = this._capacity - 1;
      this[(j + 0) & wrapMask] = fn;
      this[(j + 1) & wrapMask] = receiver;
      this[(j + 2) & wrapMask] = arg;
      this._length = length;
  };

  Queue.prototype.shift = function () {
      var front = this._front,
          ret = this[front];

      this[front] = undefined;
      this._front = (front + 1) & (this._capacity - 1);
      this._length--;
      return ret;
  };

  Queue.prototype.length = function () {
      return this._length;
  };

  Queue.prototype._checkCapacity = function (size) {
      if (this._capacity < size) {
          this._resizeTo(this._capacity << 1);
      }
  };

  Queue.prototype._resizeTo = function (capacity) {
      var oldCapacity = this._capacity;
      this._capacity = capacity;
      var front = this._front;
      var length = this._length;
      var moveItemsCount = (front + length) & (oldCapacity - 1);
      arrayMove(this, 0, this, oldCapacity, moveItemsCount);
  };

  var queue$2 = Queue;

  var firstLineError;
  try {throw new Error(); } catch (e) {firstLineError = e;}




  function Async() {
      this._customScheduler = false;
      this._isTickUsed = false;
      this._lateQueue = new queue$2(16);
      this._normalQueue = new queue$2(16);
      this._haveDrainedQueues = false;
      this._trampolineEnabled = true;
      var self = this;
      this.drainQueues = function () {
          self._drainQueues();
      };
      this._schedule = schedule_1;
  }

  Async.prototype.setScheduler = function(fn) {
      var prev = this._schedule;
      this._schedule = fn;
      this._customScheduler = true;
      return prev;
  };

  Async.prototype.hasCustomScheduler = function() {
      return this._customScheduler;
  };

  Async.prototype.enableTrampoline = function() {
      this._trampolineEnabled = true;
  };

  Async.prototype.disableTrampolineIfNecessary = function() {
      if (util$5.hasDevTools) {
          this._trampolineEnabled = false;
      }
  };

  Async.prototype.haveItemsQueued = function () {
      return this._isTickUsed || this._haveDrainedQueues;
  };


  Async.prototype.fatalError = function(e, isNode) {
      if (isNode) {
          process.stderr.write("Fatal " + (e instanceof Error ? e.stack : e) +
              "\n");
          process.exit(2);
      } else {
          this.throwLater(e);
      }
  };

  Async.prototype.throwLater = function(fn, arg) {
      if (arguments.length === 1) {
          arg = fn;
          fn = function () { throw arg; };
      }
      if (typeof setTimeout !== "undefined") {
          setTimeout(function() {
              fn(arg);
          }, 0);
      } else { try {
          this._schedule(function() {
              fn(arg);
          });
      } catch (e) {
          throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      } }
  };

  function AsyncInvokeLater(fn, receiver, arg) {
      this._lateQueue.push(fn, receiver, arg);
      this._queueTick();
  }

  function AsyncInvoke(fn, receiver, arg) {
      this._normalQueue.push(fn, receiver, arg);
      this._queueTick();
  }

  function AsyncSettlePromises(promise) {
      this._normalQueue._pushOne(promise);
      this._queueTick();
  }

  if (!util$5.hasDevTools) {
      Async.prototype.invokeLater = AsyncInvokeLater;
      Async.prototype.invoke = AsyncInvoke;
      Async.prototype.settlePromises = AsyncSettlePromises;
  } else {
      Async.prototype.invokeLater = function (fn, receiver, arg) {
          if (this._trampolineEnabled) {
              AsyncInvokeLater.call(this, fn, receiver, arg);
          } else {
              this._schedule(function() {
                  setTimeout(function() {
                      fn.call(receiver, arg);
                  }, 100);
              });
          }
      };

      Async.prototype.invoke = function (fn, receiver, arg) {
          if (this._trampolineEnabled) {
              AsyncInvoke.call(this, fn, receiver, arg);
          } else {
              this._schedule(function() {
                  fn.call(receiver, arg);
              });
          }
      };

      Async.prototype.settlePromises = function(promise) {
          if (this._trampolineEnabled) {
              AsyncSettlePromises.call(this, promise);
          } else {
              this._schedule(function() {
                  promise._settlePromises();
              });
          }
      };
  }

  Async.prototype._drainQueue = function(queue) {
      while (queue.length() > 0) {
          var fn = queue.shift();
          if (typeof fn !== "function") {
              fn._settlePromises();
              continue;
          }
          var receiver = queue.shift();
          var arg = queue.shift();
          fn.call(receiver, arg);
      }
  };

  Async.prototype._drainQueues = function () {
      this._drainQueue(this._normalQueue);
      this._reset();
      this._haveDrainedQueues = true;
      this._drainQueue(this._lateQueue);
  };

  Async.prototype._queueTick = function () {
      if (!this._isTickUsed) {
          this._isTickUsed = true;
          this._schedule(this.drainQueues);
      }
  };

  Async.prototype._reset = function () {
      this._isTickUsed = false;
  };

  var async$2 = Async;
  var firstLineError_1 = firstLineError;
  async$2.firstLineError = firstLineError_1;

  var Objectfreeze = es5.freeze;

  var inherits$3 = util$5.inherits;
  var notEnumerableProp$1 = util$5.notEnumerableProp;

  function subError(nameProperty, defaultMessage) {
      function SubError(message) {
          if (!(this instanceof SubError)) { return new SubError(message); }
          notEnumerableProp$1(this, "message",
              typeof message === "string" ? message : defaultMessage);
          notEnumerableProp$1(this, "name", nameProperty);
          if (Error.captureStackTrace) {
              Error.captureStackTrace(this, this.constructor);
          } else {
              Error.call(this);
          }
      }
      inherits$3(SubError, Error);
      return SubError;
  }

  var _TypeError, _RangeError;
  var Warning = subError("Warning", "warning");
  var CancellationError = subError("CancellationError", "cancellation error");
  var TimeoutError = subError("TimeoutError", "timeout error");
  var AggregateError = subError("AggregateError", "aggregate error");
  try {
      _TypeError = TypeError;
      _RangeError = RangeError;
  } catch(e) {
      _TypeError = subError("TypeError", "type error");
      _RangeError = subError("RangeError", "range error");
  }

  var methods = ("join pop push shift unshift slice filter forEach some " +
      "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");

  for (var i$1 = 0; i$1 < methods.length; ++i$1) {
      if (typeof Array.prototype[methods[i$1]] === "function") {
          AggregateError.prototype[methods[i$1]] = Array.prototype[methods[i$1]];
      }
  }

  es5.defineProperty(AggregateError.prototype, "length", {
      value: 0,
      configurable: false,
      writable: true,
      enumerable: true
  });
  AggregateError.prototype["isOperational"] = true;
  var level = 0;
  AggregateError.prototype.toString = function() {
      var this$1 = this;

      var indent = Array(level * 4 + 1).join(" ");
      var ret = "\n" + indent + "AggregateError of:" + "\n";
      level++;
      indent = Array(level * 4 + 1).join(" ");
      for (var i = 0; i < this.length; ++i) {
          var str = this$1[i] === this$1 ? "[Circular AggregateError]" : this$1[i] + "";
          var lines = str.split("\n");
          for (var j = 0; j < lines.length; ++j) {
              lines[j] = indent + lines[j];
          }
          str = lines.join("\n");
          ret += str + "\n";
      }
      level--;
      return ret;
  };

  function OperationalError(message) {
      if (!(this instanceof OperationalError))
          { return new OperationalError(message); }
      notEnumerableProp$1(this, "name", "OperationalError");
      notEnumerableProp$1(this, "message", message);
      this.cause = message;
      this["isOperational"] = true;

      if (message instanceof Error) {
          notEnumerableProp$1(this, "message", message.message);
          notEnumerableProp$1(this, "stack", message.stack);
      } else if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
      }

  }
  inherits$3(OperationalError, Error);

  var errorTypes = Error["__BluebirdErrorTypes__"];
  if (!errorTypes) {
      errorTypes = Objectfreeze({
          CancellationError: CancellationError,
          TimeoutError: TimeoutError,
          OperationalError: OperationalError,
          RejectionError: OperationalError,
          AggregateError: AggregateError
      });
      es5.defineProperty(Error, "__BluebirdErrorTypes__", {
          value: errorTypes,
          writable: false,
          enumerable: false,
          configurable: false
      });
  }

  var errors$3 = {
      Error: Error,
      TypeError: _TypeError,
      RangeError: _RangeError,
      CancellationError: errorTypes.CancellationError,
      OperationalError: errorTypes.OperationalError,
      TimeoutError: errorTypes.TimeoutError,
      AggregateError: errorTypes.AggregateError,
      Warning: Warning
  };

  var thenables = function(Promise, INTERNAL) {
  var util = util$5;
  var errorObj = util.errorObj;
  var isObject = util.isObject;

  function tryConvertToPromise(obj, context) {
      if (isObject(obj)) {
          if (obj instanceof Promise) { return obj; }
          var then = getThen(obj);
          if (then === errorObj) {
              if (context) { context._pushContext(); }
              var ret = Promise.reject(then.e);
              if (context) { context._popContext(); }
              return ret;
          } else if (typeof then === "function") {
              if (isAnyBluebirdPromise(obj)) {
                  var ret = new Promise(INTERNAL);
                  obj._then(
                      ret._fulfill,
                      ret._reject,
                      undefined,
                      ret,
                      null
                  );
                  return ret;
              }
              return doThenable(obj, then, context);
          }
      }
      return obj;
  }

  function doGetThen(obj) {
      return obj.then;
  }

  function getThen(obj) {
      try {
          return doGetThen(obj);
      } catch (e) {
          errorObj.e = e;
          return errorObj;
      }
  }

  var hasProp = {}.hasOwnProperty;
  function isAnyBluebirdPromise(obj) {
      try {
          return hasProp.call(obj, "_promise0");
      } catch (e) {
          return false;
      }
  }

  function doThenable(x, then, context) {
      var promise = new Promise(INTERNAL);
      var ret = promise;
      if (context) { context._pushContext(); }
      promise._captureStackTrace();
      if (context) { context._popContext(); }
      var synchronous = true;
      var result = util.tryCatch(then).call(x, resolve, reject);
      synchronous = false;

      if (promise && result === errorObj) {
          promise._rejectCallback(result.e, true, true);
          promise = null;
      }

      function resolve(value) {
          if (!promise) { return; }
          promise._resolveCallback(value);
          promise = null;
      }

      function reject(reason) {
          if (!promise) { return; }
          promise._rejectCallback(reason, synchronous, true);
          promise = null;
      }
      return ret;
  }

  return tryConvertToPromise;
  };

  var promise_array = function(Promise, INTERNAL, tryConvertToPromise,
      apiRejection, Proxyable) {
  var util = util$5;

  function toResolutionValue(val) {
      switch(val) {
      case -2: return [];
      case -3: return {};
      case -6: return new Map();
      }
  }

  function PromiseArray(values) {
      var promise = this._promise = new Promise(INTERNAL);
      if (values instanceof Promise) {
          promise._propagateFrom(values, 3);
      }
      promise._setOnCancel(this);
      this._values = values;
      this._length = 0;
      this._totalResolved = 0;
      this._init(undefined, -2);
  }
  util.inherits(PromiseArray, Proxyable);

  PromiseArray.prototype.length = function () {
      return this._length;
  };

  PromiseArray.prototype.promise = function () {
      return this._promise;
  };

  PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
      var values = tryConvertToPromise(this._values, this._promise);
      if (values instanceof Promise) {
          values = values._target();
          var bitField = values._bitField;
          this._values = values;

          if (((bitField & 50397184) === 0)) {
              this._promise._setAsyncGuaranteed();
              return values._then(
                  init,
                  this._reject,
                  undefined,
                  this,
                  resolveValueIfEmpty
             );
          } else if (((bitField & 33554432) !== 0)) {
              values = values._value();
          } else if (((bitField & 16777216) !== 0)) {
              return this._reject(values._reason());
          } else {
              return this._cancel();
          }
      }
      values = util.asArray(values);
      if (values === null) {
          var err = apiRejection(
              "expecting an array or an iterable object but got " + util.classString(values)).reason();
          this._promise._rejectCallback(err, false);
          return;
      }

      if (values.length === 0) {
          if (resolveValueIfEmpty === -5) {
              this._resolveEmptyArray();
          }
          else {
              this._resolve(toResolutionValue(resolveValueIfEmpty));
          }
          return;
      }
      this._iterate(values);
  };

  PromiseArray.prototype._iterate = function(values) {
      var this$1 = this;

      var len = this.getActualLength(values.length);
      this._length = len;
      this._values = this.shouldCopyValues() ? new Array(len) : this._values;
      var result = this._promise;
      var isResolved = false;
      var bitField = null;
      for (var i = 0; i < len; ++i) {
          var maybePromise = tryConvertToPromise(values[i], result);

          if (maybePromise instanceof Promise) {
              maybePromise = maybePromise._target();
              bitField = maybePromise._bitField;
          } else {
              bitField = null;
          }

          if (isResolved) {
              if (bitField !== null) {
                  maybePromise.suppressUnhandledRejections();
              }
          } else if (bitField !== null) {
              if (((bitField & 50397184) === 0)) {
                  maybePromise._proxy(this$1, i);
                  this$1._values[i] = maybePromise;
              } else if (((bitField & 33554432) !== 0)) {
                  isResolved = this$1._promiseFulfilled(maybePromise._value(), i);
              } else if (((bitField & 16777216) !== 0)) {
                  isResolved = this$1._promiseRejected(maybePromise._reason(), i);
              } else {
                  isResolved = this$1._promiseCancelled(i);
              }
          } else {
              isResolved = this$1._promiseFulfilled(maybePromise, i);
          }
      }
      if (!isResolved) { result._setAsyncGuaranteed(); }
  };

  PromiseArray.prototype._isResolved = function () {
      return this._values === null;
  };

  PromiseArray.prototype._resolve = function (value) {
      this._values = null;
      this._promise._fulfill(value);
  };

  PromiseArray.prototype._cancel = function() {
      if (this._isResolved() || !this._promise._isCancellable()) { return; }
      this._values = null;
      this._promise._cancel();
  };

  PromiseArray.prototype._reject = function (reason) {
      this._values = null;
      this._promise._rejectCallback(reason, false);
  };

  PromiseArray.prototype._promiseFulfilled = function (value, index) {
      this._values[index] = value;
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= this._length) {
          this._resolve(this._values);
          return true;
      }
      return false;
  };

  PromiseArray.prototype._promiseCancelled = function() {
      this._cancel();
      return true;
  };

  PromiseArray.prototype._promiseRejected = function (reason) {
      this._totalResolved++;
      this._reject(reason);
      return true;
  };

  PromiseArray.prototype._resultCancelled = function() {
      if (this._isResolved()) { return; }
      var values = this._values;
      this._cancel();
      if (values instanceof Promise) {
          values.cancel();
      } else {
          for (var i = 0; i < values.length; ++i) {
              if (values[i] instanceof Promise) {
                  values[i].cancel();
              }
          }
      }
  };

  PromiseArray.prototype.shouldCopyValues = function () {
      return true;
  };

  PromiseArray.prototype.getActualLength = function (len) {
      return len;
  };

  return PromiseArray;
  };

  var context = function(Promise) {
  var longStackTraces = false;
  var contextStack = [];

  Promise.prototype._promiseCreated = function() {};
  Promise.prototype._pushContext = function() {};
  Promise.prototype._popContext = function() {return null;};
  Promise._peekContext = Promise.prototype._peekContext = function() {};

  function Context() {
      this._trace = new Context.CapturedTrace(peekContext());
  }
  Context.prototype._pushContext = function () {
      if (this._trace !== undefined) {
          this._trace._promiseCreated = null;
          contextStack.push(this._trace);
      }
  };

  Context.prototype._popContext = function () {
      if (this._trace !== undefined) {
          var trace = contextStack.pop();
          var ret = trace._promiseCreated;
          trace._promiseCreated = null;
          return ret;
      }
      return null;
  };

  function createContext() {
      if (longStackTraces) { return new Context(); }
  }

  function peekContext() {
      var lastIndex = contextStack.length - 1;
      if (lastIndex >= 0) {
          return contextStack[lastIndex];
      }
      return undefined;
  }
  Context.CapturedTrace = null;
  Context.create = createContext;
  Context.deactivateLongStackTraces = function() {};
  Context.activateLongStackTraces = function() {
      var Promise_pushContext = Promise.prototype._pushContext;
      var Promise_popContext = Promise.prototype._popContext;
      var Promise_PeekContext = Promise._peekContext;
      var Promise_peekContext = Promise.prototype._peekContext;
      var Promise_promiseCreated = Promise.prototype._promiseCreated;
      Context.deactivateLongStackTraces = function() {
          Promise.prototype._pushContext = Promise_pushContext;
          Promise.prototype._popContext = Promise_popContext;
          Promise._peekContext = Promise_PeekContext;
          Promise.prototype._peekContext = Promise_peekContext;
          Promise.prototype._promiseCreated = Promise_promiseCreated;
          longStackTraces = false;
      };
      longStackTraces = true;
      Promise.prototype._pushContext = Context.prototype._pushContext;
      Promise.prototype._popContext = Context.prototype._popContext;
      Promise._peekContext = Promise.prototype._peekContext = peekContext;
      Promise.prototype._promiseCreated = function() {
          var ctx = this._peekContext();
          if (ctx && ctx._promiseCreated == null) { ctx._promiseCreated = this; }
      };
  };
  return Context;
  };

  var debuggability = function(Promise, Context) {
  var getDomain = Promise._getDomain;
  var async = Promise._async;
  var Warning = errors$3.Warning;
  var util = util$5;
  var canAttachTrace = util.canAttachTrace;
  var unhandledRejectionHandled;
  var possiblyUnhandledRejection;
  var bluebirdFramePattern =
      /[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/;
  var nodeFramePattern = /\((?:timers\.js):\d+:\d+\)/;
  var parseLinePattern = /[\/<\(](.+?):(\d+):(\d+)\)?\s*$/;
  var stackFramePattern = null;
  var formatStack = null;
  var indentStackFrames = false;
  var printWarning;
  var debugging = !!(util.env("BLUEBIRD_DEBUG") != 0 &&
                          (false ||
                           util.env("BLUEBIRD_DEBUG") ||
                           util.env("NODE_ENV") === "development"));

  var warnings = !!(util.env("BLUEBIRD_WARNINGS") != 0 &&
      (debugging || util.env("BLUEBIRD_WARNINGS")));

  var longStackTraces = !!(util.env("BLUEBIRD_LONG_STACK_TRACES") != 0 &&
      (debugging || util.env("BLUEBIRD_LONG_STACK_TRACES")));

  var wForgottenReturn = util.env("BLUEBIRD_W_FORGOTTEN_RETURN") != 0 &&
      (warnings || !!util.env("BLUEBIRD_W_FORGOTTEN_RETURN"));

  Promise.prototype.suppressUnhandledRejections = function() {
      var target = this._target();
      target._bitField = ((target._bitField & (~1048576)) |
                        524288);
  };

  Promise.prototype._ensurePossibleRejectionHandled = function () {
      if ((this._bitField & 524288) !== 0) { return; }
      this._setRejectionIsUnhandled();
      var self = this;
      setTimeout(function() {
          self._notifyUnhandledRejection();
      }, 1);
  };

  Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
      fireRejectionEvent("rejectionHandled",
                                    unhandledRejectionHandled, undefined, this);
  };

  Promise.prototype._setReturnedNonUndefined = function() {
      this._bitField = this._bitField | 268435456;
  };

  Promise.prototype._returnedNonUndefined = function() {
      return (this._bitField & 268435456) !== 0;
  };

  Promise.prototype._notifyUnhandledRejection = function () {
      if (this._isRejectionUnhandled()) {
          var reason = this._settledValue();
          this._setUnhandledRejectionIsNotified();
          fireRejectionEvent("unhandledRejection",
                                        possiblyUnhandledRejection, reason, this);
      }
  };

  Promise.prototype._setUnhandledRejectionIsNotified = function () {
      this._bitField = this._bitField | 262144;
  };

  Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
      this._bitField = this._bitField & (~262144);
  };

  Promise.prototype._isUnhandledRejectionNotified = function () {
      return (this._bitField & 262144) > 0;
  };

  Promise.prototype._setRejectionIsUnhandled = function () {
      this._bitField = this._bitField | 1048576;
  };

  Promise.prototype._unsetRejectionIsUnhandled = function () {
      this._bitField = this._bitField & (~1048576);
      if (this._isUnhandledRejectionNotified()) {
          this._unsetUnhandledRejectionIsNotified();
          this._notifyUnhandledRejectionIsHandled();
      }
  };

  Promise.prototype._isRejectionUnhandled = function () {
      return (this._bitField & 1048576) > 0;
  };

  Promise.prototype._warn = function(message, shouldUseOwnTrace, promise) {
      return warn(message, shouldUseOwnTrace, promise || this);
  };

  Promise.onPossiblyUnhandledRejection = function (fn) {
      var domain = getDomain();
      possiblyUnhandledRejection =
          typeof fn === "function" ? (domain === null ?
                                              fn : util.domainBind(domain, fn))
                                   : undefined;
  };

  Promise.onUnhandledRejectionHandled = function (fn) {
      var domain = getDomain();
      unhandledRejectionHandled =
          typeof fn === "function" ? (domain === null ?
                                              fn : util.domainBind(domain, fn))
                                   : undefined;
  };

  var disableLongStackTraces = function() {};
  Promise.longStackTraces = function () {
      if (async.haveItemsQueued() && !config.longStackTraces) {
          throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      if (!config.longStackTraces && longStackTracesIsSupported()) {
          var Promise_captureStackTrace = Promise.prototype._captureStackTrace;
          var Promise_attachExtraTrace = Promise.prototype._attachExtraTrace;
          config.longStackTraces = true;
          disableLongStackTraces = function() {
              if (async.haveItemsQueued() && !config.longStackTraces) {
                  throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
              }
              Promise.prototype._captureStackTrace = Promise_captureStackTrace;
              Promise.prototype._attachExtraTrace = Promise_attachExtraTrace;
              Context.deactivateLongStackTraces();
              async.enableTrampoline();
              config.longStackTraces = false;
          };
          Promise.prototype._captureStackTrace = longStackTracesCaptureStackTrace;
          Promise.prototype._attachExtraTrace = longStackTracesAttachExtraTrace;
          Context.activateLongStackTraces();
          async.disableTrampolineIfNecessary();
      }
  };

  Promise.hasLongStackTraces = function () {
      return config.longStackTraces && longStackTracesIsSupported();
  };

  var fireDomEvent = (function() {
      try {
          if (typeof CustomEvent === "function") {
              var event = new CustomEvent("CustomEvent");
              util.global.dispatchEvent(event);
              return function(name, event) {
                  var domEvent = new CustomEvent(name.toLowerCase(), {
                      detail: event,
                      cancelable: true
                  });
                  return !util.global.dispatchEvent(domEvent);
              };
          } else if (typeof Event === "function") {
              var event = new Event("CustomEvent");
              util.global.dispatchEvent(event);
              return function(name, event) {
                  var domEvent = new Event(name.toLowerCase(), {
                      cancelable: true
                  });
                  domEvent.detail = event;
                  return !util.global.dispatchEvent(domEvent);
              };
          } else {
              var event = document.createEvent("CustomEvent");
              event.initCustomEvent("testingtheevent", false, true, {});
              util.global.dispatchEvent(event);
              return function(name, event) {
                  var domEvent = document.createEvent("CustomEvent");
                  domEvent.initCustomEvent(name.toLowerCase(), false, true,
                      event);
                  return !util.global.dispatchEvent(domEvent);
              };
          }
      } catch (e) {}
      return function() {
          return false;
      };
  })();

  var fireGlobalEvent = (function() {
      if (util.isNode) {
          return function() {
              return process.emit.apply(process, arguments);
          };
      } else {
          if (!util.global) {
              return function() {
                  return false;
              };
          }
          return function(name) {
              var methodName = "on" + name.toLowerCase();
              var method = util.global[methodName];
              if (!method) { return false; }
              method.apply(util.global, [].slice.call(arguments, 1));
              return true;
          };
      }
  })();

  function generatePromiseLifecycleEventObject(name, promise) {
      return {promise: promise};
  }

  var eventToObjectGenerator = {
      promiseCreated: generatePromiseLifecycleEventObject,
      promiseFulfilled: generatePromiseLifecycleEventObject,
      promiseRejected: generatePromiseLifecycleEventObject,
      promiseResolved: generatePromiseLifecycleEventObject,
      promiseCancelled: generatePromiseLifecycleEventObject,
      promiseChained: function(name, promise, child) {
          return {promise: promise, child: child};
      },
      warning: function(name, warning) {
          return {warning: warning};
      },
      unhandledRejection: function (name, reason, promise) {
          return {reason: reason, promise: promise};
      },
      rejectionHandled: generatePromiseLifecycleEventObject
  };

  var activeFireEvent = function (name) {
      var globalEventFired = false;
      try {
          globalEventFired = fireGlobalEvent.apply(null, arguments);
      } catch (e) {
          async.throwLater(e);
          globalEventFired = true;
      }

      var domEventFired = false;
      try {
          domEventFired = fireDomEvent(name,
                      eventToObjectGenerator[name].apply(null, arguments));
      } catch (e) {
          async.throwLater(e);
          domEventFired = true;
      }

      return domEventFired || globalEventFired;
  };

  Promise.config = function(opts) {
      opts = Object(opts);
      if ("longStackTraces" in opts) {
          if (opts.longStackTraces) {
              Promise.longStackTraces();
          } else if (!opts.longStackTraces && Promise.hasLongStackTraces()) {
              disableLongStackTraces();
          }
      }
      if ("warnings" in opts) {
          var warningsOption = opts.warnings;
          config.warnings = !!warningsOption;
          wForgottenReturn = config.warnings;

          if (util.isObject(warningsOption)) {
              if ("wForgottenReturn" in warningsOption) {
                  wForgottenReturn = !!warningsOption.wForgottenReturn;
              }
          }
      }
      if ("cancellation" in opts && opts.cancellation && !config.cancellation) {
          if (async.haveItemsQueued()) {
              throw new Error(
                  "cannot enable cancellation after promises are in use");
          }
          Promise.prototype._clearCancellationData =
              cancellationClearCancellationData;
          Promise.prototype._propagateFrom = cancellationPropagateFrom;
          Promise.prototype._onCancel = cancellationOnCancel;
          Promise.prototype._setOnCancel = cancellationSetOnCancel;
          Promise.prototype._attachCancellationCallback =
              cancellationAttachCancellationCallback;
          Promise.prototype._execute = cancellationExecute;
          propagateFromFunction = cancellationPropagateFrom;
          config.cancellation = true;
      }
      if ("monitoring" in opts) {
          if (opts.monitoring && !config.monitoring) {
              config.monitoring = true;
              Promise.prototype._fireEvent = activeFireEvent;
          } else if (!opts.monitoring && config.monitoring) {
              config.monitoring = false;
              Promise.prototype._fireEvent = defaultFireEvent;
          }
      }
      return Promise;
  };

  function defaultFireEvent() { return false; }

  Promise.prototype._fireEvent = defaultFireEvent;
  Promise.prototype._execute = function(executor, resolve, reject) {
      try {
          executor(resolve, reject);
      } catch (e) {
          return e;
      }
  };
  Promise.prototype._onCancel = function () {};
  Promise.prototype._setOnCancel = function (handler) { };
  Promise.prototype._attachCancellationCallback = function(onCancel) {
  };
  Promise.prototype._captureStackTrace = function () {};
  Promise.prototype._attachExtraTrace = function () {};
  Promise.prototype._clearCancellationData = function() {};
  Promise.prototype._propagateFrom = function (parent, flags) {
  };

  function cancellationExecute(executor, resolve, reject) {
      var promise = this;
      try {
          executor(resolve, reject, function(onCancel) {
              if (typeof onCancel !== "function") {
                  throw new TypeError("onCancel must be a function, got: " +
                                      util.toString(onCancel));
              }
              promise._attachCancellationCallback(onCancel);
          });
      } catch (e) {
          return e;
      }
  }

  function cancellationAttachCancellationCallback(onCancel) {
      if (!this._isCancellable()) { return this; }

      var previousOnCancel = this._onCancel();
      if (previousOnCancel !== undefined) {
          if (util.isArray(previousOnCancel)) {
              previousOnCancel.push(onCancel);
          } else {
              this._setOnCancel([previousOnCancel, onCancel]);
          }
      } else {
          this._setOnCancel(onCancel);
      }
  }

  function cancellationOnCancel() {
      return this._onCancelField;
  }

  function cancellationSetOnCancel(onCancel) {
      this._onCancelField = onCancel;
  }

  function cancellationClearCancellationData() {
      this._cancellationParent = undefined;
      this._onCancelField = undefined;
  }

  function cancellationPropagateFrom(parent, flags) {
      if ((flags & 1) !== 0) {
          this._cancellationParent = parent;
          var branchesRemainingToCancel = parent._branchesRemainingToCancel;
          if (branchesRemainingToCancel === undefined) {
              branchesRemainingToCancel = 0;
          }
          parent._branchesRemainingToCancel = branchesRemainingToCancel + 1;
      }
      if ((flags & 2) !== 0 && parent._isBound()) {
          this._setBoundTo(parent._boundTo);
      }
  }

  function bindingPropagateFrom(parent, flags) {
      if ((flags & 2) !== 0 && parent._isBound()) {
          this._setBoundTo(parent._boundTo);
      }
  }
  var propagateFromFunction = bindingPropagateFrom;

  function boundValueFunction() {
      var ret = this._boundTo;
      if (ret !== undefined) {
          if (ret instanceof Promise) {
              if (ret.isFulfilled()) {
                  return ret.value();
              } else {
                  return undefined;
              }
          }
      }
      return ret;
  }

  function longStackTracesCaptureStackTrace() {
      this._trace = new CapturedTrace(this._peekContext());
  }

  function longStackTracesAttachExtraTrace(error, ignoreSelf) {
      if (canAttachTrace(error)) {
          var trace = this._trace;
          if (trace !== undefined) {
              if (ignoreSelf) { trace = trace._parent; }
          }
          if (trace !== undefined) {
              trace.attachExtraTrace(error);
          } else if (!error.__stackCleaned__) {
              var parsed = parseStackAndMessage(error);
              util.notEnumerableProp(error, "stack",
                  parsed.message + "\n" + parsed.stack.join("\n"));
              util.notEnumerableProp(error, "__stackCleaned__", true);
          }
      }
  }

  function checkForgottenReturns(returnValue, promiseCreated, name, promise,
                                 parent) {
      if (returnValue === undefined && promiseCreated !== null &&
          wForgottenReturn) {
          if (parent !== undefined && parent._returnedNonUndefined()) { return; }
          if ((promise._bitField & 65535) === 0) { return; }

          if (name) { name = name + " "; }
          var handlerLine = "";
          var creatorLine = "";
          if (promiseCreated._trace) {
              var traceLines = promiseCreated._trace.stack.split("\n");
              var stack = cleanStack(traceLines);
              for (var i = stack.length - 1; i >= 0; --i) {
                  var line = stack[i];
                  if (!nodeFramePattern.test(line)) {
                      var lineMatches = line.match(parseLinePattern);
                      if (lineMatches) {
                          handlerLine  = "at " + lineMatches[1] +
                              ":" + lineMatches[2] + ":" + lineMatches[3] + " ";
                      }
                      break;
                  }
              }

              if (stack.length > 0) {
                  var firstUserLine = stack[0];
                  for (var i = 0; i < traceLines.length; ++i) {

                      if (traceLines[i] === firstUserLine) {
                          if (i > 0) {
                              creatorLine = "\n" + traceLines[i - 1];
                          }
                          break;
                      }
                  }

              }
          }
          var msg = "a promise was created in a " + name +
              "handler " + handlerLine + "but was not returned from it, " +
              "see http://goo.gl/rRqMUw" +
              creatorLine;
          promise._warn(msg, true, promiseCreated);
      }
  }

  function deprecated(name, replacement) {
      var message = name +
          " is deprecated and will be removed in a future version.";
      if (replacement) { message += " Use " + replacement + " instead."; }
      return warn(message);
  }

  function warn(message, shouldUseOwnTrace, promise) {
      if (!config.warnings) { return; }
      var warning = new Warning(message);
      var ctx;
      if (shouldUseOwnTrace) {
          promise._attachExtraTrace(warning);
      } else if (config.longStackTraces && (ctx = Promise._peekContext())) {
          ctx.attachExtraTrace(warning);
      } else {
          var parsed = parseStackAndMessage(warning);
          warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
      }

      if (!activeFireEvent("warning", warning)) {
          formatAndLogError(warning, "", true);
      }
  }

  function reconstructStack(message, stacks) {
      for (var i = 0; i < stacks.length - 1; ++i) {
          stacks[i].push("From previous event:");
          stacks[i] = stacks[i].join("\n");
      }
      if (i < stacks.length) {
          stacks[i] = stacks[i].join("\n");
      }
      return message + "\n" + stacks.join("\n");
  }

  function removeDuplicateOrEmptyJumps(stacks) {
      for (var i = 0; i < stacks.length; ++i) {
          if (stacks[i].length === 0 ||
              ((i + 1 < stacks.length) && stacks[i][0] === stacks[i+1][0])) {
              stacks.splice(i, 1);
              i--;
          }
      }
  }

  function removeCommonRoots(stacks) {
      var current = stacks[0];
      for (var i = 1; i < stacks.length; ++i) {
          var prev = stacks[i];
          var currentLastIndex = current.length - 1;
          var currentLastLine = current[currentLastIndex];
          var commonRootMeetPoint = -1;

          for (var j = prev.length - 1; j >= 0; --j) {
              if (prev[j] === currentLastLine) {
                  commonRootMeetPoint = j;
                  break;
              }
          }

          for (var j = commonRootMeetPoint; j >= 0; --j) {
              var line = prev[j];
              if (current[currentLastIndex] === line) {
                  current.pop();
                  currentLastIndex--;
              } else {
                  break;
              }
          }
          current = prev;
      }
  }

  function cleanStack(stack) {
      var ret = [];
      for (var i = 0; i < stack.length; ++i) {
          var line = stack[i];
          var isTraceLine = "    (No stack trace)" === line ||
              stackFramePattern.test(line);
          var isInternalFrame = isTraceLine && shouldIgnore(line);
          if (isTraceLine && !isInternalFrame) {
              if (indentStackFrames && line.charAt(0) !== " ") {
                  line = "    " + line;
              }
              ret.push(line);
          }
      }
      return ret;
  }

  function stackFramesAsArray(error) {
      var stack = error.stack.replace(/\s+$/g, "").split("\n");
      for (var i = 0; i < stack.length; ++i) {
          var line = stack[i];
          if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
              break;
          }
      }
      if (i > 0 && error.name != "SyntaxError") {
          stack = stack.slice(i);
      }
      return stack;
  }

  function parseStackAndMessage(error) {
      var stack = error.stack;
      var message = error.toString();
      stack = typeof stack === "string" && stack.length > 0
                  ? stackFramesAsArray(error) : ["    (No stack trace)"];
      return {
          message: message,
          stack: error.name == "SyntaxError" ? stack : cleanStack(stack)
      };
  }

  function formatAndLogError(error, title, isSoft) {
      if (typeof console !== "undefined") {
          var message;
          if (util.isObject(error)) {
              var stack = error.stack;
              message = title + formatStack(stack, error);
          } else {
              message = title + String(error);
          }
          if (typeof printWarning === "function") {
              printWarning(message, isSoft);
          } else if (typeof console.log === "function" ||
              typeof console.log === "object") {
              console.log(message);
          }
      }
  }

  function fireRejectionEvent(name, localHandler, reason, promise) {
      var localEventFired = false;
      try {
          if (typeof localHandler === "function") {
              localEventFired = true;
              if (name === "rejectionHandled") {
                  localHandler(promise);
              } else {
                  localHandler(reason, promise);
              }
          }
      } catch (e) {
          async.throwLater(e);
      }

      if (name === "unhandledRejection") {
          if (!activeFireEvent(name, reason, promise) && !localEventFired) {
              formatAndLogError(reason, "Unhandled rejection ");
          }
      } else {
          activeFireEvent(name, promise);
      }
  }

  function formatNonError(obj) {
      var str;
      if (typeof obj === "function") {
          str = "[function " +
              (obj.name || "anonymous") +
              "]";
      } else {
          str = obj && typeof obj.toString === "function"
              ? obj.toString() : util.toString(obj);
          var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
          if (ruselessToString.test(str)) {
              try {
                  var newStr = JSON.stringify(obj);
                  str = newStr;
              }
              catch(e) {

              }
          }
          if (str.length === 0) {
              str = "(empty array)";
          }
      }
      return ("(<" + snip(str) + ">, no stack trace)");
  }

  function snip(str) {
      var maxChars = 41;
      if (str.length < maxChars) {
          return str;
      }
      return str.substr(0, maxChars - 3) + "...";
  }

  function longStackTracesIsSupported() {
      return typeof captureStackTrace === "function";
  }

  var shouldIgnore = function() { return false; };
  var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
  function parseLineInfo(line) {
      var matches = line.match(parseLineInfoRegex);
      if (matches) {
          return {
              fileName: matches[1],
              line: parseInt(matches[2], 10)
          };
      }
  }

  function setBounds(firstLineError, lastLineError) {
      if (!longStackTracesIsSupported()) { return; }
      var firstStackLines = firstLineError.stack.split("\n");
      var lastStackLines = lastLineError.stack.split("\n");
      var firstIndex = -1;
      var lastIndex = -1;
      var firstFileName;
      var lastFileName;
      for (var i = 0; i < firstStackLines.length; ++i) {
          var result = parseLineInfo(firstStackLines[i]);
          if (result) {
              firstFileName = result.fileName;
              firstIndex = result.line;
              break;
          }
      }
      for (var i = 0; i < lastStackLines.length; ++i) {
          var result = parseLineInfo(lastStackLines[i]);
          if (result) {
              lastFileName = result.fileName;
              lastIndex = result.line;
              break;
          }
      }
      if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName ||
          firstFileName !== lastFileName || firstIndex >= lastIndex) {
          return;
      }

      shouldIgnore = function(line) {
          if (bluebirdFramePattern.test(line)) { return true; }
          var info = parseLineInfo(line);
          if (info) {
              if (info.fileName === firstFileName &&
                  (firstIndex <= info.line && info.line <= lastIndex)) {
                  return true;
              }
          }
          return false;
      };
  }

  function CapturedTrace(parent) {
      this._parent = parent;
      this._promisesCreated = 0;
      var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
      captureStackTrace(this, CapturedTrace);
      if (length > 32) { this.uncycle(); }
  }
  util.inherits(CapturedTrace, Error);
  Context.CapturedTrace = CapturedTrace;

  CapturedTrace.prototype.uncycle = function() {
      var this$1 = this;

      var length = this._length;
      if (length < 2) { return; }
      var nodes = [];
      var stackToIndex = {};

      for (var i = 0, node = this; node !== undefined; ++i) {
          nodes.push(node);
          node = node._parent;
      }
      length = this._length = i;
      for (var i = length - 1; i >= 0; --i) {
          var stack = nodes[i].stack;
          if (stackToIndex[stack] === undefined) {
              stackToIndex[stack] = i;
          }
      }
      for (var i = 0; i < length; ++i) {
          var currentStack = nodes[i].stack;
          var index = stackToIndex[currentStack];
          if (index !== undefined && index !== i) {
              if (index > 0) {
                  nodes[index - 1]._parent = undefined;
                  nodes[index - 1]._length = 1;
              }
              nodes[i]._parent = undefined;
              nodes[i]._length = 1;
              var cycleEdgeNode = i > 0 ? nodes[i - 1] : this$1;

              if (index < length - 1) {
                  cycleEdgeNode._parent = nodes[index + 1];
                  cycleEdgeNode._parent.uncycle();
                  cycleEdgeNode._length =
                      cycleEdgeNode._parent._length + 1;
              } else {
                  cycleEdgeNode._parent = undefined;
                  cycleEdgeNode._length = 1;
              }
              var currentChildLength = cycleEdgeNode._length + 1;
              for (var j = i - 2; j >= 0; --j) {
                  nodes[j]._length = currentChildLength;
                  currentChildLength++;
              }
              return;
          }
      }
  };

  CapturedTrace.prototype.attachExtraTrace = function(error) {
      if (error.__stackCleaned__) { return; }
      this.uncycle();
      var parsed = parseStackAndMessage(error);
      var message = parsed.message;
      var stacks = [parsed.stack];

      var trace = this;
      while (trace !== undefined) {
          stacks.push(cleanStack(trace.stack.split("\n")));
          trace = trace._parent;
      }
      removeCommonRoots(stacks);
      removeDuplicateOrEmptyJumps(stacks);
      util.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
      util.notEnumerableProp(error, "__stackCleaned__", true);
  };

  var captureStackTrace = (function stackDetection() {
      var v8stackFramePattern = /^\s*at\s*/;
      var v8stackFormatter = function(stack, error) {
          if (typeof stack === "string") { return stack; }

          if (error.name !== undefined &&
              error.message !== undefined) {
              return error.toString();
          }
          return formatNonError(error);
      };

      if (typeof Error.stackTraceLimit === "number" &&
          typeof Error.captureStackTrace === "function") {
          Error.stackTraceLimit += 6;
          stackFramePattern = v8stackFramePattern;
          formatStack = v8stackFormatter;
          var captureStackTrace = Error.captureStackTrace;

          shouldIgnore = function(line) {
              return bluebirdFramePattern.test(line);
          };
          return function(receiver, ignoreUntil) {
              Error.stackTraceLimit += 6;
              captureStackTrace(receiver, ignoreUntil);
              Error.stackTraceLimit -= 6;
          };
      }
      var err = new Error();

      if (typeof err.stack === "string" &&
          err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
          stackFramePattern = /@/;
          formatStack = v8stackFormatter;
          indentStackFrames = true;
          return function captureStackTrace(o) {
              o.stack = new Error().stack;
          };
      }

      var hasStackAfterThrow;
      try { throw new Error(); }
      catch(e) {
          hasStackAfterThrow = ("stack" in e);
      }
      if (!("stack" in err) && hasStackAfterThrow &&
          typeof Error.stackTraceLimit === "number") {
          stackFramePattern = v8stackFramePattern;
          formatStack = v8stackFormatter;
          return function captureStackTrace(o) {
              Error.stackTraceLimit += 6;
              try { throw new Error(); }
              catch(e) { o.stack = e.stack; }
              Error.stackTraceLimit -= 6;
          };
      }

      formatStack = function(stack, error) {
          if (typeof stack === "string") { return stack; }

          if ((typeof error === "object" ||
              typeof error === "function") &&
              error.name !== undefined &&
              error.message !== undefined) {
              return error.toString();
          }
          return formatNonError(error);
      };

      return null;

  })([]);

  if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
      printWarning = function (message) {
          console.warn(message);
      };
      if (util.isNode && process.stderr.isTTY) {
          printWarning = function(message, isSoft) {
              var color = isSoft ? "\u001b[33m" : "\u001b[31m";
              console.warn(color + message + "\u001b[0m\n");
          };
      } else if (!util.isNode && typeof (new Error().stack) === "string") {
          printWarning = function(message, isSoft) {
              console.warn("%c" + message,
                          isSoft ? "color: darkorange" : "color: red");
          };
      }
  }

  var config = {
      warnings: warnings,
      longStackTraces: false,
      cancellation: false,
      monitoring: false
  };

  if (longStackTraces) { Promise.longStackTraces(); }

  return {
      longStackTraces: function() {
          return config.longStackTraces;
      },
      warnings: function() {
          return config.warnings;
      },
      cancellation: function() {
          return config.cancellation;
      },
      monitoring: function() {
          return config.monitoring;
      },
      propagateFromFunction: function() {
          return propagateFromFunction;
      },
      boundValueFunction: function() {
          return boundValueFunction;
      },
      checkForgottenReturns: checkForgottenReturns,
      setBounds: setBounds,
      warn: warn,
      deprecated: deprecated,
      CapturedTrace: CapturedTrace,
      fireDomEvent: fireDomEvent,
      fireGlobalEvent: fireGlobalEvent
  };
  };

  var catch_filter = function(NEXT_FILTER) {
  var util = util$5;
  var getKeys = es5.keys;
  var tryCatch = util.tryCatch;
  var errorObj = util.errorObj;

  function catchFilter(instances, cb, promise) {
      return function(e) {
          var boundTo = promise._boundValue();
          predicateLoop: for (var i = 0; i < instances.length; ++i) {
              var item = instances[i];

              if (item === Error ||
                  (item != null && item.prototype instanceof Error)) {
                  if (e instanceof item) {
                      return tryCatch(cb).call(boundTo, e);
                  }
              } else if (typeof item === "function") {
                  var matchesPredicate = tryCatch(item).call(boundTo, e);
                  if (matchesPredicate === errorObj) {
                      return matchesPredicate;
                  } else if (matchesPredicate) {
                      return tryCatch(cb).call(boundTo, e);
                  }
              } else if (util.isObject(e)) {
                  var keys = getKeys(item);
                  for (var j = 0; j < keys.length; ++j) {
                      var key = keys[j];
                      if (item[key] != e[key]) {
                          continue predicateLoop;
                      }
                  }
                  return tryCatch(cb).call(boundTo, e);
              }
          }
          return NEXT_FILTER;
      };
  }

  return catchFilter;
  };

  var _finally = function(Promise, tryConvertToPromise, NEXT_FILTER) {
  var util = util$5;
  var CancellationError = Promise.CancellationError;
  var errorObj = util.errorObj;
  var catchFilter = catch_filter(NEXT_FILTER);

  function PassThroughHandlerContext(promise, type, handler) {
      this.promise = promise;
      this.type = type;
      this.handler = handler;
      this.called = false;
      this.cancelPromise = null;
  }

  PassThroughHandlerContext.prototype.isFinallyHandler = function() {
      return this.type === 0;
  };

  function FinallyHandlerCancelReaction(finallyHandler) {
      this.finallyHandler = finallyHandler;
  }

  FinallyHandlerCancelReaction.prototype._resultCancelled = function() {
      checkCancel(this.finallyHandler);
  };

  function checkCancel(ctx, reason) {
      if (ctx.cancelPromise != null) {
          if (arguments.length > 1) {
              ctx.cancelPromise._reject(reason);
          } else {
              ctx.cancelPromise._cancel();
          }
          ctx.cancelPromise = null;
          return true;
      }
      return false;
  }

  function succeed() {
      return finallyHandler.call(this, this.promise._target()._settledValue());
  }
  function fail(reason) {
      if (checkCancel(this, reason)) { return; }
      errorObj.e = reason;
      return errorObj;
  }
  function finallyHandler(reasonOrValue) {
      var promise = this.promise;
      var handler = this.handler;

      if (!this.called) {
          this.called = true;
          var ret = this.isFinallyHandler()
              ? handler.call(promise._boundValue())
              : handler.call(promise._boundValue(), reasonOrValue);
          if (ret === NEXT_FILTER) {
              return ret;
          } else if (ret !== undefined) {
              promise._setReturnedNonUndefined();
              var maybePromise = tryConvertToPromise(ret, promise);
              if (maybePromise instanceof Promise) {
                  if (this.cancelPromise != null) {
                      if (maybePromise._isCancelled()) {
                          var reason =
                              new CancellationError("late cancellation observer");
                          promise._attachExtraTrace(reason);
                          errorObj.e = reason;
                          return errorObj;
                      } else if (maybePromise.isPending()) {
                          maybePromise._attachCancellationCallback(
                              new FinallyHandlerCancelReaction(this));
                      }
                  }
                  return maybePromise._then(
                      succeed, fail, undefined, this, undefined);
              }
          }
      }

      if (promise.isRejected()) {
          checkCancel(this);
          errorObj.e = reasonOrValue;
          return errorObj;
      } else {
          checkCancel(this);
          return reasonOrValue;
      }
  }

  Promise.prototype._passThrough = function(handler, type, success, fail) {
      if (typeof handler !== "function") { return this.then(); }
      return this._then(success,
                        fail,
                        undefined,
                        new PassThroughHandlerContext(this, type, handler),
                        undefined);
  };

  Promise.prototype.lastly =
  Promise.prototype["finally"] = function (handler) {
      return this._passThrough(handler,
                               0,
                               finallyHandler,
                               finallyHandler);
  };


  Promise.prototype.tap = function (handler) {
      return this._passThrough(handler, 1, finallyHandler);
  };

  Promise.prototype.tapCatch = function (handlerOrPredicate) {
      var arguments$1 = arguments;

      var len = arguments.length;
      if(len === 1) {
          return this._passThrough(handlerOrPredicate,
                                   1,
                                   undefined,
                                   finallyHandler);
      } else {
           var catchInstances = new Array(len - 1),
              j = 0, i;
          for (i = 0; i < len - 1; ++i) {
              var item = arguments$1[i];
              if (util.isObject(item)) {
                  catchInstances[j++] = item;
              } else {
                  return Promise.reject(new TypeError(
                      "tapCatch statement predicate: "
                      + "expecting an object but got " + util.classString(item)
                  ));
              }
          }
          catchInstances.length = j;
          var handler = arguments[i];
          return this._passThrough(catchFilter(catchInstances, handler, this),
                                   1,
                                   undefined,
                                   finallyHandler);
      }

  };

  return PassThroughHandlerContext;
  };

  var maybeWrapAsError$1 = util$5.maybeWrapAsError;

  var OperationalError$1 = errors$3.OperationalError;


  function isUntypedError(obj) {
      return obj instanceof Error &&
          es5.getPrototypeOf(obj) === Error.prototype;
  }

  var rErrorKey = /^(?:name|message|stack|cause)$/;
  function wrapAsOperationalError(obj) {
      var ret;
      if (isUntypedError(obj)) {
          ret = new OperationalError$1(obj);
          ret.name = obj.name;
          ret.message = obj.message;
          ret.stack = obj.stack;
          var keys = es5.keys(obj);
          for (var i = 0; i < keys.length; ++i) {
              var key = keys[i];
              if (!rErrorKey.test(key)) {
                  ret[key] = obj[key];
              }
          }
          return ret;
      }
      util$5.markAsOriginatingFromRejection(obj);
      return obj;
  }

  function nodebackForPromise(promise, multiArgs) {
      return function(err, value) {
          var arguments$1 = arguments;

          if (promise === null) { return; }
          if (err) {
              var wrapped = wrapAsOperationalError(maybeWrapAsError$1(err));
              promise._attachExtraTrace(wrapped);
              promise._reject(wrapped);
          } else if (!multiArgs) {
              promise._fulfill(value);
          } else {
              var $_len = arguments.length;var args = new Array(Math.max($_len - 1, 0)); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments$1[$_i];}            promise._fulfill(args);
          }
          promise = null;
      };
  }

  var nodeback = nodebackForPromise;

  var method$1 =
  function(Promise, INTERNAL, tryConvertToPromise, apiRejection, debug) {
  var util = util$5;
  var tryCatch = util.tryCatch;

  Promise.method = function (fn) {
      if (typeof fn !== "function") {
          throw new Promise.TypeError("expecting a function but got " + util.classString(fn));
      }
      return function () {
          var ret = new Promise(INTERNAL);
          ret._captureStackTrace();
          ret._pushContext();
          var value = tryCatch(fn).apply(this, arguments);
          var promiseCreated = ret._popContext();
          debug.checkForgottenReturns(
              value, promiseCreated, "Promise.method", ret);
          ret._resolveFromSyncValue(value);
          return ret;
      };
  };

  Promise.attempt = Promise["try"] = function (fn) {
      if (typeof fn !== "function") {
          return apiRejection("expecting a function but got " + util.classString(fn));
      }
      var ret = new Promise(INTERNAL);
      ret._captureStackTrace();
      ret._pushContext();
      var value;
      if (arguments.length > 1) {
          debug.deprecated("calling Promise.try with more than 1 argument");
          var arg = arguments[1];
          var ctx = arguments[2];
          value = util.isArray(arg) ? tryCatch(fn).apply(ctx, arg)
                                    : tryCatch(fn).call(ctx, arg);
      } else {
          value = tryCatch(fn)();
      }
      var promiseCreated = ret._popContext();
      debug.checkForgottenReturns(
          value, promiseCreated, "Promise.try", ret);
      ret._resolveFromSyncValue(value);
      return ret;
  };

  Promise.prototype._resolveFromSyncValue = function (value) {
      if (value === util.errorObj) {
          this._rejectCallback(value.e, false);
      } else {
          this._resolveCallback(value, true);
      }
  };
  };

  var bind$1 = function(Promise, INTERNAL, tryConvertToPromise, debug) {
  var calledBind = false;
  var rejectThis = function(_, e) {
      this._reject(e);
  };

  var targetRejected = function(e, context) {
      context.promiseRejectionQueued = true;
      context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
  };

  var bindingResolved = function(thisArg, context) {
      if (((this._bitField & 50397184) === 0)) {
          this._resolveCallback(context.target);
      }
  };

  var bindingRejected = function(e, context) {
      if (!context.promiseRejectionQueued) { this._reject(e); }
  };

  Promise.prototype.bind = function (thisArg) {
      if (!calledBind) {
          calledBind = true;
          Promise.prototype._propagateFrom = debug.propagateFromFunction();
          Promise.prototype._boundValue = debug.boundValueFunction();
      }
      var maybePromise = tryConvertToPromise(thisArg);
      var ret = new Promise(INTERNAL);
      ret._propagateFrom(this, 1);
      var target = this._target();
      ret._setBoundTo(maybePromise);
      if (maybePromise instanceof Promise) {
          var context = {
              promiseRejectionQueued: false,
              promise: ret,
              target: target,
              bindingPromise: maybePromise
          };
          target._then(INTERNAL, targetRejected, undefined, ret, context);
          maybePromise._then(
              bindingResolved, bindingRejected, undefined, ret, context);
          ret._setOnCancel(maybePromise);
      } else {
          ret._resolveCallback(target);
      }
      return ret;
  };

  Promise.prototype._setBoundTo = function (obj) {
      if (obj !== undefined) {
          this._bitField = this._bitField | 2097152;
          this._boundTo = obj;
      } else {
          this._bitField = this._bitField & (~2097152);
      }
  };

  Promise.prototype._isBound = function () {
      return (this._bitField & 2097152) === 2097152;
  };

  Promise.bind = function (thisArg, value) {
      return Promise.resolve(value).bind(thisArg);
  };
  };

  var cancel = function(Promise, PromiseArray, apiRejection, debug) {
  var util = util$5;
  var tryCatch = util.tryCatch;
  var errorObj = util.errorObj;
  var async = Promise._async;

  Promise.prototype["break"] = Promise.prototype.cancel = function() {
      if (!debug.cancellation()) { return this._warn("cancellation is disabled"); }

      var promise = this;
      var child = promise;
      while (promise._isCancellable()) {
          if (!promise._cancelBy(child)) {
              if (child._isFollowing()) {
                  child._followee().cancel();
              } else {
                  child._cancelBranched();
              }
              break;
          }

          var parent = promise._cancellationParent;
          if (parent == null || !parent._isCancellable()) {
              if (promise._isFollowing()) {
                  promise._followee().cancel();
              } else {
                  promise._cancelBranched();
              }
              break;
          } else {
              if (promise._isFollowing()) { promise._followee().cancel(); }
              promise._setWillBeCancelled();
              child = promise;
              promise = parent;
          }
      }
  };

  Promise.prototype._branchHasCancelled = function() {
      this._branchesRemainingToCancel--;
  };

  Promise.prototype._enoughBranchesHaveCancelled = function() {
      return this._branchesRemainingToCancel === undefined ||
             this._branchesRemainingToCancel <= 0;
  };

  Promise.prototype._cancelBy = function(canceller) {
      if (canceller === this) {
          this._branchesRemainingToCancel = 0;
          this._invokeOnCancel();
          return true;
      } else {
          this._branchHasCancelled();
          if (this._enoughBranchesHaveCancelled()) {
              this._invokeOnCancel();
              return true;
          }
      }
      return false;
  };

  Promise.prototype._cancelBranched = function() {
      if (this._enoughBranchesHaveCancelled()) {
          this._cancel();
      }
  };

  Promise.prototype._cancel = function() {
      if (!this._isCancellable()) { return; }
      this._setCancelled();
      async.invoke(this._cancelPromises, this, undefined);
  };

  Promise.prototype._cancelPromises = function() {
      if (this._length() > 0) { this._settlePromises(); }
  };

  Promise.prototype._unsetOnCancel = function() {
      this._onCancelField = undefined;
  };

  Promise.prototype._isCancellable = function() {
      return this.isPending() && !this._isCancelled();
  };

  Promise.prototype.isCancellable = function() {
      return this.isPending() && !this.isCancelled();
  };

  Promise.prototype._doInvokeOnCancel = function(onCancelCallback, internalOnly) {
      var this$1 = this;

      if (util.isArray(onCancelCallback)) {
          for (var i = 0; i < onCancelCallback.length; ++i) {
              this$1._doInvokeOnCancel(onCancelCallback[i], internalOnly);
          }
      } else if (onCancelCallback !== undefined) {
          if (typeof onCancelCallback === "function") {
              if (!internalOnly) {
                  var e = tryCatch(onCancelCallback).call(this._boundValue());
                  if (e === errorObj) {
                      this._attachExtraTrace(e.e);
                      async.throwLater(e.e);
                  }
              }
          } else {
              onCancelCallback._resultCancelled(this);
          }
      }
  };

  Promise.prototype._invokeOnCancel = function() {
      var onCancelCallback = this._onCancel();
      this._unsetOnCancel();
      async.invoke(this._doInvokeOnCancel, this, onCancelCallback);
  };

  Promise.prototype._invokeInternalOnCancel = function() {
      if (this._isCancellable()) {
          this._doInvokeOnCancel(this._onCancel(), true);
          this._unsetOnCancel();
      }
  };

  Promise.prototype._resultCancelled = function() {
      this.cancel();
  };

  };

  var direct_resolve = function(Promise) {
  function returner() {
      return this.value;
  }
  function thrower() {
      throw this.reason;
  }

  Promise.prototype["return"] =
  Promise.prototype.thenReturn = function (value) {
      if (value instanceof Promise) { value.suppressUnhandledRejections(); }
      return this._then(
          returner, undefined, undefined, {value: value}, undefined);
  };

  Promise.prototype["throw"] =
  Promise.prototype.thenThrow = function (reason) {
      return this._then(
          thrower, undefined, undefined, {reason: reason}, undefined);
  };

  Promise.prototype.catchThrow = function (reason) {
      if (arguments.length <= 1) {
          return this._then(
              undefined, thrower, undefined, {reason: reason}, undefined);
      } else {
          var _reason = arguments[1];
          var handler = function() {throw _reason;};
          return this.caught(reason, handler);
      }
  };

  Promise.prototype.catchReturn = function (value) {
      if (arguments.length <= 1) {
          if (value instanceof Promise) { value.suppressUnhandledRejections(); }
          return this._then(
              undefined, returner, undefined, {value: value}, undefined);
      } else {
          var _value = arguments[1];
          if (_value instanceof Promise) { _value.suppressUnhandledRejections(); }
          var handler = function() {return _value;};
          return this.caught(value, handler);
      }
  };
  };

  var synchronous_inspection = function(Promise) {
  function PromiseInspection(promise) {
      if (promise !== undefined) {
          promise = promise._target();
          this._bitField = promise._bitField;
          this._settledValueField = promise._isFateSealed()
              ? promise._settledValue() : undefined;
      }
      else {
          this._bitField = 0;
          this._settledValueField = undefined;
      }
  }

  PromiseInspection.prototype._settledValue = function() {
      return this._settledValueField;
  };

  var value = PromiseInspection.prototype.value = function () {
      if (!this.isFulfilled()) {
          throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      return this._settledValue();
  };

  var reason = PromiseInspection.prototype.error =
  PromiseInspection.prototype.reason = function () {
      if (!this.isRejected()) {
          throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      return this._settledValue();
  };

  var isFulfilled = PromiseInspection.prototype.isFulfilled = function() {
      return (this._bitField & 33554432) !== 0;
  };

  var isRejected = PromiseInspection.prototype.isRejected = function () {
      return (this._bitField & 16777216) !== 0;
  };

  var isPending = PromiseInspection.prototype.isPending = function () {
      return (this._bitField & 50397184) === 0;
  };

  var isResolved = PromiseInspection.prototype.isResolved = function () {
      return (this._bitField & 50331648) !== 0;
  };

  PromiseInspection.prototype.isCancelled = function() {
      return (this._bitField & 8454144) !== 0;
  };

  Promise.prototype.__isCancelled = function() {
      return (this._bitField & 65536) === 65536;
  };

  Promise.prototype._isCancelled = function() {
      return this._target().__isCancelled();
  };

  Promise.prototype.isCancelled = function() {
      return (this._target()._bitField & 8454144) !== 0;
  };

  Promise.prototype.isPending = function() {
      return isPending.call(this._target());
  };

  Promise.prototype.isRejected = function() {
      return isRejected.call(this._target());
  };

  Promise.prototype.isFulfilled = function() {
      return isFulfilled.call(this._target());
  };

  Promise.prototype.isResolved = function() {
      return isResolved.call(this._target());
  };

  Promise.prototype.value = function() {
      return value.call(this._target());
  };

  Promise.prototype.reason = function() {
      var target = this._target();
      target._unsetRejectionIsUnhandled();
      return reason.call(target);
  };

  Promise.prototype._value = function() {
      return this._settledValue();
  };

  Promise.prototype._reason = function() {
      this._unsetRejectionIsUnhandled();
      return this._settledValue();
  };

  Promise.PromiseInspection = PromiseInspection;
  };

  var join$1 =
  function(Promise, PromiseArray, tryConvertToPromise, INTERNAL, async,
           getDomain) {
  var util = util$5;
  var canEvaluate = util.canEvaluate;
  var tryCatch = util.tryCatch;
  var errorObj = util.errorObj;
  var reject;

  {
  if (canEvaluate) {
      var thenCallback = function(i) {
          return new Function("value", "holder", "                             \n\
            'use strict';                                                    \n\
            holder.pIndex = value;                                           \n\
            holder.checkFulfillment(this);                                   \n\
            ".replace(/Index/g, i));
      };

      var promiseSetter = function(i) {
          return new Function("promise", "holder", "                           \n\
            'use strict';                                                    \n\
            holder.pIndex = promise;                                         \n\
            ".replace(/Index/g, i));
      };

      var generateHolderClass = function(total) {
          var props = new Array(total);
          for (var i = 0; i < props.length; ++i) {
              props[i] = "this.p" + (i+1);
          }
          var assignment = props.join(" = ") + " = null;";
          var cancellationCode= "var promise;\n" + props.map(function(prop) {
              return "                                                         \n\
                promise = " + prop + ";                                      \n\
                if (promise instanceof Promise) {                            \n\
                    promise.cancel();                                        \n\
                }                                                            \n\
            ";
          }).join("\n");
          var passedArguments = props.join(", ");
          var name = "Holder$" + total;


          var code = "return function(tryCatch, errorObj, Promise, async) {    \n\
            'use strict';                                                    \n\
            function [TheName](fn) {                                         \n\
                [TheProperties]                                              \n\
                this.fn = fn;                                                \n\
                this.asyncNeeded = true;                                     \n\
                this.now = 0;                                                \n\
            }                                                                \n\
                                                                             \n\
            [TheName].prototype._callFunction = function(promise) {          \n\
                promise._pushContext();                                      \n\
                var ret = tryCatch(this.fn)([ThePassedArguments]);           \n\
                promise._popContext();                                       \n\
                if (ret === errorObj) {                                      \n\
                    promise._rejectCallback(ret.e, false);                   \n\
                } else {                                                     \n\
                    promise._resolveCallback(ret);                           \n\
                }                                                            \n\
            };                                                               \n\
                                                                             \n\
            [TheName].prototype.checkFulfillment = function(promise) {       \n\
                var now = ++this.now;                                        \n\
                if (now === [TheTotal]) {                                    \n\
                    if (this.asyncNeeded) {                                  \n\
                        async.invoke(this._callFunction, this, promise);     \n\
                    } else {                                                 \n\
                        this._callFunction(promise);                         \n\
                    }                                                        \n\
                                                                             \n\
                }                                                            \n\
            };                                                               \n\
                                                                             \n\
            [TheName].prototype._resultCancelled = function() {              \n\
                [CancellationCode]                                           \n\
            };                                                               \n\
                                                                             \n\
            return [TheName];                                                \n\
        }(tryCatch, errorObj, Promise, async);                               \n\
        ";

          code = code.replace(/\[TheName\]/g, name)
              .replace(/\[TheTotal\]/g, total)
              .replace(/\[ThePassedArguments\]/g, passedArguments)
              .replace(/\[TheProperties\]/g, assignment)
              .replace(/\[CancellationCode\]/g, cancellationCode);

          return new Function("tryCatch", "errorObj", "Promise", "async", code)
                             (tryCatch, errorObj, Promise, async);
      };

      var holderClasses = [];
      var thenCallbacks = [];
      var promiseSetters = [];

      for (var i = 0; i < 8; ++i) {
          holderClasses.push(generateHolderClass(i + 1));
          thenCallbacks.push(thenCallback(i + 1));
          promiseSetters.push(promiseSetter(i + 1));
      }

      reject = function (reason) {
          this._reject(reason);
      };
  }}

  Promise.join = function () {
      var arguments$1 = arguments;

      var last = arguments.length - 1;
      var fn;
      if (last > 0 && typeof arguments[last] === "function") {
          fn = arguments[last];
          {
              if (last <= 8 && canEvaluate) {
                  var ret = new Promise(INTERNAL);
                  ret._captureStackTrace();
                  var HolderClass = holderClasses[last - 1];
                  var holder = new HolderClass(fn);
                  var callbacks = thenCallbacks;

                  for (var i = 0; i < last; ++i) {
                      var maybePromise = tryConvertToPromise(arguments$1[i], ret);
                      if (maybePromise instanceof Promise) {
                          maybePromise = maybePromise._target();
                          var bitField = maybePromise._bitField;
                          if (((bitField & 50397184) === 0)) {
                              maybePromise._then(callbacks[i], reject,
                                                 undefined, ret, holder);
                              promiseSetters[i](maybePromise, holder);
                              holder.asyncNeeded = false;
                          } else if (((bitField & 33554432) !== 0)) {
                              callbacks[i].call(ret,
                                                maybePromise._value(), holder);
                          } else if (((bitField & 16777216) !== 0)) {
                              ret._reject(maybePromise._reason());
                          } else {
                              ret._cancel();
                          }
                      } else {
                          callbacks[i].call(ret, maybePromise, holder);
                      }
                  }

                  if (!ret._isFateSealed()) {
                      if (holder.asyncNeeded) {
                          var domain = getDomain();
                          if (domain !== null) {
                              holder.fn = util.domainBind(domain, holder.fn);
                          }
                      }
                      ret._setAsyncGuaranteed();
                      ret._setOnCancel(holder);
                  }
                  return ret;
              }
          }
      }
      var $_len = arguments.length;var args = new Array($_len); for(var $_i = 0; $_i < $_len; ++$_i) {args[$_i] = arguments$1[$_i];}    if (fn) { args.pop(); }
      var ret = new PromiseArray(args).promise();
      return fn !== undefined ? ret.spread(fn) : ret;
  };

  };

  var map$3 = function(Promise,
                            PromiseArray,
                            apiRejection,
                            tryConvertToPromise,
                            INTERNAL,
                            debug) {
  var getDomain = Promise._getDomain;
  var util = util$5;
  var tryCatch = util.tryCatch;
  var errorObj = util.errorObj;
  var async = Promise._async;

  function MappingPromiseArray(promises, fn, limit, _filter) {
      this.constructor$(promises);
      this._promise._captureStackTrace();
      var domain = getDomain();
      this._callback = domain === null ? fn : util.domainBind(domain, fn);
      this._preservedValues = _filter === INTERNAL
          ? new Array(this.length())
          : null;
      this._limit = limit;
      this._inFlight = 0;
      this._queue = [];
      async.invoke(this._asyncInit, this, undefined);
  }
  util.inherits(MappingPromiseArray, PromiseArray);

  MappingPromiseArray.prototype._asyncInit = function() {
      this._init$(undefined, -2);
  };

  MappingPromiseArray.prototype._init = function () {};

  MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
      var values = this._values;
      var length = this.length();
      var preservedValues = this._preservedValues;
      var limit = this._limit;

      if (index < 0) {
          index = (index * -1) - 1;
          values[index] = value;
          if (limit >= 1) {
              this._inFlight--;
              this._drainQueue();
              if (this._isResolved()) { return true; }
          }
      } else {
          if (limit >= 1 && this._inFlight >= limit) {
              values[index] = value;
              this._queue.push(index);
              return false;
          }
          if (preservedValues !== null) { preservedValues[index] = value; }

          var promise = this._promise;
          var callback = this._callback;
          var receiver = promise._boundValue();
          promise._pushContext();
          var ret = tryCatch(callback).call(receiver, value, index, length);
          var promiseCreated = promise._popContext();
          debug.checkForgottenReturns(
              ret,
              promiseCreated,
              preservedValues !== null ? "Promise.filter" : "Promise.map",
              promise
          );
          if (ret === errorObj) {
              this._reject(ret.e);
              return true;
          }

          var maybePromise = tryConvertToPromise(ret, this._promise);
          if (maybePromise instanceof Promise) {
              maybePromise = maybePromise._target();
              var bitField = maybePromise._bitField;
              if (((bitField & 50397184) === 0)) {
                  if (limit >= 1) { this._inFlight++; }
                  values[index] = maybePromise;
                  maybePromise._proxy(this, (index + 1) * -1);
                  return false;
              } else if (((bitField & 33554432) !== 0)) {
                  ret = maybePromise._value();
              } else if (((bitField & 16777216) !== 0)) {
                  this._reject(maybePromise._reason());
                  return true;
              } else {
                  this._cancel();
                  return true;
              }
          }
          values[index] = ret;
      }
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= length) {
          if (preservedValues !== null) {
              this._filter(values, preservedValues);
          } else {
              this._resolve(values);
          }
          return true;
      }
      return false;
  };

  MappingPromiseArray.prototype._drainQueue = function () {
      var this$1 = this;

      var queue = this._queue;
      var limit = this._limit;
      var values = this._values;
      while (queue.length > 0 && this._inFlight < limit) {
          if (this$1._isResolved()) { return; }
          var index = queue.pop();
          this$1._promiseFulfilled(values[index], index);
      }
  };

  MappingPromiseArray.prototype._filter = function (booleans, values) {
      var len = values.length;
      var ret = new Array(len);
      var j = 0;
      for (var i = 0; i < len; ++i) {
          if (booleans[i]) { ret[j++] = values[i]; }
      }
      ret.length = j;
      this._resolve(ret);
  };

  MappingPromiseArray.prototype.preservedValues = function () {
      return this._preservedValues;
  };

  function map(promises, fn, options, _filter) {
      if (typeof fn !== "function") {
          return apiRejection("expecting a function but got " + util.classString(fn));
      }

      var limit = 0;
      if (options !== undefined) {
          if (typeof options === "object" && options !== null) {
              if (typeof options.concurrency !== "number") {
                  return Promise.reject(
                      new TypeError("'concurrency' must be a number but it is " +
                                      util.classString(options.concurrency)));
              }
              limit = options.concurrency;
          } else {
              return Promise.reject(new TypeError(
                              "options argument must be an object but it is " +
                               util.classString(options)));
          }
      }
      limit = typeof limit === "number" &&
          isFinite(limit) && limit >= 1 ? limit : 0;
      return new MappingPromiseArray(promises, fn, limit, _filter).promise();
  }

  Promise.prototype.map = function (fn, options) {
      return map(this, fn, options, null);
  };

  Promise.map = function (promises, fn, options, _filter) {
      return map(promises, fn, options, _filter);
  };


  };

  var cr = Object.create;
  if (cr) {
      var callerCache = cr(null);
      var getterCache = cr(null);
      callerCache[" size"] = getterCache[" size"] = 0;
  }

  var call_get = function(Promise) {
  var util = util$5;
  var canEvaluate = util.canEvaluate;
  var isIdentifier = util.isIdentifier;

  var getMethodCaller;
  var getGetter;
  {
  var makeMethodCaller = function (methodName) {
      return new Function("ensureMethod", "                                    \n\
        return function(obj) {                                               \n\
            'use strict'                                                     \n\
            var len = this.length;                                           \n\
            ensureMethod(obj, 'methodName');                                 \n\
            switch(len) {                                                    \n\
                case 1: return obj.methodName(this[0]);                      \n\
                case 2: return obj.methodName(this[0], this[1]);             \n\
                case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
                case 0: return obj.methodName();                             \n\
                default:                                                     \n\
                    return obj.methodName.apply(obj, this);                  \n\
            }                                                                \n\
        };                                                                   \n\
        ".replace(/methodName/g, methodName))(ensureMethod);
  };

  var makeGetter = function (propertyName) {
      return new Function("obj", "                                             \n\
        'use strict';                                                        \n\
        return obj.propertyName;                                             \n\
        ".replace("propertyName", propertyName));
  };

  var getCompiled = function(name, compiler, cache) {
      var ret = cache[name];
      if (typeof ret !== "function") {
          if (!isIdentifier(name)) {
              return null;
          }
          ret = compiler(name);
          cache[name] = ret;
          cache[" size"]++;
          if (cache[" size"] > 512) {
              var keys = Object.keys(cache);
              for (var i = 0; i < 256; ++i) { delete cache[keys[i]]; }
              cache[" size"] = keys.length - 256;
          }
      }
      return ret;
  };

  getMethodCaller = function(name) {
      return getCompiled(name, makeMethodCaller, callerCache);
  };

  getGetter = function(name) {
      return getCompiled(name, makeGetter, getterCache);
  };
  }

  function ensureMethod(obj, methodName) {
      var fn;
      if (obj != null) { fn = obj[methodName]; }
      if (typeof fn !== "function") {
          var message = "Object " + util.classString(obj) + " has no method '" +
              util.toString(methodName) + "'";
          throw new Promise.TypeError(message);
      }
      return fn;
  }

  function caller(obj) {
      var methodName = this.pop();
      var fn = ensureMethod(obj, methodName);
      return fn.apply(obj, this);
  }
  Promise.prototype.call = function (methodName) {
      var arguments$1 = arguments;

      var $_len = arguments.length;var args = new Array(Math.max($_len - 1, 0)); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments$1[$_i];}    {
          if (canEvaluate) {
              var maybeCaller = getMethodCaller(methodName);
              if (maybeCaller !== null) {
                  return this._then(
                      maybeCaller, undefined, undefined, args, undefined);
              }
          }
      }
      args.push(methodName);
      return this._then(caller, undefined, undefined, args, undefined);
  };

  function namedGetter(obj) {
      return obj[this];
  }
  function indexedGetter(obj) {
      var index = +this;
      if (index < 0) { index = Math.max(0, index + obj.length); }
      return obj[index];
  }
  Promise.prototype.get = function (propertyName) {
      var isIndex = (typeof propertyName === "number");
      var getter;
      if (!isIndex) {
          if (canEvaluate) {
              var maybeGetter = getGetter(propertyName);
              getter = maybeGetter !== null ? maybeGetter : namedGetter;
          } else {
              getter = namedGetter;
          }
      } else {
          getter = indexedGetter;
      }
      return this._then(getter, undefined, undefined, propertyName, undefined);
  };
  };

  var using = function (Promise, apiRejection, tryConvertToPromise,
      createContext, INTERNAL, debug) {
      var util = util$5;
      var TypeError = errors$3.TypeError;
      var inherits = util$5.inherits;
      var errorObj = util.errorObj;
      var tryCatch = util.tryCatch;
      var NULL = {};

      function thrower(e) {
          setTimeout(function(){throw e;}, 0);
      }

      function castPreservingDisposable(thenable) {
          var maybePromise = tryConvertToPromise(thenable);
          if (maybePromise !== thenable &&
              typeof thenable._isDisposable === "function" &&
              typeof thenable._getDisposer === "function" &&
              thenable._isDisposable()) {
              maybePromise._setDisposable(thenable._getDisposer());
          }
          return maybePromise;
      }
      function dispose(resources, inspection) {
          var i = 0;
          var len = resources.length;
          var ret = new Promise(INTERNAL);
          function iterator() {
              if (i >= len) { return ret._fulfill(); }
              var maybePromise = castPreservingDisposable(resources[i++]);
              if (maybePromise instanceof Promise &&
                  maybePromise._isDisposable()) {
                  try {
                      maybePromise = tryConvertToPromise(
                          maybePromise._getDisposer().tryDispose(inspection),
                          resources.promise);
                  } catch (e) {
                      return thrower(e);
                  }
                  if (maybePromise instanceof Promise) {
                      return maybePromise._then(iterator, thrower,
                                                null, null, null);
                  }
              }
              iterator();
          }
          iterator();
          return ret;
      }

      function Disposer(data, promise, context) {
          this._data = data;
          this._promise = promise;
          this._context = context;
      }

      Disposer.prototype.data = function () {
          return this._data;
      };

      Disposer.prototype.promise = function () {
          return this._promise;
      };

      Disposer.prototype.resource = function () {
          if (this.promise().isFulfilled()) {
              return this.promise().value();
          }
          return NULL;
      };

      Disposer.prototype.tryDispose = function(inspection) {
          var resource = this.resource();
          var context = this._context;
          if (context !== undefined) { context._pushContext(); }
          var ret = resource !== NULL
              ? this.doDispose(resource, inspection) : null;
          if (context !== undefined) { context._popContext(); }
          this._promise._unsetDisposable();
          this._data = null;
          return ret;
      };

      Disposer.isDisposer = function (d) {
          return (d != null &&
                  typeof d.resource === "function" &&
                  typeof d.tryDispose === "function");
      };

      function FunctionDisposer(fn, promise, context) {
          this.constructor$(fn, promise, context);
      }
      inherits(FunctionDisposer, Disposer);

      FunctionDisposer.prototype.doDispose = function (resource, inspection) {
          var fn = this.data();
          return fn.call(resource, resource, inspection);
      };

      function maybeUnwrapDisposer(value) {
          if (Disposer.isDisposer(value)) {
              this.resources[this.index]._setDisposable(value);
              return value.promise();
          }
          return value;
      }

      function ResourceList(length) {
          this.length = length;
          this.promise = null;
          this[length-1] = null;
      }

      ResourceList.prototype._resultCancelled = function() {
          var this$1 = this;

          var len = this.length;
          for (var i = 0; i < len; ++i) {
              var item = this$1[i];
              if (item instanceof Promise) {
                  item.cancel();
              }
          }
      };

      Promise.using = function () {
          var len = arguments.length;
          if (len < 2) { return apiRejection(
                          "you must pass at least 2 arguments to Promise.using"); }
          var fn = arguments[len - 1];
          if (typeof fn !== "function") {
              return apiRejection("expecting a function but got " + util.classString(fn));
          }
          var input;
          var spreadArgs = true;
          if (len === 2 && Array.isArray(arguments[0])) {
              input = arguments[0];
              len = input.length;
              spreadArgs = false;
          } else {
              input = arguments;
              len--;
          }
          var resources = new ResourceList(len);
          for (var i = 0; i < len; ++i) {
              var resource = input[i];
              if (Disposer.isDisposer(resource)) {
                  var disposer = resource;
                  resource = resource.promise();
                  resource._setDisposable(disposer);
              } else {
                  var maybePromise = tryConvertToPromise(resource);
                  if (maybePromise instanceof Promise) {
                      resource =
                          maybePromise._then(maybeUnwrapDisposer, null, null, {
                              resources: resources,
                              index: i
                      }, undefined);
                  }
              }
              resources[i] = resource;
          }

          var reflectedResources = new Array(resources.length);
          for (var i = 0; i < reflectedResources.length; ++i) {
              reflectedResources[i] = Promise.resolve(resources[i]).reflect();
          }

          var resultPromise = Promise.all(reflectedResources)
              .then(function(inspections) {
                  for (var i = 0; i < inspections.length; ++i) {
                      var inspection = inspections[i];
                      if (inspection.isRejected()) {
                          errorObj.e = inspection.error();
                          return errorObj;
                      } else if (!inspection.isFulfilled()) {
                          resultPromise.cancel();
                          return;
                      }
                      inspections[i] = inspection.value();
                  }
                  promise._pushContext();

                  fn = tryCatch(fn);
                  var ret = spreadArgs
                      ? fn.apply(undefined, inspections) : fn(inspections);
                  var promiseCreated = promise._popContext();
                  debug.checkForgottenReturns(
                      ret, promiseCreated, "Promise.using", promise);
                  return ret;
              });

          var promise = resultPromise.lastly(function() {
              var inspection = new Promise.PromiseInspection(resultPromise);
              return dispose(resources, inspection);
          });
          resources.promise = promise;
          promise._setOnCancel(resources);
          return promise;
      };

      Promise.prototype._setDisposable = function (disposer) {
          this._bitField = this._bitField | 131072;
          this._disposer = disposer;
      };

      Promise.prototype._isDisposable = function () {
          return (this._bitField & 131072) > 0;
      };

      Promise.prototype._getDisposer = function () {
          return this._disposer;
      };

      Promise.prototype._unsetDisposable = function () {
          this._bitField = this._bitField & (~131072);
          this._disposer = undefined;
      };

      Promise.prototype.disposer = function (fn) {
          if (typeof fn === "function") {
              return new FunctionDisposer(fn, this, createContext());
          }
          throw new TypeError();
      };

  };

  var timers = function(Promise, INTERNAL, debug) {
  var util = util$5;
  var TimeoutError = Promise.TimeoutError;

  function HandleWrapper(handle)  {
      this.handle = handle;
  }

  HandleWrapper.prototype._resultCancelled = function() {
      clearTimeout(this.handle);
  };

  var afterValue = function(value) { return delay(+this).thenReturn(value); };
  var delay = Promise.delay = function (ms, value) {
      var ret;
      var handle;
      if (value !== undefined) {
          ret = Promise.resolve(value)
                  ._then(afterValue, null, null, ms, undefined);
          if (debug.cancellation() && value instanceof Promise) {
              ret._setOnCancel(value);
          }
      } else {
          ret = new Promise(INTERNAL);
          handle = setTimeout(function() { ret._fulfill(); }, +ms);
          if (debug.cancellation()) {
              ret._setOnCancel(new HandleWrapper(handle));
          }
          ret._captureStackTrace();
      }
      ret._setAsyncGuaranteed();
      return ret;
  };

  Promise.prototype.delay = function (ms) {
      return delay(ms, this);
  };

  var afterTimeout = function (promise, message, parent) {
      var err;
      if (typeof message !== "string") {
          if (message instanceof Error) {
              err = message;
          } else {
              err = new TimeoutError("operation timed out");
          }
      } else {
          err = new TimeoutError(message);
      }
      util.markAsOriginatingFromRejection(err);
      promise._attachExtraTrace(err);
      promise._reject(err);

      if (parent != null) {
          parent.cancel();
      }
  };

  function successClear(value) {
      clearTimeout(this.handle);
      return value;
  }

  function failureClear(reason) {
      clearTimeout(this.handle);
      throw reason;
  }

  Promise.prototype.timeout = function (ms, message) {
      ms = +ms;
      var ret, parent;

      var handleWrapper = new HandleWrapper(setTimeout(function timeoutTimeout() {
          if (ret.isPending()) {
              afterTimeout(ret, message, parent);
          }
      }, ms));

      if (debug.cancellation()) {
          parent = this.then();
          ret = parent._then(successClear, failureClear,
                              undefined, handleWrapper, undefined);
          ret._setOnCancel(handleWrapper);
      } else {
          ret = this._then(successClear, failureClear,
                              undefined, handleWrapper, undefined);
      }

      return ret;
  };

  };

  var generators = function(Promise,
                            apiRejection,
                            INTERNAL,
                            tryConvertToPromise,
                            Proxyable,
                            debug) {
  var errors = errors$3;
  var TypeError = errors.TypeError;
  var util = util$5;
  var errorObj = util.errorObj;
  var tryCatch = util.tryCatch;
  var yieldHandlers = [];

  function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
      for (var i = 0; i < yieldHandlers.length; ++i) {
          traceParent._pushContext();
          var result = tryCatch(yieldHandlers[i])(value);
          traceParent._popContext();
          if (result === errorObj) {
              traceParent._pushContext();
              var ret = Promise.reject(errorObj.e);
              traceParent._popContext();
              return ret;
          }
          var maybePromise = tryConvertToPromise(result, traceParent);
          if (maybePromise instanceof Promise) { return maybePromise; }
      }
      return null;
  }

  function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
      if (debug.cancellation()) {
          var internal = new Promise(INTERNAL);
          var _finallyPromise = this._finallyPromise = new Promise(INTERNAL);
          this._promise = internal.lastly(function() {
              return _finallyPromise;
          });
          internal._captureStackTrace();
          internal._setOnCancel(this);
      } else {
          var promise = this._promise = new Promise(INTERNAL);
          promise._captureStackTrace();
      }
      this._stack = stack;
      this._generatorFunction = generatorFunction;
      this._receiver = receiver;
      this._generator = undefined;
      this._yieldHandlers = typeof yieldHandler === "function"
          ? [yieldHandler].concat(yieldHandlers)
          : yieldHandlers;
      this._yieldedPromise = null;
      this._cancellationPhase = false;
  }
  util.inherits(PromiseSpawn, Proxyable);

  PromiseSpawn.prototype._isResolved = function() {
      return this._promise === null;
  };

  PromiseSpawn.prototype._cleanup = function() {
      this._promise = this._generator = null;
      if (debug.cancellation() && this._finallyPromise !== null) {
          this._finallyPromise._fulfill();
          this._finallyPromise = null;
      }
  };

  PromiseSpawn.prototype._promiseCancelled = function() {
      if (this._isResolved()) { return; }
      var implementsReturn = typeof this._generator["return"] !== "undefined";

      var result;
      if (!implementsReturn) {
          var reason = new Promise.CancellationError(
              "generator .return() sentinel");
          Promise.coroutine.returnSentinel = reason;
          this._promise._attachExtraTrace(reason);
          this._promise._pushContext();
          result = tryCatch(this._generator["throw"]).call(this._generator,
                                                           reason);
          this._promise._popContext();
      } else {
          this._promise._pushContext();
          result = tryCatch(this._generator["return"]).call(this._generator,
                                                            undefined);
          this._promise._popContext();
      }
      this._cancellationPhase = true;
      this._yieldedPromise = null;
      this._continue(result);
  };

  PromiseSpawn.prototype._promiseFulfilled = function(value) {
      this._yieldedPromise = null;
      this._promise._pushContext();
      var result = tryCatch(this._generator.next).call(this._generator, value);
      this._promise._popContext();
      this._continue(result);
  };

  PromiseSpawn.prototype._promiseRejected = function(reason) {
      this._yieldedPromise = null;
      this._promise._attachExtraTrace(reason);
      this._promise._pushContext();
      var result = tryCatch(this._generator["throw"])
          .call(this._generator, reason);
      this._promise._popContext();
      this._continue(result);
  };

  PromiseSpawn.prototype._resultCancelled = function() {
      if (this._yieldedPromise instanceof Promise) {
          var promise = this._yieldedPromise;
          this._yieldedPromise = null;
          promise.cancel();
      }
  };

  PromiseSpawn.prototype.promise = function () {
      return this._promise;
  };

  PromiseSpawn.prototype._run = function () {
      this._generator = this._generatorFunction.call(this._receiver);
      this._receiver =
          this._generatorFunction = undefined;
      this._promiseFulfilled(undefined);
  };

  PromiseSpawn.prototype._continue = function (result) {
      var promise = this._promise;
      if (result === errorObj) {
          this._cleanup();
          if (this._cancellationPhase) {
              return promise.cancel();
          } else {
              return promise._rejectCallback(result.e, false);
          }
      }

      var value = result.value;
      if (result.done === true) {
          this._cleanup();
          if (this._cancellationPhase) {
              return promise.cancel();
          } else {
              return promise._resolveCallback(value);
          }
      } else {
          var maybePromise = tryConvertToPromise(value, this._promise);
          if (!(maybePromise instanceof Promise)) {
              maybePromise =
                  promiseFromYieldHandler(maybePromise,
                                          this._yieldHandlers,
                                          this._promise);
              if (maybePromise === null) {
                  this._promiseRejected(
                      new TypeError(
                          "A value %s was yielded that could not be treated as a promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a\u000a".replace("%s", String(value)) +
                          "From coroutine:\u000a" +
                          this._stack.split("\n").slice(1, -7).join("\n")
                      )
                  );
                  return;
              }
          }
          maybePromise = maybePromise._target();
          var bitField = maybePromise._bitField;
          if (((bitField & 50397184) === 0)) {
              this._yieldedPromise = maybePromise;
              maybePromise._proxy(this, null);
          } else if (((bitField & 33554432) !== 0)) {
              Promise._async.invoke(
                  this._promiseFulfilled, this, maybePromise._value()
              );
          } else if (((bitField & 16777216) !== 0)) {
              Promise._async.invoke(
                  this._promiseRejected, this, maybePromise._reason()
              );
          } else {
              this._promiseCancelled();
          }
      }
  };

  Promise.coroutine = function (generatorFunction, options) {
      if (typeof generatorFunction !== "function") {
          throw new TypeError("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      var yieldHandler = Object(options).yieldHandler;
      var PromiseSpawn$ = PromiseSpawn;
      var stack = new Error().stack;
      return function () {
          var generator = generatorFunction.apply(this, arguments);
          var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler,
                                        stack);
          var ret = spawn.promise();
          spawn._generator = generator;
          spawn._promiseFulfilled(undefined);
          return ret;
      };
  };

  Promise.coroutine.addYieldHandler = function(fn) {
      if (typeof fn !== "function") {
          throw new TypeError("expecting a function but got " + util.classString(fn));
      }
      yieldHandlers.push(fn);
  };

  Promise.spawn = function (generatorFunction) {
      debug.deprecated("Promise.spawn()", "Promise.coroutine()");
      if (typeof generatorFunction !== "function") {
          return apiRejection("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      var spawn = new PromiseSpawn(generatorFunction, this);
      var ret = spawn.promise();
      spawn._run(Promise.spawn);
      return ret;
  };
  };

  var nodeify = function(Promise) {
  var util = util$5;
  var async = Promise._async;
  var tryCatch = util.tryCatch;
  var errorObj = util.errorObj;

  function spreadAdapter(val, nodeback) {
      var promise = this;
      if (!util.isArray(val)) { return successAdapter.call(promise, val, nodeback); }
      var ret =
          tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
      if (ret === errorObj) {
          async.throwLater(ret.e);
      }
  }

  function successAdapter(val, nodeback) {
      var promise = this;
      var receiver = promise._boundValue();
      var ret = val === undefined
          ? tryCatch(nodeback).call(receiver, null)
          : tryCatch(nodeback).call(receiver, null, val);
      if (ret === errorObj) {
          async.throwLater(ret.e);
      }
  }
  function errorAdapter(reason, nodeback) {
      var promise = this;
      if (!reason) {
          var newReason = new Error(reason + "");
          newReason.cause = reason;
          reason = newReason;
      }
      var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
      if (ret === errorObj) {
          async.throwLater(ret.e);
      }
  }

  Promise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback,
                                                                       options) {
      if (typeof nodeback == "function") {
          var adapter = successAdapter;
          if (options !== undefined && Object(options).spread) {
              adapter = spreadAdapter;
          }
          this._then(
              adapter,
              errorAdapter,
              undefined,
              this,
              nodeback
          );
      }
      return this;
  };
  };

  var promisify = function(Promise, INTERNAL) {
  var THIS = {};
  var util = util$5;
  var nodebackForPromise = nodeback;
  var withAppended = util.withAppended;
  var maybeWrapAsError = util.maybeWrapAsError;
  var canEvaluate = util.canEvaluate;
  var TypeError = errors$3.TypeError;
  var defaultSuffix = "Async";
  var defaultPromisified = {__isPromisified__: true};
  var noCopyProps = [
      "arity",    "length",
      "name",
      "arguments",
      "caller",
      "callee",
      "prototype",
      "__isPromisified__"
  ];
  var noCopyPropsPattern = new RegExp("^(?:" + noCopyProps.join("|") + ")$");

  var defaultFilter = function(name) {
      return util.isIdentifier(name) &&
          name.charAt(0) !== "_" &&
          name !== "constructor";
  };

  function propsFilter(key) {
      return !noCopyPropsPattern.test(key);
  }

  function isPromisified(fn) {
      try {
          return fn.__isPromisified__ === true;
      }
      catch (e) {
          return false;
      }
  }

  function hasPromisified(obj, key, suffix) {
      var val = util.getDataPropertyOrDefault(obj, key + suffix,
                                              defaultPromisified);
      return val ? isPromisified(val) : false;
  }
  function checkValid(ret, suffix, suffixRegexp) {
      for (var i = 0; i < ret.length; i += 2) {
          var key = ret[i];
          if (suffixRegexp.test(key)) {
              var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
              for (var j = 0; j < ret.length; j += 2) {
                  if (ret[j] === keyWithoutAsyncSuffix) {
                      throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\u000a\u000a    See http://goo.gl/MqrFmX\u000a"
                          .replace("%s", suffix));
                  }
              }
          }
      }
  }

  function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
      var keys = util.inheritedDataKeys(obj);
      var ret = [];
      for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          var value = obj[key];
          var passesDefaultFilter = filter === defaultFilter
              ? true : defaultFilter(key, value, obj);
          if (typeof value === "function" &&
              !isPromisified(value) &&
              !hasPromisified(obj, key, suffix) &&
              filter(key, value, obj, passesDefaultFilter)) {
              ret.push(key, value);
          }
      }
      checkValid(ret, suffix, suffixRegexp);
      return ret;
  }

  var escapeIdentRegex = function(str) {
      return str.replace(/([$])/, "\\$");
  };

  var makeNodePromisifiedEval;
  {
  var switchCaseArgumentOrder = function(likelyArgumentCount) {
      var ret = [likelyArgumentCount];
      var min = Math.max(0, likelyArgumentCount - 1 - 3);
      for(var i = likelyArgumentCount - 1; i >= min; --i) {
          ret.push(i);
      }
      for(var i = likelyArgumentCount + 1; i <= 3; ++i) {
          ret.push(i);
      }
      return ret;
  };

  var argumentSequence = function(argumentCount) {
      return util.filledRange(argumentCount, "_arg", "");
  };

  var parameterDeclaration = function(parameterCount) {
      return util.filledRange(
          Math.max(parameterCount, 3), "_arg", "");
  };

  var parameterCount = function(fn) {
      if (typeof fn.length === "number") {
          return Math.max(Math.min(fn.length, 1023 + 1), 0);
      }
      return 0;
  };

  makeNodePromisifiedEval =
  function(callback, receiver, originalName, fn, _, multiArgs) {
      var newParameterCount = Math.max(0, parameterCount(fn) - 1);
      var argumentOrder = switchCaseArgumentOrder(newParameterCount);
      var shouldProxyThis = typeof callback === "string" || receiver === THIS;

      function generateCallForArgumentCount(count) {
          var args = argumentSequence(count).join(", ");
          var comma = count > 0 ? ", " : "";
          var ret;
          if (shouldProxyThis) {
              ret = "ret = callback.call(this, {{args}}, nodeback); break;\n";
          } else {
              ret = receiver === undefined
                  ? "ret = callback({{args}}, nodeback); break;\n"
                  : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
          }
          return ret.replace("{{args}}", args).replace(", ", comma);
      }

      function generateArgumentSwitchCase() {
          var ret = "";
          for (var i = 0; i < argumentOrder.length; ++i) {
              ret += "case " + argumentOrder[i] +":" +
                  generateCallForArgumentCount(argumentOrder[i]);
          }

          ret += "                                                             \n\
        default:                                                             \n\
            var args = new Array(len + 1);                                   \n\
            var i = 0;                                                       \n\
            for (var i = 0; i < len; ++i) {                                  \n\
               args[i] = arguments[i];                                       \n\
            }                                                                \n\
            args[i] = nodeback;                                              \n\
            [CodeForCall]                                                    \n\
            break;                                                           \n\
        ".replace("[CodeForCall]", (shouldProxyThis
                                  ? "ret = callback.apply(this, args);\n"
                                  : "ret = callback.apply(receiver, args);\n"));
          return ret;
      }

      var getFunctionCode = typeof callback === "string"
                                  ? ("this != null ? this['"+callback+"'] : fn")
                                  : "fn";
      var body = "'use strict';                                                \n\
        var ret = function (Parameters) {                                    \n\
            'use strict';                                                    \n\
            var len = arguments.length;                                      \n\
            var promise = new Promise(INTERNAL);                             \n\
            promise._captureStackTrace();                                    \n\
            var nodeback = nodebackForPromise(promise, " + multiArgs + ");   \n\
            var ret;                                                         \n\
            var callback = tryCatch([GetFunctionCode]);                      \n\
            switch(len) {                                                    \n\
                [CodeForSwitchCase]                                          \n\
            }                                                                \n\
            if (ret === errorObj) {                                          \n\
                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
            }                                                                \n\
            if (!promise._isFateSealed()) promise._setAsyncGuaranteed();     \n\
            return promise;                                                  \n\
        };                                                                   \n\
        notEnumerableProp(ret, '__isPromisified__', true);                   \n\
        return ret;                                                          \n\
    ".replace("[CodeForSwitchCase]", generateArgumentSwitchCase())
          .replace("[GetFunctionCode]", getFunctionCode);
      body = body.replace("Parameters", parameterDeclaration(newParameterCount));
      return new Function("Promise",
                          "fn",
                          "receiver",
                          "withAppended",
                          "maybeWrapAsError",
                          "nodebackForPromise",
                          "tryCatch",
                          "errorObj",
                          "notEnumerableProp",
                          "INTERNAL",
                          body)(
                      Promise,
                      fn,
                      receiver,
                      withAppended,
                      maybeWrapAsError,
                      nodebackForPromise,
                      util.tryCatch,
                      util.errorObj,
                      util.notEnumerableProp,
                      INTERNAL);
  };
  }

  function makeNodePromisifiedClosure(callback, receiver, _, fn, __, multiArgs) {
      var defaultThis = (function() {return this;})();
      var method = callback;
      if (typeof method === "string") {
          callback = fn;
      }
      function promisified() {
          var _receiver = receiver;
          if (receiver === THIS) { _receiver = this; }
          var promise = new Promise(INTERNAL);
          promise._captureStackTrace();
          var cb = typeof method === "string" && this !== defaultThis
              ? this[method] : callback;
          var fn = nodebackForPromise(promise, multiArgs);
          try {
              cb.apply(_receiver, withAppended(arguments, fn));
          } catch(e) {
              promise._rejectCallback(maybeWrapAsError(e), true, true);
          }
          if (!promise._isFateSealed()) { promise._setAsyncGuaranteed(); }
          return promise;
      }
      util.notEnumerableProp(promisified, "__isPromisified__", true);
      return promisified;
  }

  var makeNodePromisified = canEvaluate
      ? makeNodePromisifiedEval
      : makeNodePromisifiedClosure;

  function promisifyAll(obj, suffix, filter, promisifier, multiArgs) {
      var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
      var methods =
          promisifiableMethods(obj, suffix, suffixRegexp, filter);

      for (var i = 0, len = methods.length; i < len; i+= 2) {
          var key = methods[i];
          var fn = methods[i+1];
          var promisifiedKey = key + suffix;
          if (promisifier === makeNodePromisified) {
              obj[promisifiedKey] =
                  makeNodePromisified(key, THIS, key, fn, suffix, multiArgs);
          } else {
              var promisified = promisifier(fn, function() {
                  return makeNodePromisified(key, THIS, key,
                                             fn, suffix, multiArgs);
              });
              util.notEnumerableProp(promisified, "__isPromisified__", true);
              obj[promisifiedKey] = promisified;
          }
      }
      util.toFastProperties(obj);
      return obj;
  }

  function promisify(callback, receiver, multiArgs) {
      return makeNodePromisified(callback, receiver, undefined,
                                  callback, null, multiArgs);
  }

  Promise.promisify = function (fn, options) {
      if (typeof fn !== "function") {
          throw new TypeError("expecting a function but got " + util.classString(fn));
      }
      if (isPromisified(fn)) {
          return fn;
      }
      options = Object(options);
      var receiver = options.context === undefined ? THIS : options.context;
      var multiArgs = !!options.multiArgs;
      var ret = promisify(fn, receiver, multiArgs);
      util.copyDescriptors(fn, ret, propsFilter);
      return ret;
  };

  Promise.promisifyAll = function (target, options) {
      if (typeof target !== "function" && typeof target !== "object") {
          throw new TypeError("the target of promisifyAll must be an object or a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      options = Object(options);
      var multiArgs = !!options.multiArgs;
      var suffix = options.suffix;
      if (typeof suffix !== "string") { suffix = defaultSuffix; }
      var filter = options.filter;
      if (typeof filter !== "function") { filter = defaultFilter; }
      var promisifier = options.promisifier;
      if (typeof promisifier !== "function") { promisifier = makeNodePromisified; }

      if (!util.isIdentifier(suffix)) {
          throw new RangeError("suffix must be a valid identifier\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }

      var keys = util.inheritedDataKeys(target);
      for (var i = 0; i < keys.length; ++i) {
          var value = target[keys[i]];
          if (keys[i] !== "constructor" &&
              util.isClass(value)) {
              promisifyAll(value.prototype, suffix, filter, promisifier,
                  multiArgs);
              promisifyAll(value, suffix, filter, promisifier, multiArgs);
          }
      }

      return promisifyAll(target, suffix, filter, promisifier, multiArgs);
  };
  };

  var props$1 = function(
      Promise, PromiseArray, tryConvertToPromise, apiRejection) {
  var util = util$5;
  var isObject = util.isObject;
  var es5$$1 = es5;
  var Es6Map;
  if (typeof Map === "function") { Es6Map = Map; }

  var mapToEntries = (function() {
      var index = 0;
      var size = 0;

      function extractEntry(value, key) {
          this[index] = value;
          this[index + size] = key;
          index++;
      }

      return function mapToEntries(map) {
          size = map.size;
          index = 0;
          var ret = new Array(map.size * 2);
          map.forEach(extractEntry, ret);
          return ret;
      };
  })();

  var entriesToMap = function(entries) {
      var ret = new Es6Map();
      var length = entries.length / 2 | 0;
      for (var i = 0; i < length; ++i) {
          var key = entries[length + i];
          var value = entries[i];
          ret.set(key, value);
      }
      return ret;
  };

  function PropertiesPromiseArray(obj) {
      var isMap = false;
      var entries;
      if (Es6Map !== undefined && obj instanceof Es6Map) {
          entries = mapToEntries(obj);
          isMap = true;
      } else {
          var keys = es5$$1.keys(obj);
          var len = keys.length;
          entries = new Array(len * 2);
          for (var i = 0; i < len; ++i) {
              var key = keys[i];
              entries[i] = obj[key];
              entries[i + len] = key;
          }
      }
      this.constructor$(entries);
      this._isMap = isMap;
      this._init$(undefined, isMap ? -6 : -3);
  }
  util.inherits(PropertiesPromiseArray, PromiseArray);

  PropertiesPromiseArray.prototype._init = function () {};

  PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
      var this$1 = this;

      this._values[index] = value;
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= this._length) {
          var val;
          if (this._isMap) {
              val = entriesToMap(this._values);
          } else {
              val = {};
              var keyOffset = this.length();
              for (var i = 0, len = this.length(); i < len; ++i) {
                  val[this$1._values[i + keyOffset]] = this$1._values[i];
              }
          }
          this._resolve(val);
          return true;
      }
      return false;
  };

  PropertiesPromiseArray.prototype.shouldCopyValues = function () {
      return false;
  };

  PropertiesPromiseArray.prototype.getActualLength = function (len) {
      return len >> 1;
  };

  function props(promises) {
      var ret;
      var castValue = tryConvertToPromise(promises);

      if (!isObject(castValue)) {
          return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      } else if (castValue instanceof Promise) {
          ret = castValue._then(
              Promise.props, undefined, undefined, undefined, undefined);
      } else {
          ret = new PropertiesPromiseArray(castValue).promise();
      }

      if (castValue instanceof Promise) {
          ret._propagateFrom(castValue, 2);
      }
      return ret;
  }

  Promise.prototype.props = function () {
      return props(this);
  };

  Promise.props = function (promises) {
      return props(promises);
  };
  };

  var race = function(
      Promise, INTERNAL, tryConvertToPromise, apiRejection) {
  var util = util$5;

  var raceLater = function (promise) {
      return promise.then(function(array) {
          return race(array, promise);
      });
  };

  function race(promises, parent) {
      var maybePromise = tryConvertToPromise(promises);

      if (maybePromise instanceof Promise) {
          return raceLater(maybePromise);
      } else {
          promises = util.asArray(promises);
          if (promises === null)
              { return apiRejection("expecting an array or an iterable object but got " + util.classString(promises)); }
      }

      var ret = new Promise(INTERNAL);
      if (parent !== undefined) {
          ret._propagateFrom(parent, 3);
      }
      var fulfill = ret._fulfill;
      var reject = ret._reject;
      for (var i = 0, len = promises.length; i < len; ++i) {
          var val = promises[i];

          if (val === undefined && !(i in promises)) {
              continue;
          }

          Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
      }
      return ret;
  }

  Promise.race = function (promises) {
      return race(promises, undefined);
  };

  Promise.prototype.race = function () {
      return race(this, undefined);
  };

  };

  var reduce = function(Promise,
                            PromiseArray,
                            apiRejection,
                            tryConvertToPromise,
                            INTERNAL,
                            debug) {
  var getDomain = Promise._getDomain;
  var util = util$5;
  var tryCatch = util.tryCatch;

  function ReductionPromiseArray(promises, fn, initialValue, _each) {
      this.constructor$(promises);
      var domain = getDomain();
      this._fn = domain === null ? fn : util.domainBind(domain, fn);
      if (initialValue !== undefined) {
          initialValue = Promise.resolve(initialValue);
          initialValue._attachCancellationCallback(this);
      }
      this._initialValue = initialValue;
      this._currentCancellable = null;
      if(_each === INTERNAL) {
          this._eachValues = Array(this._length);
      } else if (_each === 0) {
          this._eachValues = null;
      } else {
          this._eachValues = undefined;
      }
      this._promise._captureStackTrace();
      this._init$(undefined, -5);
  }
  util.inherits(ReductionPromiseArray, PromiseArray);

  ReductionPromiseArray.prototype._gotAccum = function(accum) {
      if (this._eachValues !== undefined && 
          this._eachValues !== null && 
          accum !== INTERNAL) {
          this._eachValues.push(accum);
      }
  };

  ReductionPromiseArray.prototype._eachComplete = function(value) {
      if (this._eachValues !== null) {
          this._eachValues.push(value);
      }
      return this._eachValues;
  };

  ReductionPromiseArray.prototype._init = function() {};

  ReductionPromiseArray.prototype._resolveEmptyArray = function() {
      this._resolve(this._eachValues !== undefined ? this._eachValues
                                                   : this._initialValue);
  };

  ReductionPromiseArray.prototype.shouldCopyValues = function () {
      return false;
  };

  ReductionPromiseArray.prototype._resolve = function(value) {
      this._promise._resolveCallback(value);
      this._values = null;
  };

  ReductionPromiseArray.prototype._resultCancelled = function(sender) {
      if (sender === this._initialValue) { return this._cancel(); }
      if (this._isResolved()) { return; }
      this._resultCancelled$();
      if (this._currentCancellable instanceof Promise) {
          this._currentCancellable.cancel();
      }
      if (this._initialValue instanceof Promise) {
          this._initialValue.cancel();
      }
  };

  ReductionPromiseArray.prototype._iterate = function (values) {
      var this$1 = this;

      this._values = values;
      var value;
      var i;
      var length = values.length;
      if (this._initialValue !== undefined) {
          value = this._initialValue;
          i = 0;
      } else {
          value = Promise.resolve(values[0]);
          i = 1;
      }

      this._currentCancellable = value;

      if (!value.isRejected()) {
          for (; i < length; ++i) {
              var ctx = {
                  accum: null,
                  value: values[i],
                  index: i,
                  length: length,
                  array: this$1
              };
              value = value._then(gotAccum, undefined, undefined, ctx, undefined);
          }
      }

      if (this._eachValues !== undefined) {
          value = value
              ._then(this._eachComplete, undefined, undefined, this, undefined);
      }
      value._then(completed, completed, undefined, value, this);
  };

  Promise.prototype.reduce = function (fn, initialValue) {
      return reduce(this, fn, initialValue, null);
  };

  Promise.reduce = function (promises, fn, initialValue, _each) {
      return reduce(promises, fn, initialValue, _each);
  };

  function completed(valueOrReason, array) {
      if (this.isFulfilled()) {
          array._resolve(valueOrReason);
      } else {
          array._reject(valueOrReason);
      }
  }

  function reduce(promises, fn, initialValue, _each) {
      if (typeof fn !== "function") {
          return apiRejection("expecting a function but got " + util.classString(fn));
      }
      var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
      return array.promise();
  }

  function gotAccum(accum) {
      this.accum = accum;
      this.array._gotAccum(accum);
      var value = tryConvertToPromise(this.value, this.array._promise);
      if (value instanceof Promise) {
          this.array._currentCancellable = value;
          return value._then(gotValue, undefined, undefined, this, undefined);
      } else {
          return gotValue.call(this, value);
      }
  }

  function gotValue(value) {
      var array = this.array;
      var promise = array._promise;
      var fn = tryCatch(array._fn);
      promise._pushContext();
      var ret;
      if (array._eachValues !== undefined) {
          ret = fn.call(promise._boundValue(), value, this.index, this.length);
      } else {
          ret = fn.call(promise._boundValue(),
                                this.accum, value, this.index, this.length);
      }
      if (ret instanceof Promise) {
          array._currentCancellable = ret;
      }
      var promiseCreated = promise._popContext();
      debug.checkForgottenReturns(
          ret,
          promiseCreated,
          array._eachValues !== undefined ? "Promise.each" : "Promise.reduce",
          promise
      );
      return ret;
  }
  };

  var settle =
      function(Promise, PromiseArray, debug) {
  var PromiseInspection = Promise.PromiseInspection;
  var util = util$5;

  function SettledPromiseArray(values) {
      this.constructor$(values);
  }
  util.inherits(SettledPromiseArray, PromiseArray);

  SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
      this._values[index] = inspection;
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= this._length) {
          this._resolve(this._values);
          return true;
      }
      return false;
  };

  SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
      var ret = new PromiseInspection();
      ret._bitField = 33554432;
      ret._settledValueField = value;
      return this._promiseResolved(index, ret);
  };
  SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
      var ret = new PromiseInspection();
      ret._bitField = 16777216;
      ret._settledValueField = reason;
      return this._promiseResolved(index, ret);
  };

  Promise.settle = function (promises) {
      debug.deprecated(".settle()", ".reflect()");
      return new SettledPromiseArray(promises).promise();
  };

  Promise.prototype.settle = function () {
      return Promise.settle(this);
  };
  };

  var some =
  function(Promise, PromiseArray, apiRejection) {
  var util = util$5;
  var RangeError = errors$3.RangeError;
  var AggregateError = errors$3.AggregateError;
  var isArray = util.isArray;
  var CANCELLATION = {};


  function SomePromiseArray(values) {
      this.constructor$(values);
      this._howMany = 0;
      this._unwrap = false;
      this._initialized = false;
  }
  util.inherits(SomePromiseArray, PromiseArray);

  SomePromiseArray.prototype._init = function () {
      if (!this._initialized) {
          return;
      }
      if (this._howMany === 0) {
          this._resolve([]);
          return;
      }
      this._init$(undefined, -5);
      var isArrayResolved = isArray(this._values);
      if (!this._isResolved() &&
          isArrayResolved &&
          this._howMany > this._canPossiblyFulfill()) {
          this._reject(this._getRangeError(this.length()));
      }
  };

  SomePromiseArray.prototype.init = function () {
      this._initialized = true;
      this._init();
  };

  SomePromiseArray.prototype.setUnwrap = function () {
      this._unwrap = true;
  };

  SomePromiseArray.prototype.howMany = function () {
      return this._howMany;
  };

  SomePromiseArray.prototype.setHowMany = function (count) {
      this._howMany = count;
  };

  SomePromiseArray.prototype._promiseFulfilled = function (value) {
      this._addFulfilled(value);
      if (this._fulfilled() === this.howMany()) {
          this._values.length = this.howMany();
          if (this.howMany() === 1 && this._unwrap) {
              this._resolve(this._values[0]);
          } else {
              this._resolve(this._values);
          }
          return true;
      }
      return false;

  };
  SomePromiseArray.prototype._promiseRejected = function (reason) {
      this._addRejected(reason);
      return this._checkOutcome();
  };

  SomePromiseArray.prototype._promiseCancelled = function () {
      if (this._values instanceof Promise || this._values == null) {
          return this._cancel();
      }
      this._addRejected(CANCELLATION);
      return this._checkOutcome();
  };

  SomePromiseArray.prototype._checkOutcome = function() {
      var this$1 = this;

      if (this.howMany() > this._canPossiblyFulfill()) {
          var e = new AggregateError();
          for (var i = this.length(); i < this._values.length; ++i) {
              if (this$1._values[i] !== CANCELLATION) {
                  e.push(this$1._values[i]);
              }
          }
          if (e.length > 0) {
              this._reject(e);
          } else {
              this._cancel();
          }
          return true;
      }
      return false;
  };

  SomePromiseArray.prototype._fulfilled = function () {
      return this._totalResolved;
  };

  SomePromiseArray.prototype._rejected = function () {
      return this._values.length - this.length();
  };

  SomePromiseArray.prototype._addRejected = function (reason) {
      this._values.push(reason);
  };

  SomePromiseArray.prototype._addFulfilled = function (value) {
      this._values[this._totalResolved++] = value;
  };

  SomePromiseArray.prototype._canPossiblyFulfill = function () {
      return this.length() - this._rejected();
  };

  SomePromiseArray.prototype._getRangeError = function (count) {
      var message = "Input array must contain at least " +
              this._howMany + " items but contains only " + count + " items";
      return new RangeError(message);
  };

  SomePromiseArray.prototype._resolveEmptyArray = function () {
      this._reject(this._getRangeError(0));
  };

  function some(promises, howMany) {
      if ((howMany | 0) !== howMany || howMany < 0) {
          return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      var ret = new SomePromiseArray(promises);
      var promise = ret.promise();
      ret.setHowMany(howMany);
      ret.init();
      return promise;
  }

  Promise.some = function (promises, howMany) {
      return some(promises, howMany);
  };

  Promise.prototype.some = function (howMany) {
      return some(this, howMany);
  };

  Promise._SomePromiseArray = SomePromiseArray;
  };

  var filter$1 = function(Promise, INTERNAL) {
  var PromiseMap = Promise.map;

  Promise.prototype.filter = function (fn, options) {
      return PromiseMap(this, fn, options, INTERNAL);
  };

  Promise.filter = function (promises, fn, options) {
      return PromiseMap(promises, fn, options, INTERNAL);
  };
  };

  var each = function(Promise, INTERNAL) {
  var PromiseReduce = Promise.reduce;
  var PromiseAll = Promise.all;

  function promiseAllThis() {
      return PromiseAll(this);
  }

  function PromiseMapSeries(promises, fn) {
      return PromiseReduce(promises, fn, INTERNAL, INTERNAL);
  }

  Promise.prototype.each = function (fn) {
      return PromiseReduce(this, fn, INTERNAL, 0)
                ._then(promiseAllThis, undefined, undefined, this, undefined);
  };

  Promise.prototype.mapSeries = function (fn) {
      return PromiseReduce(this, fn, INTERNAL, INTERNAL);
  };

  Promise.each = function (promises, fn) {
      return PromiseReduce(promises, fn, INTERNAL, 0)
                ._then(promiseAllThis, undefined, undefined, promises, undefined);
  };

  Promise.mapSeries = PromiseMapSeries;
  };

  var any = function(Promise) {
  var SomePromiseArray = Promise._SomePromiseArray;
  function any(promises) {
      var ret = new SomePromiseArray(promises);
      var promise = ret.promise();
      ret.setHowMany(1);
      ret.setUnwrap();
      ret.init();
      return promise;
  }

  Promise.any = function (promises) {
      return any(promises);
  };

  Promise.prototype.any = function () {
      return any(this);
  };

  };

  var promise$1 = createCommonjsModule(function (module) {
  module.exports = function() {
  var makeSelfResolutionError = function () {
      return new TypeError("circular promise resolution chain\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
  };
  var reflectHandler = function() {
      return new Promise.PromiseInspection(this._target());
  };
  var apiRejection = function(msg) {
      return Promise.reject(new TypeError(msg));
  };
  function Proxyable() {}
  var UNDEFINED_BINDING = {};
  var util = util$5;

  var getDomain;
  if (util.isNode) {
      getDomain = function() {
          var ret = process.domain;
          if (ret === undefined) { ret = null; }
          return ret;
      };
  } else {
      getDomain = function() {
          return null;
      };
  }
  util.notEnumerableProp(Promise, "_getDomain", getDomain);

  var es5$$1 = es5;
  var Async = async$2;
  var async = new Async();
  es5$$1.defineProperty(Promise, "_async", {value: async});
  var errors = errors$3;
  var TypeError = Promise.TypeError = errors.TypeError;
  Promise.RangeError = errors.RangeError;
  var CancellationError = Promise.CancellationError = errors.CancellationError;
  Promise.TimeoutError = errors.TimeoutError;
  Promise.OperationalError = errors.OperationalError;
  Promise.RejectionError = errors.OperationalError;
  Promise.AggregateError = errors.AggregateError;
  var INTERNAL = function(){};
  var APPLY = {};
  var NEXT_FILTER = {};
  var tryConvertToPromise = thenables(Promise, INTERNAL);
  var PromiseArray =
      promise_array(Promise, INTERNAL,
                                 tryConvertToPromise, apiRejection, Proxyable);
  var Context = context(Promise);
   /*jshint unused:false*/
  var createContext = Context.create;
  var debug = debuggability(Promise, Context);
  var PassThroughHandlerContext =
      _finally(Promise, tryConvertToPromise, NEXT_FILTER);
  var catchFilter = catch_filter(NEXT_FILTER);
  var nodebackForPromise = nodeback;
  var errorObj = util.errorObj;
  var tryCatch = util.tryCatch;
  function check(self, executor) {
      if (self == null || self.constructor !== Promise) {
          throw new TypeError("the promise constructor cannot be invoked directly\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      if (typeof executor !== "function") {
          throw new TypeError("expecting a function but got " + util.classString(executor));
      }

  }

  function Promise(executor) {
      if (executor !== INTERNAL) {
          check(this, executor);
      }
      this._bitField = 0;
      this._fulfillmentHandler0 = undefined;
      this._rejectionHandler0 = undefined;
      this._promise0 = undefined;
      this._receiver0 = undefined;
      this._resolveFromExecutor(executor);
      this._promiseCreated();
      this._fireEvent("promiseCreated", this);
  }

  Promise.prototype.toString = function () {
      return "[object Promise]";
  };

  Promise.prototype.caught = Promise.prototype["catch"] = function (fn) {
      var arguments$1 = arguments;

      var len = arguments.length;
      if (len > 1) {
          var catchInstances = new Array(len - 1),
              j = 0, i;
          for (i = 0; i < len - 1; ++i) {
              var item = arguments$1[i];
              if (util.isObject(item)) {
                  catchInstances[j++] = item;
              } else {
                  return apiRejection("Catch statement predicate: " +
                      "expecting an object but got " + util.classString(item));
              }
          }
          catchInstances.length = j;
          fn = arguments[i];
          return this.then(undefined, catchFilter(catchInstances, fn, this));
      }
      return this.then(undefined, fn);
  };

  Promise.prototype.reflect = function () {
      return this._then(reflectHandler,
          reflectHandler, undefined, this, undefined);
  };

  Promise.prototype.then = function (didFulfill, didReject) {
      if (debug.warnings() && arguments.length > 0 &&
          typeof didFulfill !== "function" &&
          typeof didReject !== "function") {
          var msg = ".then() only accepts functions but was passed: " +
                  util.classString(didFulfill);
          if (arguments.length > 1) {
              msg += ", " + util.classString(didReject);
          }
          this._warn(msg);
      }
      return this._then(didFulfill, didReject, undefined, undefined, undefined);
  };

  Promise.prototype.done = function (didFulfill, didReject) {
      var promise =
          this._then(didFulfill, didReject, undefined, undefined, undefined);
      promise._setIsFinal();
  };

  Promise.prototype.spread = function (fn) {
      if (typeof fn !== "function") {
          return apiRejection("expecting a function but got " + util.classString(fn));
      }
      return this.all()._then(fn, undefined, undefined, APPLY, undefined);
  };

  Promise.prototype.toJSON = function () {
      var ret = {
          isFulfilled: false,
          isRejected: false,
          fulfillmentValue: undefined,
          rejectionReason: undefined
      };
      if (this.isFulfilled()) {
          ret.fulfillmentValue = this.value();
          ret.isFulfilled = true;
      } else if (this.isRejected()) {
          ret.rejectionReason = this.reason();
          ret.isRejected = true;
      }
      return ret;
  };

  Promise.prototype.all = function () {
      if (arguments.length > 0) {
          this._warn(".all() was passed arguments but it does not take any");
      }
      return new PromiseArray(this).promise();
  };

  Promise.prototype.error = function (fn) {
      return this.caught(util.originatesFromRejection, fn);
  };

  Promise.getNewLibraryCopy = module.exports;

  Promise.is = function (val) {
      return val instanceof Promise;
  };

  Promise.fromNode = Promise.fromCallback = function(fn) {
      var ret = new Promise(INTERNAL);
      ret._captureStackTrace();
      var multiArgs = arguments.length > 1 ? !!Object(arguments[1]).multiArgs
                                           : false;
      var result = tryCatch(fn)(nodebackForPromise(ret, multiArgs));
      if (result === errorObj) {
          ret._rejectCallback(result.e, true);
      }
      if (!ret._isFateSealed()) { ret._setAsyncGuaranteed(); }
      return ret;
  };

  Promise.all = function (promises) {
      return new PromiseArray(promises).promise();
  };

  Promise.cast = function (obj) {
      var ret = tryConvertToPromise(obj);
      if (!(ret instanceof Promise)) {
          ret = new Promise(INTERNAL);
          ret._captureStackTrace();
          ret._setFulfilled();
          ret._rejectionHandler0 = obj;
      }
      return ret;
  };

  Promise.resolve = Promise.fulfilled = Promise.cast;

  Promise.reject = Promise.rejected = function (reason) {
      var ret = new Promise(INTERNAL);
      ret._captureStackTrace();
      ret._rejectCallback(reason, true);
      return ret;
  };

  Promise.setScheduler = function(fn) {
      if (typeof fn !== "function") {
          throw new TypeError("expecting a function but got " + util.classString(fn));
      }
      return async.setScheduler(fn);
  };

  Promise.prototype._then = function (
      didFulfill,
      didReject,
      _,    receiver,
      internalData
  ) {
      var haveInternalData = internalData !== undefined;
      var promise = haveInternalData ? internalData : new Promise(INTERNAL);
      var target = this._target();
      var bitField = target._bitField;

      if (!haveInternalData) {
          promise._propagateFrom(this, 3);
          promise._captureStackTrace();
          if (receiver === undefined &&
              ((this._bitField & 2097152) !== 0)) {
              if (!((bitField & 50397184) === 0)) {
                  receiver = this._boundValue();
              } else {
                  receiver = target === this ? undefined : this._boundTo;
              }
          }
          this._fireEvent("promiseChained", this, promise);
      }

      var domain = getDomain();
      if (!((bitField & 50397184) === 0)) {
          var handler, value, settler = target._settlePromiseCtx;
          if (((bitField & 33554432) !== 0)) {
              value = target._rejectionHandler0;
              handler = didFulfill;
          } else if (((bitField & 16777216) !== 0)) {
              value = target._fulfillmentHandler0;
              handler = didReject;
              target._unsetRejectionIsUnhandled();
          } else {
              settler = target._settlePromiseLateCancellationObserver;
              value = new CancellationError("late cancellation observer");
              target._attachExtraTrace(value);
              handler = didReject;
          }

          async.invoke(settler, target, {
              handler: domain === null ? handler
                  : (typeof handler === "function" &&
                      util.domainBind(domain, handler)),
              promise: promise,
              receiver: receiver,
              value: value
          });
      } else {
          target._addCallbacks(didFulfill, didReject, promise, receiver, domain);
      }

      return promise;
  };

  Promise.prototype._length = function () {
      return this._bitField & 65535;
  };

  Promise.prototype._isFateSealed = function () {
      return (this._bitField & 117506048) !== 0;
  };

  Promise.prototype._isFollowing = function () {
      return (this._bitField & 67108864) === 67108864;
  };

  Promise.prototype._setLength = function (len) {
      this._bitField = (this._bitField & -65536) |
          (len & 65535);
  };

  Promise.prototype._setFulfilled = function () {
      this._bitField = this._bitField | 33554432;
      this._fireEvent("promiseFulfilled", this);
  };

  Promise.prototype._setRejected = function () {
      this._bitField = this._bitField | 16777216;
      this._fireEvent("promiseRejected", this);
  };

  Promise.prototype._setFollowing = function () {
      this._bitField = this._bitField | 67108864;
      this._fireEvent("promiseResolved", this);
  };

  Promise.prototype._setIsFinal = function () {
      this._bitField = this._bitField | 4194304;
  };

  Promise.prototype._isFinal = function () {
      return (this._bitField & 4194304) > 0;
  };

  Promise.prototype._unsetCancelled = function() {
      this._bitField = this._bitField & (~65536);
  };

  Promise.prototype._setCancelled = function() {
      this._bitField = this._bitField | 65536;
      this._fireEvent("promiseCancelled", this);
  };

  Promise.prototype._setWillBeCancelled = function() {
      this._bitField = this._bitField | 8388608;
  };

  Promise.prototype._setAsyncGuaranteed = function() {
      if (async.hasCustomScheduler()) { return; }
      this._bitField = this._bitField | 134217728;
  };

  Promise.prototype._receiverAt = function (index) {
      var ret = index === 0 ? this._receiver0 : this[
              index * 4 - 4 + 3];
      if (ret === UNDEFINED_BINDING) {
          return undefined;
      } else if (ret === undefined && this._isBound()) {
          return this._boundValue();
      }
      return ret;
  };

  Promise.prototype._promiseAt = function (index) {
      return this[
              index * 4 - 4 + 2];
  };

  Promise.prototype._fulfillmentHandlerAt = function (index) {
      return this[
              index * 4 - 4 + 0];
  };

  Promise.prototype._rejectionHandlerAt = function (index) {
      return this[
              index * 4 - 4 + 1];
  };

  Promise.prototype._boundValue = function() {};

  Promise.prototype._migrateCallback0 = function (follower) {
      var bitField = follower._bitField;
      var fulfill = follower._fulfillmentHandler0;
      var reject = follower._rejectionHandler0;
      var promise = follower._promise0;
      var receiver = follower._receiverAt(0);
      if (receiver === undefined) { receiver = UNDEFINED_BINDING; }
      this._addCallbacks(fulfill, reject, promise, receiver, null);
  };

  Promise.prototype._migrateCallbackAt = function (follower, index) {
      var fulfill = follower._fulfillmentHandlerAt(index);
      var reject = follower._rejectionHandlerAt(index);
      var promise = follower._promiseAt(index);
      var receiver = follower._receiverAt(index);
      if (receiver === undefined) { receiver = UNDEFINED_BINDING; }
      this._addCallbacks(fulfill, reject, promise, receiver, null);
  };

  Promise.prototype._addCallbacks = function (
      fulfill,
      reject,
      promise,
      receiver,
      domain
  ) {
      var index = this._length();

      if (index >= 65535 - 4) {
          index = 0;
          this._setLength(0);
      }

      if (index === 0) {
          this._promise0 = promise;
          this._receiver0 = receiver;
          if (typeof fulfill === "function") {
              this._fulfillmentHandler0 =
                  domain === null ? fulfill : util.domainBind(domain, fulfill);
          }
          if (typeof reject === "function") {
              this._rejectionHandler0 =
                  domain === null ? reject : util.domainBind(domain, reject);
          }
      } else {
          var base = index * 4 - 4;
          this[base + 2] = promise;
          this[base + 3] = receiver;
          if (typeof fulfill === "function") {
              this[base + 0] =
                  domain === null ? fulfill : util.domainBind(domain, fulfill);
          }
          if (typeof reject === "function") {
              this[base + 1] =
                  domain === null ? reject : util.domainBind(domain, reject);
          }
      }
      this._setLength(index + 1);
      return index;
  };

  Promise.prototype._proxy = function (proxyable, arg) {
      this._addCallbacks(undefined, undefined, arg, proxyable, null);
  };

  Promise.prototype._resolveCallback = function(value, shouldBind) {
      var this$1 = this;

      if (((this._bitField & 117506048) !== 0)) { return; }
      if (value === this)
          { return this._rejectCallback(makeSelfResolutionError(), false); }
      var maybePromise = tryConvertToPromise(value, this);
      if (!(maybePromise instanceof Promise)) { return this._fulfill(value); }

      if (shouldBind) { this._propagateFrom(maybePromise, 2); }

      var promise = maybePromise._target();

      if (promise === this) {
          this._reject(makeSelfResolutionError());
          return;
      }

      var bitField = promise._bitField;
      if (((bitField & 50397184) === 0)) {
          var len = this._length();
          if (len > 0) { promise._migrateCallback0(this); }
          for (var i = 1; i < len; ++i) {
              promise._migrateCallbackAt(this$1, i);
          }
          this._setFollowing();
          this._setLength(0);
          this._setFollowee(promise);
      } else if (((bitField & 33554432) !== 0)) {
          this._fulfill(promise._value());
      } else if (((bitField & 16777216) !== 0)) {
          this._reject(promise._reason());
      } else {
          var reason = new CancellationError("late cancellation observer");
          promise._attachExtraTrace(reason);
          this._reject(reason);
      }
  };

  Promise.prototype._rejectCallback =
  function(reason, synchronous, ignoreNonErrorWarnings) {
      var trace = util.ensureErrorObject(reason);
      var hasStack = trace === reason;
      if (!hasStack && !ignoreNonErrorWarnings && debug.warnings()) {
          var message = "a promise was rejected with a non-error: " +
              util.classString(reason);
          this._warn(message, true);
      }
      this._attachExtraTrace(trace, synchronous ? hasStack : false);
      this._reject(reason);
  };

  Promise.prototype._resolveFromExecutor = function (executor) {
      if (executor === INTERNAL) { return; }
      var promise = this;
      this._captureStackTrace();
      this._pushContext();
      var synchronous = true;
      var r = this._execute(executor, function(value) {
          promise._resolveCallback(value);
      }, function (reason) {
          promise._rejectCallback(reason, synchronous);
      });
      synchronous = false;
      this._popContext();

      if (r !== undefined) {
          promise._rejectCallback(r, true);
      }
  };

  Promise.prototype._settlePromiseFromHandler = function (
      handler, receiver, value, promise
  ) {
      var bitField = promise._bitField;
      if (((bitField & 65536) !== 0)) { return; }
      promise._pushContext();
      var x;
      if (receiver === APPLY) {
          if (!value || typeof value.length !== "number") {
              x = errorObj;
              x.e = new TypeError("cannot .spread() a non-array: " +
                                      util.classString(value));
          } else {
              x = tryCatch(handler).apply(this._boundValue(), value);
          }
      } else {
          x = tryCatch(handler).call(receiver, value);
      }
      var promiseCreated = promise._popContext();
      bitField = promise._bitField;
      if (((bitField & 65536) !== 0)) { return; }

      if (x === NEXT_FILTER) {
          promise._reject(value);
      } else if (x === errorObj) {
          promise._rejectCallback(x.e, false);
      } else {
          debug.checkForgottenReturns(x, promiseCreated, "",  promise, this);
          promise._resolveCallback(x);
      }
  };

  Promise.prototype._target = function() {
      var ret = this;
      while (ret._isFollowing()) { ret = ret._followee(); }
      return ret;
  };

  Promise.prototype._followee = function() {
      return this._rejectionHandler0;
  };

  Promise.prototype._setFollowee = function(promise) {
      this._rejectionHandler0 = promise;
  };

  Promise.prototype._settlePromise = function(promise, handler, receiver, value) {
      var isPromise = promise instanceof Promise;
      var bitField = this._bitField;
      var asyncGuaranteed = ((bitField & 134217728) !== 0);
      if (((bitField & 65536) !== 0)) {
          if (isPromise) { promise._invokeInternalOnCancel(); }

          if (receiver instanceof PassThroughHandlerContext &&
              receiver.isFinallyHandler()) {
              receiver.cancelPromise = promise;
              if (tryCatch(handler).call(receiver, value) === errorObj) {
                  promise._reject(errorObj.e);
              }
          } else if (handler === reflectHandler) {
              promise._fulfill(reflectHandler.call(receiver));
          } else if (receiver instanceof Proxyable) {
              receiver._promiseCancelled(promise);
          } else if (isPromise || promise instanceof PromiseArray) {
              promise._cancel();
          } else {
              receiver.cancel();
          }
      } else if (typeof handler === "function") {
          if (!isPromise) {
              handler.call(receiver, value, promise);
          } else {
              if (asyncGuaranteed) { promise._setAsyncGuaranteed(); }
              this._settlePromiseFromHandler(handler, receiver, value, promise);
          }
      } else if (receiver instanceof Proxyable) {
          if (!receiver._isResolved()) {
              if (((bitField & 33554432) !== 0)) {
                  receiver._promiseFulfilled(value, promise);
              } else {
                  receiver._promiseRejected(value, promise);
              }
          }
      } else if (isPromise) {
          if (asyncGuaranteed) { promise._setAsyncGuaranteed(); }
          if (((bitField & 33554432) !== 0)) {
              promise._fulfill(value);
          } else {
              promise._reject(value);
          }
      }
  };

  Promise.prototype._settlePromiseLateCancellationObserver = function(ctx) {
      var handler = ctx.handler;
      var promise = ctx.promise;
      var receiver = ctx.receiver;
      var value = ctx.value;
      if (typeof handler === "function") {
          if (!(promise instanceof Promise)) {
              handler.call(receiver, value, promise);
          } else {
              this._settlePromiseFromHandler(handler, receiver, value, promise);
          }
      } else if (promise instanceof Promise) {
          promise._reject(value);
      }
  };

  Promise.prototype._settlePromiseCtx = function(ctx) {
      this._settlePromise(ctx.promise, ctx.handler, ctx.receiver, ctx.value);
  };

  Promise.prototype._settlePromise0 = function(handler, value, bitField) {
      var promise = this._promise0;
      var receiver = this._receiverAt(0);
      this._promise0 = undefined;
      this._receiver0 = undefined;
      this._settlePromise(promise, handler, receiver, value);
  };

  Promise.prototype._clearCallbackDataAtIndex = function(index) {
      var base = index * 4 - 4;
      this[base + 2] =
      this[base + 3] =
      this[base + 0] =
      this[base + 1] = undefined;
  };

  Promise.prototype._fulfill = function (value) {
      var bitField = this._bitField;
      if (((bitField & 117506048) >>> 16)) { return; }
      if (value === this) {
          var err = makeSelfResolutionError();
          this._attachExtraTrace(err);
          return this._reject(err);
      }
      this._setFulfilled();
      this._rejectionHandler0 = value;

      if ((bitField & 65535) > 0) {
          if (((bitField & 134217728) !== 0)) {
              this._settlePromises();
          } else {
              async.settlePromises(this);
          }
      }
  };

  Promise.prototype._reject = function (reason) {
      var bitField = this._bitField;
      if (((bitField & 117506048) >>> 16)) { return; }
      this._setRejected();
      this._fulfillmentHandler0 = reason;

      if (this._isFinal()) {
          return async.fatalError(reason, util.isNode);
      }

      if ((bitField & 65535) > 0) {
          async.settlePromises(this);
      } else {
          this._ensurePossibleRejectionHandled();
      }
  };

  Promise.prototype._fulfillPromises = function (len, value) {
      var this$1 = this;

      for (var i = 1; i < len; i++) {
          var handler = this$1._fulfillmentHandlerAt(i);
          var promise = this$1._promiseAt(i);
          var receiver = this$1._receiverAt(i);
          this$1._clearCallbackDataAtIndex(i);
          this$1._settlePromise(promise, handler, receiver, value);
      }
  };

  Promise.prototype._rejectPromises = function (len, reason) {
      var this$1 = this;

      for (var i = 1; i < len; i++) {
          var handler = this$1._rejectionHandlerAt(i);
          var promise = this$1._promiseAt(i);
          var receiver = this$1._receiverAt(i);
          this$1._clearCallbackDataAtIndex(i);
          this$1._settlePromise(promise, handler, receiver, reason);
      }
  };

  Promise.prototype._settlePromises = function () {
      var bitField = this._bitField;
      var len = (bitField & 65535);

      if (len > 0) {
          if (((bitField & 16842752) !== 0)) {
              var reason = this._fulfillmentHandler0;
              this._settlePromise0(this._rejectionHandler0, reason, bitField);
              this._rejectPromises(len, reason);
          } else {
              var value = this._rejectionHandler0;
              this._settlePromise0(this._fulfillmentHandler0, value, bitField);
              this._fulfillPromises(len, value);
          }
          this._setLength(0);
      }
      this._clearCancellationData();
  };

  Promise.prototype._settledValue = function() {
      var bitField = this._bitField;
      if (((bitField & 33554432) !== 0)) {
          return this._rejectionHandler0;
      } else if (((bitField & 16777216) !== 0)) {
          return this._fulfillmentHandler0;
      }
  };

  function deferResolve(v) {this.promise._resolveCallback(v);}
  function deferReject(v) {this.promise._rejectCallback(v, false);}

  Promise.defer = Promise.pending = function() {
      debug.deprecated("Promise.defer", "new Promise");
      var promise = new Promise(INTERNAL);
      return {
          promise: promise,
          resolve: deferResolve,
          reject: deferReject
      };
  };

  util.notEnumerableProp(Promise,
                         "_makeSelfResolutionError",
                         makeSelfResolutionError);

  method$1(Promise, INTERNAL, tryConvertToPromise, apiRejection,
      debug);
  bind$1(Promise, INTERNAL, tryConvertToPromise, debug);
  cancel(Promise, PromiseArray, apiRejection, debug);
  direct_resolve(Promise);
  synchronous_inspection(Promise);
  join$1(
      Promise, PromiseArray, tryConvertToPromise, INTERNAL, async, getDomain);
  Promise.Promise = Promise;
  Promise.version = "3.5.1";
  map$3(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
  call_get(Promise);
  using(Promise, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug);
  timers(Promise, INTERNAL, debug);
  generators(Promise, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug);
  nodeify(Promise);
  promisify(Promise, INTERNAL);
  props$1(Promise, PromiseArray, tryConvertToPromise, apiRejection);
  race(Promise, INTERNAL, tryConvertToPromise, apiRejection);
  reduce(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
  settle(Promise, PromiseArray, debug);
  some(Promise, PromiseArray, apiRejection);
  filter$1(Promise, INTERNAL);
  each(Promise, INTERNAL);
  any(Promise);
                                                           
      util.toFastProperties(Promise);                                          
      util.toFastProperties(Promise.prototype);                                
      function fillTypes(value) {                                              
          var p = new Promise(INTERNAL);                                       
          p._fulfillmentHandler0 = value;                                      
          p._rejectionHandler0 = value;                                        
          p._promise0 = value;                                                 
          p._receiver0 = value;                                                
      }                                                                        
      // Complete slack tracking, opt out of field-type tracking and           
      // stabilize map                                                         
      fillTypes({a: 1});                                                       
      fillTypes({b: 2});                                                       
      fillTypes({c: 3});                                                       
      fillTypes(1);                                                            
      fillTypes(function(){});                                                 
      fillTypes(undefined);                                                    
      fillTypes(false);                                                        
      fillTypes(new Promise(INTERNAL));                                        
      debug.setBounds(Async.firstLineError, util.lastLineError);               
      return Promise;                                                          

  };
  });

  var old;
  if (typeof Promise !== "undefined") { old = Promise; }
  function noConflict() {
      try { if (Promise === bluebird) { Promise = old; } }
      catch (e) {}
      return bluebird;
  }
  var bluebird = promise$1();
  bluebird.noConflict = noConflict;
  var bluebird_1 = bluebird;

  function RequestError(cause, options, response) {

      this.name = 'RequestError';
      this.message = String(cause);
      this.cause = cause;
      this.error = cause; // legacy attribute
      this.options = options;
      this.response = response;

      if (Error.captureStackTrace) { // required for non-V8 environments
          Error.captureStackTrace(this);
      }

  }
  RequestError.prototype = Object.create(Error.prototype);
  RequestError.prototype.constructor = RequestError;


  function StatusCodeError(statusCode, body, options, response) {

      this.name = 'StatusCodeError';
      this.statusCode = statusCode;
      this.message = statusCode + ' - ' + (JSON && JSON.stringify ? JSON.stringify(body) : body);
      this.error = body; // legacy attribute
      this.options = options;
      this.response = response;

      if (Error.captureStackTrace) { // required for non-V8 environments
          Error.captureStackTrace(this);
      }

  }
  StatusCodeError.prototype = Object.create(Error.prototype);
  StatusCodeError.prototype.constructor = StatusCodeError;


  function TransformError(cause, options, response) {

      this.name = 'TransformError';
      this.message = String(cause);
      this.cause = cause;
      this.error = cause; // legacy attribute
      this.options = options;
      this.response = response;

      if (Error.captureStackTrace) { // required for non-V8 environments
          Error.captureStackTrace(this);
      }

  }
  TransformError.prototype = Object.create(Error.prototype);
  TransformError.prototype.constructor = TransformError;


  var errors$4 = {
      RequestError: RequestError,
      StatusCodeError: StatusCodeError,
      TransformError: TransformError
  };

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  var _freeGlobal = freeGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = _freeGlobal || freeSelf || Function('return this')();

  var _root = root;

  /** Built-in value references. */
  var Symbol$1 = _root.Symbol;

  var _Symbol = Symbol$1;

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$3 = objectProto.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto.toString;

  /** Built-in value references. */
  var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag(value) {
    var isOwn = hasOwnProperty$3.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }

  var _getRawTag = getRawTag;

  /** Used for built-in method references. */
  var objectProto$1 = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$1 = objectProto$1.toString;

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString$2(value) {
    return nativeObjectToString$1.call(value);
  }

  var _objectToString = objectToString$2;

  /** `Object#toString` result references. */
  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';

  /** Built-in value references. */
  var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return (symToStringTag$1 && symToStringTag$1 in Object(value))
      ? _getRawTag(value)
      : _objectToString(value);
  }

  var _baseGetTag = baseGetTag;

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject$6(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  var isObject_1$1 = isObject$6;

  /** `Object#toString` result references. */
  var asyncTag = '[object AsyncFunction]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction$3(value) {
    if (!isObject_1$1(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = _baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }

  var isFunction_1$1 = isFunction$3;

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  var isObjectLike_1 = isObjectLike;

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray$6 = Array.isArray;

  var isArray_1$1 = isArray$6;

  /** `Object#toString` result references. */
  var stringTag = '[object String]';

  /**
   * Checks if `value` is classified as a `String` primitive or object.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a string, else `false`.
   * @example
   *
   * _.isString('abc');
   * // => true
   *
   * _.isString(1);
   * // => false
   */
  function isString$2(value) {
    return typeof value == 'string' ||
      (!isArray_1$1(value) && isObjectLike_1(value) && _baseGetTag(value) == stringTag);
  }

  var isString_1$1 = isString$2;

  /**
   * Checks if `value` is `undefined`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
   * @example
   *
   * _.isUndefined(void 0);
   * // => true
   *
   * _.isUndefined(null);
   * // => false
   */
  function isUndefined$2(value) {
    return value === undefined;
  }

  var isUndefined_1$1 = isUndefined$2;

  var plumbing = function (options) {

      var errorText = 'Please verify options'; // For better minification because this string is repeating

      if (!isObjectLike_1(options)) {
          throw new TypeError(errorText);
      }

      if (!isFunction_1$1(options.PromiseImpl)) {
          throw new TypeError(errorText + '.PromiseImpl');
      }

      if (!isUndefined_1$1(options.constructorMixin) && !isFunction_1$1(options.constructorMixin)) {
          throw new TypeError(errorText + '.PromiseImpl');
      }

      var PromiseImpl = options.PromiseImpl;
      var constructorMixin = options.constructorMixin;


      var plumbing = {};

      plumbing.init = function (requestOptions) {

          var self = this;

          self._rp_promise = new PromiseImpl(function (resolve, reject) {
              self._rp_resolve = resolve;
              self._rp_reject = reject;
              if (constructorMixin) {
                  constructorMixin.apply(self, arguments); // Using arguments since specific Promise libraries may pass additional parameters
              }
          });

          self._rp_callbackOrig = requestOptions.callback;
          requestOptions.callback = self.callback = function RP$callback(err, response, body) {
              plumbing.callback.call(self, err, response, body);
          };

          if (isString_1$1(requestOptions.method)) {
              requestOptions.method = requestOptions.method.toUpperCase();
          }

          requestOptions.transform = requestOptions.transform || plumbing.defaultTransformations[requestOptions.method];

          self._rp_options = requestOptions;
          self._rp_options.simple = requestOptions.simple !== false;
          self._rp_options.resolveWithFullResponse = requestOptions.resolveWithFullResponse === true;
          self._rp_options.transform2xxOnly = requestOptions.transform2xxOnly === true;

      };

      plumbing.defaultTransformations = {
          HEAD: function (body, response, resolveWithFullResponse) {
              return resolveWithFullResponse ? response : response.headers;
          }
      };

      plumbing.callback = function (err, response, body) {

          var self = this;

          var origCallbackThrewException = false, thrownException = null;

          if (isFunction_1$1(self._rp_callbackOrig)) {
              try {
                  self._rp_callbackOrig.apply(self, arguments); // TODO: Apply to self mimics behavior of request@2. Is that also right for request@next?
              } catch (e) {
                  origCallbackThrewException = true;
                  thrownException = e;
              }
          }

          var is2xx = !err && /^2/.test('' + response.statusCode);

          if (err) {

              self._rp_reject(new errors$4.RequestError(err, self._rp_options, response));

          } else if (self._rp_options.simple && !is2xx) {

              if (isFunction_1$1(self._rp_options.transform) && self._rp_options.transform2xxOnly === false) {

                  (new PromiseImpl(function (resolve) {
                      resolve(self._rp_options.transform(body, response, self._rp_options.resolveWithFullResponse)); // transform may return a Promise
                  }))
                      .then(function (transformedResponse) {
                          self._rp_reject(new errors$4.StatusCodeError(response.statusCode, body, self._rp_options, transformedResponse));
                      })
                      .catch(function (transformErr) {
                          self._rp_reject(new errors$4.TransformError(transformErr, self._rp_options, response));
                      });

              } else {
                  self._rp_reject(new errors$4.StatusCodeError(response.statusCode, body, self._rp_options, response));
              }

          } else {

              if (isFunction_1$1(self._rp_options.transform) && (is2xx || self._rp_options.transform2xxOnly === false)) {

                  (new PromiseImpl(function (resolve) {
                      resolve(self._rp_options.transform(body, response, self._rp_options.resolveWithFullResponse)); // transform may return a Promise
                  }))
                      .then(function (transformedResponse) {
                          self._rp_resolve(transformedResponse);
                      })
                      .catch(function (transformErr) {
                          self._rp_reject(new errors$4.TransformError(transformErr, self._rp_options, response));
                      });

              } else if (self._rp_options.resolveWithFullResponse) {
                  self._rp_resolve(response);
              } else {
                  self._rp_resolve(body);
              }

          }

          if (origCallbackThrewException) {
              throw thrownException;
          }

      };

      plumbing.exposePromiseMethod = function (exposeTo, bindTo, promisePropertyKey, methodToExpose, exposeAs) {

          exposeAs = exposeAs || methodToExpose;

          if (exposeAs in exposeTo) {
              throw new Error('Unable to expose method "' + exposeAs + '"');
          }

          exposeTo[exposeAs] = function RP$exposed() {
              var self = bindTo || this;
              return self[promisePropertyKey][methodToExpose].apply(self[promisePropertyKey], arguments);
          };

      };

      plumbing.exposePromise = function (exposeTo, bindTo, promisePropertyKey, exposeAs) {

          exposeAs = exposeAs || 'promise';

          if (exposeAs in exposeTo) {
              throw new Error('Unable to expose method "' + exposeAs + '"');
          }

          exposeTo[exposeAs] = function RP$promise() {
              var self = bindTo || this;
              return self[promisePropertyKey];
          };

      };

      return plumbing;

  };

  var request2 = function (options) {

      var errorText = 'Please verify options'; // For better minification because this string is repeating

      if (!isObjectLike_1(options)) {
          throw new TypeError(errorText);
      }

      if (!isFunction_1$1(options.request)) {
          throw new TypeError(errorText + '.request');
      }

      if (!isArray_1$1(options.expose) || options.expose.length === 0) {
          throw new TypeError(errorText + '.expose');
      }


      var plumbing$$1 = plumbing({
          PromiseImpl: options.PromiseImpl,
          constructorMixin: options.constructorMixin
      });


      // Intercepting Request's init method

      var originalInit = options.request.Request.prototype.init;

      options.request.Request.prototype.init = function RP$initInterceptor(requestOptions) {

          // Init may be called again - currently in case of redirects
          if (isObjectLike_1(requestOptions) && !this._callback && !this._rp_promise) {

              plumbing$$1.init.call(this, requestOptions);

          }

          return originalInit.apply(this, arguments);

      };


      // Exposing the Promise capabilities

      var thenExposed = false;
      for ( var i = 0; i < options.expose.length; i+=1 ) {

          var method = options.expose[i];

          plumbing$$1[ method === 'promise' ? 'exposePromise' : 'exposePromiseMethod' ](
              options.request.Request.prototype,
              null,
              '_rp_promise',
              method
          );

          if (method === 'then') {
              thenExposed = true;
          }

      }

      if (!thenExposed) {
          throw new Error('Please expose "then"');
      }

  };

  var isNative$1 = /\.node$/;

  function forEach$1(obj, callback) {
      for ( var key in obj ) {
          if (!Object.prototype.hasOwnProperty.call(obj, key)) {
              continue;
          }
          callback(key);
      }
  }

  function assign$1(target, source) {
      forEach$1(source, function (key) {
          target[key] = source[key];
      });
      return target;
  }

  function clearCache(requireCache) {
      forEach$1(requireCache, function (resolvedPath) {
          if (!isNative$1.test(resolvedPath)) {
              delete requireCache[resolvedPath];
          }
      });
  }

  var lib$11 = function (requireCache, callback, callbackForModulesToKeep, module) {

      var originalCache = assign$1({}, requireCache);
      clearCache(requireCache);

      if (callbackForModulesToKeep) {

          var originalModuleChildren = module.children ? module.children.slice() : false; // Creates a shallow copy of module.children

          callbackForModulesToKeep();

          // Lists the cache entries made by callbackForModulesToKeep()
          var modulesToKeep = [];
          forEach$1(requireCache, function (key) {
              modulesToKeep.push(key);
          });

          // Discards the modules required in callbackForModulesToKeep()
          clearCache(requireCache);

          if (module.children) { // Only true for node.js
              module.children = originalModuleChildren; // Removes last references to modules required in callbackForModulesToKeep() -> No memory leak
          }

          // Takes the cache entries of the original cache in case the modules where required before
          for ( var i = 0; i < modulesToKeep.length; i+=1 ) {
              if (originalCache[modulesToKeep[i]]) {
                  requireCache[modulesToKeep[i]] = originalCache[modulesToKeep[i]];
              }
          }

      }

      var freshModule = callback();

      var stealthCache = callbackForModulesToKeep ? assign$1({}, requireCache) : false;

      clearCache(requireCache);

      if (callbackForModulesToKeep) {
          // In case modules to keep were required inside the stealthy require for the first time, copy them to the restored cache
          for ( var k = 0; k < modulesToKeep.length; k+=1 ) {
              if (stealthCache[modulesToKeep[k]]) {
                  requireCache[modulesToKeep[k]] = stealthCache[modulesToKeep[k]];
              }
          }
      }

      assign$1(requireCache, originalCache);

      return freshModule;

  };

  /*
  The MIT License (MIT)

  Copyright (c) 2016 CoderPuppy

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

  */
  var _endianness;
  function endianness() {
    if (typeof _endianness === 'undefined') {
      var a = new ArrayBuffer(2);
      var b = new Uint8Array(a);
      var c = new Uint16Array(a);
      b[0] = 1;
      b[1] = 2;
      if (c[0] === 258) {
        _endianness = 'BE';
      } else if (c[0] === 513){
        _endianness = 'LE';
      } else {
        throw new Error('unable to figure out endianess');
      }
    }
    return _endianness;
  }

  function hostname$1() {
    if (typeof global.location !== 'undefined') {
      return global.location.hostname
    } else { return ''; }
  }

  function loadavg() {
    return [];
  }

  function uptime$1() {
    return 0;
  }

  function freemem() {
    return Number.MAX_VALUE;
  }

  function totalmem() {
    return Number.MAX_VALUE;
  }

  function cpus() {
    return [];
  }

  function type$18() {
    return 'Browser';
  }

  function release$1 () {
    if (typeof global.navigator !== 'undefined') {
      return global.navigator.appVersion;
    }
    return '';
  }

  function networkInterfaces(){}
  function getNetworkInterfaces(){}

  function arch() {
    return 'javascript';
  }

  function platform$1() {
    return 'browser';
  }

  function tmpDir() {
    return '/tmp';
  }
  var tmpdir = tmpDir;

  var EOL = '\n';
  var os = {
    EOL: EOL,
    tmpdir: tmpdir,
    tmpDir: tmpDir,
    networkInterfaces:networkInterfaces,
    getNetworkInterfaces: getNetworkInterfaces,
    release: release$1,
    type: type$18,
    cpus: cpus,
    totalmem: totalmem,
    freemem: freemem,
    uptime: uptime$1,
    loadavg: loadavg,
    hostname: hostname$1,
    endianness: endianness,
  }

  var os$1 = /*#__PURE__*/Object.freeze({
    endianness: endianness,
    hostname: hostname$1,
    loadavg: loadavg,
    uptime: uptime$1,
    freemem: freemem,
    totalmem: totalmem,
    cpus: cpus,
    type: type$18,
    release: release$1,
    networkInterfaces: networkInterfaces,
    getNetworkInterfaces: getNetworkInterfaces,
    arch: arch,
    platform: platform$1,
    tmpDir: tmpDir,
    tmpdir: tmpdir,
    EOL: EOL,
    default: os
  });

  var require$$3$1 = ( os$1 && os ) || os$1;

  var rp = createCommonjsModule(function (module) {

  var Bluebird = bluebird_1.getNewLibraryCopy();

  try {

      // Load Request freshly - so that users can require an unaltered request instance!
      var request = lib$11(commonjsRequire.cache, function () {
          return request_1;
      },
      function () {
          
      }, module);

  } catch (err) {
      /* istanbul ignore next */
      var EOL = require$$3$1.EOL;
      /* istanbul ignore next */
      console.error(EOL + '###' + EOL + '### The "request" library is not installed automatically anymore.' + EOL + '### But required by "request-promise".' + EOL + '###' + EOL + '### npm install request --save' + EOL + '###' + EOL);
      /* istanbul ignore next */
      throw err;
  }

  Bluebird.config({cancellation: true});

  request2({
      request: request,
      PromiseImpl: Bluebird,
      expose: [
          'then',
          'catch',
          'finally',
          'cancel',
          'promise'
          // Would you like to expose more Bluebird methods? Try e.g. `rp(...).promise().tap(...)` first. `.promise()` returns the full-fledged Bluebird promise.
      ],
      constructorMixin: function (resolve, reject, onCancel) {
          var self = this;
          onCancel(function () {
              self.abort();
          });
      }
  });

  request.bindCLS = function RP$bindCLS() {
      throw new Error('CLS support was dropped. To get it back read: https://github.com/request/request-promise/wiki/Getting-Back-Support-for-Continuation-Local-Storage');
  };


  module.exports = request;
  });

  function _id$2(result) {
    if (Array.isArray(result)) {
      return result.map(function (x) {
        return x._id;
      });
    }
    return result._id;
  }

  function _ID(returns_id) {
    return returns_id ? _id$2 : function (data) { return data; };
  }



  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  // HELPER FUNCTIONS
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


  function opt(n,id) {
    return id ? (n + "/" + id) : n;
  }

  var _user=function (id) { return opt('user',id); };
  var _group=function (id) { return opt('group',id); };
  var _corpus=function (id) { return opt('corpus',id); };
  var _medium=function (id) { return opt('medium',id); };
  var _layer=function (id) { return opt('layer',id); };
  var _annotation=function (id) { return opt('annotation',id); };
  var _queue=function (id) { return opt('queue',id); };

  var Camomile = function Camomile(url) {
    this._baseUrl = url;
    this._cookies = undefined;
    this._evSource = undefined;

    this.watchCorpus = this._watch.bind(this, 'corpus');
    this.watchMedium = this._watch.bind(this, 'medium');
    this.watchLayer = this._watch.bind(this, 'layer');
    this.watchQueue = this._watch.bind(this, 'queue');

    this.unwatchCorpus = this._unwatch.bind(this, 'corpus');
    this.unwatchMedium = this._unwatch.bind(this, 'medium');
    this.unwatchLayer = this._unwatch.bind(this, 'layer');
    this.unwatchQueue = this._unwatch.bind(this, 'queue');
  };


  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  // SSE
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Camomile.prototype._watch = function _watch (type, id, callback) {
      var this$1 = this;

    return (this._evSource===undefined ? this._listen() : Promise.resolve())
      .then(function () { return this$1._put(("listen/" + (this$1.channel_id) + "/" + type + "/" + id),{}); })
      .then(function () {
        this$1._evSource.addEventListener(type + ':' + id, callback);
      });
  };

  Camomile.prototype._unwatch = function _unwatch (type, id, callback) {
      var this$1 = this;

    return this._delete(("listen/" + (this.channel_id) + "/" + type + "/" + id)).then(function () {
      this$1._evSource.removeEventListener(type + ':' + id, callback);
    })
  };


  Camomile.prototype._listen = function _listen () {
      var this$1 = this;

    return this._post('listen',{}).then(function (ref) {
        var channel_id = ref.channel_id;

      this$1._evSource = new EventSource(this$1._baseUrl + '/listen/' + channel_id, {withCredentials: true,headers:{'Access-Control-Request-Headers':"content-type"}});
      this$1.channel_id=channel_id;
    });
  };

  ////////////

  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  // AUTHENTICATION
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Camomile.prototype.login = function login (username, password) {
      var this$1 = this;

    return this._post('login',{username: username,password: password},true).then(function (data) {
      if (data.headers['set-cookie'] && data.headers['set-cookie'][0]) { this$1._cookies = data.headers['set-cookie'][0]; }

      return data.body;
    });
  };
  Camomile.prototype.logout = function logout () {
    return this._post('logout',{});
  };
  Camomile.prototype._get = function _get (uri,parameters) {
    return rp({uri:((this._baseUrl) + "/" + uri),qs:parameters,json: true,headers:{'Cookie':this._cookies},withCredentials:true});
  };

  Camomile.prototype._put = function _put (uri,data) {
    return rp({method: 'put', uri:((this._baseUrl) + "/" + uri), json: data,headers:{'Access-Control-Request-Headers':"content-type",'Cookie':this._cookies},withCredentials:true});
  };

  Camomile.prototype._post = function _post (uri,data,full) {
      if ( full === void 0 ) full=false;

    return rp({method: 'post', uri:((this._baseUrl) + "/" + uri), json: data,headers:{'Access-Control-Request-Headers':"content-type",'Cookie':this._cookies},
      withCredentials:true,resolveWithFullResponse: full});
  };

  Camomile.prototype._delete = function _delete (uri) {
    return rp({method: 'delete', uri:((this._baseUrl) + "/" + uri),json: true,headers:{'Cookie':this._cookies},withCredentials:true});
  };

  Camomile.prototype.me = function me () {
    return this._get("me");
  };
  Camomile.prototype.getMyGroups = function getMyGroups () {
    return this._get("me/group");
  };
  Camomile.prototype.update_password = function update_password (new_password) {
    return this._put('me',{password:new_password});
  };
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  // USERS
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


  Camomile.prototype.getUser = function getUser (user) {
    return this._get(_user(user));
  };
  Camomile.prototype.getUsers = function getUsers (ref) {
      if ( ref === void 0 ) ref = {};
      var returns_id = ref.returns_id;
      var ref_filter = ref.filter; if ( ref_filter === void 0 ) ref_filter = {};
      var ref_filter$1 = ref_filter;
      var username = ref_filter$1.username;
      var role = ref_filter$1.role;

    // Available filters: username, role
    return this._get('user',{username: username,role: role}).then(_ID(returns_id));
  };
  Camomile.prototype.createUser = function createUser (username, password, description, role, ref) {
      if ( description === void 0 ) description = {};
      if ( role === void 0 ) role = 'user';
      if ( ref === void 0 ) ref = {};
      var returns_id = ref.returns_id;

    return this._post('user',{username: username,password: password,description: description,role: role}).then(_ID(returns_id));
  };
  Camomile.prototype.updateUser = function updateUser (user, fields) {
      if ( fields === void 0 ) fields = {};

    // Updatable fields: password, description, role
    return this._put(_user(user),fields);
  };
  Camomile.prototype.deleteUser = function deleteUser (user) {
    return this._delete(_user(user));
  };
  Camomile.prototype.getUserGroups = function getUserGroups (user, ref) {
      if ( ref === void 0 ) ref = {};
      var returns_id = ref.returns_id;

    return this._get(((_user(user)) + "/group")).then(_ID(returns_id));
  };
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  // GROUPS
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Camomile.prototype.getGroup = function getGroup (group) {
    return this._get(_group(group));
  };
  Camomile.prototype.getGroups = function getGroups (ref) {
      if ( ref === void 0 ) ref = {};
      var returns_id = ref.returns_id;
      var ref_filter = ref.filter; if ( ref_filter === void 0 ) ref_filter = {};
      var name = ref_filter.name;

    // Available filters: name

    return this._get('group',{name: name}).then(_ID(returns_id));
  };
  Camomile.prototype.createGroup = function createGroup (name, description, ref) {
      if ( description === void 0 ) description = {};
      if ( ref === void 0 ) ref = {};
      var returns_id = ref.returns_id;

    return this._post('group',{name: name,description: description}).then(_ID(returns_id));
  };
  Camomile.prototype.updateGroup = function updateGroup (group, fields) {
      if ( fields === void 0 ) fields = {};

    // Updatable fields: description

    return this._put(_group(group),fields);
  };

  Camomile.prototype.deleteGroup = function deleteGroup (group) {
    return this._delete(_group(group));
  };

  Camomile.prototype.addUserToGroup = function addUserToGroup (user, group) {
    return this._put(((_group(group)) + "/user/" + user),{});
  };

  Camomile.prototype.removeUserFromGroup = function removeUserFromGroup (user, group) {
    return this._delete(((_group(group)) + "/user/" + user));
  };
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  // CORPORA
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  // Get corpus by ID
  Camomile.prototype.getCorpus = function getCorpus (corpus, ref) {
      if ( ref === void 0 ) ref = {};
      var history = ref.history;

    return this._get(_corpus(corpus),{history: history});
  };
  // Get list of corpora
  Camomile.prototype.getCorpora = function getCorpora (ref) {
      if ( ref === void 0 ) ref={};
      var returns_id = ref.returns_id;
      var ref_filter = ref.filter; if ( ref_filter === void 0 ) ref_filter = {};
      var name = ref_filter.name;
      var history = ref.history;

    // Available filters: name

    return this._get('corpus',{name: name,history: history}).then(_ID(returns_id));
  };
  Camomile.prototype.createCorpus = function createCorpus (name, description, ref) {
      if ( description === void 0 ) description = {};
      if ( ref === void 0 ) ref={};
      var returns_id = ref.returns_id;

    return this._post('corpus',{name: name,description: description}).then(_ID(returns_id));
  };
  Camomile.prototype.updateCorpus = function updateCorpus (corpus, fields) {
      if ( fields === void 0 ) fields = {};

    // Updatable fields: name?, description

    return this._put(_corpus(corpus),fields);
  };
  Camomile.prototype.deleteCorpus = function deleteCorpus (corpus) {
    return this._delete(_corpus(corpus));
  };
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  // MEDIA
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  // Get medium by ID
  Camomile.prototype.getMedium = function getMedium (medium, ref) {
      if ( ref === void 0 ) ref = {};
      var history = ref.history;

    return this._get(("" + (_medium(medium))),{history: history});
  };
  // Get medium URL, e.g. for use in <video> src attribute
  Camomile.prototype.getMediumURL = function getMediumURL (medium, format) {
      if ( format === void 0 ) format = "video";

    return ((this._baseUrl) + "/" + (_medium(medium)) + "/" + format);
  };
  // Get list of media
  Camomile.prototype.getMedia = function getMedia (ref) {
      if ( ref === void 0 ) ref={};
      var ref_filter = ref.filter; if ( ref_filter === void 0 ) ref_filter = {};
      var ref_filter$1 = ref_filter;
      var id_corpus = ref_filter$1.id_corpus;
      var name = ref_filter$1.name;
      var returns_count = ref.returns_count;
      var returns_id = ref.returns_id;
      var history = ref.history;

    // Available filters: id_corpus, name

    // route /corpus/:id_corpus/medium/count
    if (returns_count) {
      if (id_corpus === undefined) {
        throw new Error('returns_count needs options.filter.id_corpus to be set');
      }
      return this._get(((_corpus(id_corpus)) + "/medium/count"),{name: name});
    }

    if (id_corpus !== undefined) {
      return this._get(((_corpus(id_corpus)) + "/medium"),{name: name,history: history}).then(_ID(returns_id));
    } else {
      return this._get("medium",{name: name,history: history}).then(_ID(returns_id));
    }
  };
  Camomile.prototype.createMedium = function createMedium (corpus, name, url, description, ref) {
      if ( description === void 0 ) description = {};
      if ( ref === void 0 ) ref = {};
      var returns_id = ref.returns_id;

    return this._post(((_corpus(corpus)) + "/medium"),{name: name,url: url,description: description}).then(_ID(returns_id));
  };
  Camomile.prototype.createMedia = function createMedia (corpus, media, ref) {
      if ( ref === void 0 ) ref = {};
      var returns_id = ref.returns_id;

    return this._post(((_corpus(corpus)) + "/medium"),media).then(_ID(returns_id));
  };
  Camomile.prototype.updateMedium = function updateMedium (medium, fields) {
      if ( fields === void 0 ) fields = {};

    // Updatable fields: name?, url, description

    return this._put(_medium(medium),fields);
  };
  Camomile.prototype.deleteMedium = function deleteMedium (medium) {
    return this._delete(_medium(medium));
  };
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  // LAYERS
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  // Get layer by ID
  Camomile.prototype.getLayer = function getLayer (layer) {
    return this._get(_layer(layer));
  };
  // Get list of layers
  Camomile.prototype.getLayers = function getLayers (ref) {
      if ( ref === void 0 ) ref = {};
      var returns_id = ref.returns_id;
      var ref_filter = ref.filter; if ( ref_filter === void 0 ) ref_filter = {};
      var ref_filter$1 = ref_filter;
      var id_corpus = ref_filter$1.id_corpus;
      var name = ref_filter$1.name;
      var history = ref.history;

    // Available filters: id_corpus, name

    if (id_corpus !== undefined) {
      return this._get(((_corpus(id_corpus)) + "/layer"),{name: name,history: history}).then(_ID(returns_id));
    } else {
      return this._get('layer',{name: name,history: history}).then(_ID(returns_id));
    }
  };
  Camomile.prototype.createLayer = function createLayer (corpus, name, description, fragment_type, data_type, annotations, ref) {
      if ( description === void 0 ) description = {};
      if ( annotations === void 0 ) annotations = [];
      if ( ref === void 0 ) ref = {};
      var returns_id = ref.returns_id;

    return this._post(((_corpus(corpus)) + "/layer"),{name: name,description: description,fragment_type: fragment_type,data_type: data_type,annotations: annotations}).then(_ID(returns_id));
  };
  Camomile.prototype.updateLayer = function updateLayer (layer, fields) {
      if ( fields === void 0 ) fields = {};

    // Updatable fields: name?, description, fragment_type, data_type

    return this._put(_layer(layer),fields);
  };
  Camomile.prototype.deleteLayer = function deleteLayer (layer) {
    return this._delete(_layer(layer));
  };
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  // ANNOTATIONS
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Camomile.prototype.getAnnotation = function getAnnotation (annotation, ref) {
      if ( ref === void 0 ) ref = {};
      var history = ref.history;

    return this._get(_annotation(annotation),{history: history});
  };
  Camomile.prototype.getAnnotations = function getAnnotations (ref) {
      if ( ref === void 0 ) ref = {};
      var returns_count = ref.returns_count;
      var ref_filter = ref.filter; if ( ref_filter === void 0 ) ref_filter = {};
      var ref_filter$1 = ref_filter;
      var id_medium = ref_filter$1.id_medium;
      var id_layer = ref_filter$1.id_layer;
      var history = ref.history;
      var returns_id = ref.returns_id;

    // Available filters: id_layer, id_medium

    // route /layer/:id_layer/annotation/count
    if (returns_count) {
      if (id_layer === undefined) {
        throw new Error('returns_count needs options.filter.id_layer to be set');
      }
      return this._get(((_layer(id_layer)) + "/annotation/count"),{id_medium: id_medium});
    }

    if (id_layer !== undefined) {
      return this._get(((_layer(id_layer)) + "/annotation"),{id_medium: id_medium,history: history}).then(_ID(returns_id));
    } else {
      return this._get('annotation',{id_medium: id_medium,history: history}).then(_ID(returns_id));
    }
  };
  Camomile.prototype.createAnnotation = function createAnnotation (layer, medium, fragment, data, ref) {
      if ( fragment === void 0 ) fragment = {};
      if ( data === void 0 ) data = {};
      if ( ref === void 0 ) ref = {};
      var returns_id = ref.returns_id;

    return this._post(((_layer(layer)) + "/annotation"),{id_medium:medium,fragment: fragment,data: data}).then(_ID(returns_id));
  };
  Camomile.prototype.createAnnotations = function createAnnotations (layer, annotations, ref) {
      if ( ref === void 0 ) ref = {};
      var returns_id = ref.returns_id;

    return this._post(((_layer(layer)) + "/annotation"),annotations).then(_ID(returns_id));
  };
  Camomile.prototype.updateAnnotation = function updateAnnotation (annotation, fields) {
      if ( fields === void 0 ) fields = {};

    // Updatable fields: fragment, data

    return this._put(_annotation(annotation),fields);
  };
  Camomile.prototype.deleteAnnotation = function deleteAnnotation (annotation) {
    return this._delete(_annotation(annotation));
  };
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  // QUEUES
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Camomile.prototype.getQueue = function getQueue (queue) {
    return this._get(_queue(queue));
  };
  Camomile.prototype.getQueues = function getQueues (ref) {
      if ( ref === void 0 ) ref = {};
      var returns_id = ref.returns_id;

    return this._get('queue').then(_ID(returns_id));
  };
  Camomile.prototype.createQueue = function createQueue (name, description, ref) {
      if ( description === void 0 ) description = {};
      if ( ref === void 0 ) ref = {};
      var returns_id = ref.returns_id;

    return this._post('queue',{name: name,description: description}).then(_ID(returns_id));
  };
  Camomile.prototype.updateQueue = function updateQueue (queue, fields) {
    // Updatable fields: name, description

    return this._put(_queue(queue),fields);
  };
  Camomile.prototype.enqueue = function enqueue (queue, elements) {
    return this._put(((_queue(queue)) + "/next"),elements);
  };
  Camomile.prototype.dequeue = function dequeue (queue) {
    return this._get(((_queue(queue)) + "/next"));
  };
  Camomile.prototype.pick = function pick (queue) {
    return this._get(((_queue(queue)) + "/first"));
  };
  Camomile.prototype.pickAll = function pickAll (queue) {
    return this._get(((_queue(queue)) + "/all"));
  };
  Camomile.prototype.pickLength = function pickLength (queue) {
    return this._get(((_queue(queue)) + "/length"));
  };
  Camomile.prototype.deleteQueue = function deleteQueue (queue) {
    return this._delete(_queue(queue));
  };
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  // PERMISSIONS
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Camomile.prototype.getCorpusPermissions = function getCorpusPermissions (corpus) {
    return this._get(((_corpus(corpus)) + "/permissions"));
  };
  Camomile.prototype.setCorpusPermissionsForGroup = function setCorpusPermissionsForGroup (corpus, group, right) {
    return this._put(((_corpus(corpus)) + "/group/" + group),{right: right});
  };
  Camomile.prototype.removeCorpusPermissionsForGroup = function removeCorpusPermissionsForGroup (corpus, group) {
    return this._delete(((_corpus(corpus)) + "/group/" + group));
  };
  Camomile.prototype.setCorpusPermissionsForUser = function setCorpusPermissionsForUser (corpus, user, right) {
    return this._put(((_corpus(corpus)) + "/user/" + user),{right: right});
  };
  Camomile.prototype.removeCorpusPermissionsForUser = function removeCorpusPermissionsForUser (corpus, user) {
    return this._delete(((_corpus(corpus)) + "/user/" + user));
  };

  Camomile.prototype.getLayerPermissions = function getLayerPermissions (layer) {
    return this._get(((_layer(layer)) + "/permissions"));
  };
  Camomile.prototype.setLayerPermissionsForGroup = function setLayerPermissionsForGroup (layer, group, right) {
    return this._put(((_layer(layer)) + "/group/" + group),{right: right});
  };
  Camomile.prototype.removeLayerPermissionsForGroup = function removeLayerPermissionsForGroup (layer, group) {
    return this._delete(((_layer(layer)) + "/group/" + group));
  };
  Camomile.prototype.setLayerPermissionsForUser = function setLayerPermissionsForUser (layer, user, right) {
    return this._put(((_layer(layer)) + "/user/" + user),{right: right});
  };
  Camomile.prototype.removeLayerPermissionsForUser = function removeLayerPermissionsForUser (layer, user) {
    return this._delete(((_layer(layer)) + "/user/" + user));
  };
  Camomile.prototype.getQueuePermissions = function getQueuePermissions (queue) {
    return this._get(((_queue(queue)) + "/permissions"));
  };
  Camomile.prototype.setQueuePermissionsForGroup = function setQueuePermissionsForGroup (queue, group, right) {
    return this._put(((_queue(queue)) + "/group/" + group),{right: right});
  };
  Camomile.prototype.removeQueuePermissionsForGroup = function removeQueuePermissionsForGroup (queue, group) {
    return this._delete(((_queue(queue)) + "/group/" + group));
  };
  Camomile.prototype.setQueuePermissionsForUser = function setQueuePermissionsForUser (queue, user, right) {
    return this._put(((_queue(queue)) + "/user/" + user),{right: right});
  };
  Camomile.prototype.removeQueuePermissionsForUser = function removeQueuePermissionsForUser (queue, user) {
    return this._delete(((_queue(queue)) + "/user/" + user));
  };
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  // META DATA
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  // CORPUS
  Camomile.prototype.getCorpusMetadata = function getCorpusMetadata (corpus, path) {
    return this._getMetadata(_corpus(corpus), path);
  };
  Camomile.prototype.getCorpusMetadataKeys = function getCorpusMetadataKeys (corpus, path) {
    return this._getMetadataKeys(_corpus(corpus), path);
  };
  Camomile.prototype.setCorpusMetadata = function setCorpusMetadata (corpus, metadatas, path) {
    return this._setMetadata(_corpus(corpus), metadatas, path);
  };
  Camomile.prototype.sendCorpusMetadataFile = function sendCorpusMetadataFile (corpus, path, file) {
    return this._sendMetadataFile(_corpus(corpus), path, file);
  };
  Camomile.prototype.deleteCorpusMetadata = function deleteCorpusMetadata (corpus, path) {
    return this._deleteMetadata(_corpus(corpus), path);
  };
  // LAYER
  Camomile.prototype.getLayerMetadata = function getLayerMetadata (layer, path) {
    return this._getMetadata(_layer(layer), path);
  };
  Camomile.prototype.getLayerMetadataKeys = function getLayerMetadataKeys (layer, path) {
    return this._getMetadataKeys(_layer(layer), path);
  };
  Camomile.prototype.setLayerMetadata = function setLayerMetadata (layer, metadatas, path) {
    return this._setMetadata(_layer(layer), metadatas, path);
  };
  Camomile.prototype.msendLayerMetadataFile = function msendLayerMetadataFile (layer, path, file) {
    return this._sendMetadataFile(_layer(layer), path, file);
  };
  Camomile.prototype.deleteLayerMetadata = function deleteLayerMetadata (layer, path) {
    return this. _deleteMetadata(_layer(layer), path);
  };
  // MEDIUM
  Camomile.prototype.getMediumMetadata = function getMediumMetadata (medium, path) {
    return this._getMetadata(_medium(medium), path);
  };
  Camomile.prototype.getMediumMetadataKeys = function getMediumMetadataKeys (medium, path) {
    return this._getMetadataKeys(_medium(medium), path);
  };
  Camomile.prototype.setMediumMetadata = function setMediumMetadata (medium, metadatas, path) {
    return this._setMetadata(_medium(medium), metadatas, path);
  };
  Camomile.prototype.sendMediumMetadataFile = function sendMediumMetadataFile (medium, path, file) {
    return this._sendMetadataFile(_medium(medium), path, file);
  };
  Camomile.prototype.deleteMediumMetadata = function deleteMediumMetadata (medium, path) {
    return this._deleteMetadata(_medium(medium), path);
  };
  ////

  Camomile.prototype._setMetadata = function _setMetadata (resource, metadatas, path) {
    if (path) {
      metadatas = Camomile._constructMetadataPathObject(path, metadatas);
    }

    return this._post((resource + "/metadata"),metadatas);
  };

  Camomile.prototype._getMetadata = function _getMetadata (resource, path) {
    if (!path) {
      return this._getMetadataKeys(resource);
    } else {
      return this._get((resource + "/metadata/" + path));
    }
  };

  Camomile.prototype._getMetadataKeys = function _getMetadataKeys (resource, path) {
      if ( path === void 0 ) path = '';

    return this._get((resource + "/metadata/" + path + "."));
  };

  Camomile.prototype._deleteMetadata = function _deleteMetadata (resource, path) {
    return this._delete((resource + "/metadata/" + path));
  };

  Camomile.prototype._sendMetadataFile = function _sendMetadataFile (resource, path, file) {
      var this$1 = this;

    return new Promise(function (callback) {
      var reader = new FileReader();
      reader.onload = function (e) {
        var base64 = e.target.result;
        var infos = base64.split(',');
        var object = Camomile._constructMetadataPathObject(path, {
          type: 'file',
          filename: file.name,
          data: infos[1]
        });

        this$1._setMetadata(resource, object).then(callback);
      };
      reader.readAsDataURL(file);
    });
  };

  Camomile._constructMetadataPathObject = function _constructMetadataPathObject (path, metadatas) {
    var paths = path.split('.');

    var object = {};
    var accessor = object;
    for (var i = 0; i < paths.length; i++) {
      accessor[paths[i]] = {};
      if (i === paths.length - 1) {
        accessor[paths[i]] = metadatas;
      } else {
        accessor = accessor[paths[i]];
      }
    }

    return object;
  };


  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  // UTILS
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Camomile.prototype.getDate = function getDate () {
    return this._get('date');
  };





  var camomileClient = Camomile;

  var log$4 = {
    simple: function simple (key, value) {
      console.log(
        ("%c| " + key + ": %c" + value), // eslint-disable-line camelcase
        'padding:8px 0; color:#666; line-height:24px;',
        'padding:8px 32px 8px 0; color:#f40; line-height:24px;'
      );
    },
    button: function button (key, value) {
      console.log(
        ("%c" + key + " %c" + value),
        'font-family: sans-serif; font-size: 13px; padding:12px 16px 12px 24px; line-height:96px; margin-left: 4px; border-radius: 8px 0 0 8px; color:#333; background:linear-gradient(to bottom, #E5E4E5, #CFCFCF); text-shadow: -1px -1px 1px #ccc,  1px 1px 3px #fff;',
        'font-family: sans-serif; font-size: 13px; padding:12px 16px 12px 12px; line-height:96px; text-decoration: none; color:#fff; background:linear-gradient(to bottom, #f62, #f30); text-shadow: -1px -1px 1px #a50,  1px 1px 3px #fa0; border-radius: 0 8px 8px 0; '
      );
    }
  }

  var state$1 = {
    name: '',
    width: 0,
    height: 0,
    svg: {
      height: 0,
      width: 0,
      scale: 1
    },
    animate: false
  };

  var actions = {
    set: function set(ref) {
      var state = ref.state;
      var commit = ref.commit;

      var width = window.innerWidth;
      var height = window.innerHeight;
      var name;
      var animate;
      if (window.matchMedia('(min-width: 83.5em)').matches) {
        name = 'large';
        animate = true;
      } else if (window.matchMedia('(min-width: 63em)').matches) {
        name = 'desktop';
        animate = true;
      } else if (window.matchMedia('(min-width: 42.5em)').matches) {
        name = 'tablet';
        animate = false;
      } else if (window.matchMedia('(min-width: 22em)').matches) {
        name = 'mobile';
        animate = false;
      } else {
        log$4.simple('Viewport', 'Default');
        name = 'default';
        animate = false;
      }
      commit('set', { name: name, animate: animate, width: width, height: height });
    }
  };

  var mutations = {
    set: function set(state, ref) {
      var animate = ref.animate;
      var name = ref.name;
      var width = ref.width;
      var height = ref.height;

      state.name = name;
      state.animate = animate;
      state.width = width;
      state.height = height;
      log$4.simple('Viewport', name);
    }
  };

  var viewport = {
    namespaced: true,
    state: state$1,
    mutations: mutations,
    actions: actions
  }

  var state$2 = {
    list: []
  };

  var actions$1 = {
    all: function all(ref) {
      var dispatch = ref.dispatch;

      dispatch("set", {}, { root: true }).then(function (r) {
        dispatch('messages/success', 'Synced with server', { root: true });
      });
    },

    start: function start(ref, name) {
      var state = ref.state;

      state.list.push(name);
    },

    stop: function stop(ref, name) {
      var state = ref.state;

      state.list = state.list.filter(function (n) { return n !== name; });
    }
  };

  var getters = {
    active: function (state) {
      return state.list.length
    }
  };

  var sync = {
    namespaced: true,
    state: state$2,
    actions: actions$1,
    getters: getters
  }

  var state$3 = {
    visible: false,
    config: {},
    element: {}
  };

  var mutations$1 = {
    open: function open(state, ref) {
      var config = ref.config;
      var element = ref.element;

      state.visible = true;
      state.config = config;
      state.element = JSON.parse(JSON.stringify(element));
    },

    close: function close(state) {
      state.visible = false;
      state.config = {};
    },

    fieldUpdate: function fieldUpdate(state, ref) {
      var name = ref.name;
      var value = ref.value;

      Vue$1.set(state.element, name, value);
    }
  };

  var popup = {
    namespaced: true,
    state: state$3,
    mutations: mutations$1
  }

  var state$4 = {
    visible: false,
    config: {}
  };

  var mutations$2 = {
    close: function close(state) {
      state.visible = false;
      state.config = {};
    },

    open: function open(state, config) {
      state.visible = true;
      state.config = config;
    }
  };

  var dropdown = {
    namespaced: true,
    state: state$4,
    mutations: mutations$2
  }

  function userFormat (user) {
    return {
      name: user.username,
      id: user._id,
      description: user.description || {},
      role: user.role
    }
  }

  function groupFormat (group) {
    return {
      name: group.name,
      id: group._id,
      description: group.description || {},
      userIds: group.users
    }
  }

  function mediaFormat (media) {
    return {
      name: media.name,
      id: media._id,
      url: media.url,
      corpuId: media.id_corpus,
      description: media.description || {}
    }
  }

  function dateCurrent () {
    return new Date().valueOf()
  }

  // export function observerClean (obj) {
  //   return Object.keys(obj).reduce(
  //     (res, e) => Object.assign(res, { [e]: obj[e] }),
  //     {}
  //   )
  // }

  var state$5 = {
    list: []
  };

  var actions$2 = {
    success: function success(ref, content) {
      var commit = ref.commit;

      commit('add', { content: content, type: 'success', id: dateCurrent() });
      setTimeout(function (_) {
        commit('remove');
      }, 2000);
    },

    error: function error(ref, content) {
      var commit = ref.commit;

      commit('add', { content: content, type: 'error', id: dateCurrent() });
      setTimeout(function (_) {
        commit('remove');
      }, 2000);
    }
  };

  var mutations$3 = {
    remove: function remove(state) {
      state.list.shift();
    },

    add: function add(state, message) {
      state.list.push(message);
    }
  };

  var messages = {
    namespaced: true,
    state: state$5,
    actions: actions$2,
    mutations: mutations$3
  }

  // Current user

  /* Example

  {
    id: 'user-id-hash',
    name: 'user-name-string',
    role: 'admin', // user or admin
    isLogged: false,
    isAdmin: false,
    isRoot: false
    description: { … },
    groupIds: [
      'group-id-hash-1',
      'group-id-hash-2'
    ]
  }
  */

  var state$6 = {
    id: '',
    name: '',
    role: '',
    description: {},
    groupIds: [],
    isLogged: false,
    isAdmin: false,
    isRoot: false
  };

  var actions$3 = {
    // user login
    login: function login(ref, config) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;

      dispatch('sync/start', 'userLogin', { root: true });
      return rootState.api
        .login(config.user.name, config.user.password)
        .then(function (r) {
          dispatch('sync/stop', 'userLogin', { root: true });
          commit('popup/close', null, { root: true });

          // Get the user properties
          dispatch('set');

          return r.message
        })
        .catch(function (e) {
          dispatch('sync/stop', 'userLogin', { root: true });
          dispatch('messages/error', e.message, { root: true });
          dispatch('reset', null, { root: true });

          throw e
        })
    },

    // Get the user properties
    set: function set(ref) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;

      dispatch('sync/start', 'userSet', { root: true });
      return rootState.api
        .me()
        .then(function (r) {
          // Format server response
          var user = {
            id: r.data._id,
            name: r.data.username,
            role: r.data.role,
            description: r.data.description || {},
            groupIds: r.data.groups || []
          };
          dispatch('sync/stop', 'userSet', { root: true });
          // Commit user
          commit('set', user);

          // Bootstrap app from index.js / set
          dispatch('set', null, { root: true });

          return user
        })
        .catch(function (e) {
          dispatch('sync/stop', 'userSet', { root: true });
          dispatch('messages/error', e.message, { root: true });
          dispatch('reset', null, { root: true });

          throw e
        })
    },

    // User logout
    logout: function logout(ref) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;

      dispatch('sync/start', 'userLogout', { root: true });
      return rootState.api
        .logout()
        .then(function (r) {
          dispatch('sync/stop', 'userLogout', { root: true });

          // Reset the app from index.js / reset
          dispatch('reset', null, { root: true });
          commit('popup/close', null, { root: true });
          commit('dropdown/close', null, { root: true });

          return r.message
        })
        .catch(function (e) {
          dispatch('sync/stop', 'userLogout', { root: true });
          dispatch('messages/error', e.message, { root: true });
          dispatch('reset', null, { root: true });

          throw e
        })
    }
  };

  var getters$1 = {
    // Get if the user is admin or belongs to an admin group
    isAdmin: function (state) { return function (ref) {
      var users = ref.users; if ( users === void 0 ) users = {};
      var groups = ref.groups; if ( groups === void 0 ) groups = {};

      var isAdmin = users[state.id] === 3;

      // Loop over the groups
      var isInAdminGroup = Object.keys(groups).reduce(function (result, id) {
        // Check if the group is admin
        var groupIsAdmin = groups[id] === 3;

        // Check if the group
        var userIsInGroup = state.groupIds.reduce(function (isIn, groupId) {
          return isIn || groupId === id
        }, false);

        return result || (groupIsAdmin && userIsInGroup)
      }, false);

      // Return true if the user is admin or is in an admin group
      return isAdmin || isInAdminGroup
    }; },

    // Check if a user id is the current user
    isCurrentUser: function (state) { return function (userId) {
      return state.id === userId
    }; },

    // Check if the current user is a group
    isInGroup: function (state) { return function (groupId) {
      return state.groupIds.indexOf(groupId) !== -1
    }; },

    // Check the permission level for the current user on a permission object
    permission: function (state) { return function (ref) {
      var users = ref.users; if ( users === void 0 ) users = {};
      var groups = ref.groups; if ( groups === void 0 ) groups = {};

      var permissionUser =
        (Object.keys(users).find(function (userId) { return userId === state.id; }) &&
          users[state.id]) ||
        0;

      var permissionGroup = Object.keys(groups).reduce(
        function (permission, groupId) { return Math.max(
            permission,
            state.groupIds.indexOf(groupId) !== -1 && groups[groupId]
          ); },
        0
      );

      var permissionRoot = state.isRoot ? 3 : 0;

      return Math.max(permissionUser, permissionGroup, permissionRoot)
    }; }
  };

  var mutations$4 = {
    // Set the current user properties (on log-in)
    set: function set(state, user) {
      state.isLogged = true;
      state.isAdmin = user.role === 'admin';
      state.isRoot = user.name === 'root';
      state.id = user.id;
      state.name = user.name;
      state.role = user.role;
      state.description = user.description;
      state.groupIds = user.groupIds;
    },

    // Reset the current user properties (on log-out)
    reset: function reset(state) {
      state.isLogged = false;
      state.isAdmin = false;
      state.isRoot = false;
      state.id = '';
      state.name = '';
      state.role = '';
      state.description = {};
      state.groupIds = [];
    },

    // Add the current user to a group
    groupAdd: function groupAdd(state, groupId) {
      state.groupIds.push(groupId);
    },

    // Remove the current user from a group
    groupRemove: function groupRemove(state, groupId) {
      state.groupIds = state.groupIds.filter(function (id) { return id !== groupId; });
    }
  };

  var user = {
    namespaced: true,
    state: state$6,
    actions: actions$3,
    getters: getters$1,
    mutations: mutations$4
  }

  /* Example

  list: [{
    id: 'user-id-hash-1',
    name: 'user-name-string',
    role: 'user', // user or admin
    description: {
      …
    },
    {
      …
    }
  }]

  */

  var state$7 = {
    list: []
  };

  var actions$4 = {
    // Add a new user
    add: function add(ref, ref$1) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var element = ref$1.element;

      dispatch('sync/start', 'usersAdd', { root: true });
      return rootState.api
        .createUser(
          element.name,
          element.password,
          element.description,
          element.role
        )
        .then(function (r) {
          dispatch('sync/stop', 'usersAdd', { root: true });
          var user = userFormat(r.data);
          commit('add', user);

          // Add the new user to every corpus and layers
          commit('corpus/userAdd', user.id, { root: true });
          commit('layers/userAdd', user.id, { root: true });
          dispatch('messages/success', 'User added', { root: true });

          return user
        })
        .catch(function (e) {
          dispatch('sync/stop', 'usersAdd', { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Update a user
    update: function update(ref, ref$1) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var element = ref$1.element;

      dispatch('sync/start', 'usersUpdate', { root: true });
      return rootState.api
        .updateUser(element.id, {
          password: element.password,
          role: element.role,
          description: element.description
        })
        .then(function (r) {
          dispatch('sync/stop', 'usersUpdate', { root: true });
          var user = userFormat(r.data);
          commit('update', user);

          // If the user is the current user (logged-in)
          if (user.name === rootState.user.name) {
            // Update the current user
            commit('user/set', user, { root: true });
          }
          dispatch('messages/success', 'User updated', { root: true });

          return user
        })
        .catch(function (e) {
          dispatch('sync/stop', 'usersUpdate', { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Remove a user
    remove: function remove(ref, ref$1) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var id = ref$1.id;

      dispatch('sync/start', 'usersRemove', { root: true });
      return rootState.api
        .deleteUser(id)
        .then(function (r) {
          dispatch('sync/stop', 'usersRemove', { root: true });
          commit('remove', id);

          // Remove the user from every corpus and layers
          commit('corpus/userRemove', id, { root: true });
          commit('layers/userRemove', id, { root: true });
          dispatch('messages/success', 'User removed', { root: true });

          return id
        })
        .catch(function (e) {
          dispatch('sync/stop', 'usersRemove', { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // List all users
    list: function list(ref) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;

      dispatch('sync/start', 'usersList', { root: true });
      return rootState.api
        .getUsers()
        .then(function (r) {
          dispatch('sync/stop', 'usersList', { root: true });
          var users = r.data.map(function (user) { return userFormat(user); });
          commit('list', users);

          return users
        })
        .catch(function (e) {
          dispatch('sync/stop', 'usersList', { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    }
  };

  var getters$2 = {
    // Get the permissions for every users from a permissions object
    permissions: function (state) { return function (permissions) {
      return state.list.reduce(
        function (p, user) {
            var obj;

            return Object.assign(p, ( obj = {}, obj[user.id] = permissions && permissions[user.id] ? permissions[user.id] : 0, obj));
      },
        {}
      )
    }; }
  };

  var mutations$5 = {
    // Reset users (on log-out)
    reset: function reset(state) {
      Vue$1.set(state, 'list', []);
    },

    // Add a new user
    add: function add(state, user) {
      state.list.push(user);
    },

    // Update a user in the list
    update: function update(state, user) {
      var index = state.list.findIndex(function (u) { return u.id === user.id; });
      Vue$1.set(state.list, index, user);
    },

    // Remove a user from the list
    remove: function remove(state, userId) {
      var index = state.list.findIndex(function (u) { return u.id === userId; });
      Vue$1.delete(state.list, index);
    },

    // Set the user list
    list: function list(state, users) {
      Vue$1.set(state, 'list', users);
    }
  };

  var users = {
    namespaced: true,
    state: state$7,
    actions: actions$4,
    getters: getters$2,
    mutations: mutations$5
  }

  // list contains the groups

  /* Example

  {
    list: [{
      id: 'group-id-hash-1',
      name: 'group-name-1',
      description: { … },
      userIds: [
        'user-id-hash-1',
        'user-id-hash-2'
    },
    { …
    }]
  }

  */

  var state$8 = {
    list: []
  };

  var actions$5 = {
    // Add a new group
    add: function add(ref, ref$1) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var element = ref$1.element;

      dispatch('sync/start', 'groupsAdd', { root: true });
      return rootState.api
        .createGroup(element.name, element.description)
        .then(function (r) {
          dispatch('sync/stop', 'groupsAdd', { root: true });
          var group = groupFormat(r.data);
          commit('add', group);

          // Add the new group to every corpus and layers
          commit('corpus/groupAdd', group.id, { root: true });
          commit('layers/groupAdd', group.id, { root: true });
          dispatch('messages/success', 'Group added', { root: true });

          return group
        })
        .catch(function (e) {
          dispatch('sync/stop', 'groupsAdd', { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Remove a group
    remove: function remove(ref, ref$1) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var id = ref$1.id;

      dispatch('sync/start', 'groupsRemove', { root: true });
      return rootState.api
        .deleteGroup(id)
        .then(function (r) {
          dispatch('sync/stop', 'groupsRemove', { root: true });
          commit('remove', id);
          // Add the group from every corpus and layers
          commit('corpus/groupRemove', id, { root: true });
          commit('layers/groupRemove', id, { root: true });
          dispatch('messages/success', 'Group removed', { root: true });

          return id
        })
        .catch(function (e) {
          dispatch('sync/stop', 'groupsRemove', { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Update a group
    update: function update(ref, ref$1) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var element = ref$1.element;

      dispatch('sync/start', 'groupsUpdate', { root: true });
      return rootState.api
        .updateGroup(element.id, { description: element.description })
        .then(function (r) {
          dispatch('sync/stop', 'groupsUpdate', { root: true });
          var group = groupFormat(r.data);
          commit('update', group);
          dispatch('messages/success', 'Group updated', { root: true });

          return group
        })
        .catch(function (e) {
          dispatch('sync/stop', 'groupsUpdate', { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // List groups
    list: function list(ref) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;

      dispatch('sync/start', 'groupsList', { root: true });
      return rootState.api
        .getGroups()
        .then(function (r) {
          dispatch('sync/stop', 'groupsList', { root: true });
          var groups = r.data.map(function (group) { return groupFormat(group); });
          commit('list', groups);

          return groups
        })
        .catch(function (e) {
          dispatch('sync/stop', 'groupsList', { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Add a user to a group
    userAdd: function userAdd(ref, ref$1) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var userId = ref$1.userId;
      var group = ref$1.group;

      dispatch('sync/start', 'groupsUserAdd', { root: true });
      return rootState.api
        .addUserToGroup(userId, group.id)
        .then(function (r) {
          dispatch('sync/stop', 'groupsUserAdd', { root: true });
          var group = groupFormat(r.data);
          commit('update', group);
          dispatch('messages/success', 'User added to group', {
            root: true
          });
          if (userId === rootState.user.id) {
            commit('user/groupAdd', group.id, { root: true });
            dispatch('corpus/listAll', null, {
              root: true
            });
          }

          return group
        })
        .catch(function (e) {
          dispatch('sync/stop', 'groupsUserAdd', { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // remove a user from a group
    userRemove: function userRemove(ref, ref$1) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var userId = ref$1.userId;
      var group = ref$1.group;

      dispatch('sync/start', 'groupsUserRemove', { root: true });
      return rootState.api
        .removeUserFromGroup(userId, group.id)
        .then(function (r) {
          dispatch('sync/stop', 'groupsUserRemove', { root: true });
          var group = groupFormat(r.data);
          commit('update', group);
          dispatch('messages/success', 'User removed from group', {
            root: true
          });
          if (userId === rootState.user.id) {
            commit('user/groupRemove', group.id, { root: true });
            dispatch('corpus/listAll', null, {
              root: true
            });
          }

          return group
        })
        .catch(function (e) {
          dispatch('sync/stop', 'groupsUserRemove', { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    }
  };

  var getters$3 = {
    // Get the permissions for every groups
    // { 'group-id-hash-1': 0, 'group-id-hash-2': 3, … }
    permissions: function (state) { return function (permissions) {
      return state.list.reduce(
        function (p, group) {
            var obj;

            return Object.assign(p, ( obj = {}, obj[group.id] = permissions && permissions[group.id] ? permissions[group.id] : 0, obj));
      },
        {}
      )
    }; }
  };

  var mutations$6 = {
    // Reset list (on log-out)
    reset: function reset(state) {
      Vue$1.set(state, 'list', []);
    },

    // Add a group to the list
    add: function add(state, group) {
      state.list.push(group);
    },

    // Update a group
    update: function update(state, group) {
      var index = state.list.findIndex(function (g) { return g.id === group.id; });
      Vue$1.set(state.list, index, group);
    },

    // Remove a group
    remove: function remove(state, groupId) {
      var index = state.list.findIndex(function (g) { return g.id === groupId; });
      Vue$1.delete(state.list, index);
    },

    // Set the group list
    list: function list(state, groups) {
      Vue$1.set(state, 'list', groups);
    }
  };

  var groups = {
    namespaced: true,
    state: state$8,
    actions: actions$5,
    getters: getters$3,
    mutations: mutations$6
  }

  // The latin word should be corpus (singular) / corpora (plural), but…
  // For consistency with other sections (users, groups, medias, layers, annotations),
  // I use corpu (singular) / corpus (plural)

  // Lists contains the corpu data
  // Actives contains the active corpu for each uid

  /* Example:

  {
    lists: {
      'corpu-uid-string-1': [{
        id: 'corpu-id-hash',
        name: 'corpu-name-string'
        permission: 3,
        permissions: {
          groups: {
            'group-id-hash-1': 2,
            'group-id-hash-2': …
          },
          users: {
            'user-id-hash-1': 1,
            'user-id-hash-2': …
          }
        }
      },
      { …
      }],
      'corpu-uid-string-2': [ … 
      ]
    },
    actives: {
      'corpu-uid-string-1': 'corpu-id-hash-1',
      'corpu-uid-string-2': …
    }
  }
  */

  var state$9 = {
    lists: {},
    actives: {}
  };

  var actions$6 = {
    // Add a new corpu
    add: function add(ref, ref$1) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var rootGetters = ref.rootGetters;
      var element = ref$1.element;

      dispatch('sync/start', "corpusAdd", { root: true });
      return rootState.api
        .createCorpus(element.name, element.description, {})
        .then(function (r) {
          dispatch('sync/stop', "corpusAdd", { root: true });

          // Format server response
          var corpu = {
            name: r.data.name,
            id: r.data._id,
            permission: 3,
            permissions: {
              users: rootGetters['users/permissions']({}),
              groups: rootGetters['groups/permissions']({})
            },
            description: r.data.description || {}
          };

          // Set the permissions for the current user
          corpu.permissions.users[rootState.user.id] = 3;

          // Commit the corpu
          commit('add', { corpu: corpu });
          dispatch('messages/success', 'Corpus added', { root: true });

          return corpu
        })
        .catch(function (e) {
          dispatch('sync/stop', "corpusAdd", { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Remove a corpu
    remove: function remove(ref, ref$1) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var id = ref$1.id;

      dispatch('sync/start', "corpusRemove", { root: true });
      return rootState.api
        .deleteCorpus(id)
        .then(function (r) {
          dispatch('sync/stop', "corpusRemove", { root: true });
          commit('remove', { id: id });
          dispatch('messages/success', 'Corpus removed', { root: true });

          // For every uid,
          // If the removed corpus was active
          // Set a new one
          dispatch('setAll', { id: id });

          return id
        })
        .catch(function (e) {
          dispatch('sync/stop', "corpusRemove", { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Update a corpu
    update: function update(ref, ref$1) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var element = ref$1.element;

      dispatch('sync/start', "corpusUpdate", { root: true });
      return rootState.api
        .updateCorpus(element.id, {
          name: element.name,
          description: element.description
        })
        .then(function (r) {
          dispatch('sync/stop', "corpusUpdate", { root: true });

          // Format server response
          // The server does not send back the permissions,
          // To keep them, we copy the original element
          // Then overwrite the name and description
          var corpu = Object.assign({}, element);
          corpu.name = r.data.name;
          corpu.description = r.data.description || {};
          commit('update', { corpu: corpu });
          dispatch('messages/success', 'Corpus updated', { root: true });

          return corpu
        })
        .catch(function (e) {
          dispatch('sync/stop', "corpusUpdate", { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Set the permission for a group on a corpu
    groupPermissionSet: function groupPermissionSet(
      ref,
      ref$1
    ) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootGetters = ref.rootGetters;
      var rootState = ref.rootState;
      var id = ref$1.id;
      var groupId = ref$1.groupId;
      var permission = ref$1.permission;

      dispatch('sync/start', "corpusGroupPermissionSet", {
        root: true
      });
      return rootState.api
        .setCorpusPermissionsForGroup(id, groupId, permission)
        .then(function (p) {
          var permissions = p.data;
          dispatch('sync/stop', "corpusGroupPermissionSet", {
            root: true
          });

          // Commit server response
          commit('permissionsUpdate', {
            id: id,
            typeId: groupId,
            permission: (permissions.groups && permissions.groups[groupId]) || 0,
            type: 'groups'
          });
          dispatch('messages/success', 'Group permissions updated', {
            root: true
          });

          // If the current user is in the updated group
          // And if the current user is not an admin
          // => the permissions for the current user have changed
          if (
            rootGetters['user/isInGroup'](groupId) &&
            !rootGetters['user/isAdmin'](permissions)
          ) {
            // Re-list the corpus in every uid
            dispatch('listAll');
            commit("popup/close", null, { root: true });
          }

          return permissions
        })
        .catch(function (e) {
          dispatch('sync/stop', "corpusGroupPermissionSet", {
            root: true
          });

          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Remove a permission for a group on a corpu
    groupPermissionRemove: function groupPermissionRemove(
      ref,
      ref$1
    ) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootGetters = ref.rootGetters;
      var rootState = ref.rootState;
      var id = ref$1.id;
      var groupId = ref$1.groupId;

      dispatch('sync/start', "corpusGroupPermissionRemove", {
        root: true
      });
      return rootState.api
        .removeCorpusPermissionsForGroup(id, groupId)
        .then(function (p) {
          var permissions = p.data;
          dispatch('sync/stop', "corpusGroupPermissionRemove", {
            root: true
          });
          commit('permissionsUpdate', {
            id: id,
            typeId: groupId,
            permission: 0,
            type: 'groups'
          });
          dispatch('messages/success', 'Group permissions updated', {
            root: true
          });

          // If the current user is in the updated group
          // And if the current user is not an admin
          // => the permissions for the current user have changed
          if (
            rootGetters['user/isInGroup'](groupId) &&
            !rootGetters['user/isAdmin'](permissions)
          ) {
            // Re-list the corpus in every uid
            dispatch('listAll');
            commit("popup/close", null, { root: true });
          }

          return permissions
        })
        .catch(function (e) {
          dispatch('sync/stop', "corpusGroupPermissionRemove", {
            root: true
          });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Set the permission for a user on a corpu
    userPermissionSet: function userPermissionSet(
      ref,
      ref$1
    ) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootGetters = ref.rootGetters;
      var rootState = ref.rootState;
      var id = ref$1.id;
      var userId = ref$1.userId;
      var permission = ref$1.permission;

      dispatch('sync/start', "corpusUserPermissionSet", { root: true });
      return rootState.api
        .setCorpusPermissionsForUser(id, userId, permission)
        .then(function (p) {
          var permissions = p.data;
          dispatch('sync/stop', "corpusUserPermissionSet", {
            root: true
          });
          commit('permissionsUpdate', {
            id: id,
            typeId: userId,
            permission: (permissions.users && permissions.users[userId]) || 0,
            type: 'users'
          });
          dispatch('messages/success', 'User permissions updated', {
            root: true
          });

          // If the current user is the updated user
          // And if the current user is not an admin
          // => the permissions for the current user have changed
          if (
            rootGetters['user/isCurrentUser'](userId) &&
            !rootGetters['user/isAdmin'](permissions)
          ) {
            // Re-list the corpus in every uid
            dispatch('listAll');
            commit("popup/close", null, { root: true });
          }

          return permissions
        })
        .catch(function (e) {
          dispatch('sync/stop', "corpusUserPermissionSet", {
            root: true
          });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Remove the permission for a user on a corpu
    userPermissionRemove: function userPermissionRemove(
      ref,
      ref$1
    ) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootGetters = ref.rootGetters;
      var rootState = ref.rootState;
      var id = ref$1.id;
      var userId = ref$1.userId;

      dispatch('sync/start', "corpusUserPermissionRemove", {
        root: true
      });
      return rootState.api
        .removeCorpusPermissionsForUser(id, userId)
        .then(function (p) {
          var permissions = p.data;
          dispatch('sync/stop', "corpusUserPermissionRemove", {
            root: true
          });
          commit('permissionsUpdate', {
            id: id,
            typeId: userId,
            permission: 0,
            type: 'users'
          });
          dispatch('messages/success', 'User permissions updated', {
            root: true
          });

          // If the current user is the updated user
          // And if the current user is not an admin
          // => the permissions for the current user have changed
          if (
            rootGetters['user/isCurrentUser'](userId) &&
            !rootGetters['user/isAdmin'](permissions)
          ) {
            dispatch('listAll');
            commit("popup/close", null, { root: true });
          }

          return permissions
        })
        .catch(function (e) {
          dispatch('sync/stop', "corpusUserPermissionRemove", {
            root: true
          });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    listAll: function listAll(ref) {
      var state = ref.state;
      var dispatch = ref.dispatch;

      // Loop over the corpu lists
      Object.keys(state.lists).forEach(function (uid) {
        // List the corpus for this uid
        dispatch('list', uid);
      });
    },

    // List the corpus for a uid
    list: function list(ref, uid) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootGetters = ref.rootGetters;
      var rootState = ref.rootState;

      dispatch('sync/start', ("corpusList-" + uid), { root: true });
      return rootState.api
        .getCorpora()
        .then(function (r) {
          dispatch('sync/stop', ("corpusList-" + uid), { root: true });

          // Format server response
          var corpus = r.data.map(function (c) { return ({
            name: c.name,
            id: c._id,
            description: c.description || {},
            // Get permission for the current user
            permission: rootGetters['user/permission'](c.permissions || {}),
            // Get permissions for every users and groups
            permissions: {
              users: rootGetters['users/permissions'](
                (c.permissions && c.permissions.users) || {}
              ),
              groups: rootGetters['groups/permissions'](
                (c.permissions && c.permissions.groups) || {}
              )
            }
          }); });

          // Commit the update corpu list
          commit('list', { corpus: corpus, uid: uid });

          // Set the active corpu for this list
          dispatch('set', { uid: uid });

          return corpus
        })
        .catch(function (e) {
          dispatch('sync/stop', ("corpusList-" + uid), { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // For every uids,
    // If the corpus id was active,
    // Set a new one
    setAll: function setAll(ref, ref$1) {
      var state = ref.state;
      var dispatch = ref.dispatch;
      var id = ref$1.id;

      Object.keys(state.actives).forEach(function (uid) {
        if (state.actives[uid] === id) {
          dispatch('set', { uid: uid });
        }
      });
    },

    // Set the active corpus for a uid
    set: function set(ref, ref$1) {
      var state = ref.state;
      var getters = ref.getters;
      var dispatch = ref.dispatch;
      var commit = ref.commit;
      var rootState = ref.rootState;
      var id = ref$1.id;
      var uid = ref$1.uid;

      // Set the active corpus
      // If the id is not defined, get one
      commit('set', { id: id || getters.id(uid), uid: uid });

      // rootState.api.watchCorpus(state.actives[uid], (error, data) => {
      //   console.log('watcher', error, data)
      // })
      // If the corpu active is set
      // - list the medias
      // - list the layers
      if (state.actives[uid]) {
        dispatch(
          'medias/list',
          { corpuId: state.actives[uid], corpuUid: uid },
          { root: true }
        );
        dispatch(
          'layers/list',
          { corpuId: state.actives[uid], corpuUid: uid },
          { root: true }
        );
      }
    }
  };

  var getters$4 = {
    // Get the id of the active corpu
    // If, for this uid, active is set and its id is still in the list
    // If not, get the first corpu of the list
    id: function (state) { return function (uid) { return (state.actives[uid] &&
        state.lists[uid].find(function (c) { return c.id === state.actives[uid]; }).id) ||
      (state.lists[uid][0] && state.lists[uid][0].id) ||
      null; }; },

    // Get the permission level for the active corpu
    permission: function (state) { return function (uid) {
      var corpu =
        state.lists[uid] &&
        state.lists[uid].find(function (c) { return c.id === state.actives[uid]; });
      return corpu ? corpu.permission : 0
    }; }
  };

  var mutations$7 = {
    // Register a new uid
    // - lists is an empty array
    // - actives is null
    register: function register(state, uid) {
      Vue$1.set(state.lists, uid, []);
      Vue$1.set(state.actives, uid, null);
    },

    // Reset all (on log-out)
    resetAll: function resetAll(state) {
      Vue$1.set(state, 'lists', {});
      Vue$1.set(state, 'actives', {});
    },

    // Add a new corpu in every uids
    add: function add(state, ref) {
      var corpu = ref.corpu;

      Object.keys(state.lists).forEach(function (uid) {
        var index = state.lists[uid].length;
        Vue$1.set(state.lists[uid], index, corpu);
      });
    },

    // Update a corpu in every uids
    update: function update(state, ref) {
      var corpu = ref.corpu;

      Object.keys(state.lists).forEach(function (uid) {
        var index = state.lists[uid].findIndex(function (m) { return m.id === corpu.id; });
        if (index !== -1) {
          Vue$1.set(state.lists[uid], index, corpu);
        }
      });
    },

    // Remove a corpu in every uids
    remove: function remove(state, ref) {
      var id = ref.id;

      Object.keys(state.lists).forEach(function (uid) {
        var index = state.lists[uid].findIndex(function (c) { return c.id === id; });
        if (index !== -1) {
          Vue$1.delete(state.lists[uid], index);
        }
      });
    },

    // Add a new group to every corpus
    groupAdd: function groupAdd(state, groupId) {
      Object.keys(state.lists).forEach(function (uid) {
        state.lists[uid].forEach(function (c) {
          Vue$1.set(c.permissions.groups, groupId, 0);
        });
      });
    },

    // Remove a group from every corpus
    groupRemove: function groupRemove(state, groupId) {
      Object.keys(state.lists).forEach(function (uid) {
        state.lists[uid].forEach(function (c) {
          Vue$1.delete(c.permissions.groups, groupId);
        });
      });
    },

    // Add a user to every corpus
    userAdd: function userAdd(state, userId) {
      Object.keys(state.lists).forEach(function (uid) {
        state.lists[uid].forEach(function (c) {
          Vue$1.set(c.permissions.users, userId, 0);
        });
      });
    },

    // Remove a user from every corpus
    userRemove: function userRemove(state, userId) {
      Object.keys(state.lists).forEach(function (uid) {
        state.lists[uid].forEach(function (c) {
          Vue$1.delete(c.permissions.users, userId);
        });
      });
    },

    // Update permissions on a corpu
    permissionsUpdate: function permissionsUpdate(state, ref) {
      var id = ref.id;
      var typeId = ref.typeId;
      var permission = ref.permission;
      var type = ref.type;

      // Loop over the corpus lists
      // If the current corpu is in the list, update the permissions
      Object.keys(state.lists).forEach(function (uid) {
        var index = state.lists[uid].findIndex(function (m) { return m.id === id; });
        if (index !== -1) {
          Vue$1.set(state.lists[uid][index].permissions[type], typeId, permission);
        }
      });
    },

    // Set the corpu list for a uid
    list: function list(state, ref) {
      var corpus = ref.corpus;
      var uid = ref.uid;

      Vue$1.set(state.lists, uid, corpus);
    },

    // Set the active corpus for a uid
    set: function set(state, ref) {
      var id = ref.id;
      var uid = ref.uid;

      Vue$1.set(state.actives, uid, id);
    }
  };

  var corpus = {
    namespaced: true,
    state: state$9,
    actions: actions$6,
    getters: getters$4,
    mutations: mutations$7
  }

  // Lists contains, for each corpuUid, an array of media objects
  // Actives contains, for each mediaUid, a media id and a reference to the corpuUid
  // Properties contains, for each mediaUid, the properties of the current media

  /* Example

  {
    lists {
      'corpu-uid-string-1': [{
        id: 'media-id-hash-1',
        name: 'media-name-string',
        url: 'http://media-string.url',
        corpuId: 'corpu-id-hash-1',
        description: {
          type: 'media-type-string',
          …
        }
      }, {
        …
      }],
      'corpu-uid-string-2: [
        …
      ]
    },
    actives: {
      'media-uid-string-1': {
        id: 'media-id-hash-1',
        corpuUid: 'corpu-uid-string'
      },
      'media-uid-string-2': {
        …
      }
    },
    porperties: {
      'media-uid-string-1': {
        isLoaded: boolean,
        isPlaying: boolean,
        timecurrent: Number,
        timeTotal: number,
        seek: {
          seeking: Boolean
        }
      }, 
      'media-uid-string-2': {
        …
      }
    }
  }
  */

  var state$10 = {
    lists: {},
    actives: {},
    properties: {
      timeTotal: 0,
      timeCurrent: 0,
      isPlaying: false,
      isLoaded: false,
      seek: { seeking: false }
    }
  };

  var actions$7 = {
    // Add a new media
    add: function add(ref, ref$1) {
      var state = ref.state;
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var rootGetters = ref.rootGetters;
      var element = ref$1.element;

      dispatch('sync/start', "mediasAdd", { root: true });
      return rootState.api
        .createMedium(
          element.corpuId,
          element.name,
          element.url,
          element.description
        )
        .then(function (r) {
          dispatch('sync/stop', "mediasAdd", { root: true });
          var media = mediaFormat(r.data);

          // Loop over the media-lists to add the new media
          Object.keys(state.lists).forEach(function (corpuUid) {
            // If the new media belongs to the same corpus as the current media-list
            if (rootGetters['corpus/id'](corpuUid) === element.corpuId) {
              // Add the new media to the media-list
              commit('add', { media: media, corpuUid: corpuUid });
              // Loop over the active medias
              Object.keys(state.actives).forEach(function (uid) {
                // If the active media belongs to the same corpus Uid as the current media-list
                if (state.actives[uid].corpuUid === corpuUid) {
                  // Activate the new media
                  dispatch('set', { id: media.id, corpuUid: corpuUid, uid: uid });
                }
              });
            }
          });
          dispatch('messages/success', 'Medium added', { root: true });

          return media
        })
        .catch(function (e) {
          dispatch('sync/stop', "mediasAdd", { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Remove a media
    remove: function remove(ref, ref$1) {
      var state = ref.state;
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var id = ref$1.id;

      dispatch('sync/start', "mediasRemove", { root: true });
      return rootState.api
        .deleteMedium(id)
        .then(function (r) {
          dispatch('sync/stop', "mediasRemove", { root: true });

          // Loop over the corpuUid
          Object.keys(state.lists).forEach(function (corpuUid) {
            // If the media belongs to this corpuuid
            var listIndex = state.lists[corpuUid].findIndex(function (m) { return m.id === id; });
            if (listIndex !== -1) {
              // Remove the media from the list
              commit('remove', { listIndex: listIndex, corpuUid: corpuUid });
            }
          });

          // Re-set a new media in every mediaUid where it is active
          dispatch('unsetAll', { id: id });
          dispatch('messages/success', 'Medium removed', { root: true });

          return id
        })
        .catch(function (e) {
          dispatch('sync/stop', "mediasRemove", { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Update a media
    update: function update(ref, ref$1) {
      var state = ref.state;
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var rootGetters = ref.rootGetters;
      var element = ref$1.element;

      dispatch('sync/start', "mediasUpdate", { root: true });
      return rootState.api
        .updateMedium(element.id, {
          name: element.name,
          description: element.description,
          url: element.url
        })
        .then(function (r) {
          dispatch('sync/stop', "mediasUpdate", { root: true });
          var media = Object.assign({}, element);
          media.name = r.data.name;
          media.url = r.data.url;
          media.description = r.data.description || {};

          // Loop over the corpuUid
          Object.keys(state.lists).forEach(function (corpuUid) {
            // If the corpu active in this corpuUid equals the media's corpuUid
            if (rootGetters['corpus/id'](corpuUid) === element.corpuId) {
              // update the media
              commit('update', { media: media, corpuUid: corpuUid });
            }
          });
          dispatch('messages/success', 'Medium updated', { root: true });

          return media
        })
        .catch(function (e) {
          dispatch('sync/stop', "mediasUpdate", { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // List the medias
    list: function list(ref, ref$1) {
      var dispatch = ref.dispatch;
      var commit = ref.commit;
      var rootState = ref.rootState;
      var corpuId = ref$1.corpuId;
      var corpuUid = ref$1.corpuUid;

      dispatch('sync/start', ("mediasList-" + corpuUid), { root: true });
      return rootState.api
        .getMedia({ filter: { id_corpus: corpuId } })
        .then(function (r) {
          dispatch('sync/stop', ("mediasList-" + corpuUid), { root: true });
          // Format the server response
          var medias = r.data.map(function (media) {
            return mediaFormat(media)
          });

          // Commit media list
          commit('list', { medias: medias, corpuUid: corpuUid });

          // Loop over the active medias
          Object.keys(state$10.actives).forEach(function (uid) {
            // If the active media belongs to the same corpus Uid as the current media-list
            if (state$10.actives[uid].corpuUid === corpuUid) {
              // Activate a media
              dispatch('set', { corpuUid: corpuUid, uid: uid });
            }
          });

          return medias
        })
        .catch(function (e) {
          dispatch('sync/stop', ("mediasList-" + corpuUid), { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Re-set a new media in every mediaUid where it is active
    unsetAll: function unsetAll(ref, ref$1) {
      var state = ref.state;
      var dispatch = ref.dispatch;
      var id = ref$1.id;

      // loop over the mediaUids
      Object.keys(state.actives).forEach(function (uid) {
        // If the media is active in this mediaUid
        if (state.actives[uid].id === id) {
          // Set a new active media
          dispatch('set', { corpuUid: state.actives[uid].corpuUid, uid: uid });
        }
      });
    },

    // Set the active media for a uid
    set: function set(ref, ref$1) {
      var state = ref.state;
      var getters = ref.getters;
      var dispatch = ref.dispatch;
      var commit = ref.commit;
      var id = ref$1.id;
      var corpuUid = ref$1.corpuUid;
      var uid = ref$1.uid;

      // Before, stop the media if playing
      if (state.properties[uid] && state.properties[uid].isPlaying) {
        dispatch('pause', { uid: uid });
      }

      // Set the active media for this uid
      // If the media id is not defined, get one
      commit('set', { id: id || getters.id({ corpuUid: corpuUid, uid: uid }), uid: uid });
      dispatch(
        'annotations/mediaSet',
        {
          mediaId: state.actives[uid].id,
          mediaUid: uid
        },
        { root: true }
      );
    },

    // Play the media in a mediaUid
    play: function play(ref, ref$1) {
      var state = ref.state;
      var commit = ref.commit;
      var uid = ref$1.uid;

      var timeStart = Date.now();
      var timeCurrent = state.properties[uid].timeCurrent;
      state.properties[uid].interval = setInterval(function () {
        var timeEllapsed = Date.now() - timeStart;
        // commit('timeCurrent', { time: timeCurrent + timeEllapsed, uid })
        Vue$1.set(state.properties[uid], 'timeCurrent', timeCurrent + timeEllapsed);
      }, 0);
      commit('play', { uid: uid });
    },

    // Pause a media in a mediaUid
    pause: function pause(ref, ref$1) {
      var state = ref.state;
      var commit = ref.commit;
      var uid = ref$1.uid;

      clearInterval(state.properties[uid].interval);
      commit('pause', { uid: uid });
    },

    // Wait the media while buffering, in a mediaUid
    buffering: function buffering(ref, ref$1) {
      var state = ref.state;
      var commit = ref.commit;
      var uid = ref$1.uid;

      clearInterval(state.properties[uid].interval);
    },

    // Stop a media in a mediaUid
    stop: function stop(ref, ref$1) {
      var state = ref.state;
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var uid = ref$1.uid;

      clearInterval(state.properties[uid].interval);
      commit('pause', { uid: uid });
      dispatch('seek', {
        ratio: 0,
        serverRequest: true,
        uid: uid
      });
    },

    // Seek a media in a mediaUid
    seek: function seek(ref, ref$1) {
      var state = ref.state;
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var ratio = ref$1.ratio;
      var serverRequest = ref$1.serverRequest;
      var uid = ref$1.uid;

      if (state.properties[uid].isPlaying) {
        clearInterval(state.properties[uid].interval);
      }
      // commit('timeCurrent', {
      //   time: ratio * state.properties[uid].timeTotal,
      //   uid
      // })

      Vue$1.set(
        state.properties[uid],
        'timeCurrent',
        ratio * state.properties[uid].timeTotal
      );
      commit('seek', { options: { seeking: true, serverRequest: serverRequest }, uid: uid });
    }
  };

  var getters$5 = {
    // Get the id of the active media
    // or the id of the first media in the list
    id: function (state) { return function (ref) {
        var corpuUid = ref.corpuUid;
        var uid = ref.uid;

        return (state.actives[uid] &&
        state.lists[corpuUid].find(function (c) { return c.id === state.actives[uid].id; }) &&
        state.actives[uid].id) ||
      // Else, get the first id of the media-list
      (state.lists[corpuUid][0] && state.lists[corpuUid][0].id) ||
      null;
   }    },

    // Get the prpoerties of the active media
    properties: function (state, getters) { return function (uid, filter) { return getters.active(uid, filter) ? state.properties[uid] : {}; }; },

    // Get the active media
    filter: function (state) { return function (uid, filter) {
      var active = state.actives[uid];
      return active && state.lists[active.corpuUid]
        ? filter(state.lists[active.corpuUid].find(function (m) { return m.id === active.id; }))
        : null
    }; },

    // Get the active media
    active: function (state) { return function (uid) {
      var active = state.actives[uid];
      return active && state.lists[active.corpuUid]
        ? state.lists[active.corpuUid].find(function (m) { return m.id === active.id; })
        : null
    }; }
  };

  var mutations$8 = {
    // Register a mediaUid in a corpuUid
    register: function register(state, ref) {
      var uid = ref.uid;
      var corpuUid = ref.corpuUid;

      Vue$1.set(state.actives, uid, { corpuUid: corpuUid, description: {} });
      Vue$1.set(state.properties, uid, null);
    },

    descriptionRegister: function descriptionRegister(state, ref) {
      var uid = ref.uid;
      var description = ref.description;

      Vue$1.set(state.actives[uid], 'description', description);
    },

    // Reset all (on log-out)
    resetAll: function resetAll(state) {
      Vue$1.set(state, 'lists', {});
      Vue$1.set(state, 'actives', {});
      Vue$1.set(state, 'properties', {});
    },

    // Add a new media in a corpuuid
    add: function add(state, ref) {
      var media = ref.media;
      var corpuUid = ref.corpuUid;

      var index = state.lists[corpuUid].length;
      Vue$1.set(state.lists[corpuUid], index, media);
    },

    // Update a media in a corpuuid
    update: function update(state, ref) {
      var media = ref.media;
      var corpuUid = ref.corpuUid;

      var index = state.lists[corpuUid].findIndex(function (m) { return m.id === media.id; });
      Vue$1.set(state.lists[corpuUid], index, media);
    },

    // Remove a media from a corpuUid
    remove: function remove(state, ref) {
      var listIndex = ref.listIndex;
      var corpuUid = ref.corpuUid;

      Vue$1.delete(state.lists[corpuUid], listIndex);
    },

    // List medias in a corpuUid
    list: function list(state, ref) {
      var medias = ref.medias;
      var corpuUid = ref.corpuUid;

      Vue$1.set(state.lists, corpuUid, medias);
    },

    // Set the active media in a mediaUid
    set: function set(state, ref) {
      var id = ref.id;
      var uid = ref.uid;

      Vue$1.set(state.actives[uid], 'id', id);
      Vue$1.set(state.properties, uid, {
        timeTotal: 0,
        timeCurrent: 0,
        isPlaying: false,
        isLoaded: false,
        seek: { seeking: false }
      });
    },

    // Set the isLoaded property for a mediaUid
    loaded: function loaded(state, ref) {
      var isLoaded = ref.isLoaded;
      var uid = ref.uid;

      Vue$1.set(state.properties[uid], 'isLoaded', isLoaded);
    },

    // Set the isplaying property to true in a mediauid
    play: function play(state, ref) {
      var uid = ref.uid;

      Vue$1.set(state.properties[uid], 'isPlaying', true);
    },

    // Set the isplaying property to false in a mediauid
    pause: function pause(state, ref) {
      var uid = ref.uid;

      Vue$1.set(state.properties[uid], 'isPlaying', false);
    },

    // Set the timetotal property in a mediaUid
    timeTotal: function timeTotal(state, ref) {
      var time = ref.time;
      var uid = ref.uid;

      Vue$1.set(state.properties[uid], 'timeTotal', time);
    },

    // Set the seek property in a mediauid
    seek: function seek(state, ref) {
      var options = ref.options;
      var uid = ref.uid;

      Vue$1.set(state.properties[uid], 'seek', options);
    }
  };

  var medias = {
    namespaced: true,
    state: state$10,
    actions: actions$7,
    getters: getters$5,
    mutations: mutations$8
  }

  // Lists contains, for each corpuUid, an array of layers
  // Actives contains, for each layersUid, a reference to the corpuUid and a list of layer Ids

  /* Example 

  {
    lists: {
      'corpu-uid-string-1': [{
        id: 'layer-id-hash-1',
        name: 'layer-two',
        permission: 3,
        permissions: {
          groups: {
            'group-id-hash-1': 0,
            …
          },
          users: {
            'user-id-hash-1': 0,
            …
          }
        },
        description: { … },
        fragmentType: { … },
        metadataType: { … }
      }],
      'corpu-uid-string-2': [ 
        …
      ]
    },
    actives: {
      'layers-uid-string-1': {
        corpuUid: 'corpu-uid-string-1',
        ids: [
          'layer-id-hash-1',
          'layer-id-hash-2',
          …
        ]
      },
      'layers-uid-string-2': {
        …
      }
    }
  }
  */

  var state$11 = {
    lists: {},
    actives: {}
  };

  var actions$8 = {
    // Add a new layer
    add: function add(ref, ref$1) {
      var state = ref.state;
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var rootGetters = ref.rootGetters;
      var element = ref$1.element;

      dispatch('sync/start', "layersAdd", { root: true });
      return rootState.api
        .createLayer(
          element.corpuId,
          element.name,
          element.description,
          element.fragmentType,
          element.metadataType,
          element.annotations
        )
        .then(function (r) {
          dispatch('sync/stop', "layersAdd", { root: true });

          // Format server response
          var layer = {
            name: r.data.name,
            id: r.data._id,
            // The current user who created the layer has max permission level (3)
            permission: 3,
            // Init permissions for groups and users
            permissions: {
              users: rootGetters['users/permissions']({}),
              groups: rootGetters['groups/permissions']({})
            },
            description: r.data.description || {},
            fragmentType: r.data.fragment_type || {},
            metadataType: r.data.data_type || {},
            annotations: r.data.annotations
          };

          // Set permissions for the current user
          layer.permissions.users[rootState.user.id] = 3;

          // Loop over the corpu Uids
          Object.keys(state.lists).forEach(function (corpuUid) {
            // If the new layer belongs to the active corpu in this Uid
            if (rootGetters['corpus/id'](corpuUid) === element.corpuId) {
              // Add the layer to the corpus
              commit('add', { layer: layer, corpuUid: corpuUid });
            }

            // Loop over the layers uids
            Object.keys(state.actives).forEach(function (uid) {
              // If this layers uid's belongs to the current corpuUid
              if (state.actives[uid].corpuUid === corpuUid) {
                // Activate the new layer
                dispatch('set', { uid: uid, id: layer.id });
              }
            });
          });
          dispatch('messages/success', 'Layer added', { root: true });

          return layer
        })
        .catch(function (e) {
          dispatch('sync/stop', "layersAdd", { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Remove a layer
    remove: function remove(ref, ref$1) {
      var state = ref.state;
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var id = ref$1.id;

      dispatch('sync/start', "layersRemove", { root: true });
      return rootState.api
        .deleteLayer(id)
        .then(function (r) {
          dispatch('sync/stop', "layersRemove", { root: true });

          // Loop over the corpuUids
          // If the layer belongs to this corpuUid, remove the layer
          Object.keys(state.lists).forEach(function (corpuUid) {
            var listIndex = state.lists[corpuUid].findIndex(function (e) { return e.id === id; });
            if (listIndex !== -1) {
              commit('remove', { listIndex: listIndex, corpuUid: corpuUid });
            }
          });

          // Loop over the layers uids
          // If the layer is active, unset it
          Object.keys(state.actives).forEach(function (uid) {
            if (state.actives[uid].ids.findIndex(function (l) { return l.id === id; }) !== -1) {
              dispatch('unset', { id: id, uid: uid });
            }
          });

          dispatch('messages/success', 'Layer removed', { root: true });

          return id
        })
        .catch(function (e) {
          dispatch('sync/stop', "layersRemove", { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Update a layer
    update: function update(ref, ref$1) {
      var state = ref.state;
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var rootGetters = ref.rootGetters;
      var element = ref$1.element;

      dispatch('sync/start', "layersUpdate", { root: true });
      return rootState.api
        .updateLayer(element.id, {
          name: element.name,
          description: element.description,
          fragment_type: element.fragmentType,
          data_type: element.metadataType
        })
        .then(function (r) {
          dispatch('sync/stop', "layersUpdate", { root: true });

          // The server response does not contain the permissions
          // Copy the original element to keep the permissions
          // Overwrite properties with the server response
          var layer = Object.assign({}, element);
          layer.description = r.data.description || {};
          layer.fragmentType = r.data.fragment_type || {};
          layer.metadataType = r.data.data_type || {};

          // Loop over the corpuUid
          Object.keys(state.lists).forEach(function (corpuUid) {
            // If the element's corpuUid equals this corpuuid
            if (rootGetters['corpus/id'](corpuUid) === element.corpuId) {
              // Update the layer
              commit('update', { layer: layer, corpuUid: corpuUid });
            }
          });
          dispatch('messages/success', 'Layer updated', { root: true });

          return layer
        })
        .catch(function (e) {
          dispatch('sync/stop', "layersUpdate", { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Set the permission for a group on a layer
    groupPermissionSet: function groupPermissionSet(
      ref,
      ref$1
    ) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var rootGetters = ref.rootGetters;
      var id = ref$1.id;
      var groupId = ref$1.groupId;
      var permission = ref$1.permission;

      dispatch('sync/start', "layersGroupPermissionSet", {
        root: true
      });
      return rootState.api
        .setLayerPermissionsForGroup(id, groupId, permission)
        .then(function (p) {
          var permissions = p.data;
          dispatch('sync/stop', "layersGroupPermissionSet", {
            root: true
          });
          commit('permissionsUpdate', {
            id: id,
            typeId: groupId,
            permission: (permissions.groups && permissions.groups[groupId]) || 0,
            type: 'groups'
          });
          dispatch('messages/success', 'Group permissions updated', {
            root: true
          });

          // If the current user is in the updated group
          // And if the current user is not an admin
          // => the permissions for the current user have changed
          if (
            rootGetters['user/isInGroup'](groupId) &&
            !rootGetters['user/isAdmin'](permissions)
          ) {
            // Re-list the layers in every corpuUids
            dispatch('listAll');
            commit('popup/close', null, { root: true });
          }

          return permissions
        })
        .catch(function (e) {
          dispatch('sync/stop', "layersGroupPermissionSet", {
            root: true
          });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Remove permission for a group on a layer
    groupPermissionRemove: function groupPermissionRemove(
      ref,
      ref$1
    ) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var rootGetters = ref.rootGetters;
      var id = ref$1.id;
      var groupId = ref$1.groupId;

      dispatch('sync/start', "layersGroupPermissionRemove", {
        root: true
      });
      return rootState.api
        .removeLayerPermissionsForGroup(id, groupId)
        .then(function (p) {
          var permissions = p.data;
          dispatch('sync/stop', "layersGroupPermissionRemove", {
            root: true
          });
          commit('permissionsUpdate', {
            id: id,
            typeId: groupId,
            permission: 0,
            type: 'groups'
          });
          dispatch('messages/success', 'Group permissions updated', {
            root: true
          });

          // If the current user is in the updated group
          // And if the current user is not an admin
          // => the permissions for the current user have changed
          if (
            rootGetters['user/isInGroup'](groupId) &&
            !rootGetters['user/isAdmin'](permissions)
          ) {
            // Re-list the layers in every corpuUids
            dispatch('listAll');
            commit('popup/close', null, { root: true });
          }

          return permissions
        })
        .catch(function (e) {
          dispatch('sync/stop', "layersGroupPermissionRemove", {
            root: true
          });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Set the permission for a user on a layer
    userPermissionSet: function userPermissionSet(
      ref,
      ref$1
    ) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var rootGetters = ref.rootGetters;
      var id = ref$1.id;
      var userId = ref$1.userId;
      var permission = ref$1.permission;

      dispatch('sync/start', "layersUserPermissionSet", { root: true });
      return rootState.api
        .setLayerPermissionsForUser(id, userId, permission)
        .then(function (p) {
          var permissions = p.data;
          dispatch('sync/stop', "layersUserPermissionSet", {
            root: true
          });
          commit('permissionsUpdate', {
            id: id,
            typeId: userId,
            permission: (permissions.users && permissions.users[userId]) || 0,
            type: 'users'
          });
          dispatch('messages/success', 'User permissions updated', {
            root: true
          });

          // If the current user was updated
          // And if the current user is not an admin
          // => the permissions for the current user have changed
          if (
            rootGetters['user/isCurrentUser'](userId) &&
            !rootGetters['user/isAdmin'](permissions)
          ) {
            // Re-list the layers in every corpuUids
            dispatch('listAll');
            commit('popup/close', null, { root: true });
          }

          return permissions
        })
        .catch(function (e) {
          dispatch('sync/stop', "layersUserPermissionSet", {
            root: true
          });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Remove the permission for a user on a layer
    userPermissionRemove: function userPermissionRemove(
      ref,
      ref$1
    ) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var rootGetters = ref.rootGetters;
      var id = ref$1.id;
      var userId = ref$1.userId;

      dispatch('sync/start', "layersUserPermissionRemove", {
        root: true
      });
      return rootState.api
        .removeLayerPermissionsForUser(id, userId)
        .then(function (p) {
          var permissions = p.data;
          dispatch('sync/stop', "layersUserPermissionRemove", {
            root: true
          });
          commit('permissionsUpdate', {
            id: id,
            typeId: userId,
            permission: 0,
            type: 'users'
          });
          dispatch('messages/success', 'User permissions updated', {
            root: true
          });

          // If the current user was updated
          // And if the current user is not an admin
          // => the permissions for the current user have changed
          if (
            rootGetters['user/isCurrentUser'](userId) &&
            !rootGetters['user/isAdmin'](permissions)
          ) {
            // Re-list the layers in every corpuUids
            dispatch('listAll');
            commit('popup/close', null, { root: true });
          }

          return permissions
        })
        .catch(function (e) {
          dispatch('sync/stop', "layersUserPermissionRemove", {
            root: true
          });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // List the layers for every corpuUids
    listAll: function listAll(ref) {
      var state = ref.state;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;

      Object.keys(state.lists).forEach(function (corpuUid) {
        dispatch('list', {
          corpuId: rootState.corpus.actives[corpuUid],
          corpuUid: corpuUid
        });
      });
    },

    // List the layers for a corpuUid
    list: function list(ref, ref$1) {
      var dispatch = ref.dispatch;
      var commit = ref.commit;
      var rootState = ref.rootState;
      var rootGetters = ref.rootGetters;
      var corpuId = ref$1.corpuId;
      var corpuUid = ref$1.corpuUid;

      dispatch('sync/start', ("layersList-" + corpuUid), { root: true });
      return rootState.api
        .getLayers({ filter: { id_corpus: corpuId } })
        .then(function (r) {
          dispatch('sync/stop', ("layersList-" + corpuUid), { root: true });

          // Format server response
          var layers = r.data.map(function (l) { return ({
            name: l.name,
            id: l._id,
            description: l.description || {},
            permission: rootGetters['user/permission'](l.permissions),
            permissions: {
              users: rootGetters['users/permissions'](
                (l.permissions && l.permissions.users) || {}
              ),
              groups: rootGetters['groups/permissions'](
                (l.permissions && l.permissions.groups) || {}
              )
            },
            fragmentType: l.fragment_type || {},
            metadataType: l.data_type || {},
            annotations: l.annotations || []
          }); });

          // Commit list to a corpuUid
          commit('list', { layers: layers, corpuUid: corpuUid });

          // Activate every layers in the list
          dispatch('setAll', { corpuUid: corpuUid });

          return layers
        })
        .catch(function (e) {
          dispatch('sync/stop', ("layersList-" + corpuUid), { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Activate every layers in a corpuUid
    setAll: function setAll(ref, ref$1) {
      var state = ref.state;
      var dispatch = ref.dispatch;
      var commit = ref.commit;
      var corpuUid = ref$1.corpuUid;

      // Loop over every layers uids
      Object.keys(state.actives).forEach(function (uid) {
        // Loop over every layers in a corpuUid
        state.lists[corpuUid].forEach(function (l) {
          // Activate the layer
          dispatch('set', { id: l.id, corpuUid: corpuUid, uid: uid });
        });
      });
    },

    // Activate a layer in a layers uid
    set: function set(ref, ref$1) {
      var dispatch = ref.dispatch;
      var commit = ref.commit;
      var id = ref$1.id;
      var uid = ref$1.uid;

      commit('set', { id: id, uid: uid });
      dispatch(
        'annotations/layerSet',
        { layersUid: uid, layerId: id },
        { root: true }
      );
    },

    // Deactivate a layer in a layers uid
    unset: function unset(ref, ref$1) {
      var dispatch = ref.dispatch;
      var commit = ref.commit;
      var id = ref$1.id;
      var uid = ref$1.uid;

      commit('unset', { id: id, uid: uid });
      dispatch(
        'annotations/layerUnset',
        { layersUid: uid, layerId: id },
        { root: true }
      );
    }
  };

  var getters$6 = {
    // Get the active layers ids
    activeIds: function (state) { return function (uid) { return (state.actives[uid] && state.actives[uid].ids) || []; }; },

    // Get the active layers
    actives: function (state) { return function (uid) {
      var actives = state.actives[uid];
      var layers = state.lists[actives.corpuUid];
      return actives && layers
        ? layers.filter(function (l) { return actives.ids.indexOf(l.id) !== -1; })
        : {}
    }; },

    // Get the layer by id
    details: function (state) { return function (uid, id) {
      var actives = state.actives[uid];
      var layers = state.lists[actives.corpuUid];
      return actives && layers ? layers.find(function (l) { return l.id === id; }) : {}
    }; }
  };

  var mutations$9 = {
    // register a layers uid
    register: function register(state, ref) {
      var uid = ref.uid;
      var corpuUid = ref.corpuUid;

      Vue$1.set(state.actives, uid, {
        corpuUid: corpuUid,
        ids: [],
        fragmentType: {},
        metadataType: {}
      });
    },

    typesRegister: function typesRegister(state, ref) {
      var uid = ref.uid;
      var fragmentType = ref.fragmentType;
      var metadataType = ref.metadataType;

      if (fragmentType) {
        Object.assign(state.actives[uid].fragmentType, fragmentType);
      }

      if (metadataType) {
        Object.assign(state.actives[uid].metadataType, metadataType);
      }
    },

    // Reset all layers (on log-out)
    resetAll: function resetAll(state) {
      Vue$1.set(state, 'lists', {});
      Vue$1.set(state, 'actives', {});
    },

    // Add a layer in a corpuUid
    add: function add(state, ref) {
      var layer = ref.layer;
      var corpuUid = ref.corpuUid;

      var index = state.lists[corpuUid].length;
      Vue$1.set(state.lists[corpuUid], index, layer);
    },

    // Remove a layer in a corpuUid
    remove: function remove(state, ref) {
      var listIndex = ref.listIndex;
      var corpuUid = ref.corpuUid;

      Vue$1.delete(state.lists[corpuUid], listIndex);
    },

    // Update a layer in a corpuUid
    update: function update(state, ref) {
      var layer = ref.layer;
      var corpuUid = ref.corpuUid;

      var index = state.lists[corpuUid].findIndex(function (l) { return l.id === layer.id; });
      Vue$1.set(state.lists[corpuUid], index, layer);
    },

    // Add a group to every layers in every corpuUid
    groupAdd: function groupAdd(state, groupId) {
      Object.keys(state.lists).forEach(function (corpuUid) {
        state.lists[corpuUid].forEach(function (e) {
          Vue$1.set(e.permissions.groups, groupId, 0);
        });
      });
    },

    // Remove a group from every layers in every corpuUid
    groupRemove: function groupRemove(state, groupId) {
      Object.keys(state.lists).forEach(function (corpuUid) {
        state.lists[corpuUid].forEach(function (e) {
          Vue$1.delete(e.permissions.groups, groupId);
        });
      });
    },

    // Add a user to every layers in every corpuUid
    userAdd: function userAdd(state, userId) {
      Object.keys(state.lists).forEach(function (corpuUid) {
        state.lists[corpuUid].forEach(function (e) {
          Vue$1.set(e.permissions.users, userId, 0);
        });
      });
    },

    // Remove a user from every layers in every corpuUid
    userRemove: function userRemove(state, userId) {
      Object.keys(state.lists).forEach(function (corpuUid) {
        state.lists[corpuUid].forEach(function (e) {
          Vue$1.delete(e.permissions.users, userId);
        });
      });
    },

    // Update permissions on a layer in every corpuUid
    permissionsUpdate: function permissionsUpdate(state, ref) {
      var id = ref.id;
      var typeId = ref.typeId;
      var permission = ref.permission;
      var type = ref.type;

      Object.keys(state.lists).forEach(function (corpuUid) {
        var index = state.lists[corpuUid].findIndex(function (e) { return e.id === id; });
        if (index !== -1) {
          Vue$1.set(
            state.lists[corpuUid][index].permissions[type],
            typeId,
            permission
          );
        }
      });
    },

    list: function list(state, ref) {
      var layers = ref.layers;
      var corpuUid = ref.corpuUid;

      Vue$1.set(state.lists, corpuUid, layers);
    },

    set: function set(state, ref) {
      var id = ref.id;
      var uid = ref.uid;

      Vue$1.set(state.actives[uid].ids, state.actives[uid].ids.length, id);
    },

    unset: function unset(state, ref) {
      var id = ref.id;
      var uid = ref.uid;

      var index = state.actives[uid].ids.findIndex(function (layerId) { return layerId === id; });
      if (index !== -1) {
        Vue$1.delete(state.actives[uid].ids, index);
      }
    }
  };

  var layers = {
    namespaced: true,
    state: state$11,
    actions: actions$8,
    getters: getters$6,
    mutations: mutations$9
  }

  // Lists contains the annotations data
  // Actives contains the currently activated annotations

  /* 
  Example: 

  {
    lists: {
      'annotations-uid-string-1': {
        layerUid: 'layer-uid-string',
        mediaUid: 'media-uid-string',
        // An array of filter function registered by components
        filters: [(a) +> {
          return a
        }, 
        … ]
        // The lists of annotations organised by layers
        layers: {
          'layer-id-hash-1': [{
            id: 'annotation-id-hash',
            layerId: 'layer-id-hash',
            mediaId: 'media-id-hash',
            fragment: {
              positions: [ … ],
              time: { … }
            },
            metadata: {
              label: 'lulu'
            }
          },
          { …
          }],
          'layer-id-hash-2': [ …
          ]
        }
      },
      'annotations-uid-string-2': { …
      }
    },
    actives: {
      'annotations-uid-string-1': 'annotation-id-hash',
      'annotations-uid-string-2': null // no annotation is activated for this uid
    }
  }
  */
  var state$12 = {
    lists: {},
    actives: {}
  };

  var actions$9 = {
    // Add a new annotation
    add: function add(ref, ref$1) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var element = ref$1.element;

      dispatch('sync/start', "annotationsAdd", { root: true });
      return rootState.api
        .createAnnotation(
          element.layerId,
          element.mediaId || null,
          element.fragment,
          element.metadata
        )
        .then(function (r) {
          dispatch('sync/stop', "annotationsAdd", { root: true });

          // Format server response
          var annotation = {
            id: r.data._id,
            fragment: r.data.fragment || {},
            metadata: r.data.data || {},
            layerId: r.data.id_layer,
            mediaId: r.data.id_medium || null
          };

          // Commit response
          commit('add', { annotation: annotation, layerId: element.layerId });
          dispatch('messages/success', 'Annotation added', { root: true });

          return annotation
        })
        .catch(function (e) {
          dispatch('sync/stop', "annotationsAdd", { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Remove an annotation
    remove: function remove(ref, ref$1) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var id = ref$1.id;

      dispatch('sync/start', "annotationsRemove", { root: true });
      return rootState.api
        .deleteAnnotation(id)
        .then(function (r) {
          dispatch('sync/stop', "annotationsRemove", { root: true });
          commit('remove', { id: id });
          dispatch('messages/success', 'Annotation removed', { root: true });

          return id
        })
        .catch(function (e) {
          dispatch('sync/stop', "annotationsRemove", { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Update an annotation
    update: function update(ref, ref$1) {
      var commit = ref.commit;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var element = ref$1.element;

      dispatch('sync/start', "annotationsUpdate", { root: true });
      return rootState.api
        .updateAnnotation(element.id, {
          fragment: element.fragment,
          data: element.metadata
        })
        .then(function (r) {
          dispatch('sync/stop', "annotationsUpdate", { root: true });

          // Format server response
          var annotation = Object.assign({}, element);
          annotation.fragment = r.data.fragment || {};
          annotation.metadata = r.data.data || {};

          // Commit response
          commit('update', { annotation: annotation, layerId: element.layerId });
          dispatch('messages/success', 'Annotation updated', { root: true });

          return annotation
        })
        .catch(function (e) {
          dispatch('sync/stop', "annotationsUpdate", { root: true });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    },

    // Activate the annotations for a layerId in a layersUid group
    layerSet: function layerSet(ref, ref$1) {
      var state = ref.state;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var layersUid = ref$1.layersUid;
      var layerId = ref$1.layerId;

      // Loop over the annotation lists
      Object.keys(state.lists).forEach(function (uid) {
        var mediaUid = state.lists[uid].mediaUid;

        // If the current list's layersUid equals layersUid
        // And if the current list's mediaUid is active
        if (
          state.lists[uid].layersUid === layersUid &&
          rootState.medias.actives[mediaUid]
        ) {
          // Get the annotation list
          dispatch('list', {
            uid: uid,
            layerId: layerId,
            layersUid: layersUid,
            mediaId: rootState.medias.actives[mediaUid].id
          });
        }
      });
    },

    // When a layer is deactivated,
    // deactivate the annotations for this layerId in this layersUid group
    layerUnset: function layerUnset(ref, ref$1) {
      var commit = ref.commit;
      var layersUid = ref$1.layersUid;
      var layerId = ref$1.layerId;

      commit('reset', { layersUid: layersUid, layerId: layerId });
    },

    // When the active media changes,
    // display the related annotations
    mediaSet: function mediaSet(ref, ref$1) {
      var state = ref.state;
      var dispatch = ref.dispatch;
      var rootState = ref.rootState;
      var mediaUid = ref$1.mediaUid;
      var mediaId = ref$1.mediaId;

      // Loop over the annotation lists
      Object.keys(state.lists).forEach(function (uid) {
        var list = state.lists[uid];

        // If the current list's mediaUid equals mediaUid
        // And if the current list's LayersUid is active
        if (
          list.mediaUid === mediaUid &&
          rootState.layers.actives[list.layersUid]
        ) {
          // Loop over the layers
          Object.keys(list.layers).forEach(function (layerId) {
            // Get the annotation list
            dispatch('list', {
              uid: uid,
              layerId: layerId,
              layersUid: list.layersUid,
              mediaId: mediaId
            });
          });
        }
      });
    },

    // List the annotations
    list: function list(
      ref,
      ref$1
    ) {
      var state = ref.state;
      var dispatch = ref.dispatch;
      var commit = ref.commit;
      var rootState = ref.rootState;
      var uid = ref$1.uid;
      var layerId = ref$1.layerId;
      var layersUid = ref$1.layersUid;
      var mediaId = ref$1.mediaId;

      dispatch('sync/start', ("annotationsList-" + uid), { root: true });
      return rootState.api
        .getAnnotations({
          filter: {
            id_layer: layerId,
            id_medium: mediaId
          }
        })
        .then(function (r) {
          dispatch('sync/stop', ("annotationsList-" + uid), {
            root: true
          });

          // Format server response
          var annotations = r.data.map(function (a) { return ({
            id: a._id,
            fragment: a.fragment || {},
            metadata: a.data || {},
            layerId: a.id_layer,
            mediaId: a.id_medium || null
          }); });

          // Commit response
          commit('list', { annotations: annotations, uid: uid, layerId: layerId, layersUid: layersUid });

          return annotations
        })
        .catch(function (e) {
          dispatch('sync/stop', ("annotationsList-" + layersUid), {
            root: true
          });
          dispatch('messages/error', e.message, { root: true });

          throw e
        })
    }
  };

  var getters$7 = {
    // Get the lists of annotations
    lists: function (state) { return function (uid) { return (state.lists[uid] && state.lists[uid].layers) || {}; }; },

    // Get the lists of annotations, filtered
    filter: function (state) { return function (uid, filter) { return state.lists[uid] &&
      Object.keys(state.lists[uid].layers).reduce(
        function (layers, layerId) {
            var obj;

            return Object.assign(layers, ( obj = {}, obj[layerId] = state.lists[uid].layers[layerId].filter(function (a) { return filter(a); }), obj));
        },
        {}
      ); }; },

    // Get the lists of annotations, filtered
    filtered: function (state) { return function (uid) { return state.lists[uid] &&
      state.lists[uid].filters.reduce(
        function (layers, filter) { return Object.keys(layers).reduce(
            function (layersFiltered, layerId) {
                var obj;

                return Object.assign(layersFiltered, ( obj = {}, obj[layerId] = layers[layerId].filter(function (a) { return filter(a); }), obj));
            },
            {}
          ); },
        state.lists[uid].layers
      ); }; },

    active: function (state) { return function (uid) { return Object.keys(state.lists[uid].layers).reduce(
        function (res, layerId) { return res ||
          state.lists[uid].layers[layerId].find(function (a) { return a.id === state.actives[uid]; }); },
        null
      ); }; }
  };

  var mutations$10 = {
    // Register an annotation list by uid
    register: function register(state, ref) {
      var uid = ref.uid;
      var mediaUid = ref.mediaUid;
      var layersUid = ref.layersUid;

      // Create an uid entry in state.actives
      Vue$1.set(state.actives, uid, null);

      // Create an uid entry in state.lists,
      // with value { mediaUid, LayersUid, layers: {}}
      Vue$1.set(state.lists, uid, { mediaUid: mediaUid, layersUid: layersUid, layers: {}, filters: [] });
    },

    filterRegister: function filterRegister(state, ref) {
      var uid = ref.uid;
      var filter = ref.filter;

      state.lists[uid].filters.push(filter);
    },

    // Reset all (on log-out)
    resetAll: function resetAll(state) {
      Vue$1.set(state, 'lists', {});
      Vue$1.set(state, 'actives', {});
    },

    // Reset a list (if a layer is deactivated for example)
    reset: function reset(state, ref) {
      var layersUid = ref.layersUid;
      var layerId = ref.layerId;

      // Loop over the annotation lists
      Object.keys(state.lists).forEach(function (uid) {
        var list = state.lists[uid];

        // If current list's layersUid equals layersUid
        // - delete the list
        // - set the active annotation to null
        if (list.layersUid === layersUid) {
          Vue$1.delete(list, layerId);
          Vue$1.set(state.actives, uid, null);
        }
      });
    },

    // Add an annotation to a layer
    add: function add(state, ref) {
      var annotation = ref.annotation;
      var layerId = ref.layerId;

      // Loop over the annotation lists
      // If a list contains a layer which id's equals to layerId,
      // Prepend the new annotation to the list
      Object.keys(state.lists).forEach(function (uid) {
        var list = state.lists[uid].layers[layerId];
        if (list) {
          Vue$1.set(list, list.length, annotation);
        }
      });
    },

    // Update an annotation
    update: function update(state, ref) {
      var annotation = ref.annotation;
      var layerId = ref.layerId;

      // Loop over the annotation lists
      Object.keys(state.lists).forEach(function (uid) {
        // If a list contains a layer which id's equals to layerId
        var list = state.lists[uid].layers[layerId];
        if (list) {
          // Find the annotation index in the list and update
          var index = list.findIndex(function (a) { return a.id === annotation.id; });
          Vue$1.set(list, index, annotation);
        }
      });
    },

    // Remove an annotation by id
    remove: function remove(state, ref) {
      var id = ref.id;

      // Loop over the annotation lists
      Object.keys(state.lists).forEach(function (uid) {
        // Loop over the the layers in each list
        Object.keys(state.lists[uid].layers).forEach(function (layerId) {
          // If the list contains the annotation
          // - delete the annotation
          // - if the annotation was active, unset it
          var list = state.lists[uid].layers[layerId];
          var listsIndex = list.findIndex(function (a) { return a.id === id; });
          if (listsIndex !== -1) {
            Vue$1.delete(list, listsIndex);
            if (state.actives[uid] === id) {
              Vue$1.set(state.actives, uid, null);
            }
          }
        });
      });
    },

    // Set the list of annotation
    list: function list(state, ref) {
      var annotations = ref.annotations;
      var uid = ref.uid;
      var layerId = ref.layerId;
      var layersUid = ref.layersUid;

      Vue$1.set(state.lists[uid].layers, layerId, annotations);
    },

    // Set the active annotation
    set: function set(state, ref) {
      var id = ref.id;
      var uid = ref.uid;

      Vue$1.set(state.actives, uid, id);
    },

    // Unset an active annotation
    unset: function unset(state, ref) {
      var id = ref.id;
      var uid = ref.uid;

      Vue$1.set(state.actives, uid, null);
    }
  };

  var annotations = {
    namespaced: true,
    state: state$12,
    actions: actions$9,
    getters: getters$7,
    mutations: mutations$10
  }

  // Vuex Store main entry point

  var modules$1 = {
    viewport: viewport,
    sync: sync,
    popup: popup,
    dropdown: dropdown,
    messages: messages,
    user: user,
    users: users,
    groups: groups,
    corpus: corpus,
    medias: medias,
    layers: layers,
    annotations: annotations
  };

  var actions$10 = {
    // Bootstrap the application (on log-in)
    set: function set(ref) {
      var dispatch = ref.dispatch;

      // First get the users and groups
      // to get permissions…
      Promise.all([].concat( ['users', 'groups'].map(function (type) { return dispatch((type + "/list"), {}, { root: true })
            .then(function (r) { return r; })
            .catch(function (e) { return e; }); }
        ) )).then(function (res) {
        // …then list the corpus
        dispatch('corpus/listAll', null, { root: true });
      });
    },

    // Reset (on log-out)
    reset: function reset(ref) {
      var commit = ref.commit;

      commit('user/reset', null, { root: true });
      commit('users/reset', null, { root: true });
      commit('groups/reset', null, { root: true });
      commit('corpus/resetAll', null, { root: true });
      commit('medias/resetAll', null, { root: true });
      commit('layers/resetAll', null, { root: true });
      commit('annotations/resetAll', null, { root: true });
    }
  };

  var mutations$11 = {
    // Register the app, to connect to the api
    register: function register(state, ref) {
      var url = ref.url;
      var title = ref.title;
      var user$$1 = ref.user;

      state.config = {
        url: url,
        title: title,
        user: user$$1
      };
      state.api = new camomileClient(url);
    }
  };

  Vue$1.use(index_esm);
  Vue$1.filter('stringEnd', function (str) { return str.substr(str.length - 6); });

  var store$1 = new index_esm.Store({
    actions: actions$10,
    mutations: mutations$11,
    modules: modules$1
  });

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();




  var viewport$1 = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div')},staticRenderFns: [],
    name: 'CamomileUtilsViewport',

    mounted: function mounted () {
      window.addEventListener('resize', this.resize);
      this.resize();
    },

    methods: {
      resize: function resize () {
        return this.$store.dispatch('viewport/set')
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();













  var cmlDropdown = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('transition',{attrs:{"name":"transition-top"}},[(_vm.dropdown.visible)?_c('div',{staticClass:"absolute full bg-alpha",on:{"click":function($event){if($event.target !== $event.currentTarget){ return null; }return _vm.close($event)}}},[_c('div',{staticClass:"container relative"},[_c(_vm.dropdown.config.component,{tag:"component"})],1)]):_vm._e()])},staticRenderFns: [],
    name: 'CamomileUtilsDropdown',

    computed: {
      dropdown: function dropdown () {
        return this.$store.state.dropdown
      }
    },

    methods: {
      close: function close () {
        this.$store.commit('dropdown/close');
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();



















  var cmlPopup = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:"absolute full bg-alpha",on:{"click":_vm.close}}),_vm._v(" "),_c('div',{staticClass:"pophover absolute full bg-bg p-l pb-s"},[_c('div',{staticClass:"flex flex-start"},[_c('h2',[_vm._v(_vm._s(_vm.config.title))]),_vm._v(" "),(_vm.config.closeBtn)?_c('button',{staticClass:"btn-border flex-right px-s py-xs mt--s",on:{"click":_vm.close}},[_c('i',{staticClass:"icon-24 icon-24-close"})]):_vm._e()]),_vm._v(" "),_c('hr'),_vm._v(" "),_c(_vm.config.component,{tag:"component"})],1)])},staticRenderFns: [],
    name: 'CamomilePopup',

    computed: {
      config: function config () {
        return this.$store.state.popup.config
      }
    },

    created: function created () {
      if (this.config.closeBtn) {
        document.addEventListener('keyup', this.keyup);
      }
    },

    beforeDestroy: function beforeDestroy () {
      if (this.config.closeBtn) {
        document.removeEventListener('keyup', this.keyup);
      }
    },

    methods: {
      close: function close () {
        if (this.config.closeBtn) {
          this.$store.commit('popup/close');
        }
      },
      keyup: function keyup (e) {
        if ((e.which || e.keyCode) === 27) {
          this.close();
        }
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();
















  var cmlMessages = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"messages absolute center"},[_c('transition-group',{attrs:{"name":"transition-bottom","tag":"div"}},_vm._l((_vm.messages),function(message){return (message.content)?_c('div',{key:message.id,staticClass:"px-m py-s mb color-bg b",class:("bg-" + (message.type))},[_vm._v(_vm._s(message.content)+" ")]):_vm._e()}))],1)},staticRenderFns: [],
    name: 'CamomileUtilsMessages',

    computed: {
      messages: function messages () {
        return this.$store.state.messages.list
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();




  var cmlTitle = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h1',{staticClass:"mb-0"},[_vm._v(_vm._s(_vm.title))])},staticRenderFns: [],
    name: 'CamomileHeaderTitle',

    computed: {
      title: function title () {
        return this.$store.state.config.title
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();




  var cmlInfos = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h6',{staticClass:"menubar-infos mb-0"},[_vm._v(_vm._s(_vm.url))])},staticRenderFns: [],
    name: 'CamomileHeaderInfos',

    computed: {
      url: function url () {
        return this.$store.state.config.url
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();














  var objectField = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('h3',{staticClass:"pt-s"},[_vm._v(_vm._s(_vm.title))]),_vm._v(" "),_c('div',{staticClass:"blobs"},[_c('div',{staticClass:"blob-1"},[_c('textarea',{directives:[{name:"model",rawName:"v-model",value:(_vm.fields),expression:"fields"}],ref:"field",domProps:{"value":(_vm.fields)},on:{"keyup":_vm.resize,"input":function($event){if($event.target.composing){ return; }_vm.fields=$event.target.value;}}})])])])},staticRenderFns: [],
    name: 'CamomilePopupEditJson',

    props: {
      name: {
        type: String,
        default: 'default'
      },
      title: {
        type: String,
        default: 'default'
      }
    },

    computed: {
      fields: {
        get: function get () {
          return JSON.stringify(
            this.$store.state.popup.element[this.name],
            undefined,
            2
          )
        },
        set: function set (value) {
          if (this.jsonCheck(value)) {
            this.$store.commit('popup/fieldUpdate', {
              name: this.name,
              value: JSON.parse(value)
            });
          }
        }
      }
    },

    mounted: function mounted () {
      var el = this.$refs.field;
      el.style.height = (el.scrollHeight) + "px";
    },

    methods: {
      jsonCheck: function jsonCheck (str) {
        try {
          JSON.parse(str);
        } catch (e) {
          return false
        }
        return true
      },
      resize: function resize (e) {
        var el = e.target;
        el.style.height = (el.scrollHeight) + "px";
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var popupEdit = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(_vm.type !== 'annotations')?_c('div',{staticClass:"blobs"},[_vm._m(0),_vm._v(" "),_c('div',{staticClass:"blob-3-4"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.element.name),expression:"element.name"}],ref:"name",attrs:{"disabled":_vm.element.id && (_vm.type === 'users' || _vm.type === 'groups'),"type":"text","placeholder":"Name"},domProps:{"value":(_vm.element.name)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.element, "name", $event.target.value);}}})])]):_vm._e(),_vm._v(" "),(_vm.type === 'users')?_c('div',{staticClass:"blobs"},[_vm._m(1),_vm._v(" "),_c('div',{staticClass:"blob-3-4"},[_c('select',{directives:[{name:"model",rawName:"v-model",value:(_vm.element.role),expression:"element.role"}],attrs:{"disabled":!_vm.rolesPermission,"type":"text"},on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(_vm.element, "role", $event.target.multiple ? $$selectedVal : $$selectedVal[0]);}}},_vm._l((_vm.roles),function(role){return _c('option',{key:role,domProps:{"value":role}},[_vm._v(" "+_vm._s(role)+" ")])}))])]):_vm._e(),_vm._v(" "),(_vm.type === 'users')?_c('div',{staticClass:"blobs"},[_vm._m(2),_vm._v(" "),_c('div',{staticClass:"blob-3-4"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.element.password),expression:"element.password"}],attrs:{"type":"password","placeholder":"••••••••"},domProps:{"value":(_vm.element.password)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.element, "password", $event.target.value);}}})])]):_vm._e(),_vm._v(" "),(_vm.type === 'medias')?_c('div',{staticClass:"blobs"},[_vm._m(3),_vm._v(" "),_c('div',{staticClass:"blob-3-4"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.element.url),expression:"element.url"}],attrs:{"type":"text","placeholder":"http://…"},domProps:{"value":(_vm.element.url)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.element, "url", $event.target.value);}}})])]):_vm._e(),_vm._v(" "),(_vm.type === 'annotations')?_c('object-field',{attrs:{"name":'fragment',"title":'Fragment'}}):_vm._e(),_vm._v(" "),(_vm.type === 'annotations')?_c('object-field',{attrs:{"name":'metadata',"title":'Meta-data'}}):_vm._e(),_vm._v(" "),(_vm.type === 'layers')?_c('object-field',{attrs:{"name":'fragmentType',"title":'Fragment type'}}):_vm._e(),_vm._v(" "),(_vm.type === 'layers')?_c('object-field',{attrs:{"name":'metadataType',"title":'Meta-data type'}}):_vm._e(),_vm._v(" "),(_vm.type !== 'annotations')?_c('object-field',{attrs:{"name":'description',"title":'Description'}}):_vm._e(),_vm._v(" "),_c('div',{staticClass:"blobs"},[_c('div',{staticClass:"blob-1-4"}),_vm._v(" "),_c('div',{staticClass:"blob-3-4"},[_c('button',{staticClass:"btn-alt p-s full-x",attrs:{"disabled":!_vm.element.name && _vm.type !== 'annotations'},on:{"click":_vm.save,"keyup":function($event){if(!('button' in $event)&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.save($event)}}},[_vm._v("Save")])])])],1)},staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"blob-1-4"},[_c('h4',{staticClass:"pt-s mb-0"},[_vm._v("Name")])])},function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"blob-1-4"},[_c('h4',{staticClass:"pt-s mb-0"},[_vm._v("Role")])])},function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"blob-1-4"},[_c('h4',{staticClass:"pt-s mb-0"},[_vm._v("Password")])])},function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"blob-1-4"},[_c('h4',{staticClass:"pt-s mb-0"},[_vm._v("Url")])])}],
    name: 'CamomilePopupEdit',

    components: {
      objectField: objectField
    },

    data: function data () {
      return {
        roles: ['admin', 'user']
      }
    },

    computed: Object.assign({}, mapState({
        element: function (state) { return state.popup.element; },
        type: function (state) { return state.popup.config.type; },
        rolesPermission: function (state) { return state.user.id !== state.popup.element.id; }
      })),

    created: function created () {
      document.addEventListener('keyup', this.keyup);
    },

    mounted: function mounted () {
      if (this.type !== 'annotations') {
        this.$refs.name.focus();
      }
    },

    beforeDestroy: function beforeDestroy () {
      document.removeEventListener('keyup', this.keyup);
    },

    methods: {
      save: function save () {
        if (this.element.id) {
          this.$store.dispatch(((this.type) + "/update"), {
            element: this.element
          });
        } else {
          this.$store.dispatch(((this.type) + "/add"), { element: this.element });
        }
        this.$store.commit('popup/close');
      },
      keyup: function keyup (e) {
        if ((e.which || e.keyCode) === 13) {
          this.save();
        }
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var userbuttonDropdown = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"dropdown"},[(_vm.isAdmin)?_c('div',[_c('button',{staticClass:"btn px-m py-s full-x",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupEditConfig, element: _vm.user });}}},[_vm._v("Settings…")])]):_vm._e(),_vm._v(" "),_c('div',[_c('button',{staticClass:"btn px-m py-s full-x mr home",on:{"click":_vm.logout}},[_vm._v("Logout")])])])},staticRenderFns: [],
    name: 'CamomileHeaderUserbuttonDropdown',

    data: function data () {
      return {
        popupEditConfig: {
          type: 'users',
          closeBtn: true,
          title: 'Edit user',
          component: popupEdit
        }
      }
    },

    computed: {
      user: function user () {
        return this.$store.state.user
      },
      isAdmin: function isAdmin () {
        return this.$store.state.user.isAdmin
      }
    },

    methods: {
      close: function close () {
        this.$store.commit('dropdown/close');
      },
      logout: function logout () {
        return this.$store.dispatch('user/logout')
      },
      popupOpen: function popupOpen (ref) {
        var config = ref.config;
        var element = ref.element;

        this.$store.commit('popup/open', { config: config, element: element });
        this.close();
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var cmlUserbutton = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('button',{staticClass:"btn-menubar px-m py-s full-x",class:{ active: _vm.visible },on:{"click":_vm.dropdownToggle}},[_vm._v(_vm._s(_vm.user.name))])},staticRenderFns: [],
    name: 'CamomileHeaderUserbutton',
    computed: Object.assign({}, mapState({
        user: function (state) { return state.user; },
        visible: function (state) { return state.dropdown.visible; }
      })),
    methods: {
      dropdownToggle: function dropdownToggle () {
        if (this.visible) {
          this.$store.commit('dropdown/close');
        } else {
          this.$store.commit('dropdown/open', {
            component: userbuttonDropdown
          });
        }
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();










  var cmlSync = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('button',{staticClass:"btn-menubar px-m py-s full-x",on:{"click":_vm.sync}},[_c('i',{staticClass:"icon-24 icon-24-dot",class:{ blink: _vm.active }})])},staticRenderFns: [],
    name: 'CamomileHeaderSyncbutton',

    computed: {
      active: function active () {
        return this.$store.getters['sync/active']
      }
    },

    methods: {
      sync: function sync () {
        this.$store.dispatch('sync/all');
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var cmlHeader = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('header',{staticClass:"bg-inverse color-bg header"},[_c('div',{staticClass:"container"},[_c('div',{staticClass:"blobs"},[_c('div',{staticClass:"blob-1-4 mb-0"},[_c('cml-title')],1),_vm._v(" "),(_vm.isLogged)?_c('div',{staticClass:"blob-1-2 mb-0"},[_c('div',{staticClass:"blobs-default"},[_c('div',{staticClass:"blob-default"},[_c('cml-sync',{staticClass:"mb-0 left"})],1),_vm._v(" "),_c('div',{staticClass:"blob-auto mb-0"},[_c('cml-infos')],1)])]):_vm._e(),_vm._v(" "),(_vm.isLogged)?_c('div',{staticClass:"blob mb-0 flex-right"},[_c('cml-userbutton')],1):_vm._e()])])])},staticRenderFns: [],
    name: 'CamomileHeader',

    components: {
      cmlTitle: cmlTitle,
      cmlInfos: cmlInfos,
      cmlUserbutton: cmlUserbutton,
      cmlSync: cmlSync
    },

    computed: {
      isLogged: function isLogged () {
        return this.$store.state.user.isLogged
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();


































  var popupLogin = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:"blobs"},[_vm._m(0),_vm._v(" "),_c('div',{staticClass:"blob-3-4"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.config.user.name),expression:"config.user.name"}],attrs:{"type":"text","placeholder":"Name"},domProps:{"value":(_vm.config.user.name)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.config.user, "name", $event.target.value);}}})]),_vm._v(" "),_vm._m(1),_vm._v(" "),_c('div',{staticClass:"blob-3-4"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.config.user.password),expression:"config.user.password"}],attrs:{"type":"password","placeholder":"Password"},domProps:{"value":(_vm.config.user.password)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.config.user, "password", $event.target.value);}}})]),_vm._v(" "),_c('div',{staticClass:"blob-1-4"}),_vm._v(" "),_c('div',{staticClass:"blob-3-4"},[_c('button',{staticClass:"btn-alt p-s full-x",on:{"click":function($event){_vm.login(_vm.config);}}},[_vm._v("Login")])])])])},staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"blob-1-4"},[_c('h4',{staticClass:"pt-s mb-0"},[_vm._v("Name")])])},function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"blob-1-4"},[_c('h4',{staticClass:"pt-s mb-0"},[_vm._v("Password")])])}],
    name: 'CamomileLoginPopup',

    computed: {
      config: function config () {
        return this.$store.state.config
      }
    },

    created: function created () {
      document.addEventListener('keyup', this.keyup);
    },

    beforeDestroy: function beforeDestroy () {
      document.removeEventListener('keyup', this.keyup);
    },

    methods: {
      login: function login (config) {
        return this.$store.dispatch('user/login', config)
      },
      keyup: function keyup (e) {
        if ((e.which || e.keyCode) === 13) {
          this.login(this.config);
        }
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var cmlLogin = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div')},staticRenderFns: [],
    name: 'CamomileLogin',

    created: function created () {
      this.$store.commit('popup/open', {
        config: {
          title: 'Login',
          closeBtn: false,
          component: popupLogin
        },
        element: {}
      });
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var app = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"page"},[_c('cml-header'),_vm._v(" "),_c('main',{staticClass:"main relative"},[_c('div',{staticClass:"content"},[(_vm.isLogged)?_vm._t("default"):_c('cml-login')],2),_vm._v(" "),_c('div',{staticClass:"overlay"},[_c('transition',{attrs:{"name":"transition-top"}},[(_vm.popup.visible)?_c('cml-popup'):_vm._e()],1),_vm._v(" "),_c('cml-messages'),_vm._v(" "),_c('cml-dropdown'),_vm._v(" "),_c('viewport')],1)])],1)},staticRenderFns: [],
    store: store$1,

    name: 'Camomile',

    components: {
      viewport: viewport$1,
      cmlHeader: cmlHeader,
      cmlLogin: cmlLogin,
      cmlPopup: cmlPopup,
      cmlMessages: cmlMessages,
      cmlDropdown: cmlDropdown
    },

    props: {
      userName: {
        type: String,
        default: ''
      },
      userPassword: {
        type: String,
        default: ''
      },
      url: {
        type: String,
        default: 'http://localhost:3000'
      },
      title: {
        type: String,
        default: 'Camomile UI'
      }
    },

    computed: Object.assign({}, mapState({
        isLogged: function (state) { return state.user.isLogged; },
        popup: function (state) { return state.popup; }
      })),

    created: function created () {
      this.$store.commit('register', {
        url: this.url,
        title: this.title,
        user: {
          name: this.userName,
          password: this.userPassword
        }
      });
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var popupRemove = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(_vm.type !== 'annotations')?_c('div',{staticClass:"blobs"},[_vm._m(0),_vm._v(" "),_c('div',{staticClass:"blob-3-4"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.element.name),expression:"element.name"}],attrs:{"disabled":_vm.element.id,"type":"text","placeholder":"Name"},domProps:{"value":(_vm.element.name)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.element, "name", $event.target.value);}}})])]):_vm._e(),_vm._v(" "),(_vm.type === 'annotations')?_c('div',{staticClass:"blobs"},[_vm._m(1),_vm._v(" "),_c('div',{staticClass:"blob-3-4"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.element.id),expression:"element.id"}],attrs:{"disabled":_vm.element.id,"type":"text","placeholder":"Name"},domProps:{"value":(_vm.element.id)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.element, "id", $event.target.value);}}})])]):_vm._e(),_vm._v(" "),_c('div',{staticClass:"blobs"},[_c('div',{staticClass:"blob-1-4"}),_vm._v(" "),_c('div',{staticClass:"blob-3-4"},[_c('button',{staticClass:"btn-alt p-s full-x",on:{"click":_vm.remove,"keyup":function($event){if(!('button' in $event)&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.remove($event)}}},[_vm._v("Remove")])])])])},staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"blob-1-4"},[_c('h4',{staticClass:"pt-s mb-0"},[_vm._v("Name")])])},function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"blob-1-4"},[_c('h4',{staticClass:"pt-s mb-0"},[_vm._v("Id")])])}],
    name: 'CamomilePopupRemove',

    computed: Object.assign({}, mapState({
        element: function (state) { return state.popup.element; },
        type: function (state) { return state.popup.config.type; }
      })),

    created: function created () {
      document.addEventListener('keyup', this.keyup);
    },

    beforeDestroy: function beforeDestroy () {
      document.removeEventListener('keyup', this.keyup);
    },

    methods: {
      remove: function remove () {
        this.$store.dispatch(((this.type) + "/remove"), { id: this.element.id });
        this.$store.commit("popup/close");
      },
      keyup: function keyup (e) {
        if ((e.which || e.keyCode) === 13) {
          this.remove();
        }
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

































  var popupGroups = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:"blobs"},[_vm._m(0),_vm._v(" "),_c('div',{staticClass:"blob-3-4"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.user.name),expression:"user.name"}],attrs:{"type":"text","placeholder":"Name","disabled":"disabled"},domProps:{"value":(_vm.user.name)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.user, "name", $event.target.value);}}})])]),_vm._v(" "),_c('div',{staticClass:"blobs"},[_c('div',{staticClass:"blob-1"},[_c('h3',{staticClass:"mb-s"},[_vm._v("Groups")]),_vm._v(" "),_c('ul',{staticClass:"list-inline clearfix"},_vm._l((_vm.groups),function(group){return _c('li',{key:group.id,staticClass:"tag",class:{ active: _vm.groupActive(group.id) }},[_c('button',{staticClass:"btn px-m py-xs h5 pill",on:{"click":function($event){_vm.groupToggle(group);}}},[_vm._v(_vm._s(group.name))])])}))])])])},staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"blob-1-4"},[_c('h4',{staticClass:"pt-s mb-0"},[_vm._v("Name")])])}],
    name: 'CamomilePopupGroups',

    computed: {
      groups: function groups () {
        return this.$store.state.groups.list
      },
      user: function user () {
        var this$1 = this;

        return this.$store.state.users.list.find(
          function (u) { return u.id === this$1.$store.state.popup.element.id; }
        )
      }
    },

    methods: {
      groupToggle: function groupToggle (group) {
        if (this.groupActive(group.id)) {
          this.$store.dispatch('groups/userRemove', {
            userId: this.user.id,
            group: group
          });
        } else {
          this.$store.dispatch('groups/userAdd', {
            userId: this.user.id,
            group: group
          });
        }
      },
      groupActive: function groupActive (groupId) {
        return (
          this.groups
            .find(function (group) { return group.id === groupId; })
            .userIds.indexOf(this.user.id) !== -1
        )
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var users$1 = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.isAdmin)?_c('div',[_c('div',{staticClass:"flex flex-start"},[_c('h2',{staticClass:"mt-xs"},[_vm._v("Users")]),_vm._v(" "),_c('button',{staticClass:"btn-border flex-right px-s py-xs",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupAddConfig, element: { description: {}, role: 'user' } });}}},[_c('i',{staticClass:"icon-24 icon-24-plus"})])]),_vm._v(" "),_c('div',[_c('table',{staticClass:"table mb-0"},[_vm._m(0),_vm._v(" "),_vm._l((_vm.users),function(user){return _c('tr',{key:user.id},[_c('td',[_vm._v(_vm._s(user.name))]),_vm._v(" "),_c('td',[_vm._v(_vm._s(user.role))]),_vm._v(" "),_c('td',{staticClass:"text-right"},[_c('button',{staticClass:"btn-border p-s my--s h6",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupGroupsConfig, element: user });}}},[_vm._v("Groups")]),_vm._v(" "),_c('button',{staticClass:"btn-border p-s my--s h6",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupEditConfig, element: user });}}},[_vm._v("Edit")]),_vm._v(" "),(user.id !== _vm.userId)?_c('button',{staticClass:"btn-border p-s my--s h6",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupRemoveConfig, element: user });}}},[_vm._v("Remove")]):_vm._e()])])})],2)])]):_vm._e()},staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('tr',[_c('th',[_vm._v("Name")]),_c('th',[_vm._v("Role")]),_c('th')])}],
    name: 'CamomileUsers',

    data: function data () {
      return {
        popupEditConfig: {
          type: 'users',
          closeBtn: true,
          title: 'Edit user',
          component: popupEdit
        },
        popupAddConfig: {
          type: 'users',
          closeBtn: true,
          title: 'Add user',
          component: popupEdit
        },
        popupGroupsConfig: {
          closeBtn: true,
          title: 'User groups',
          component: popupGroups
        },
        popupRemoveConfig: {
          type: 'users',
          closeBtn: true,
          title: 'Remove user',
          component: popupRemove
        }
      }
    },

    computed: Object.assign({}, mapState({
        isAdmin: function (state) { return state.user.isAdmin; },
        users: function (state) { return state.users.list; },
        userId: function (state) { return state.user.id; }
      })),

    methods: {
      popupOpen: function popupOpen (ref) {
        var config = ref.config;
        var element = ref.element;

        return this.$store.commit('popup/open', { config: config, element: element })
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

































  var popupUsers = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:"blobs"},[_vm._m(0),_vm._v(" "),_c('div',{staticClass:"blob-3-4"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.group.name),expression:"group.name"}],attrs:{"type":"text","placeholder":"Name","disabled":"disabled"},domProps:{"value":(_vm.group.name)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.group, "name", $event.target.value);}}})])]),_vm._v(" "),_c('div',{staticClass:"blobs"},[_c('div',{staticClass:"blob-1"},[_c('h3',{staticClass:"pt-s mb-s"},[_vm._v("Users")]),_vm._v(" "),_c('ul',{staticClass:"list-inline"},_vm._l((_vm.users),function(user){return _c('li',{key:user.id,staticClass:"tag",class:{ active: _vm.userActive(user.id) }},[_c('button',{staticClass:"btn px-m py-xs h5 pill",on:{"click":function($event){_vm.userToggle(user.id);}}},[_vm._v(_vm._s(user.name))])])}))])])])},staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"blob-1-4"},[_c('h4',{staticClass:"pt-s mb-0"},[_vm._v("Name")])])}],
    name: 'CamomilePopupUsers',

    computed: {
      users: function users () {
        return this.$store.state.users.list
      },
      group: function group () {
        var this$1 = this;

        return this.$store.state.groups.list.find(
          function (g) { return g.id === this$1.$store.state.popup.element.id; }
        )
      }
    },

    methods: {
      userToggle: function userToggle (userId) {
        if (this.userActive(userId)) {
          this.$store.dispatch('groups/userRemove', {
            userId: userId,
            group: this.group
          });
        } else {
          this.$store.dispatch('groups/userAdd', {
            userId: userId,
            group: this.group
          });
        }
      },

      userActive: function userActive (userId) {
        return this.group.userIds.indexOf(userId) > -1
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var groups$1 = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.isAdmin)?_c('div',[_c('div',{staticClass:"flex flex-start"},[_c('h2',{staticClass:"mt-xs"},[_vm._v("Groups")]),_vm._v(" "),_c('button',{staticClass:"btn-border flex-right px-s py-xs",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupAddConfig, element: { description: {} } });}}},[_c('i',{staticClass:"icon-24 icon-24-plus"})])]),_vm._v(" "),_c('div',[_c('table',{staticClass:"table mb-0"},[_vm._m(0),_vm._v(" "),_vm._l((_vm.groups),function(group){return _c('tr',{key:group.id},[_c('td',[_vm._v(_vm._s(group.name))]),_vm._v(" "),_c('td',[_vm._v(_vm._s(group.userIds.length))]),_vm._v(" "),_c('td',{staticClass:"text-right"},[_c('button',{staticClass:"btn-border p-s my--s h6",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupUsersConfig, element: group });}}},[_vm._v("Users")]),_vm._v(" "),_c('button',{staticClass:"btn-border p-s my--s h6",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupEditConfig, element: group });}}},[_vm._v("Edit")]),_vm._v(" "),(_vm.isRoot)?_c('button',{staticClass:"btn-border p-s my--s h6",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupRemoveConfig, element: group });}}},[_vm._v("Remove")]):_vm._e()])])})],2)])]):_vm._e()},staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('tr',[_c('th',[_vm._v("Name")]),_c('th',[_vm._v("Users")]),_c('th')])}],
    name: 'CamomileGroups',

    data: function data () {
      return {
        popupRemoveConfig: {
          type: 'groups',
          closeBtn: true,
          title: 'Remove group',
          component: popupRemove
        },
        popupEditConfig: {
          type: 'groups',
          closeBtn: true,
          title: 'Edit group',
          component: popupEdit
        },
        popupAddConfig: {
          type: 'groups',
          closeBtn: true,
          title: 'Add group',
          component: popupEdit
        },
        popupUsersConfig: {
          closeBtn: true,
          title: 'Group users',
          component: popupUsers
        }
      }
    },

    computed: Object.assign({}, mapState({
        isAdmin: function (state) { return state.user.isAdmin; },
        groups: function (state) { return state.groups.list; },
        isRoot: function (state) { return state.user.isRoot; }
      })),

    methods: {
      popupOpen: function popupOpen (ref) {
        var config = ref.config;
        var element = ref.element;

        return this.$store.commit('popup/open', { config: config, element: element })
      },
      refresh: function refresh () {
        return this.$store.dispatch('groups/list')
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();





  var index$1 = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span')},staticRenderFns: [],
    name: 'CamomileCorpus',

    props: {
      uid: {
        type: String,
        default: 'default'
      }
    },

    created: function created () {
      this.$store.commit('corpus/register', this.uid);
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();


























  var permissionsEdit = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',{staticClass:"list-inline"},[_c('li',{staticClass:"tag",class:{ active: _vm.isActive(1) }},[_c('button',{staticClass:"btn px-s py-xs my--xs h5 mono pill",on:{"click":function($event){_vm.toggle(1);}}},[_vm._v("R")])]),_vm._v(" "),_c('li',{staticClass:"tag",class:{ active: _vm.isActive(2) }},[_c('button',{staticClass:"btn px-s py-xs my--xs h5 mono pill",on:{"click":function($event){_vm.toggle(2);}}},[_vm._v("W")])]),_vm._v(" "),_c('li',{staticClass:"tag",class:{ active: _vm.isActive(3) }},[_c('button',{staticClass:"btn px-s py-xs my--xs h5 mono pill",on:{"click":function($event){_vm.toggle(3);}}},[_vm._v("A")])])])},staticRenderFns: [],
    name: 'CamomilePopupPermissionsEdit',

    props: {
      element: {
        type: Object,
        default: function () { return ({}); }
      },
      type: {
        type: String,
        default: 'default'
      }
    },

    computed: {
      id: function id () {
        return this.$store.state.popup.element.id
      },
      uid: function uid () {
        return this.$store.state.popup.config.uid
      },
      permission: function permission () {
        var this$1 = this;

        return this.$store.state[((this.type) + "s")].lists[this.uid].find(
          function (r) { return r.id === this$1.id; }
        ).permissions[((this.element.type) + "s")][this.element.id]
      }
    },

    methods: {
      toggle: function toggle (permission) {
        var obj, obj$1;

        if (this.isActive(permission)) {
          this.$store.dispatch(
            ((this.type) + "s/" + (this.element.type) + "PermissionRemove"),
            ( obj = {
              id: this.id
            }, obj[((this.element.type) + "Id")] = this.element.id, obj)
          );
        } else {
          this.$store.dispatch(
            ((this.type) + "s/" + (this.element.type) + "PermissionSet"),
            ( obj$1 = {
              id: this.id
            }, obj$1[((this.element.type) + "Id")] = this.element.id, obj$1.permission = permission, obj$1)
          );
        }
      },
      isActive: function isActive (permission) {
        return this.permission === permission
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var popupPermissions = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:"blobs"},[_vm._m(0),_vm._v(" "),_c('div',{staticClass:"blob-3-4"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.resource.name),expression:"resource.name"}],attrs:{"type":"text","placeholder":"Name","disabled":"disabled"},domProps:{"value":(_vm.resource.name)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.resource, "name", $event.target.value);}}})]),_vm._v(" "),_c('div',{staticClass:"blob-1-2"},[_c('h3',{staticClass:"pt-s"},[_vm._v("Users")]),_vm._v(" "),_c('ul',{staticClass:"list-sans"},_vm._l((_vm.users),function(user){return _c('li',{key:user.id},[_c('div',{staticClass:"blobs"},[_c('div',{staticClass:"blob-1-2 mb-s"},[_vm._v(" "+_vm._s(user.name)+" ")]),_vm._v(" "),_c('div',{staticClass:"blob-1-2 mb-s"},[_c('permissions-edit',{attrs:{"type":_vm.type.slice(0, -1),"element":{ id: user.id, type: 'user' }}})],1)])])}))]),_vm._v(" "),_c('div',{staticClass:"blob-1-2"},[_c('h3',{staticClass:"pt-s"},[_vm._v("Groups")]),_vm._v(" "),_c('ul',{staticClass:"list-sans"},_vm._l((_vm.groups),function(group){return _c('li',{key:group.id},[_c('div',{staticClass:"blobs"},[_c('div',{staticClass:"blob-1-2 mb-s"},[_vm._v(" "+_vm._s(group.name)+" ")]),_vm._v(" "),_c('div',{staticClass:"blob-1-2 mb-s"},[_c('permissions-edit',{attrs:{"type":_vm.type.slice(0, -1),"element":{ id: group.id, type: 'group'}}})],1)])])}))])])])},staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"blob-1-4"},[_c('h4',{staticClass:"pt-s"},[_vm._v("Name")])])}],
    name: 'CamomilePermissions',

    components: {
      permissionsEdit: permissionsEdit
    },

    computed: Object.assign({}, mapState({
        resource: function (state) { return state.popup.element; },
        users: function (state) { return state.users.list; },
        groups: function (state) { return state.groups.list; },
        type: function (state) { return state.popup.config.type; }
      }))
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var list = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:"flex flex-start"},[_c('h2',{staticClass:"mt-xs"},[_vm._v("Corpora")]),_vm._v(" "),(_vm.isAdmin)?_c('button',{staticClass:"btn-border flex-right px-s py-xs",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupAddConfig, element: { id: null, description: {} } });}}},[_c('i',{staticClass:"icon-24 icon-24-plus"})]):_vm._e()]),_vm._v(" "),(_vm.corpus && _vm.corpus.length > 0)?_c('div',[_c('table',{staticClass:"table mb-0"},[_vm._m(0),_vm._v(" "),_vm._l((_vm.corpus),function(corpu){return _c('tr',{key:corpu.id},[_c('td',[_c('input',{attrs:{"type":"radio"},domProps:{"value":corpu.id,"checked":corpu.id === _vm.corpuId},on:{"change":_vm.set}})]),_vm._v(" "),_c('td',[_vm._v(_vm._s(corpu.name))]),_vm._v(" "),_c('td',{staticClass:"text-right"},[(corpu.permission === 3)?_c('button',{staticClass:"btn-border p-s my--s h6",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupPermissionsConfig, element: corpu });}}},[_vm._v("Permissions")]):_vm._e(),_vm._v(" "),(corpu.permission === 3)?_c('button',{staticClass:"btn-border p-s my--s h6",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupEditConfig, element: corpu });}}},[_vm._v("Edit")]):_vm._e(),_vm._v(" "),(_vm.isAdmin && corpu.permission === 3)?_c('button',{staticClass:"btn-border p-s my--s h6",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupRemoveConfig, element: corpu });}}},[_vm._v("Remove")]):_vm._e()])])})],2)]):_vm._e()])},staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('tr',[_c('th'),_c('th',[_vm._v("Name")]),_c('th')])}],
    name: 'CamomileCorpusList',

    props: {
      uid: {
        type: String,
        default: 'default'
      }
    },

    data: function data () {
      return {
        popupEditConfig: {
          type: 'corpus',
          closeBtn: true,
          title: 'Edit corpus',
          component: popupEdit
        },
        popupAddConfig: {
          type: 'corpus',
          closeBtn: true,
          title: 'Add corpus',
          component: popupEdit
        },
        popupRemoveConfig: {
          type: 'corpus',
          closeBtn: true,
          title: 'Remove corpus',
          component: popupRemove
        },
        popupPermissionsConfig: {
          type: 'corpus',
          closeBtn: true,
          title: 'Corpus permissions',
          component: popupPermissions,
          uid: this.uid
        }
      }
    },

    computed: {
      corpus: function corpus () {
        return this.$store.state.corpus.lists[this.uid]
      },
      corpuId: function corpuId () {
        return this.$store.state.corpus.actives[this.uid]
      },
      isAdmin: function isAdmin () {
        return this.$store.state.user.isAdmin
      }
    },

    methods: {
      popupOpen: function popupOpen (ref) {
        var config = ref.config;
        var element = ref.element;

        this.$store.commit('popup/open', { config: config, element: element });
      },
      set: function set (e) {
        this.$store.dispatch('corpus/set', {
          id: e.target.value,
          uid: this.uid
        });
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();





  var index$2 = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span')},staticRenderFns: [],
    name: 'CamomileMedias',

    props: {
      uid: {
        type: String,
        default: 'default'
      },
      corpusUid: {
        type: String,
        default: 'default'
      }
    },

    created: function created () {
      this.$store.commit('medias/register', { uid: this.uid, corpuUid: this.corpusUid });
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var list$1 = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:"flex flex-start"},[_c('h2',{staticClass:"mt-xs"},[_vm._v("Media")]),_vm._v(" "),(_vm.corpuPermission === 3)?_c('button',{staticClass:"btn-border flex-right px-s py-xs",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupAddConfig, element: _vm.mediaNew });}}},[_c('i',{staticClass:"icon-24 icon-24-plus"})]):_vm._e()]),_vm._v(" "),(_vm.medias && _vm.medias.length > 0)?_c('div',[_c('table',{staticClass:"table mb-0"},[_vm._m(0),_vm._v(" "),_vm._l((_vm.medias),function(media){return _c('tr',{key:media.id},[_c('td',[_c('input',{attrs:{"type":"radio"},domProps:{"value":media.id,"checked":media.id === _vm.mediaId},on:{"change":_vm.setEvent}})]),_vm._v(" "),_c('td',[_vm._v(_vm._s(media.name))]),_vm._v(" "),_c('td',{staticClass:"text-right"},[(_vm.corpuPermission === 3)?_c('button',{staticClass:"btn-border p-s my--s h6",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupEditConfig, element: media });}}},[_vm._v("Edit")]):_vm._e(),_vm._v(" "),(_vm.corpuPermission === 3)?_c('button',{staticClass:"btn-border p-s my--s h6",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupRemoveConfig, element: media });}}},[_vm._v("Remove")]):_vm._e()])])})],2)]):_vm._e()])},staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('tr',[_c('th'),_c('th',[_vm._v("Name")]),_c('th')])}],
    name: 'CamomileMediasList',

    props: {
      uid: {
        type: String,
        default: 'default'
      }
    },

    data: function data () {
      return {
        popupEditConfig: {
          type: 'medias',
          closeBtn: true,
          title: 'Edit medium',
          component: popupEdit
        },
        popupAddConfig: {
          type: 'medias',
          closeBtn: true,
          title: 'Add medium',
          component: popupEdit
        },
        popupRemoveConfig: {
          type: 'medias',
          closeBtn: true,
          title: 'Remove medium',
          component: popupRemove
        }
      }
    },

    computed: {
      corpuUid: function corpuUid () {
        return this.$store.state.medias.actives[this.uid].corpuUid
      },
      corpuId: function corpuId () {
        return this.$store.state.corpus.actives[this.corpuUid]
      },
      mediaId: function mediaId () {
        return this.$store.state.medias.actives[this.uid].id
      },
      medias: function medias () {
        return this.$store.state.medias.lists[this.corpuUid]
      },
      mediaActive: function mediaActive () {
        return this.$store.state.medias.actives[this.uid]
      },
      corpuPermission: function corpuPermission () {
        return this.$store.getters['corpus/permission'](this.corpuUid)
      },
      mediaNew: function mediaNew () {
        return { id: null, corpuId: this.corpuId, description: this.mediaActive.description }
      }
    },

    methods: {
      popupOpen: function popupOpen (ref) {
        var config = ref.config;
        var element = ref.element;

        return this.$store.commit('popup/open', { config: config, element: element })
      },
      setEvent: function setEvent (e) {
        this.set(e.target.value);
      },
      set: function set (id) {
        this.$store.dispatch('medias/set', {
          id: id,
          corpuUid: this.corpuUid,
          uid: this.uid
        });
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();







  var spinner = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)},staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"spinner"},[_c('div',{staticClass:"bounce1"}),_vm._v(" "),_c('div',{staticClass:"bounce2"}),_vm._v(" "),_c('div',{staticClass:"bounce3"})])}],
    name: 'CamomileUtilsSpinner'
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var youtube = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.media)?_c('div',{ref:"container"},[_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.isLoaded),expression:"isLoaded"}]},[_c('div',{attrs:{"id":"player"}})]),_vm._v(" "),(!_vm.isLoaded)?_c('spinner'):_vm._e()],1):_vm._e()},staticRenderFns: [],
    name: 'CamomileMediaYoutube',

    components: {
      spinner: spinner
    },

    props: {
      uid: {
        type: String,
        default: 'default'
      }
    },

    data: function data () {
      return {
        player: null,
        videoNew: false,
        description: {
          type: "youtube"
        }
      }
    },

    computed: {
      media: function media () {
        return this.$store.getters['medias/filter'](this.uid, this.filter)
      },
      properties: function properties () {
        return this.$store.getters['medias/properties'](this.uid, this.filter)
      },
      isPlaying: function isPlaying () {
        return this.properties.isPlaying || false
      },
      isLoaded: function isLoaded () {
        return this.properties.isLoaded || false
      },
      seek: function seek () {
        return this.properties.seek || {}
      },
      timeCurrent: function timeCurrent () {
        return this.properties.timeCurrent || 0
      },
      viewportWidth: function viewportWidth () {
        return this.$store.state.viewport.width || 0
      }
    },

    watch: {
      isPlaying: function isPlaying (val) {
        if (val) {
          this.player.playVideo();
        } else {
          this.player.pauseVideo();
        }
      },
      seek: function seek (options) {
        if (options.seeking) {
          this.videoSeek(options.serverRequest);
        }
      },
      viewportWidth: function viewportWidth () {
        if (this.media) {
          var width = this.$refs.container.offsetWidth;
          var height = width * 9 / 16;
          this.player.setSize(width, height);
        }
      },
      media: function media (media$1, mediaOld) {
        if (
          media$1 &&
          media$1.url &&
          mediaOld &&
          mediaOld.url &&
          media$1.url !== mediaOld.url
        ) {
          this.videoLoad(media$1.url);
        }
      }
    },

    created: function created () {
      this.$store.commit('medias/descriptionRegister', {
        uid: this.uid,
        description: this.description
      });
    },

    mounted: function mounted () {
      if (this.media && this.media.url) {
        this.playerLoad(this.media.url);
      }
    },

    beforeDestroy: function beforeDestroy () {
      if (this.player !== null && this.player.destroy) {
        this.player.destroy();
      }

      this.player = null;
    },

    methods: {
      filter: function filter (media) {
        return media &&
          media.description &&
          media.description.type && media.description.type === 'youtube' && media
      },
      videoLoad: function videoLoad (mediaUrl) {
        if (this.player) {
          var videoId = this.parseYouTubeId(mediaUrl);
          this.player.loadVideoById(videoId);
        } else {
          this.playerLoad(this.media.url);
        }
      },

      playerLoad: function playerLoad (mediaUrl) {
        var this$1 = this;

        var videoId = this.parseYouTubeId(mediaUrl);
        var width = this.$refs.container.offsetWidth;
        var height = width * 9 / 16;
        var events = {
          onReady: function (event) {
            // console.log('onReady', event)
            this$1.$store.commit('medias/loaded', {
              isLoaded: true,
              uid: this$1.uid
            });
            this$1.$store.commit('medias/timeTotal', {
              time: this$1.player.getDuration() * 1000,
              uid: this$1.uid
            });
          },
          onStateChange: function (event) {
            // console.log('onStateChange', event.data, this.videoNew)
            if (event.data === -1) {
              // unstarted
            } else if (event.data === 1) {
              // playing
              if (this$1.videoNew) {
                this$1.videoNew = false;
                this$1.$store.commit('medias/loaded', {
                  isLoaded: true,
                  uid: this$1.uid
                });
                this$1.$store.commit('medias/timeTotal', {
                  time: this$1.player.getDuration() * 1000,
                  uid: this$1.uid
                });
                this$1.player.pauseVideo();
              } else {
                this$1.$store.dispatch('medias/play', { uid: this$1.uid });
              }
            } else if (event.data === 2) {
              // paused
              this$1.$store.dispatch('medias/pause', { uid: this$1.uid });
            } else if (event.data === 3) {
              // buffering
              this$1.$store.dispatch('medias/buffering', { uid: this$1.uid });
            } else if (event.data === 0) {
              // ended
              this$1.$store.dispatch('medias/stop', { uid: this$1.uid });
            } else if (event.data === 5) {
              // cued
              this$1.$store.commit('medias/loaded', {
                isLoaded: true,
                uid: this$1.uid
              });
              this$1.$store.commit('medias/timeTotal', {
                time: this$1.player.getDuration() * 1000,
                uid: this$1.uid
              });
            }
          },
          onApiChange: function (event) {
            // console.log('onApiChange', event, this.isLoaded)
            if (!this$1.isLoaded) {
              this$1.videoNew = true;
            }
          }
        };
        var playerVars = {
          autoplay: 0,
          controls: 0,
          modestbranding: 1,
          rel: 0,
          showinfo: 0,
          iv_load_policy: 3,
          enablejsapi: 1,
          disablekb: 1
        };

        var tag = document.createElement('script');
        var scriptTags = document.getElementsByTagName('script');
        var scriptTagLast = scriptTags[scriptTags.length - 1];

        tag.src = 'https://www.youtube.com/iframe_api';
        scriptTagLast.parentNode.insertBefore(tag, scriptTagLast.nextSibling);

        // @ts-ignore
        window.onYouTubeIframeAPIReady = function () {
          /* global YT */
          // @ts-ignore
          this$1.player = new YT.Player('player', {
            width: width,
            height: height,
            videoId: videoId,
            playerVars: playerVars,
            events: events
          });
        };
      },
      videoSeek: function videoSeek (serverRequest) {
        this.player.seekTo(this.timeCurrent / 1000, serverRequest);
        this.$store.commit('medias/seek', {
          options: { seeking: false },
          uid: this.uid
        });
      },
      parseYouTubeId: function parseYouTubeId (url) {
        var regex = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
        return url.match(regex) ? RegExp.$2 : url
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var video = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.media)?_c('div',{ref:"container"},[_c('video',{directives:[{name:"show",rawName:"v-show",value:(_vm.isLoaded),expression:"isLoaded"}],ref:"video",staticClass:"object-fit",attrs:{"id":"bgvid"},on:{"ended":_vm.videoEnded,"click":_vm.videoToggle,"play":_vm.buttonToggle,"pause":_vm.buttonToggle,"timeupdate":_vm.videoTimeupdate,"canplay":_vm.videoLoad}},[_c('source',{attrs:{"src":_vm.media.url,"type":"video/mp4"}})]),_vm._v(" "),(!_vm.isLoaded)?_c('spinner'):_vm._e()],1):_vm._e()},staticRenderFns: [],
    name: 'CamomileMediaVideo',

    components: {
      spinner: spinner
    },

    props: {
      uid: {
        type: String,
        default: 'default'
      }
    },

    data: function data () {
      return {
        mousedown: false,
        videoLoaded: false,
        timeTotal: 0,
        description: {
          type: 'video'
        }
      }
    },

    computed: {
      media: function media () {
        return this.$store.getters['medias/filter'](this.uid, this.filter)
      },
      properties: function properties () {
        return this.$store.getters['medias/properties'](this.uid, this.filter)
      },
      isPlaying: function isPlaying () {
        return this.properties.isPlaying || false
      },
      isLoaded: function isLoaded () {
        return this.properties.isLoaded || false
      },
      seek: function seek () {
        return this.properties.seek || {}
      },
      timeCurrent: function timeCurrent () {
        return this.properties.timeCurrent || 0
      },
      viewportWidth: function viewportWidth () {
        return this.$store.state.viewport.width || 0
      }
    },

    watch: {
      isPlaying: function isPlaying (val) {
        if (val) {
          this.$refs.video.play();
        } else {
          this.$refs.video.pause();
        }
      },
      seek: function seek (options) {
        if (options.seeking) {
          this.videoSeek();
        }
      },
      viewportWidth: function viewportWidth () {
        var width = this.$refs.container.offsetWidth;
      },
      media: function media (media$1, mediaOld) {
        if (
          media$1 &&
          media$1.url &&
          mediaOld &&
          mediaOld.url &&
          media$1.url !== mediaOld.url
        ) {
          this.videoLoad();
        }
      }
    },

    created: function created () {
      this.$store.commit('medias/descriptionRegister', {
        uid: this.uid,
        description: this.description
      });
    },

    methods: {
      filter: function filter (media) {
        return media &&
          media.description &&
          media.description.type && media.description.type === 'video' && media
      },
      videoEnded: function videoEnded () {
        this.$store.dispatch('medias/stop', { uid: this.uid });
      },
      videoToggle: function videoToggle () {
        if (this.$refs.video.paused) {
          this.$refs.video.play();
        } else {
          this.$refs.video.pause();
        }
      },
      buttonToggle: function buttonToggle () {
        if (this.$refs.video.paused) {
          this.$store.dispatch('medias/pause', { uid: this.uid });
        } else {
          this.$store.dispatch('medias/play', { uid: this.uid });
        }
      },
      videoTimeupdate: function videoTimeupdate () {
        if (this.$refs.video) {
          var percent =
            this.$refs.video.currentTime / this.$refs.video.duration * 100;
        }
      },
      videoSeek: function videoSeek (e) {
        this.$refs.video.currentTime = this.timeCurrent / 1000;
      },
      videoLoad: function videoLoad () {
        this.$store.commit('medias/loaded', {
          isLoaded: true,
          uid: this.uid
        });

        this.$store.commit('medias/timeTotal', {
          time: this.$refs.video.duration * 1000,
          uid: this.uid
        });
        this.$refs.video.volume = 0;
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();





























  var controller = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"mediacontroller"},[_c('div',{staticClass:"mediacontroller-controls clearfix pb-s"},[_c('button',{ref:"button",staticClass:"mediacontroller-button btn-alt",attrs:{"disabled":!_vm.isLoaded},on:{"click":_vm.mediaToggle}},[_vm._v(_vm._s(_vm.playButton))]),_vm._v(" "),_c('div',{ref:"counter",staticClass:"mediacontroller-counter"},[_vm._v(_vm._s(_vm.msToMinutesAndSeconds(_vm.timeCurrent))+" / "+_vm._s(_vm.msToMinutesAndSeconds(_vm.timeTotal))+" ")])]),_vm._v(" "),_c('div',{ref:"progress",staticClass:"mediacontroller-progress",class:{ loaded: _vm.isLoaded },on:{"mousedown":function($event){_vm.progressMousedown($event);}}},[_c('div',{staticClass:"pointer-none full-y bg-bg"},[_c('div',{staticClass:"mediacontroller-progress-bar",style:({ width: _vm.progressBarWidth })})])])])},staticRenderFns: [],
    props: {
      mediaUid: {
        type: String,
        default: 'default'
      }
    },

    data: function data () {
      return {
        mousedown: false
      }
    },

    computed: {
      properties: function properties () {
        return this.$store.state.medias.properties[this.mediaUid] || {}
      },
      timeCurrent: function timeCurrent () {
        return this.properties.timeCurrent || 0
      },
      timeTotal: function timeTotal () {
        return this.properties.timeTotal || 0
      },
      playButton: function playButton () {
        return (this.properties.isPlaying && '❚ ❚') || '►'
      },
      isLoaded: function isLoaded () {
        return this.properties.isLoaded || false
      },
      progressBarWidth: function progressBarWidth () {
        return this.timeTotal ? ((this.timeCurrent / this.timeTotal * 100) + "%") : 0
      }
    },

    methods: {
      mediaToggle: function mediaToggle () {
        if (this.properties.isPlaying) {
          this.$store.commit('medias/pause', { uid: this.mediaUid });
        } else {
          this.$store.commit('medias/play', { uid: this.mediaUid });
        }
      },
      progressMousemove: function progressMousemove (e) {
        var x;
        if (e.clientX - this.$refs.progress.offsetLeft < 0) {
          x = 0;
        } else if (
          e.clientX >
          this.$refs.progress.offsetLeft + this.$refs.progress.offsetWidth
        ) {
          x = 1;
        } else {
          x =
            (e.clientX - this.$refs.progress.offsetLeft) /
            this.$refs.progress.offsetWidth;
        }
        this.seek(x, false);
      },
      progressMousedown: function progressMousedown (e) {
        document.addEventListener('mousemove', this.progressMousemove);
        document.addEventListener('mouseup', this.progressMouseup);
        this.progressMousemove(e);
      },
      progressMouseup: function progressMouseup () {
        document.removeEventListener('mousemove', this.progressMousemove);
        document.removeEventListener('mouseup', this.progressMouseup);
      },
      seek: function seek (ratio, serverRequest, uid) {
        if (this.properties.isLoaded) {
          this.$store.dispatch('medias/seek', {
            ratio: ratio,
            serverRequest: serverRequest,
            uid: this.mediaUid
          });
        }
      },
      msToMinutesAndSeconds: function msToMinutesAndSeconds (ms) {
        var minutes = Math.floor(ms / 60000);
        var seconds = (ms % 60000) / 1000;
        return minutes + ':' + (seconds < 10 ? '0' : '') + seconds.toFixed(0)
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();





  var index$3 = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span')},staticRenderFns: [],
    name: 'CamomileLayers',

    props: {
      uid: {
        type: String,
        default: 'default'
      },
      corpusUid: {
        type: String,
        default: 'default'
      }
    },

    created: function created () {
      this.$store.commit('layers/register', {
        uid: this.uid,
        corpuUid: this.corpusUid
      });
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var list$2 = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:"flex flex-start"},[_c('h2',{staticClass:"mt-xs"},[_vm._v("Layers")]),_vm._v(" "),(_vm.corpuPermission === 3)?_c('button',{staticClass:"btn-border flex-right px-s py-xs",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupAddConfig, element: _vm.layerNew });}}},[_c('i',{staticClass:"icon-24 icon-24-plus"})]):_vm._e()]),_vm._v(" "),(_vm.layers && _vm.layers.length > 0)?_c('div',[_c('table',{staticClass:"table mb-0"},[_vm._m(0),_vm._v(" "),_vm._l((_vm.layers),function(layer){return _c('tr',{key:layer.id},[_c('td',[_c('input',{attrs:{"type":"checkbox"},domProps:{"value":layer.id,"checked":_vm.activeIds.indexOf(layer.id) !== -1},on:{"change":_vm.set}})]),_vm._v(" "),_c('td',[_vm._v(_vm._s(layer.name))]),_vm._v(" "),_c('td',{staticClass:"text-right"},[(layer.permission === 3)?_c('button',{staticClass:"btn-border p-s my--s h6",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupPermissionsConfig, element: layer });}}},[_vm._v("Permissions")]):_vm._e(),_vm._v(" "),(layer.permission === 3)?_c('button',{staticClass:"btn-border p-s my--s h6",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupEditConfig, element: layer });}}},[_vm._v("Edit")]):_vm._e(),_vm._v(" "),(layer.permission === 3)?_c('button',{staticClass:"btn-border p-s my--s h6",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupRemoveConfig, element: layer });}}},[_vm._v("Remove")]):_vm._e()])])})],2)]):_vm._e()])},staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('tr',[_c('th'),_c('th',[_vm._v("Name")]),_c('th')])}],
    name: 'CamomileLayersList',

    props: {
      uid: {
        type: String,
        default: 'default'
      }
    },

    data: function data () {
      return {
        popupEditConfig: {
          type: 'layers',
          closeBtn: true,
          title: 'Edit layer',
          component: popupEdit
        },
        popupAddConfig: {
          type: 'layers',
          closeBtn: true,
          title: 'Edit layer',
          component: popupEdit
        },
        popupRemoveConfig: {
          type: 'layers',
          closeBtn: true,
          title: 'Remove layer',
          component: popupRemove
        },
        popupPermissionsConfig: {
          type: 'layers',
          closeBtn: true,
          title: 'Layer permissions',
          component: popupPermissions,
          uid: this.corpuUid
        }
      }
    },

    computed: {
      corpuUid: function corpuUid () {
        return this.$store.state.layers.actives[this.uid].corpuUid
      },
      layers: function layers () {
        return this.$store.state.layers.lists[this.corpuUid]
      },
      layersActive: function layersActive () {
        return this.$store.state.layers.actives[this.uid]
      },
      activeIds: function activeIds () {
        return this.$store.getters['layers/activeIds'](this.uid)
      },
      corpus: function corpus () {
        return this.$store.state.corpus.lists[this.corpuUid]
      },
      corpuId: function corpuId () {
        return this.$store.state.corpus.actives[this.corpuUid]
      },
      corpuPermission: function corpuPermission () {
        return this.$store.getters['corpus/permission'](this.corpuUid)
      },
      layerNew: function layerNew () {
        return { id: null, corpuId: this.corpuId, description: {}, metadataType: this.layersActive.metadataType, fragmentType: this.layersActive.fragmentType }
      }
    },

    methods: {
      popupOpen: function popupOpen (ref) {
        var config = ref.config;
        var element = ref.element;

        return this.$store.commit('popup/open', { config: config, element: element })
      },
      set: function set (e) {
        if (e.target.checked) {
          this.$store.dispatch('layers/set', {
            id: e.target.value,
            uid: this.uid
          });
        } else {
          this.$store.dispatch('layers/unset', {
            id: e.target.value,
            uid: this.uid
          });
        }
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var add$2 = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('h2',[_vm._v("Layers")]),_vm._v(" "),(_vm.corpuPermission === 3)?_c('button',{staticClass:"btn px-s py-xs",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupAddConfig, element: _vm.layerNew });}}},[_c('i',{staticClass:"icon-24 icon-24-plus"})]):_vm._e()])},staticRenderFns: [],
    name: 'CamomileLayers',

    props: {
      uid: {
        type: String,
        default: 'default'
      }
    },

    data: function data () {
      return {
        popupAddConfig: {
          type: 'layers',
          closeBtn: true,
          title: 'Edit layer',
          component: popupEdit
        }
      }
    },

    computed: {
      corpuUid: function corpuUid () {
        return this.$store.state.layers.actives[this.uid].corpuUid
      },
      corpuPermission: function corpuPermission () {
        return this.$store.getters['corpus/permission'](this.corpuUid)
      },
      corpuId: function corpuId () {
        return this.$store.state.corpus.actives[this.corpuUid]
      },
      layersActive: function layersActive () {
        return this.$store.state.layers.actives[this.uid]
      },
      layerNew: function layerNew () {
        return { id: null, corpuId: this.corpuId, description: {}, metadataType: this.layersActive.metadataType, fragmentType: this.layersActive.fragmentType }
      }
    },

    methods: {
      popupOpen: function popupOpen (ref) {
        var config = ref.config;
        var element = ref.element;

        return this.$store.commit('popup/open', { config: config, element: element })
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();






  var index$4 = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span')},staticRenderFns: [],
    name: 'CamomileAnnotations',

    props: {
      mediaUid: {
        type: String,
        default: 'default'
      },
      layersUid: {
        type: String,
        default: 'default'
      },
      uid: {
        type: String,
        default: 'default'
      }
    },

    created: function created () {
      this.$store.commit('annotations/register', {
        uid: this.uid,
        mediaUid: this.mediaUid,
        layersUid: this.layersUid
      });
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var annotationsLayerDetail = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('tr',{class:{ 'bg-alt': _vm.disabled }},[_c('td',[_c('input',{attrs:{"disabled":_vm.disabled,"type":"radio"},domProps:{"value":_vm.annotation.id,"checked":_vm.activeId && _vm.activeId === _vm.annotation.id},on:{"change":function($event){_vm.set($event);}}})]),_vm._v(" "),_c('td',[_c('span',{staticClass:"h6 bold bg-neutral color-bg py-xxs px-xs rnd"},[_vm._v("…"+_vm._s(_vm._f("stringEnd")(_vm.annotation.id)))])]),_vm._v(" "),_c('td',[_vm._v(_vm._s(_vm.mediaName))]),_vm._v(" "),_c('td',{staticClass:"text-right"},[(_vm.layerPermission === 3)?_c('button',{staticClass:"btn-border p-s my--s h6",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupEditConfig, element: _vm.annotation });}}},[_vm._v("Edit")]):_vm._e(),_vm._v(" "),(_vm.layerPermission === 3)?_c('button',{staticClass:"btn-border p-s my--s h6",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupRemoveConfig, element: _vm.annotation });}}},[_vm._v("Remove")]):_vm._e()])])},staticRenderFns: [],
    name: 'CamomileAnnotations',

    props: {
      uid: {
        type: String,
        default: 'default'
      },
      annotation: {
        type: Object,
        default: function () { return ({}); }
      },
      disabled: {
        type: Boolean,
        default: true
      },
      layerPermission: {
        type: Number,
        default: 0
      },
      mediaName: {
        type: String,
        default: 'hash'
      },
      mediaId: {
        type: String,
        default: 'hash'
      },
      activeId: {
        type: String,
        default: 'hash'
      }
    },

    data: function data () {
      return {
        popupEditConfig: {
          type: 'annotations',
          closeBtn: true,
          title: 'Edit annotation',
          component: popupEdit
        },
        popupRemoveConfig: {
          type: 'annotations',
          closeBtn: true,
          title: 'Remove annotation',
          component: popupRemove
        }
      }
    },

    methods: {
      popupOpen: function popupOpen (ref) {
        var config = ref.config;
        var element = ref.element;

        return this.$store.commit('popup/open', { config: config, element: element })
      },
      set: function set (e) {
        if (e.target.checked) {
          this.$store.commit('annotations/set', {
            id: e.target.value,
            uid: this.uid
          });
        } else {
          this.$store.commit('annotations/unset', {
            id: e.target.value,
            uid: this.uid
          });
        }
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var annotationsLayer = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:"flex flex-start"},[_c('h2',{staticClass:"mt-s"},[_vm._v(_vm._s(_vm.layer.name))]),_vm._v(" "),(_vm.layer.permission === 3)?_c('button',{staticClass:"btn-border flex-right px-s py-xs",on:{"click":function($event){_vm.popupOpen({ config: _vm.popupAddConfig, element: { id: null, layerId: _vm.layer.id, mediaId: _vm.mediaId, fragment: _vm.layer.fragmentType, metadata: _vm.layer.metadataType } });}}},[_c('i',{staticClass:"icon-24 icon-24-plus"})]):_vm._e()]),_vm._v(" "),_c('table',{staticClass:"table mb-0"},[_vm._m(0),_vm._v(" "),_vm._l((_vm.annotations),function(annotation){return _c('annotations-layer-detail',{key:annotation.id,attrs:{"annotation":annotation,"disabled":_vm.annotationsFiltered.findIndex(function (a) { return a.id === annotation.id; }) === -1,"uid":_vm.uid,"layer-permission":_vm.layer.permission,"media-name":_vm.mediaName,"media-id":_vm.mediaId,"active-id":_vm.activeId}})})],2)])},staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('tr',[_c('th'),_c('th',[_vm._v("Id")]),_c('th',[_vm._v("Medium")]),_c('th')])}],
    name: 'CamomileLayers',

    components: {
      annotationsLayerDetail: annotationsLayerDetail
    },

    props: {
      uid: {
        type: String,
        default: 'default'
      },
      layer: {
        type: Object,
        default: function () { return ({}); }
      },
      annotations: {
        type: Array,
        default: function () { return []; }
      },
      annotationsFiltered: {
        type: Array,
        default: function () { return []; }
      },
      activeId: {
        type: String,
        default: 'hash'
      },
      mediaId: {
        type: String,
        default: 'hash'
      },
      mediaName: {
        type: String,
        default: 'hash'
      }
    },

    data: function data () {
      return {
        popupAddConfig: {
          type: 'annotations',
          closeBtn: true,
          title: 'Add annotation',
          component: popupEdit
        }
      }
    },

    methods: {
      popupOpen: function popupOpen (ref) {
        var config = ref.config;
        var element = ref.element;

        return this.$store.commit('popup/open', { config: config, element: element })
      },
      set: function set (e, layerId) {
        if (e.target.checked) {
          this.$store.commit('annotations/set', {
            id: e.target.value,
            uid: this.uid
          });
        } else {
          this.$store.commit('annotations/unset', {
            id: e.target.value,
            uid: this.uid
          });
        }
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var list$3 = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_vm._m(0),_vm._v(" "),_vm._l((_vm.layers),function(layer){return (_vm.annotations[layer.id])?_c('annotations-layer',{key:layer.id,staticClass:"mt",attrs:{"layer":layer,"annotations":_vm.annotations[layer.id],"annotations-filtered":_vm.annotationsFiltered[layer.id],"active-id":_vm.activeId,"media-id":_vm.mediaId,"media-name":_vm.mediaName}}):_vm._e()})],2)},staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"flex flex-start"},[_c('h2',{staticClass:"mt-xs"},[_vm._v("Annotations")])])}],
    name: 'CamomileAnnotationsList',

    components: {
      annotationsLayer: annotationsLayer
    },

    props: {
      uid: {
        type: String,
        default: 'default'
      }
    },

    computed: {
      annotations: function annotations () {
        return this.$store.getters['annotations/lists'](this.uid)
      },
      annotationsFiltered: function annotationsFiltered () {
        return this.$store.getters['annotations/filtered'](this.uid)
      },
      activeId: function activeId () {
        return this.$store.state.annotations.actives[this.uid] || null
      },
      mediaUid: function mediaUid () {
        return this.$store.state.annotations.lists[this.uid].mediaUid
      },
      layersUid: function layersUid () {
        return this.$store.state.annotations.lists[this.uid].layersUid
      },
      layers: function layers () {
        return this.$store.getters['layers/actives'](this.layersUid)
      },
      mediaId: function mediaId () {
        return this.$store.state.medias.actives[this.mediaUid].id
      },
      mediaName: function mediaName () {
        var media = this.$store.getters['medias/active'](this.mediaUid);
        return media ? media.name : ''
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var popupAnnotationLabel = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:"blobs"},[_vm._m(0),_vm._v(" "),_c('div',{staticClass:"blob-3-4"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.element.metadata.label),expression:"element.metadata.label"}],ref:"label",attrs:{"type":"text","placeholder":"Label"},domProps:{"value":(_vm.element.metadata.label)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.element.metadata, "label", $event.target.value);}}})])]),_vm._v(" "),_c('div',{staticClass:"blobs"},[_c('div',{staticClass:"blob-1-4"}),_vm._v(" "),_c('div',{staticClass:"blob-3-4"},[_c('button',{staticClass:"btn-alt p-s full-x",attrs:{"disabled":!_vm.element.name && _vm.type !== 'annotations'},on:{"click":_vm.save,"keyup":function($event){if(!('button' in $event)&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.save($event)}}},[_vm._v("Save")]),_vm._v(" "),(_vm.error)?_c('div',{staticClass:"p-s bg-error color-bg italic mt"},[_vm._v(_vm._s(_vm.error))]):_vm._e()])])])},staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"blob-1-4"},[_c('h4',{staticClass:"pt-s mb-0"},[_vm._v("Label")])])}],
    name: 'CamomileAnnotationsPopupEdit',

    data: function data () {
      return {
        error: null
      }
    },

    computed: Object.assign({}, mapState({
        element: function (state) { return state.popup.element; },
        type: function (state) { return state.popup.config.type; },
        rolesPermission: function (state) { return state.user.id !== state.popup.element.id; }
      })),

    created: function created () {
      document.addEventListener('keyup', this.keyup);
    },

    mounted: function mounted () {
      this.$refs.label.focus();
    },

    beforeDestroy: function beforeDestroy () {
      document.removeEventListener('keyup', this.keyup);
    },

    methods: {
      save: function save () {
        if (this.element.metadata.label !== '') {
          this.$store.dispatch('annotations/add', { element: this.element });
          this.$store.commit('popup/close');
        } else {
          this.error = 'Fill in the label.';
        }
      },
      keyup: function keyup (e) {
        if ((e.which || e.keyCode) === 13) {
          this.save();
        }
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var annotationButton = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('button',{staticClass:"btn px-s py-xs mr-s h6",on:{"click":_vm.popupAnnotationLabelOpen}},[_c('i',{staticClass:"icon-24 icon-24-plus mr-xs"}),_vm._v(" "+_vm._s(_vm.layerName)+" ")])},staticRenderFns: [],
    props: {
      layerId: {
        type: String,
        default: 'layerIdHash'
      },
      layerName: {
        type: String,
        default: ''
      },
      mediaId: {
        type: String,
        default: 'mediaIdHash'
      },
      annotations: {
        type: Array,
        default: function () { return []; }
      },
      fragmentType: {
        type: Object,
        default: function () { return ({}); }
      },
      timeTotal: {
        type: Number,
        default: 0
      },
      timeCurrent: {
        type: Number,
        default: 0
      }
    },

    data: function data () {
      return {
        popupAnnotationLabelConfig: {
          type: 'annotations',
          closeBtn: true,
          title: 'Add annotation',
          component: popupAnnotationLabel
        }
      }
    },

    methods: {
      popupAnnotationLabelOpen: function popupAnnotationLabelOpen () {
        var element = {
          id: null,
          layerId: this.layerId,
          mediaId: this.mediaId,
          fragment: this.fragmentTypeFormat(this.fragmentType),
          metadata: { label: '' }
        };
        return this.$store.commit('popup/open', {
          config: this.popupAnnotationLabelConfig,
          element: element
        })
      },

      fragmentTypeFormat: function fragmentTypeFormat (fragmentType) {
        if (!fragmentType.time) {
          fragmentType.time = {};
        }
        fragmentType.time.start = this.timeCurrent;
        fragmentType.time.end = this.timeCurrent + this.timeTotal / 10;
        return fragmentType
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var buttons = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('h2',[_vm._v("Annotations")]),_vm._v(" "),_vm._l((_vm.layers),function(layer){return (_vm.annotations[layer.id] && layer.permission === 3)?_c('annotation-button',{key:("annotation-button-" + (layer.id)),attrs:{"layer-id":layer.id,"layer-name":layer.name,"media-id":_vm.mediaId,"time-current":_vm.timeCurrent,"time-total":_vm.timeTotal,"fragment-type":layer.fragmentType}}):_vm._e()})],2)},staticRenderFns: [],
    components: {
      annotationButton: annotationButton
    },

    props: {
      uid: {
        type: String,
        default: 'default'
      }
    },

    computed: {
      mediaUid: function mediaUid () {
        return this.$store.state.annotations.lists[this.uid].mediaUid
      },
      layersUid: function layersUid () {
        return this.$store.state.annotations.lists[this.uid].layersUid
      },
      mediaProperties: function mediaProperties () {
        return this.$store.getters['medias/properties'](this.mediaUid)
      },
      timeCurrent: function timeCurrent () {
        return this.mediaProperties.timeCurrent || 0
      },
      timeTotal: function timeTotal () {
        return this.mediaProperties.timeTotal || 0
      },
      annotations: function annotations () {
        return this.$store.getters['annotations/lists'](this.uid)
      },
      mediaId: function mediaId () {
        return this.$store.state.medias.actives[this.mediaUid].id
      },
      layers: function layers () {
        return this.$store.getters['layers/actives'](this.layersUid)
      }
    },

    methods: {
      resize: function resize () { }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var annotationsBloc = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:"annotation",style:({ left: ((_vm.left) + "px"), right: ((_vm.right) + "px") })},[_c('div',{staticClass:"relative full-y",on:{"mousedown":function($event){_vm.set($event);},"dblclick":_vm.popupAnotationLabelOpen}},[_c('div',{staticClass:"absolute handle handle-left",on:{"mousedown":function($event){_vm.dragLeftOn($event);}}}),_vm._v(" "),_c('div',{staticClass:"absolute handle handle-right",on:{"mousedown":function($event){_vm.dragRightOn($event);}}})])])},staticRenderFns: [],
    props: {
      uid: {
        type: String,
        default: 'default'
      },
      layersUid: {
        type: String,
        default: 'default'
      },
      annotation: {
        type: Object,
        default: function () { return ({}); }
      },
      fragmentType: {
        type: Object,
        default: function () { return ({}); }
      },
      timeTotal: {
        type: Number,
        default: 0
      },
      containerWidth: {
        type: Number,
        default: 0
      },
      containerLeft: {
        type: Number,
        default: 0
      }
    },

    data: function data () {
      return {
        leftDragging: null,
        rightDragging: null,
        handleWidth: 32,
        popupAnnotationLabelConfig: {
          type: 'annotations',
          closeBtn: true,
          title: 'Add annotation',
          component: popupAnnotationLabel
        }
      }
    },

    computed: {
      time: function time () {
        return this.annotation.fragment.time
      },
      left: function left () {
        return this.leftDragging !== null
          ? this.leftDragging
          : this.time.start * this.containerWidth / this.timeTotal
      },
      right: function right () {
        return this.rightDragging !== null
          ? this.rightDragging
          : (this.timeTotal - this.time.end) *
          this.containerWidth /
          this.timeTotal
      }
    },

    methods: {
      timeUpdate: function timeUpdate (time, type) {
        var element = Object.assign({}, this.annotation);
        element.fragment.time[type] = time;
        return this.$store.dispatch('annotations/update', { element: element })
      },
      dragLeftOn: function dragLeftOn (e) {
        document.addEventListener('mousemove', this.dragLeft);
        document.addEventListener('mouseup', this.dragLeftOff);
      },
      dragLeftOff: function dragLeftOff (e) {
        document.removeEventListener('mousemove', this.dragLeft);
        document.removeEventListener('mouseup', this.dragLeftOff);
        var time = Math.round(
          this.$refs.annotation.offsetLeft * this.timeTotal / this.containerWidth
        );
        this.timeUpdate(time, 'start');
        this.leftDragging = null;
      },
      dragLeft: function dragLeft (e) {
        var c = e.clientX - this.containerLeft + this.handleWidth / 2;

        if (c < 0) {
          this.leftDragging = 0;
        } else if (c > this.containerWidth - this.right) {
          this.leftDragging = this.containerWidth - this.right;
        } else {
          this.leftDragging = c;
        }
      },
      dragRightOn: function dragRightOn (e) {
        document.addEventListener('mousemove', this.dragRight);
        document.addEventListener('mouseup', this.dragRightOff);
      },
      dragRightOff: function dragRightOff (e) {
        document.removeEventListener('mousemove', this.dragRight);
        document.removeEventListener('mouseup', this.dragRightOff);
        var time = Math.round(
          (this.$refs.annotation.offsetLeft + this.$refs.annotation.offsetWidth) *
          this.timeTotal /
          this.containerWidth
        );
        this.timeUpdate(time, 'end');
        this.rightDragging = null;
      },
      dragRight: function dragRight (e) {
        var c =
          this.containerWidth +
          this.containerLeft -
          e.clientX +
          this.handleWidth / 2;

        this.rightDragging = c > 0 ? c : 0;
      },
      set: function set (e) {
        this.$store.commit('annotations/set', {
          id: this.annotation.id,
          uid: this.uid
        });
      },
      popupAnotationLabelOpen: function popupAnotationLabelOpen () {
        var element = this.annotation;
        return this.$store.commit('popup/open', {
          config: this.popupAnnotationLabelConfig,
          element: element
        })
      },
      fragmentTypeFormat: function fragmentTypeFormat (fragmentType) {
        if (!fragmentType.time) {
          fragmentType.time = {};
        }
        fragmentType.time.start = this.timeCurrent;
        fragmentType.time.end = this.timeCurrent + 25000;
        return fragmentType
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var timelineAnnotations = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:"container"},_vm._l((_vm.annotations),function(annotation){return _c('annotations-bloc',{key:annotation.id,staticClass:"absolute annotation",class:{ active: annotation.id === _vm.activeId },attrs:{"annotation":annotation,"uid":_vm.uid,"layers-uid":_vm.layersUid,"layer-id":_vm.layerId,"time-total":_vm.timeTotal,"container-width":_vm.width,"container-left":_vm.left}})}))},staticRenderFns: [],
    components: {
      annotationsBloc: annotationsBloc
    },

    props: {
      uid: {
        type: String,
        default: 'default'
      },
      layersUid: {
        type: String,
        default: 'default'
      },
      layerId: {
        type: String,
        default: 'layerIdHash'
      },
      annotations: {
        type: Array,
        default: function () { return []; }
      },
      timeTotal: {
        type: Number,
        default: 0
      },
      width: {
        type: Number,
        default: 0
      },
      left: {
        type: Number,
        default: 0
      }
    },

    computed: {
      activeId: function activeId () {
        return this.$store.state.annotations.actives[this.uid]
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var timeline = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:"container"},[(_vm.layers)?_c('div',{staticClass:"relative overflow-hidden bg-bg",style:({ height: ((40 * _vm.layers.length) + "px") })},[_c('div',{staticClass:"absolute timeline-cursor"}),_vm._v(" "),_c('div',{staticClass:"absolute timeline-annotations",style:({ top: 0, bottom: 0, left: ((_vm.left) + "px"), width: ((_vm.width) + "px") })},_vm._l((_vm.layers),function(layer){return (_vm.annotations[layer.id])?_c('timeline-annotations',{key:("annotations-" + (layer.id)),staticClass:"relative annotations",attrs:{"uid":_vm.uid,"layers-uid":_vm.layersUid,"layer-id":layer.id,"annotations":_vm.annotations[layer.id],"time-total":_vm.timeTotal,"width":_vm.width,"left":_vm.left + _vm.containerLeft,"fragment-type":layer.fragmentType}}):_vm._e()}))]):_vm._e()])},staticRenderFns: [],
    components: {
      timelineAnnotations: timelineAnnotations
    },

    props: {
      uid: {
        type: String,
        default: 'default'
      }
    },

    data: function data () {
      return {
        width: 3000,
        containerWidth: 0,
        containerLeft: 0,
        fragmentType: {
          time: {
            start: 0,
            end: 0
          }
        },
        metadataType: {
          label: ""
        }
      }
    },

    computed: {
      mediaUid: function mediaUid () {
        return this.$store.state.annotations.lists[this.uid].mediaUid
      },
      layersUid: function layersUid () {
        return this.$store.state.annotations.lists[this.uid].layersUid
      },
      mediaProperties: function mediaProperties () {
        return this.$store.getters['medias/properties'](this.mediaUid)
      },
      timeCurrent: function timeCurrent () {
        return this.mediaProperties.timeCurrent || 0
      },
      timeTotal: function timeTotal () {
        return this.mediaProperties.timeTotal || 0
      },
      annotations: function annotations () {
        return this.$store.getters['annotations/filtered'](this.uid)
      },
      layers: function layers () {
        return this.$store.getters['layers/actives'](this.layersUid)
      },
      left: function left () {
        return (
          this.containerWidth / 2 - this.timeCurrent / this.timeTotal * this.width
        )
      }
    },

    created: function created () {
      this.$store.commit('annotations/filterRegister', {
        uid: this.uid,
        filter: this.filter
      });

      this.$store.commit('layers/typesRegister', {
        uid: this.layersUid,
        fragmentType: this.fragmentType,
        metadataType: this.metadataType
      });
    },

    mounted: function mounted () {
      window.addEventListener('resize', this.resize);
      this.containerWidth = this.$refs.container.offsetWidth;
      this.containerLeft = this.$refs.container.offsetLeft;
    },

    methods: {
      filter: function filter (a) {
        return a.fragment &&
          a.fragment.time &&
          !isNaN(a.fragment.time.start) &&
          !isNaN(a.fragment.time.end) &&
          a
      },
      resize: function resize () { }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var edit = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('h2',[_vm._v("Annotation "),_c('span',{staticClass:"h6 bold bg-neutral color-bg py-xxs px-xs rnd right mt-xxs"},[_vm._v("…"+_vm._s(_vm._f("stringEnd")(_vm.annotation ? _vm.annotation.id : '')))])]),_vm._v(" "),_c('div',[(_vm.layer.permission === 3)?_c('button',{staticClass:"btn-border p-s h6",on:{"click":_vm.popupEditOpen}},[_vm._v("Edit")]):_vm._e(),_vm._v(" "),(_vm.layer.permission === 3)?_c('button',{staticClass:"btn-border p-s h6",on:{"click":_vm.popupRemoveOpen}},[_vm._v("Remove")]):_vm._e()])])},staticRenderFns: [],
    props: {
      uid: {
        type: String,
        default: 'default'
      }
    },

    data: function data () {
      return {
        popupEditConfig: {
          type: 'annotations',
          closeBtn: true,
          title: 'Edit annotation',
          component: popupEdit
        },
        popupRemoveConfig: {
          type: 'annotations',
          closeBtn: true,
          title: 'Remove annotation',
          component: popupRemove
        },
        layerPermission: 3
      }
    },

    computed: {
      mediaUid: function mediaUid () {
        return this.$store.state.annotations.lists[this.uid].mediaUid
      },
      layersUid: function layersUid () {
        return this.$store.state.annotations.lists[this.uid].layersUid
      },
      annotation: function annotation () {
        return this.$store.getters['annotations/active'](this.uid)
      },
      layer: function layer () {
        return this.annotation ? this.$store.getters['layers/details'](this.layersUid, this.annotation.layerId) : {}
      }
    },

    methods: {
      popupEditOpen: function popupEditOpen () {
        return this.$store.commit('popup/open', { config: this.popupEditConfig, element: this.annotation })
      },
      popupRemoveOpen: function popupRemoveOpen () {
        return this.$store.commit('popup/open', { config: this.popupRemoveConfig, element: this.annotation })
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();


















  var annotationsBloc$1 = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.visible)?_c('div',{ref:"annotation",style:({ left: ((_vm.left) + "%"), top: ((_vm.top) + "%"), width:((_vm.width) + "%"), height:((_vm.height) + "%") })},[_c('div',{staticClass:"relative full-y",on:{"mousedown":function($event){_vm.set($event);}}},[_c('div',{staticClass:"absolute handle handle-topleft",on:{"mousedown":function($event){_vm.dragTopleftOn($event);}}}),_vm._v(" "),_c('div',{staticClass:"absolute handle handle-bottomright",on:{"mousedown":function($event){_vm.dragBottomrightOn($event);}}})])]):_vm._e()},staticRenderFns: [],
    props: {
      uid: {
        type: String,
        default: 'default'
      },
      layersUid: {
        type: String,
        default: 'default'
      },
      annotation: {
        type: Object,
        default: function () { return ({}); }
      },
      timeTotal: {
        type: Number,
        default: 0
      },
      timeCurrent: {
        type: Number,
        default: 0
      },
      containerWidth: {
        type: Number,
        default: 0
      }
    },

    data: function data () {
      return {
        leftDragging: null,
        topDragging: null,
        rightDragging: null,
        bottomDragging: null,
        handleWidth: 32
      }
    },

    computed: {
      timeStart: function timeStart () {
        return this.annotation.fragment.time.start
      },
      timeEnd: function timeEnd () {
        return this.annotation.fragment.time.end
      },
      positionIndex: function positionIndex () {
        var this$1 = this;

        return this.annotation.fragment.positions
          .slice()
          .reverse()
          .findIndex(function (pos) { return pos.time <= this$1.timeCurrent; })
      },
      visible: function visible () {
        return (
          this.positionIndex !== -1 &&
          this.timeStart <= this.timeCurrent &&
          this.timeEnd >= this.timeCurrent
        )
      },
      position: function position () {
        return this.annotation.fragment.positions[this.positionIndex]
      },
      left: function left () {
        if (this.visible) {
          return this.leftDragging !== null
            ? this.leftDragging
            : this.position.left
        }
      },
      top: function top () {
        if (this.visible) {
          return this.topDragging !== null ? this.topDragging : this.position.top
        }
      },
      width: function width () {
        if (this.visible) {
          return this.bottomDragging !== null
            ? this.bottomDragging
            : this.position.width
        }
      },
      height: function height () {
        if (this.visible) {
          return this.bottomDragging !== null
            ? this.bottomDragging
            : this.position.height
        }
      }
    },

    methods: {
      positionUpdate: function positionUpdate (positions) {
        var element = Object.assign({}, this.annotation);
        positions.forEach(
          function (position) { return (element.fragment.position[position.type] = position.value); }
        );
        return this.$store.dispatch('annotations/update', { element: element })
      },
      dragTopleftOn: function dragTopleftOn (e) {
        document.addEventListener('mousemove', this.dragTopleft);
        document.addEventListener('mouseup', this.dragTopleftOff);
      },
      dragTopleftOff: function dragTopleftOff (e) {
        document.removeEventListener('mousemove', this.dragTopleft);
        document.removeEventListener('mouseup', this.dragTopleftOff);
        var positions = [
          {
            type: 'top',
            value: this.$refs.annotation.offsetTop
          },
          {
            type: 'top',
            value: this.$refs.annotation.offsetLeft
          }
        ];
        this.positionUpdate(positions);
        this.topleftDragging = null;
      },
      dragTopleft: function dragTopleft (e) {
        var c = e.clientX - this.containerLeft + this.handleWidth / 2;

        if (c < 0) {
          this.topDragging = 0;
        } else if (c > this.containerWidth - this.right) {
          this.topDragging = this.containerWidth - this.right;
        } else {
          this.topDragging = c;
        }
      },
      dragBottomrightOn: function dragBottomrightOn (e) {
        document.addEventListener('mousemove', this.dragRight);
        document.addEventListener('mouseup', this.dragRightOff);
      },
      dragRightOff: function dragRightOff (e) {
        document.removeEventListener('mousemove', this.dragRight);
        document.removeEventListener('mouseup', this.dragRightOff);
        var time = Math.round(
          (this.$refs.annotation.offsetLeft + this.$refs.annotation.offsetWidth) *
          this.timeTotal /
          this.containerWidth
        );
        this.positionUpdate(time, 'end');
        this.bottomDragging = null;
      },
      dragRight: function dragRight (e) {
        var c =
          this.containerWidth +
          this.containerLeft -
          e.clientX +
          this.handleWidth / 2;

        this.bottomDragging = c > 0 ? c : 0;
      },
      set: function set (e) {
        this.$store.commit('annotations/set', {
          id: this.annotation.id,
          uid: this.uid
        });
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();
  var zoningAnnotations = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:"container"},_vm._l((_vm.annotations),function(annotation){return _c('annotations-bloc',{key:annotation.id,staticClass:"absolute annotation",style:({ zIndex: annotation.id === _vm.activeId ? 1 : 0}),attrs:{"annotation":annotation,"uid":_vm.uid,"layers-uid":_vm.layersUid,"time-total":_vm.timeTotal,"time-current":_vm.timeCurrent,"container-width":_vm.containerWidth,"container-height":_vm.containerHeight}})}))},staticRenderFns: [],
    components: {
      annotationsBloc: annotationsBloc$1
    },

    props: {
      uid: {
        type: String,
        default: 'default'
      },
      layersUid: {
        type: String,
        default: 'default'
      },
      annotations: {
        type: Array,
        default: function () { return []; }
      },
      timeTotal: {
        type: Number,
        default: 0
      },
      timeCurrent: {
        type: Number,
        default: 0
      }
    },

    data: function data () {
      return {
        containerWidth: 0,
        containerHeight: 0
      }
    },

    computed: {
      activeId: function activeId () {
        return this.$store.state.annotations.actives[this.uid]
      }
    },

    mounted: function mounted () {
      window.addEventListener('resize', this.resize);
      this.containerWidth = this.$refs.container.offsetWidth;
      this.containerHeight = this.$refs.container.offsetHeight;
    },

    methods: {
      resize: function resize () { }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var zoning = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:"container",staticClass:"relative full-y"},[_vm._l((_vm.layers),function(layer){return (_vm.annotations[layer.id])?_c('zoning-annotations',{key:("annotations-" + (layer.id)),staticClass:"absolute full",attrs:{"uid":_vm.uid,"layers-uid":_vm.layersUid,"layer-id":layer.id,"annotations":_vm.annotations[layer.id],"time-total":_vm.timeTotal,"time-current":_vm.timeCurrent}}):_vm._e()}),_vm._v(" "),_vm._t("default",null,{mediaUid:_vm.mediaUid})],2)},staticRenderFns: [],
    components: { zoningAnnotations: zoningAnnotations },

    props: {
      uid: {
        type: String,
        default: 'default'
      }
    },

    data: function data () {
      return {
        fragmentType: {
          positions: [
            {
              left: 0.25,
              width: 0.5,
              time: 0,
              top: 0.25,
              height: 0.5
            }
          ]
        }
      }
    },

    computed: {
      mediaUid: function mediaUid () {
        return this.$store.state.annotations.lists[this.uid].mediaUid
      },
      layersUid: function layersUid () {
        return this.$store.state.annotations.lists[this.uid].layersUid
      },
      mediaProperties: function mediaProperties () {
        return this.$store.state.medias.properties[this.mediaUid] || {}
      },
      timeCurrent: function timeCurrent () {
        return this.mediaProperties.timeCurrent || 0
      },
      timeTotal: function timeTotal () {
        return this.mediaProperties.timeTotal || 0
      },
      annotations: function annotations () {
        return this.$store.getters['annotations/filter'](this.uid, this.filter)
      },
      layers: function layers () {
        var active = this.$store.state.layers.actives[this.layersUid];
        return active ? this.$store.state.layers.lists[active.corpuUid] : []
      }
    },

    created: function created () {
      this.$store.commit('annotations/filterRegister', {
        uid: this.uid,
        filter: this.filter
      });

      this.$store.commit('layers/typesRegister', {
        uid: this.layersUid,
        fragmentType: this.fragmentType,
        metadataType: this.metadataType
      });
    },

    methods: {
      filter: function filter (a) {
        return a.fragment &&
          a.fragment.time &&
          !isNaN(a.fragment.time.start) &&
          !isNaN(a.fragment.time.end) &&
          a.fragment.positions &&
          a.fragment.positions instanceof Array &&
          a
      }
    }
  };

  exports.cmlApp = app;
  exports.cmlAdminUsers = users$1;
  exports.cmlAdminGroups = groups$1;
  exports.cmlCorpus = index$1;
  exports.cmlCorpusList = list;
  exports.cmlMedias = index$2;
  exports.cmlMediasList = list$1;
  exports.cmlMediasYoutube = youtube;
  exports.cmlMediasVideo = video;
  exports.cmlMediasController = controller;
  exports.cmlLayers = index$3;
  exports.cmlLayersList = list$2;
  exports.cmlLayersAdd = add$2;
  exports.cmlAnnotations = index$4;
  exports.cmlAnnotationsList = list$3;
  exports.cmlAnnotationsButtons = buttons;
  exports.cmlAnnotationsTimeline = timeline;
  exports.cmlAnnotationsEdit = edit;
  exports.cmlAnnotationsZoning = zoning;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
